import * as fs from 'fs';
import * as path from 'path';
import { ComponentProp } from '../types/index.js';

export interface DocsApiData {
  title: string;
  properties: Array<{
    name: string;
    tag: {
      cn: string;
      en: string;
      default: string;
      version: string;
    };
    required: boolean;
    type: string;
  }>;
  cn?: string;
  en?: string;
  sort?: string;
}

export class DocsParser {
  private docsPath: string;

  constructor(rootPath: string) {
    this.docsPath = path.join(rootPath, 'docs/api/shineout');
  }

  /**
   * ‰ªéÊñáÊ°£Êñá‰ª∂‰∏≠ÊèêÂèñÁªÑ‰ª∂ Props
   */
  async extractComponentProps(componentName: string): Promise<ComponentProp[]> {
    try {
      console.log(`üìñ ‰ªéÊñáÊ°£ÊèêÂèñ ${componentName} ÁªÑ‰ª∂ÁöÑ Props...`);
      
      // ÊûÑÂª∫ÊñáÊ°£Êñá‰ª∂Ë∑ØÂæÑÔºàkebab-caseÔºâ
      const fileName = this.toKebabCase(componentName) + '.ts';
      const filePath = path.join(this.docsPath, fileName);
      
      if (!fs.existsSync(filePath)) {
        console.warn(`‚ö†Ô∏è  ÊñáÊ°£Êñá‰ª∂‰∏çÂ≠òÂú®: ${filePath}`);
        return [];
      }
      
      // ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
      const fileContent = fs.readFileSync(filePath, 'utf-8');
      
      // ÊèêÂèñ JSON Êï∞ÊçÆ
      const jsonMatch = fileContent.match(/JSON\.parse\('(.+)'\)/);
      if (!jsonMatch) {
        console.warn(`‚ö†Ô∏è  Êó†Ê≥ï‰ªéÊñáÊ°£Êñá‰ª∂‰∏≠ÊèêÂèñ JSON Êï∞ÊçÆ: ${filePath}`);
        return [];
      }
      
      // Ëß£Êûê JSON
      const apiData: DocsApiData[] = JSON.parse(jsonMatch[1]);
      
      // Êü•Êâæ‰∏ªÁªÑ‰ª∂ÁöÑÊï∞ÊçÆÔºàÁ¨¨‰∏Ä‰∏™ÔºåÊàñËÄÖÊ†áÈ¢òÂåπÈÖçÁöÑÔºâ
      const mainComponent = apiData.find(item => 
        item.title === componentName || 
        item.title.split('.')[0] === componentName
      ) || apiData[0];
      
      if (!mainComponent) {
        console.warn(`‚ö†Ô∏è  ÊñáÊ°£‰∏≠Êú™ÊâæÂà∞ ${componentName} ÁöÑÊï∞ÊçÆ`);
        return [];
      }
      
      // ËΩ¨Êç¢‰∏∫ ComponentProp Ê†ºÂºè
      const props: ComponentProp[] = mainComponent.properties.map(prop => ({
        name: prop.name,
        type: this.cleanType(prop.type),
        required: prop.required,
        defaultValue: prop.tag.default || undefined,
        description: prop.tag.cn || prop.tag.en || '',
      }));
      
      console.log(`‚úÖ ÊàêÂäü‰ªéÊñáÊ°£ÊèêÂèñ ${componentName} ÁöÑ ${props.length} ‰∏™Â±ûÊÄß`);
      return props;
      
    } catch (error) {
      console.error(`‚ùå ‰ªéÊñáÊ°£ÊèêÂèñ ${componentName} Props Â§±Ë¥•:`, error);
      return [];
    }
  }
  
  /**
   * Ê∏ÖÁêÜÁ±ªÂûãÂ≠óÁ¨¶‰∏≤
   */
  private cleanType(type: string): string {
    // ÁßªÈô§Â§ö‰ΩôÁöÑÁ©∫Ê†ºÂíåËΩ¨‰πâÂ≠óÁ¨¶
    return type
      .replace(/\\\"/g, '"')
      .replace(/\s+/g, ' ')
      .trim();
  }
  
  /**
   * ËΩ¨Êç¢‰∏∫ kebab-case
   */
  private toKebabCase(str: string): string {
    return str
      .replace(/([a-z])([A-Z])/g, '$1-$2')
      .toLowerCase();
  }
  
  /**
   * ÂàóÂá∫ÊâÄÊúâÂèØÁî®ÁöÑÊñáÊ°£Êñá‰ª∂
   */
  listAvailableComponents(): string[] {
    try {
      const files = fs.readdirSync(this.docsPath);
      return files
        .filter(f => f.endsWith('.ts'))
        .map(f => f.replace('.ts', ''))
        .map(f => this.toPascalCase(f));
    } catch (error) {
      console.error('‚ùå Êó†Ê≥ïËØªÂèñÊñáÊ°£ÁõÆÂΩï:', error);
      return [];
    }
  }
  
  /**
   * ËΩ¨Êç¢‰∏∫ PascalCase
   */
  private toPascalCase(str: string): string {
    return str
      .split('-')
      .map(part => part.charAt(0).toUpperCase() + part.slice(1))
      .join('');
  }
}