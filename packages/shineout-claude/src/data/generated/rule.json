{
  "name": "Rule",
  "description": "Shineout Form 内部定义了一套数据校验机制，在 Form 内的组件上通过 rules 属性进行配置",
  "category": "form",
  "importPath": "import { Rule } from 'shineout'",
  "props": [
    {
      "name": "message",
      "type": "string",
      "required": false,
      "description": "校验失败时显示的错误提示信息"
    }
  ],
  "examples": [
    {
      "title": "必填校验",
      "description": "必填校验，验证字段是否已填写。支持三种使用方式：rule.required() 使用默认提示、rule.required('自定义提示') 传入自定义提示、对象形式 { required: true, message: '自定义提示' }",
      "scenario": "basic",
      "code": "/**\n * cn - 必填校验\n *    -- 必填校验，验证字段是否已填写。支持三种使用方式：rule.required() 使用默认提示、rule.required('自定义提示') 传入自定义提示、对象形式 { required: true, message: '自定义提示' }\n * en - Required validation\n *    -- Required validation, verifies if the field is filled. Supports three usage methods: rule.required() with default message, rule.required('custom message') with custom message, object form { required: true, message: 'custom message' }\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required()]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input name='age' rules={[rule.required('age required')]} />\n      </Form.Item>\n      <Form.Item label='address' required>\n        <Input name='address' rules={[{ required: true, message: 'address required' }]} />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
    },
    {
      "title": "最小值校验",
      "description": "最小值校验，会根据字段值的数据类型自动判断：如果值是数字类型则验证数值大小，如果值是字符串类型则验证字符串长度，如果值是数组类型则验证数组长度。支持 rule.min(value) 和对象形式 { min: value, message: '自定义提示' }",
      "scenario": "basic",
      "code": "/**\n * cn - 最小值校验\n *    -- 最小值校验，会根据字段值的数据类型自动判断：如果值是数字类型则验证数值大小，如果值是字符串类型则验证字符串长度，如果值是数组类型则验证数组长度。支持 rule.min(value) 和对象形式 { min: value, message: '自定义提示' }\n * en - Minimum value validation\n *    -- Minimum value validation, automatically determines based on field data type: validates numeric value for number type, string length for string type, array length for array type. Supports rule.min(value) and object form { min: value, message: 'custom message' }\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required(), rule.min(2)]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input.Number name='age' title='age' rules={[rule.required(), rule.min(18)]} />\n      </Form.Item>\n      <Form.Item label='address' required>\n        <Input.Number\n          name='address'\n          title='address'\n          rules={[rule.required(), { min: 3, message: 'address must be at least three characters' }]}\n        />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
    },
    {
      "title": "最大值校验",
      "description": "最大值校验，会根据字段值的数据类型自动判断：如果值是数字类型则验证数值大小，如果值是字符串类型则验证字符串长度，如果值是数组类型则验证数组长度。支持 rule.max(value) 和对象形式 { max: value, message: '自定义提示' }",
      "scenario": "basic",
      "code": "/**\n * cn - 最大值校验\n *    -- 最大值校验，会根据字段值的数据类型自动判断：如果值是数字类型则验证数值大小，如果值是字符串类型则验证字符串长度，如果值是数组类型则验证数组长度。支持 rule.max(value) 和对象形式 { max: value, message: '自定义提示' }\n * en - Maximum value validation\n *    -- Maximum value validation, automatically determines based on field data type: validates numeric value for number type, string length for string type, array length for array type. Supports rule.max(value) and object form { max: value, message: 'custom message' }\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required(), rule.max(5)]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input.Number name='age' title='age' rules={[rule.required(), rule.max(100)]} />\n      </Form.Item>\n      <Form.Item label='address' required>\n        <Input.Number\n          name='address'\n          title='address'\n          rules={[rule.required(), { max: 3, message: 'address must be at least three characters' }]}\n        />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
    },
    {
      "title": "范围校验",
      "description": "范围校验，同时设置最小值和最大值限制。会根据字段值的数据类型自动判断：如果值是数字类型则验证数值范围，如果值是字符串类型则验证字符串长度范围，如果值是数组类型则验证数组长度范围。使用 rule.range(min, max, message) 设置范围",
      "scenario": "basic",
      "code": "/**\n * cn - 范围校验\n *    -- 范围校验，同时设置最小值和最大值限制。会根据字段值的数据类型自动判断：如果值是数字类型则验证数值范围，如果值是字符串类型则验证字符串长度范围，如果值是数组类型则验证数组长度范围。使用 rule.range(min, max, message) 设置范围\n * en - Range validation\n *    -- Range validation, sets both minimum and maximum limits. Automatically determines based on field data type: validates numeric range for number type, string length range for string type, array length range for array type. Use rule.range(min, max, message) to set range\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required(), rule.range(1, 5)]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input.Number name='age' title='age' rules={[rule.required(), rule.range(18, 100)]} />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
    },
    {
      "title": "内置类型校验",
      "description": "内置类型校验，支持 email（邮箱格式）、integer（整数）、number（数字，包含小数）、url（网址）、json（JSON 格式）、hex（十六进制颜色）、rgb（RGB 颜色）、ipv4（IPv4 地址）等类型。使用 rule.type(message) 进行校验",
      "scenario": "advanced",
      "code": "/**\n * cn - 内置类型校验\n *    -- 内置类型校验，支持 email（邮箱格式）、integer（整数）、number（数字，包含小数）、url（网址）、json（JSON 格式）、hex（十六进制颜色）、rgb（RGB 颜色）、ipv4（IPv4 地址）等类型。使用 rule.type(message) 进行校验\n * en - Built-in type validation\n *    -- Built-in type validation, supports email, integer, number (including decimal), url, json, hex (hexadecimal color), rgb (RGB color), ipv4 (IPv4 address) and other types. Use rule.type(message) for validation\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='email' rules={[rule.required(), rule.email('email is invalid')]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input name='age' rules={[rule.required(), rule.integer('Please enter a valid age')]} />\n      </Form.Item>\n      <Form.Item label='price' required>\n        <Input name='price' rules={[rule.required(), rule.number('Please enter a valid price')]} />\n      </Form.Item>\n      <Form.Item label='url' required>\n        <Input name='url' rules={[rule.required(), rule.url('The url is not valid')]} />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
    },
    {
      "title": "正则表达式校验",
      "description": "正则表达式校验，支持传入 RegExp 对象或正则字符串。使用 rule.regExp(pattern, message) 验证输入值是否匹配指定模式。示例中验证电话号码格式，只允许数字、空格和特定符号",
      "scenario": "advanced",
      "code": "/**\n * cn - 正则表达式校验\n *    -- 正则表达式校验，支持传入 RegExp 对象或正则字符串。使用 rule.regExp(pattern, message) 验证输入值是否匹配指定模式。示例中验证电话号码格式，只允许数字、空格和特定符号\n * en - Regular expression validation\n *    -- Regular expression validation, supports RegExp object or regex string. Use rule.regExp(pattern, message) to verify if input value matches the specified pattern. The example validates phone number format, allowing only digits, spaces and specific symbols\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='tel' required>\n        <Input\n          name='tel'\n          rules={[rule.required(), rule.regExp('^[\\\\d\\\\s ().-]+$', 'Please enter a valid tel')]}\n        />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
    },
    {
      "title": "自定义校验",
      "description": "使用自定义函数进行校验。在 Rule() 中传入对象，键名为自定义规则名，值为校验函数。校验函数接收参数：value(当前值)、formData(表单数据)、callback(回调函数)、props(组件属性)。通过 callback(true) 表示通过，callback(new Error(message)) 表示验证失败",
      "scenario": "advanced",
      "code": "/**\n * cn - 自定义校验\n *    -- 使用自定义函数进行校验。在 Rule() 中传入对象，键名为自定义规则名，值为校验函数。校验函数接收参数：value(当前值)、formData(表单数据)、callback(回调函数)、props(组件属性)。通过 callback(true) 表示通过，callback(new Error(message)) 表示验证失败\n * en - Custom\n *    -- Custom validation using function. Pass an object to Rule(), with custom rule name as key and validation function as value. The validation function receives: value (current value), formData (form data), callback (callback function), props (component props). Use callback(true) for validation pass, callback(new Error(message)) for validation fail\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule({\n  tel: (value, _formData, callback, _props) => {\n    if (!value) return callback(new Error('Please enter your phone number'));\n    if (!/^[0-9\\s ().-]+$/.test(value)) return callback(new Error('Please enter a valid phone number'));\n    return callback(true);\n  },\n});\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='tel' required>\n        <Input name='tel' rules={[rule.tel]} />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
    }
  ],
  "subComponents": [],
  "version": "3.7.7"
}