{
  "name": "Form",
  "description": "用以收集、校验和提交数据，一般由输入框、单选框、复选框、选择器等控件组成",
  "category": "form",
  "importPath": "import { Form } from 'shineout'",
  "props": [
    {
      "name": "value",
      "type": "object",
      "required": false,
      "description": "表单数据"
    },
    {
      "name": "onChange",
      "type": "((value: T) => void)",
      "required": false,
      "description": "表单内组件值变化函数"
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "Form 内容"
    },
    {
      "name": "labelWidth",
      "type": "string | number",
      "required": false,
      "defaultValue": "140px",
      "description": "标签宽度，labelAlign 为 \\\"top\\\" 时无效。"
    },
    {
      "name": "labelAlign",
      "type": "\"left\" | \"right\" | \"top\"",
      "required": false,
      "description": "默认为空，跟随主题样式。"
    },
    {
      "name": "labelVerticalAlign",
      "type": "\"top\" | \"bottom\" | \"middle\"",
      "required": false,
      "defaultValue": "\\\"top\\\"",
      "description": "默认顶部对齐"
    },
    {
      "name": "keepErrorHeight",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "单行错误提示不撑开页面高度"
    },
    {
      "name": "keepErrorBelow",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否保持错误信息在提示信息下方"
    },
    {
      "name": "inline",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否水平布局"
    },
    {
      "name": "colon",
      "type": "ReactNode",
      "required": false,
      "defaultValue": "false",
      "description": "标签后是否追加显示一个冒号，优先级小于Form.Item的colon设置"
    },
    {
      "name": "name",
      "type": "string",
      "required": false,
      "description": "表单名称，会作为表单字段 id 的前缀，设置后可使用 formRef 的 scrollToField 方法"
    },
    {
      "name": "defaultValue",
      "type": "T",
      "required": false,
      "description": "默认值"
    },
    {
      "name": "reserveAble",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "设置为 true 时，表单内所有组件的reserveAble都为 true : 卸载后不自动删除数据"
    },
    {
      "name": "rules",
      "type": "RuleItem[]",
      "required": false,
      "description": "校验规则"
    },
    {
      "name": "onError",
      "type": "((error: Error) => void)",
      "required": false,
      "description": "rules 校验回调"
    },
    {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否禁用，为 true 时，表单内所有元素 disabled 都为 true"
    },
    {
      "name": "size",
      "type": "\"small\" | \"default\" | \"large\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "表单元素的尺寸"
    },
    {
      "name": "initValidate",
      "type": "boolean",
      "required": false,
      "description": "设置 value 后是否自动校验"
    },
    {
      "name": "onSubmit",
      "type": "((value: T) => void)",
      "required": false,
      "description": "表单提交函数。表单内部校验失败时不会触发。"
    },
    {
      "name": "onReset",
      "type": "(() => void)",
      "required": false,
      "description": "表单重置函数"
    },
    {
      "name": "scrollToError",
      "type": "number | boolean",
      "required": false,
      "defaultValue": "false",
      "description": "校验失败时是否滚动到第一个校验失败组件，该值为数字时，表示相对于顶部的偏移量"
    },
    {
      "name": "removeUndefined",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否删除值为 undefined 的字段"
    },
    {
      "name": "throttle",
      "type": "number",
      "required": false,
      "defaultValue": "1000",
      "description": "ms, 两次提交间隔时长（防止重复提交)"
    },
    {
      "name": "scrollParent",
      "type": "(() => HTMLElement | null)",
      "required": false,
      "description": "滚动的父元素，用于滚动到错误位置增加偏移量"
    },
    {
      "name": "formRef",
      "type": "((form: FormRef<V>) => void) | { current?: FormRef<V> ; }",
      "required": false,
      "description": "绑定 form 的引用, 可以调用某些 form 的方法"
    },
    {
      "name": "setForm",
      "type": "((form: FormRef<V>) => void)",
      "required": false,
      "description": "hooks用法下，设置 form 的引用"
    }
  ],
  "examples": [
    {
      "title": "基本用法",
      "description": "表单内置了类似双向绑定的机制，根据表单元素的 name 属性自动下发、收集数据",
      "scenario": "basic",
      "code": "/**\n * cn - 基本用法\n *    -- 表单内置了类似双向绑定的机制，根据表单元素的 name 属性自动下发、收集数据\n * en - Basic usage\n *    -- The form has built-in two-way binding mechanism, which automatically issues and collects data based on the name attribute of the form element\n */\n\nimport { Form, Input, Upload, Radio, Checkbox, DatePicker, Rate, Textarea } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nexport default () => {\n  return (\n    <div>\n      <Form\n        defaultValue={{ name: 'zhangsan', email: 'zhangsan@qq.com', score: 3 }}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='Name'>\n          <Input name={'name'} placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Password'>\n          <Input name={'password'} placeholder='please input password' clearable />\n        </Form.Item>\n        <Form.Item label='Email'>\n          <Input name={'email'} clearable placeholder='please input email' />\n        </Form.Item>\n        <Form.Item label='Gendar'>\n          <Radio.Group name='gendar' data={['male', 'female']} keygen />\n        </Form.Item>\n        <Form.Item label='Course'>\n          <Checkbox.Group name='course' data={['chinese', 'maths', 'english', 'physics']} keygen />\n        </Form.Item>\n        <Form.Item label='Enrollment date'>\n          <DatePicker name='date' placeholder={'please select date'} clearable showSelNow />\n        </Form.Item>\n        <Form.Item label='Score'>\n          <StarRate name='score'></StarRate>\n        </Form.Item>\n        <Form.Item label='upload avatar'>\n          <Upload.Image\n            action='/api/upload'\n            accept='image/*'\n            name='file'\n            htmlName='file'\n            recoverAble\n            leftHandler\n            removeConfirm='Are you sure to delete it ?'\n            limit={3}\n            onSuccess={(_res, filem, data) => {\n              return data;\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='Name'>\n          <Input placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Address'>\n          <Textarea name='address' placeholder='please enter' />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
    },
    {
      "title": "表单方法",
      "description": "可以通过 formRef 去获得表单的一些方法集, 包含校验, 清空校验, 提交等",
      "scenario": "basic",
      "code": "/**\n * cn - 表单方法\n *    -- 可以通过 formRef 去获得表单的一些方法集, 包含校验, 清空校验, 提交等\n * en - Form Methods\n *    -- You can use formRef to get some methods of the form, including validation, clear validation, submission, etc\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Form, Input, TYPE, Button, Select, Rate, DatePicker } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\ntype ValueType = {\n  name?: string;\n};\ntype FormRef = TYPE.Form.Ref<any>;\n\nconst App: React.FC = () => {\n  const form = useRef<FormRef>();\n  const [value, setValue] = useState<ValueType>({});\n\n  useEffect(() => {}, []);\n\n  return (\n    <Form\n      value={value}\n      formRef={(formRef) => {\n        form.current = formRef;\n      }}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px 12px', marginBottom: 12 }}>\n        <div><Button mode=\"outline\" onClick={() => form.current?.reset()}>Reset</Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.submit()}>Submit</Button></div>\n        <div><Button mode=\"outline\"\n          onClick={() =>\n            form.current?.validate()\n            .then((values) => {\n              console.log('validate success', values);\n              // TODO: 校验成功处理逻辑\n            })\n            .catch((errorInfo) => {\n              console.log('validate failed errorInfo: >>', errorInfo)\n              // TODO: 校验失败处理逻辑\n            })\n          }\n        >\n          Validate\n        </Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.clearValidate()}>Clear validate</Button></div>\n        <div><Button mode=\"outline\" onClick={() => console.log(form.current?.getValue())}>Get value</Button></div>\n        <div><Button mode=\"outline\" onClick={() => {\n          form.current?.set({\n            name: 'Tom',\n            password: '123456',\n            holiday: {\n              startDate: '2024-10-01',\n              endDate: '2024-10-07',\n            },\n            hobby: ['Football', 'Movie']\n          })\n        }}>Set value</Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.submit(false)}>Submit without validate</Button></div>\n      </div>\n\n      <Form.Item label='Name' required>\n        <Input name='name' rules={[{ required: true, message: 'name is required' }]} clearable />\n      </Form.Item>\n\n      <Form.Item label='Rate' required>\n        <StarRate name=\"rate\" allowHalf defaultValue={3.5} />\n      </Form.Item>\n\n      <Form.Item label='Password' required>\n        <Input.Password\n          clearable\n          name='password'\n          rules={[{ required: true, message: 'password is required' }]}\n        />\n      </Form.Item>\n\n      <Form.Item label='Holiday'>\n        <Form.FieldSet name='holiday'>\n          <DatePicker range name={['startDate', 'endDate']} />\n        </Form.FieldSet>\n      </Form.Item>\n      <Form.Item label='Hobby'>\n        <Select multiple keygen data={['Football', 'Movie', 'Barbecue']} name='hobby'></Select>\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "标签对齐方式",
      "description": "通过 labelWidth 和 labelAlign 改变标签宽度和水平对齐方式",
      "scenario": "basic",
      "code": "/**\n * cn - 标签对齐方式\n *    -- 通过 labelWidth 和 labelAlign 改变标签宽度和水平对齐方式\n * en -\n *    --\n */\n\nimport { useState } from 'react';\nimport { Form, Input, TYPE, Radio } from 'shineout';\n\ntype FormProps = TYPE.Form.Props<any>;\n\nconst alignArr: FormProps['labelAlign'][] = ['left', 'top', 'right'];\nexport default () => {\n  const [align, setAlign] = useState<FormProps['labelAlign']>('right');\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Radio.Group value={align} data={alignArr} keygen onChange={setAlign} />\n      </div>\n      <Form labelWidth={65} labelAlign={align} style={{ maxWidth: 500 }}>\n        <Form.Item label='Email'>\n          <Input name='email' clearable />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' clearable />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: align === 'top' ? -10 : 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
    },
    {
      "title": "*    -- 当 label 文字存在换行时，可使用 labelVerticalAlign 来控制垂直方向对齐方式",
      "description": "当 label 文字存在换行时，可使用 labelVerticalAlign 来控制垂直方向对齐方式",
      "scenario": "basic",
      "code": "/**\n * cn -\n *    -- 当 label 文字存在换行时，可使用 labelVerticalAlign 来控制垂直方向对齐方式\n * en -\n *    -- When the label text has a line break, you can use labelVerticalAlign to control the vertical alignment\n */\n\nimport { useState } from 'react';\nimport { Form, Input, TYPE, Radio, Textarea } from 'shineout';\n\ntype FormProps = TYPE.Form.Props<any>;\n\nconst alignArr: FormProps['labelVerticalAlign'][] = ['bottom', 'top', 'middle'];\n\nexport default () => {\n  const [align, setAlign] = useState<FormProps['labelVerticalAlign']>('top');\n  return (\n    <>\n      <div style={{ marginBottom: 24 }}>\n        <Radio.Group value={align} data={alignArr} keygen onChange={setAlign} />\n      </div>\n      <Form labelWidth={65} labelVerticalAlign={align} style={{ maxWidth: 500 }}>\n        <Form.Item label='Your Email'>\n          <Input name='email' clearable />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' clearable />\n        </Form.Item>\n        <Form.Item label='Your Address'>\n          <Textarea name='address' />\n        </Form.Item>\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n"
    },
    {
      "title": "标签冒号",
      "description": "设置 `Form` 的 `colon` 属性，开启所有label的冒号显示。",
      "scenario": "basic",
      "code": "/**\n * cn - 标签冒号\n *    -- 设置 `Form` 的 `colon` 属性，开启所有label的冒号显示。\n *    -- 也可单独设置 `Form.Item` 的 `colon` 属性，优先级高于 `Form` 的 `colon` 属性。\n *    -- `colon` 的格式也可以是自定义的ReactNode。\n * en - Label colon\n *    -- Set the colon property of Form to enable the colon display of all labels.\n *    -- You can also set the colon property of FormItem separately, which has higher priority than the colon property of Form.\n *    -- The format of `colon` can also be a custom ReactNode.\n */\n\nimport { useState } from 'react';\nimport { Form, Input, Switch, Textarea } from 'shineout';\n\nexport default () => {\n  const [colonVisible, setColonVisible] = useState(true);\n  return (\n    <Form labelWidth={120} style={{ maxWidth: 500 }} colon={colonVisible}>\n      <Form.Item label='Show Colon'>\n        <Switch value={colonVisible} onChange={setColonVisible} content={['ON', 'OFF']} />\n      </Form.Item>\n      <Form.Item label='Your Email'>\n        <Input name='email' clearable />\n      </Form.Item>\n      <Form.Item label='Password'>\n        <Input name='password' type='password' clearable />\n      </Form.Item>\n      <Form.Item label='Your Address'>\n        <Textarea name='address' />\n      </Form.Item>\n    </Form>\n  );\n};\n"
    },
    {
      "title": "水平布局",
      "description": "设置 inline 属性使 Form 变为水平布局",
      "scenario": "advanced",
      "code": "/**\n * cn - 水平布局\n *    -- 设置 inline 属性使 Form 变为水平布局\n * en - Inline\n *    -- Set the inline property to true to make the Form horizontal\n */\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <Form inline>\n    <Form.Item label='Email' labelWidth={65}>\n      <Input name='email' placeholder='Email' clearable />\n    </Form.Item>\n\n    <Form.Item label='Password' labelWidth={65}>\n      <Input name='password' placeholder='Password' type='password' clearable />\n    </Form.Item>\n\n    <Form.Submit>Submit</Form.Submit>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "提示信息",
      "description": "在 Form.Item 上设置提示文案时，提示文案始终显示在组件下方",
      "scenario": "advanced",
      "code": "/**\n * cn - 提示信息\n *    -- 在 Form.Item 上设置提示文案时，提示文案始终显示在组件下方\n * en - Tips\n *    -- Set the tip property on Form.Item, the prompt text is displayed below the component\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rules = Rule();\nconst App: React.FC = () => (\n  <Form style={{ maxWidth: 500 }}>\n    <Form.Item label='Email' tip='Email or nickname or phonenumber' required keepErrorBelow>\n      <Input name='email' clearable rules={[rules.required('Please input your email')]} />\n    </Form.Item>\n\n    <Form.Item\n      label='Password'\n      tip='Use at least one letter, one numeral, and seven characters.'\n      style={{ marginBottom: 0 }}\n      required\n      keepErrorBelow\n    >\n      <Input\n        name='password'\n        type='password'\n        clearable\n        rules={[rules.required('Please input your password')]}\n      />\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "*    -- `label` 为对象格式时，支持设置`label.tooltip`属性，显示提示图标和相应tip信息",
      "description": "`label` 为对象格式时，支持设置`label.tooltip`属性，显示提示图标和相应tip信息",
      "scenario": "advanced",
      "code": "/**\n * cn -\n *    -- `label` 为对象格式时，支持设置`label.tooltip`属性，显示提示图标和相应tip信息\n *    -- `label.tooltip` 的配置同 `Tooltip` 组件\n * en -\n *    -- Set the `tooltip` property of `label`, display the prompt icon and corresponding information\n *    -- `label.tooltip` configuration is the same as the `Tooltip` component\n */\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\nconst MyIcon = () => (\n  <svg viewBox='0 0 24 24' focusable=\"false\" fill=\"currentColor\" aria-hidden=\"true\">\n    <path\n      d='M12.002 1C18.0771 1 23.002 5.92487 23.002 12C23.002 18.0751 18.0771 23 12.002 23C5.92682 23 1.00195 18.0751 1.00195 12C1.00195 5.92487 5.92682 1 12.002 1ZM12.002 3C7.03139 3 3.00195 7.02943 3.00195 12C3.00195 16.9706 7.03139 21 12.002 21C16.9725 21 21.002 16.9706 21.002 12C21.002 7.02943 16.9725 3 12.002 3ZM12.002 9C12.5542 9 13.002 9.44771 13.002 10V18C13.002 18.5523 12.5542 19 12.002 19C11.4497 19 11.002 18.5523 11.002 18V10C11.002 9.44771 11.4497 9 12.002 9ZM12.002 6C12.5542 6 13.002 6.44772 13.002 7C13.002 7.55228 12.5542 8 12.002 8C11.4497 8 11.002 7.55228 11.002 7C11.002 6.44772 11.4497 6 12.002 6Z'\n    />\n  </svg>\n);\n\nconst App: React.FC = () => (\n  <Form style={{ maxWidth: 500 }}>\n    <Form.Item\n      required\n      label={{\n        content: 'Email',\n        tooltip: \"Email or nickname or phonenumber\",\n      }}\n    >\n      <Input name='email' clearable />\n    </Form.Item>\n    <Form.Item\n      required\n      label={{\n        content: 'Password',\n        tooltip: {\n          tip: \"Use at least one letter, one numeral, and seven characters.\",\n          type: 'warning',\n          icon: <MyIcon />,\n        },\n      }}\n    >\n      <Input name='password' type='password' clearable />\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "基础校验",
      "description": "通过 Rule 对象，可以使用内置的规则。规则详见 Rule",
      "scenario": "validation",
      "code": "/**\n * cn - 基础校验\n *    -- 通过 Rule 对象，可以使用内置的规则。规则详见 Rule\n * en - validate\n *    -- Use the built-in rules through the Rule object. See Rule for details\n */\n\nimport React, { useState, useCallback } from 'react';\nimport { Form, Input, Checkbox, Rule, Button, TYPE, DatePicker, Select } from 'shineout';\n\ninterface Value {\n  age?: string;\n  tel?: string;\n  name?: string;\n  IPv4?: string;\n  email?: string;\n  password?: string;\n  colors?: string[];\n}\ntype FormProps = TYPE.Form.Props<Value>;\ntype FormValue = FormProps['value'];\ntype FormRef = TYPE.Form.Ref<any>;\ntype RuleFunc = TYPE.Rule.ValidFunc;\n\nconst password = {\n  func: (value: string, _formData: any, _cb: any, props: { message: string; title: string }) =>\n    new Promise((resolve, reject) => {\n      console.log('password', props);\n      if (!/\\d+/.test(value) || !/[a-z]+/i.test(value)) {\n        reject(new Error(props.message.replace('{title}', props.title)));\n      } else {\n        resolve(true);\n      }\n    }),\n};\n\nconst isExist: RuleFunc = (value, _, callback) => {\n  if (value.indexOf('so') >= 0) callback(new Error(`\"${value}\" is existed.`));\n  else callback(true);\n};\n\nconst rules = Rule(\n  // validate function package\n  {\n    password,\n    isExist,\n  },\n  // language package\n  {\n    password: {\n      message: '{title} at least has one numeral and one letter',\n    },\n  },\n);\n\nconst App: React.FC = () => {\n  const [ref, setRef] = useState<FormRef>();\n  const [value, setValue] = useState<FormValue>(undefined);\n\n  const validFields = useCallback(() => {\n    if (ref && ref.validateFields) {\n      ref.validateFields(['email', 'name']);\n    }\n  }, [ref]);\n\n  console.log('form value: >>', value)\n  return (\n    <Form\n      value={value}\n      scrollToError={200}\n      scrollParent={() => document.getElementById('layout')}\n      onChange={setValue}\n      formRef={(f) => setRef(f)}\n      style={{ maxWidth: 500 }}\n      onSubmit={(d) => console.log(d)}\n    >\n      <Form.Item required label='Email'>\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required, rules.isExist]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20), rules.password]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Age' tip='between 18 and 60'>\n        <Input\n          name='age'\n          title='Age'\n          style={{ width: 100 }}\n          type='integer'\n          clearable\n          rules={[rules.required, rules.integer, rules.range(18, 60)]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Birthday'>\n        <DatePicker\n          name='birthday'\n          range\n          rules={[rules.required]}\n          clearable\n          clearToUndefined\n        />\n      </Form.Item>\n\n      <Form.Item required label='Hobby'>\n        <Select\n          keygen\n          multiple\n          clearable\n          name='hobby'\n          rules={[rules.required]}\n          data={['football', 'basketball', 'tennis', 'swimming', 'running']}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Tel'>\n        <Input\n          name='tel'\n          title='Tel'\n          rules={[rules.required, rules.regExp('^[\\\\d\\\\s ().-]+$')]}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item required label='IPv4'>\n        <Input name='IPv4' title='IP' rules={[rules.required, rules.ipv4]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Favorite Colors' tip='select your favorite colors'>\n        <Checkbox.Group\n          name='colors'\n          keygen={(d) => d}\n          data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']}\n          defaultValue={[]}\n          renderItem={(d) => <div style={{ width: 40 }}>{d}</div>}\n          style={{\n            display: 'flex',\n            gap: 12,\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n          }}\n          rules={[rules.required('At least select one favorite color'), rules.min(2), rules.max(3)]}\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button>Sumbit</Form.Button>\n        <Form.Reset>Reset</Form.Reset>\n        <Button onClick={validFields} mode=\"outline\">Validate Some Field</Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "联动校验",
      "description": "使用 `bind` 属性进行联动校验",
      "scenario": "validation",
      "code": "/**\n * cn - 联动校验\n *    -- 使用 `bind` 属性进行联动校验\n * en - Bind validate\n *    -- Use the `bind` property for bind validate\n */\nimport { Form, Input } from 'shineout';\nimport React from 'react';\n\nexport default () => {\n  const [v, setV] = React.useState({});\n  return (\n    <div>\n      <Form\n        value={v}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          setV(v);\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='password'>\n          <Input.Password\n            bind={['repeat']}\n            rules={[\n              (value, _, callback, _prop) => {\n                if (!value) {\n                  callback(new Error('password is required'));\n                }\n                if (value && value.length > 10) {\n                  callback(new Error('password length must less than 10'));\n                }\n                callback(true);\n              },\n            ]}\n            name={'password'}\n            clearable\n            placeholder='please input password'\n          />\n        </Form.Item>\n        <Form.Item label='repeat'>\n          <Input.Password\n            name={'repeat'}\n            rules={[\n              (value, formValue, callback, _prop) => {\n                if (!value) {\n                  callback(new Error('repeat is required'));\n                }\n                if (value && value !== formValue.password) {\n                  callback(new Error('Two inputs are inconsistent'));\n                }\n                callback(true);\n              },\n            ]}\n            clearable\n            placeholder='please input password again'\n          />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
    },
    {
      "title": "服务端校验",
      "description": "通过给 Form 设置 `error`，实现后端校验数据展示",
      "scenario": "validation",
      "code": "/**\n * cn - 服务端校验\n *    -- 通过给 Form 设置 `error`，实现后端校验数据展示\n *    -- 在表单值被改变后，对应后端校验数据会被清空\n *    -- 前端校验优先级大于后端校验\n * en - Back-end validation\n *    -- By setting an `error` on the Form, the back-end validation data is presented. After the form value is changed, the corresponding back-end validation data is cleared\n *    -- front-end validation priority is greater than back-end validation\n */\nimport React, { useState } from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rules = Rule();\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<{ [key: string]: string }>({});\n\n  const handleSubmit = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setError({ email: 'The email has been registered' });\n    }, 1000);\n  };\n\n  return (\n    <Form disabled={loading} error={error} style={{ maxWidth: 500 }} onSubmit={handleSubmit}>\n      <Form.Item required label='Email'>\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20)]}\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button loading={loading}>Sumbit</Form.Button>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "校验样式",
      "description": "使用 `keepErrorHeight` 使得单行错误提示不会撑开页面高度",
      "scenario": "validation",
      "code": "/**\n * cn - 校验样式\n *    -- 使用 `keepErrorHeight` 使得单行错误提示不会撑开页面高度\n * en - validate style\n *    -- Use `keepErrorHeight` so that a single-line error prompt will not stretch the page height\n */\n\nimport React, { useState } from 'react';\nimport { Form, Input, Checkbox, Rule, TYPE } from 'shineout';\n\ninterface Value {\n  age?: string;\n  tel?: string;\n  name?: string;\n  IPv4?: string;\n  email?: string;\n  password?: string;\n  colors?: string[];\n}\ntype FormProps = TYPE.Form.Props<Value>;\ntype FormValue = FormProps['value'];\ntype RuleFunc = TYPE.Rule.ValidFunc;\n\nconst password = {\n  func: (value: string, _formData: any, _cb: any, props: { message: string; title: string }) =>\n    new Promise((resolve, reject) => {\n      console.log('password', props);\n      if (!/\\d+/.test(value) || !/[a-z]+/i.test(value)) {\n        reject(new Error(props.message.replace('{title}', props.title)));\n      } else {\n        resolve(true);\n      }\n    }),\n};\n\nconst isExist: RuleFunc = (value, _, callback) => {\n  if (value.indexOf('so') >= 0) callback(new Error(`\"${value}\" is existed.`));\n  else callback(true);\n};\n\nconst rules = Rule(\n  // validate function package\n  {\n    password,\n    isExist,\n  },\n  // language package\n  {\n    password: {\n      message: '{title} at least has one numeral and one letter',\n    },\n  },\n);\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<FormValue>(undefined);\n\n  return (\n    <Form\n      value={value}\n      scrollParent={() => document.getElementById('layout')}\n      onChange={setValue}\n      style={{ maxWidth: 500 }}\n      onSubmit={(d) => console.log(d)}\n      keepErrorHeight\n    >\n      <Form.Item required label='Email' tip=\"88888\">\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required, rules.isExist]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20), rules.password]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Age' tip='between 18 and 60'>\n        <Input\n          name='age'\n          title='Age'\n          style={{ width: 100 }}\n          type='integer'\n          clearable\n          rules={[rules.required, rules.integer, rules.range(18, 60)]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Tel'>\n        <Input\n          name='tel'\n          title='Tel'\n          rules={[rules.required, rules.regExp('^[\\\\d\\\\s ().-]+$')]}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item required label='IPv4'>\n        <Input name='IPv4' title='IP' rules={[rules.required, rules.ipv4]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Favorite Colors' tip='select your favorite colors'>\n        <Checkbox.Group\n          name='colors'\n          keygen={(d) => d}\n          data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']}\n          defaultValue={[]}\n          renderItem={(d) => <div style={{ width: 40 }}>{d}</div>}\n          rules={[rules.required('At least select one favorite color'), rules.min(2), rules.max(3)]}\n          style={{\n            display: 'flex',\n            gap: 12,\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n          }}\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button>Sumbit</Form.Button>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "滚动到字段",
      "description": "设置 `Form` 的 `name` 属性后，可以通过 `formRef` 的 `scrollToField` 方法滚动到指定字段",
      "scenario": "validation",
      "code": "/**\n * cn - 滚动到字段\n *    -- 设置 `Form` 的 `name` 属性后，可以通过 `formRef` 的 `scrollToField` 方法滚动到指定字段\n *    -- `formRef` 的 `validateFieldsWithValue` 方法可以获取所有字段的校验信息\n * en - Form Methods\n *    -- Set the `name` property of `Form` to use the `scrollToField` method of `formRef` to scroll to the specified field\n *    -- The `validateFieldsWithValue` method of `formRef` can get the validation information of all fields\n */\nimport React, { useState } from 'react';\nimport { Form, Input, Button, Tabs, Grid, Select, Message } from 'shineout';\n\ntype ChildArrayType = {\n  brandName: string;\n  configs: {\n    bussName: string;\n    mockId: string;\n    slotId: string;\n  }[];\n  childConfig: {\n    live: string;\n    brand: string;\n    partner: string;\n  };\n};\n\ntype ValueType = {\n  public: {\n    config1: {\n      field1: string;\n      field2: string;\n      field3: string;\n      field4: string;\n    };\n    config2: {\n      field1: string;\n      field2: string;\n      field3: string;\n      field4: string;\n    };\n  };\n  child: ChildArrayType[];\n};\n\nconst panelStyle = {\n  padding: 12,\n  height: 200,\n  overflow: 'auto',\n  border: '1px solid #f0f0f0',\n  borderTop: 'none',\n};\n\nconst defaultFormValue = {\n  public: {\n    config1: {\n      field1: '1',\n      field2: '2',\n      field3: '3',\n      field4: '4',\n    },\n    config2: {\n      field1: '5',\n      field2: '6',\n      field3: '7',\n      field4: '8',\n    },\n  },\n  child: [\n    {\n      brandName: 'github',\n      configs: [\n        { bussName: '1', mockId: '1', slotId: '1' },\n        { bussName: '2', mockId: '2', slotId: '2' },\n        { bussName: '3', mockId: '3', slotId: '3' },\n      ],\n      childConfig: {\n        live: '1',\n        brand: '1',\n        partner: '1',\n      },\n    },\n    {\n      brandName: 'gitlab',\n      configs: [\n        { bussName: '4', mockId: '4', slotId: '4' },\n        { bussName: '5', mockId: '5', slotId: '5' },\n        { bussName: '6', mockId: '6', slotId: '6' },\n      ],\n      childConfig: {\n        live: '2',\n        brand: '2',\n        partner: '',\n      },\n    },\n  ],\n};\n\nconst App: React.FC = () => {\n  const [activeParentTab, setActiveParentTab] = useState('public-panel');\n  const [activeChildTab, setActiveChildTab] = useState('child-panel-0');\n\n  const [formValue, setFormValue] = useState<ValueType>(defaultFormValue);\n  const [form, setForm] = Form.useForm<ValueType>();\n\n  const [field1, setField1] = useState<string | undefined>();\n  const [field2, setField2] = useState<string | undefined>();\n\n  const myCustomScrollToField = (fieldName: string) => {\n      // 示例这里根据字段名判断模拟交互，开发者以实际情况处理\n      if (fieldName.startsWith('public')) {\n        setActiveParentTab('public-panel');\n      } else {\n        // 切换至child-panel\n        setActiveParentTab('child-panel');\n\n        const index = fieldName.match(/\\d+/)?.[0];\n        // 切换至对应的child-panel-index\n        setActiveChildTab(`child-panel-${index}`);\n      }\n\n      setTimeout(() => {\n        form.scrollToField(fieldName);\n      });\n  };\n\n  const handleMySubmit = () => {\n    form\n      .validateFieldsWithValue()\n      .then((v) => {\n        Message.success('submit success');\n\n        console.log('submit success:>>', JSON.stringify(v, null, 2));\n        form.submit();\n      })\n      .catch((errorInfo) => {\n        Message.error('submit failed');\n\n        console.log('submit failed:>>', errorInfo);\n        if (errorInfo.errorFields.length > 0) {\n          const firstErrorFieldName = errorInfo.errorFields[0].name as string;\n          console.log('firstErrorFieldName: >>', firstErrorFieldName);\n\n          // 滚动到错误字段\n          myCustomScrollToField(firstErrorFieldName);\n        }\n      });\n  };\n\n  return (\n    <Form<ValueType>\n      value={formValue}\n      setForm={setForm}\n      onChange={setFormValue}\n      onSubmit={() => console.log('submit:>>', JSON.stringify(formValue, null, 2))}\n      labelWidth={200}\n      name='my-form'\n      reserveAble\n      scrollToError\n    >\n      <Tabs\n        active={activeParentTab}\n        onChange={(tab) => setActiveParentTab(tab as string)}\n        lazy={false}\n      >\n        <Tabs.Panel id='public-panel' tab='Public Config' style={panelStyle}>\n          <Form.FieldSet name='public'>\n            <Form.FieldSet name='config1'>\n              <Form.Item label='public.config1.field1' required>\n                <Input\n                  name='field1'\n                  rules={[{ required: true, message: 'public.config1.field1 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config1.field2' required>\n                <Input\n                  name='field2'\n                  rules={[{ required: true, message: 'public.config1.field2 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config1.field3' required>\n                <Input\n                  name='field3'\n                  rules={[{ required: true, message: 'public.config1.field3 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config1.field4' required>\n                <Input\n                  name='field4'\n                  rules={[{ required: true, message: 'public.config1.field4 is required' }]}\n                />\n              </Form.Item>\n            </Form.FieldSet>\n            <Form.FieldSet name='config2'>\n              <Form.Item label='public.config2.field1' required>\n                <Input\n                  name='field1'\n                  rules={[{ required: true, message: 'public.config2.field1 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config2.field2' required>\n                <Input\n                  name='field2'\n                  rules={[{ required: true, message: 'public.config2.field2 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config2.field3' required>\n                <Input\n                  name='field3'\n                  rules={[{ required: true, message: 'public.config2.field3 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config2.field4' required>\n                <Input\n                  name='field4'\n                  rules={[{ required: true, message: 'public.config2.field4 is required' }]}\n                />\n              </Form.Item>\n            </Form.FieldSet>\n            <Form.FieldSet name='config3' defaultValue={['1', '2']}>\n              {({ value, onChange, index }) => (\n                <Form.Item label={`public.config3[${index}]`} required>\n                  <Input value={value} onChange={(v) => onChange(v as string)} rules={[{ required: true, message: `public.config3[${index}] is required` }]} />\n                </Form.Item>\n              )}\n            </Form.FieldSet>\n            <Form.Item label='public.config4' required>\n              <Form.Field name='config4' defaultValue={'4'} rules={[{ required: true, message: 'public.config4 is required' }]}>\n                <Input />\n              </Form.Field>\n            </Form.Item>\n          </Form.FieldSet>\n        </Tabs.Panel>\n        <Tabs.Panel id='child-panel' tab='Child Config' style={panelStyle}>\n          <Tabs\n            active={activeChildTab}\n            onChange={(tab) => setActiveChildTab(tab as string)}\n            position='left-top'\n            shape='card'\n            lazy={false}\n            allowNonPanel\n          >\n            <Form.FieldSet name='child'>\n              {({ index }) => {\n                return (\n                  <Tabs.Panel\n                    id={`child-panel-${index}`}\n                    tab={`child-panel-${index}`}\n                    style={{ padding: 12 }}\n                  >\n                    <Form.Item label={`child[${index}].brandName`} required>\n                      <Input\n                        name={'brandName'}\n                        rules={[{ required: true, message: 'brandName is required' }]}\n                      />\n                    </Form.Item>\n                    <Form.FieldSet name='configs'>\n                      {({index: nestIndex}) => (\n                        <Grid>\n                          <Grid width={1 / 3}>\n                            <Form.Item label={`child[${index}].configs[${nestIndex}].bussName`} required>\n                              <Input\n                                name={'bussName'}\n                                rules={[{ required: true, message: 'bussName is required' }]}\n                              />\n                            </Form.Item>\n                          </Grid>\n                          <Grid width={1 / 3}>\n                            <Form.Item label={`child[${index}].configs[${nestIndex}].mockId`} required>\n                              <Input\n                                name={'mockId'}\n                                rules={[{ required: true, message: 'mockId is required' }]}\n                              />\n                            </Form.Item>\n                          </Grid>\n                          <Grid width={1 / 3}>\n                            <Form.Item label={`child[${index}].configs[${nestIndex}].slotId`} required>\n                              <Input\n                                name={'slotId'}\n                                rules={[{ required: true, message: 'slotId is required' }]}\n                              />\n                            </Form.Item>\n                          </Grid>\n                        </Grid>\n                      )}\n                    </Form.FieldSet>\n                    <Form.FieldSet name='childConfig'>\n                      <Form.Item label={`child[${index}].childConfig.live`} required>\n                        <Input\n                          name={'live'}\n                          rules={[{ required: true, message: 'live is required' }]}\n                        />\n                      </Form.Item>\n                      <Form.Item label={`child[${index}].childConfig.brand`} required>\n                        <Select\n                          keygen\n                          name='brand'\n                          data={[1, 2, 3]}\n                          rules={[{ required: true, message: 'brand is required' }]}\n                        />\n                      </Form.Item>\n                      <Form.Item label={`child[${index}].childConfig.partner`} required>\n                        <Input\n                          name={'partner'}\n                          rules={[{ required: true, message: 'partner is required' }]}\n                        />\n                      </Form.Item>\n                    </Form.FieldSet>\n                  </Tabs.Panel>\n                );\n              }}\n            </Form.FieldSet>\n          </Tabs>\n        </Tabs.Panel>\n      </Tabs>\n\n      <Grid style={{ marginTop: 12 }}>\n        <Grid width={2 / 3} style={{ display: 'inline-flex', gap: 12 }}>\n          <div>\n            <p style={{ marginBottom: 8 }}>方法1: form.validateFieldsWithValue</p>\n            <Input.Group style={{ overflow: 'hidden' }}>\n              <Input placeholder='Field Name' value={field1} onChange={setField1} />\n              <Button\n                type=\"primary\"\n                style={{ borderRadius: 0 }}\n                onClick={() => {\n                  form\n                    .validateFieldsWithValue(field1)\n                    .then((values) => {\n                      Message.success(`${field1} validate success`);\n                      console.log('validate success values: >>', values);\n                    })\n                    .catch((errorInfo) => {\n                      Message.error('validate failed');\n                      console.log('validate failed errorInfo: >>', errorInfo);\n                    });\n                }}\n              >\n                Validate\n              </Button>\n            </Input.Group>\n          </div>\n\n          <div>\n            <p style={{ marginBottom: 8 }}>方法2: form.scrollToField</p>\n            <Input.Group style={{ overflow: 'hidden' }}>\n              <Input placeholder='Field Name' value={field2} onChange={setField2} />\n              <Button\n                type=\"primary\"\n                style={{ borderRadius: 0 }}\n                onClick={() => {\n                  if (field2) {\n                    myCustomScrollToField(field2);\n                  }\n                }}\n              >\n                Scroll\n              </Button>\n            </Input.Group>\n          </div>\n        </Grid>\n\n        <Grid width={1 / 3} style={{ textAlign: 'right' }}>\n          <p style={{ marginBottom: 8 }}>&nbsp;</p>\n          <Form.Reset>Reset</Form.Reset>\n          <Button type='primary' onClick={handleMySubmit}>\n            My Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "禁用",
      "description": "使用 disabled 属性使表单内支持 disabled 属性的组件禁用，通常用在表单数据加载或提交时",
      "scenario": "advanced",
      "code": "/**\n * cn - 禁用\n *    -- 使用 disabled 属性使表单内支持 disabled 属性的组件禁用，通常用在表单数据加载或提交时\n * en - Disabled\n *    -- Use the disabled property to make the Form support to disable component\n */\nimport React from 'react';\nimport { Form, Input, Textarea } from 'shineout';\n\nconst App: React.FC = () => (\n  <Form disabled>\n    <Form.Item label='Email'>\n      <Input name='email' clearable />\n    </Form.Item>\n    <Form.Item label='Email2'>\n      <Input clearable />\n    </Form.Item>\n\n    <Form.Item label='Password'>\n      <Input name='password' type='password' clearable />\n    </Form.Item>\n\n    <Form.Item label='Name'>\n      <Input.Group style={{ width: 300 }} disabled>\n        <Input name='firstName' placeholder='First Name' clearable />\n        -\n        <Input name='lastName' placeholder='Last Name' clearable />\n      </Input.Group>\n    </Form.Item>\n\n    <Form.Item label='Age'>\n      <Input.Number\n        style={{ width: 100 }}\n        name='age'\n        type='number'\n        digits={0}\n        defaultValue='0'\n        clearable\n      />\n    </Form.Item>\n    <Form.Item label='address'>\n      <Textarea rows={2} name='address' defaultValue='xxx' />\n    </Form.Item>\n    <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n      <Form.Submit loading>Submit</Form.Submit>\n      <Form.Reset>Reset</Form.Reset>\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "自定义表单组件",
      "description": "非shineout组件也支持放在 Form.Field 中使用，只要组件接收 value 和 onChange 属性即可",
      "scenario": "advanced",
      "code": "/**\n * cn - 自定义表单组件\n *    -- 非shineout组件也支持放在 Form.Field 中使用，只要组件接收 value 和 onChange 属性即可\n *    -- `Form.Field`的children 为 ReactElement时，必须支持 value 和 onChange 属性\n *    -- `Form.Field`的children 为 Function 时，返回一个或一组 ReactElement，在函数内部自行处理 value 和 onChange\n * en - Field\n *    -- Components that support value property and onChange property can be put in a Form.Field\n *    -- When the children property is a ReactElement, the value and onChange property must be provided\n *    -- When the children property is a function, return one or one group of ReactElement\n */\nimport React from 'react';\nimport { Form, Rule } from 'shineout';\n\nfunction Input(props: any) {\n  const { value = '', status, onChange } = props;\n  const style = { border: `solid 1px ${status === 'error' ? 'red' : '#ccc'}`, outline: 'none' };\n  return (\n    <input\n      {...props}\n      style={style}\n      value={value}\n      onChange={(e) => {\n        onChange(e.target.value);\n      }}\n    />\n  );\n}\nconst rule = Rule();\nconst App: React.FC = () => (\n  <Form style={{ maxWidth: 500 }} onSubmit={(d) => console.log(d)}>\n    <Form.Item required label='Email'>\n      <Form.Field\n        name='email'\n        defaultValue='test@email.com'\n        rules={[rule.required('不能为空'), rule.email('格式不正确')]}\n      >\n        {({ value, onChange, status }) => (\n          <Input value={value || ''} status={status} onChange={onChange} type='text' />\n        )}\n      </Form.Field>\n    </Form.Item>\n\n    <Form.Item label='Password' tip='Use at least one letter, one numeral, and seven characters.'>\n      <Form.Field\n        name='password'\n        rules={[\n          rule.required,\n          rule.min(7, '不能小于7个字符'),\n          rule.regExp(/^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$/, '格式不正确'),\n        ]}\n      >\n        <Input type='password' />\n      </Form.Field>\n    </Form.Item>\n\n    <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n      <Form.Submit>Submit</Form.Submit>\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "FieldSet (Object)",
      "description": "Form.FieldSet 可以处理对象类型的字段",
      "scenario": "advanced",
      "code": "/**\n * cn - FieldSet (Object)\n *    -- Form.FieldSet 可以处理对象类型的字段\n * en - FieldSet (Object)\n *    -- Form.FieldSet handles fields of object type\n */\nimport React, { useState } from 'react';\nimport { Form, Input } from 'shineout';\n\ninterface Value {\n  account?: {\n    name?: {\n      firstName: string;\n      lastName: string;\n    };\n    age?: number;\n  };\n}\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({\n    account: {\n      name: {\n        firstName: 'James',\n        lastName: 'Potter',\n      },\n      age: 20,\n    },\n  });\n\n  const handleChange = (v: Value) => {\n    setValue(v);\n  };\n\n  return (\n    <Form\n      value={value}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <Form.FieldSet name='account'>\n        <Form.Item label='Name'>\n          <Form.FieldSet name='name'>\n            <Input.Group style={{ width: 300 }}>\n              <Input name='firstName' placeholder='First Name' clearable />\n              -\n              <Input name='lastName' placeholder='Last Name' clearable />\n            </Input.Group>\n          </Form.FieldSet>\n        </Form.Item>\n        <Form.Item label='Age'>\n          <Input\n            name='age'\n            digits={0}\n            title='age'\n            type='number'\n            defaultValue='18'\n            style={{ width: 100 }}\n            clearable\n          />\n        </Form.Item>\n      </Form.FieldSet>\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "FieldSet (Loop)",
      "description": "FieldSet children 为函数时，根据 name 从 Form 中获取 value （类型为 array），遍历这个 value 生成一组子组件",
      "scenario": "advanced",
      "code": "/**\n * cn - FieldSet (Loop)\n *    -- FieldSet children 为函数时，根据 name 从 Form 中获取 value （类型为 array），遍历这个 value 生成一组子组件\n * en - FieldSet (Loop)\n *    -- When FieldSet's children is a function, takes the value (type is array) from the form by the name property, and generate a set of subcomponents\n */\nimport React, { useState } from 'react';\nimport { Form, Input, Rule, Button } from 'shineout';\n\ninterface FriendsItem {\n  name?: string;\n  age?: string;\n}\ninterface Value {\n  name?: string;\n  age?: string;\n  friends?: FriendsItem[];\n}\n\nconst rules = Rule();\n\nexport const add = (\n  <svg viewBox=\"0 0 24 24\" width=\"16px\" height=\"16px\">\n   <path fill='#197AFA' d=\"M12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1ZM12 7C11.4477 7 11 7.44772 11 8V11H8C7.48716 11 7.06449 11.386 7.00673 11.8834L7 12C7 12.5523 7.44772 13 8 13H11V16C11 16.5128 11.386 16.9355 11.8834 16.9933L12 17C12.5523 17 13 16.5523 13 16V13H16C16.5128 13 16.9355 12.614 16.9933 12.1166L17 12C17 11.4477 16.5523 11 16 11H13V8C13 7.48716 12.614 7.06449 12.1166 7.00673L12 7Z\"></path>\n  </svg>\n);\n\nexport const cancel = (\n  <svg viewBox=\"0 0 24 24\" width=\"16px\" height=\"16px\">\n    <path fill='#EB4242' d=\"M12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1ZM17 12C17 12.5523 16.5523 13 16 13H8C7.44772 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11H16C16.5523 11 17 11.4477 17 12Z\"></path>\n  </svg>\n);\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({});\n\n  const handleChange = (v: Value) => {\n    setValue(v);\n  };\n\n  return (\n    <Form\n      value={value}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <Form.Item label='Name'>\n        <Input name='name' defaultValue='Harry Potter' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='Friends'>\n        <Form.FieldSet\n          name='friends'\n          empty={(insert) => {\n            return (\n              <Button type=\"primary\" mode=\"outline\" onClick={() => insert({ name: '' })}>\n                +\n                Add new friends\n              </Button>\n            );\n          }}\n          defaultValue={[{ name: 'Hermione Granger', age: '16' }, {}]}\n        >\n          {({ onAppend, onRemove }) => (\n            <Form.Item style={{ marginBottom: 12 }}>\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <Input\n                  name='name'\n                  placeholder='Name'\n                  title='Friend name'\n                  rules={[rules.required('Name is required')]}\n                  style={{ width: 180, marginInlineEnd: 8 }}\n                  clearable\n                />\n                <Input\n                  name='age'\n                  type='number'\n                  placeholder='Age'\n                  rules={[rules.required('Age is required')]}\n                  title='Friend age'\n                  style={{ width: 60 }}\n                  clearable\n                />\n                <a\n                  style={{ margin: '0 12px', lineHeight: 1, cursor: 'pointer' }}\n                  onClick={() => onAppend({ name: '', age: '16' })}\n                >\n                  {add}\n                </a>\n                <a style={{ lineHeight: 1, cursor: 'pointer' }} onClick={onRemove}>\n                  {cancel}\n                </a>\n              </div>\n            </Form.Item>\n          )}\n        </Form.FieldSet>\n      </Form.Item>\n      <Form.Item label='' style={{ marginTop: 20, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "数组 name",
      "description": "数据为数组类型的组件，name 可以传入一个相应的数组，来分别处理数组内的单个数据",
      "scenario": "advanced",
      "code": "/**\n * cn - 数组 name\n *    -- 数据为数组类型的组件，name 可以传入一个相应的数组，来分别处理数组内的单个数据\n * en - Array name\n *    -- When the data is an array type, the name can pass in a corresponding array to process the single data in the array\n */\nimport React, { useState } from 'react';\nimport { produce } from 'immer';\nimport { Form, DatePicker, Input, Modal, Rule, TYPE } from 'shineout';\n\ntype Value = string[];\ntype FormProps = TYPE.Form.Props<Value>;\n\nconst NameInput = (props: FormProps) => {\n  const { value, onChange } = props;\n\n  const handleLastName = (v: string | undefined) => {\n    const newValue = produce(props.value, (draft: any[]) => {\n      draft[1] = v;\n    });\n    onChange!(newValue!);\n  };\n  const handleFirstName = (v: string | undefined) => {\n    const newValue = produce(props.value, (draft: any[]) => {\n      draft[0] = v;\n    });\n    onChange!(newValue!);\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center' }}>\n      <Input value={value![0]} width={120} onChange={handleFirstName} clearable />\n      <span style={{ margin: '0 4px' }}>-</span>\n      <Input value={value![1]} width={120} onChange={handleLastName} clearable />\n    </div>\n  );\n};\n\nconst rule = Rule();\n\nconst App: React.FC = () => {\n  const [initValue] = useState({\n    firstName: 'Harry',\n    lastName: 'Potter',\n    date: {\n      startDate: Date.now(),\n      endDate: Date.now() + 86400 * 5000,\n    },\n  });\n\n  return (\n    <Form\n      value={initValue}\n      onSubmit={(data) => {\n        Modal.info({ title: 'Form Data', content: <pre>{JSON.stringify(data, null, 2)}</pre> });\n      }}\n    >\n      <Form.Item label='Name'>\n        <Form.Field name={['firstName', 'lastName']}>\n          <NameInput />\n        </Form.Field>\n      </Form.Item>\n\n      <Form.Item label='Date'>\n        <DatePicker\n          range\n          rules={[rule.required]}\n          name={['date.startDate', 'date.endDate']}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "联动",
      "description": "在通常情况下，Form 不通过 value 和 onChange 方式处理数据，只是在 submit 的时候获取数据提交",
      "scenario": "advanced",
      "code": "/**\n * cn - 联动\n *    -- 在通常情况下，Form 不通过 value 和 onChange 方式处理数据，只是在 submit 的时候获取数据提交\n *    -- 这种情况下，需要联动时，可以使用 Flow 组件来实现。如果设置了 names 属性，只监听 names 包含的字段变化，如果没有设置，会监听 Form 内所有数据的变化\n * en - Flow\n *    -- For performance reasons, internal data of the Form is isolated and changing one component does not trigger another component to change\n *    -- If one component depends on another component's value, place it in the Flow component\n */\nimport React from 'react';\nimport { Form, Input, Checkbox, DatePicker, Rule } from 'shineout';\n\nconst rule = Rule();\n\nconst App: React.FC = () => (\n  <Form onSubmit={(d) => console.log(d)}>\n    <Form.Item label='First Name'>\n      <Input name='firstName' delay={0} defaultValue='Harry' clearable />\n    </Form.Item>\n\n    <Form.Item label='Last Name'>\n      <Input name='lastName' delay={0} defaultValue='Potter' clearable />\n    </Form.Item>\n\n    <Form.Item label='Full Name'>\n      <Form.Flow names={['firstName', 'lastName']}>\n        {(datum) => {\n          console.log('======================')\n          console.log('flow-1 rendered: >>')\n          console.log('======================')\n          return (\n            <div style={{ lineHeight: '32px' }}>{`${datum?.get('firstName')}-${datum?.get(\n              'lastName',\n            )}`}</div>\n          )\n        }}\n      </Form.Flow>\n    </Form.Item>\n\n    <Form.Item label='Password'>\n      <Input name='password' type='password' clearable />\n    </Form.Item>\n\n    <Form.Item label=''>\n      <Checkbox defaultValue name='showAge'>\n        Show age\n      </Checkbox>\n      <Checkbox name='showColors'>Show colors</Checkbox>\n      <Form.Flow names={[]}>\n        {(datum) => (\n          <Checkbox\n            name='dateRange'\n            beforeChange={() => datum?.set({ startDate: undefined, endDate: undefined })}\n          >\n            Date range\n          </Checkbox>\n        )}\n      </Form.Flow>\n    </Form.Item>\n\n    <Form.Flow names={['showAge']}>\n      {(datum) =>\n        datum?.get('showAge') && (\n          <Form.Item required label='Age' tip='between 18 and 60'>\n            <Input\n              name='age'\n              digits={0}\n              title='age'\n              type='number'\n              defaultValue='18'\n              style={{ width: 100 }}\n              clearable\n              rules={[rule.range(18, 60)]}\n            />\n          </Form.Item>\n        )\n      }\n    </Form.Flow>\n\n    <Form.Flow>\n      {(datum) =>\n        datum?.get('showColors') && (\n          <Form.Item required label='Favorite Colors'>\n            <Checkbox.Group\n              keygen={(c) => c}\n              name='colors'\n              data={['red', 'yellow', 'green', 'blue', 'pink']}\n            />\n          </Form.Item>\n        )\n      }\n    </Form.Flow>\n\n    <Form.Item label='Date' tip=''>\n      <Form.Flow names={['dateRange']}>\n        {(datum) =>\n          datum?.get('dateRange') === true ? (\n            <DatePicker key='r' range name={['startDate', 'endDate']} type='date' />\n          ) : (\n            <DatePicker key='s' name='startDate' type='date' />\n          )\n        }\n      </Form.Flow>\n    </Form.Item>\n\n    <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n      <Form.Button>Sumbit</Form.Button>\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "*    -- Form 通过 value 和 onChange 方式处理数据后，依然想要只监听 names 包含的字段变化",
      "description": "Form 通过 value 和 onChange 方式处理数据后，依然想要只监听 names 包含的字段变化",
      "scenario": "advanced",
      "code": "/**\n * cn -\n *    -- Form 通过 value 和 onChange 方式处理数据后，依然想要只监听 names 包含的字段变化\n *    -- 这种情况下，设置Form.Flow的 watch 属性为 true\n * en - Flow\n *    -- For performance reasons, internal data of the Form is isolated and changing one component does not trigger another component to change\n *    -- If one component depends on another component's value, place it in the Flow component\n */\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState({});\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <Form value={value} onChange={setValue} onSubmit={(d) => console.log(d)}>\n      <Form.Item label='First Name'>\n        <Input name='firstName' delay={0} defaultValue='Harry' clearable />\n      </Form.Item>\n\n      <Form.Item label='Last Name'>\n        <Input name='lastName' delay={0} defaultValue='Potter' clearable />\n      </Form.Item>\n\n      <Form.Flow names={['firstName']} strict>\n        {\n          (datum) => {\n            // setCount(count + 1);\n            console.log('======================')\n            console.log('flow-2-rendered: >>')\n            console.log('======================')\n            return (\n              <Form.Item label='联动渲染'>\n                <div style={{ lineHeight: '32px' }}>{`${datum?.get('firstName')}-${datum?.get('lastName')}`} {count}</div>\n              </Form.Item>\n            );\n          }\n        }\n      </Form.Flow>\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button>Sumbit</Form.Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nexport default App;\n"
    },
    {
      "title": "Hooks",
      "description": "在Form组件外使用`Form.useForm`时，需要将`setForm`方法传给Form组件，在Form组件内的子组件内使用时无需传递",
      "scenario": "advanced",
      "code": "/**\n * cn - Hooks\n *    -- 在Form组件外使用`Form.useForm`时，需要将`setForm`方法传给Form组件，在Form组件内的子组件内使用时无需传递\n * en - Hooks\n *    -- When using `Form.useForm` outside the Form component, you need to pass the `setForm` method to the Form component. When using it in a child component of the Form component, you don't need to pass it\n */\n\nimport React, { useState } from 'react';\nimport { Form, Input, Checkbox, Rule, Button, TYPE, Grid, Alert } from 'shineout';\n\ninterface Value {\n  age?: string;\n  tel?: string;\n  name?: string;\n  IPv4?: string;\n  email?: string;\n  password?: string;\n  colors?: string[];\n}\ntype FormProps = TYPE.Form.Props<Value>;\ntype FormValue = FormProps['value'];\ntype RuleFunc = TYPE.Rule.ValidFunc;\n\nconst password = {\n  func: (value: string, _formData: any, _cb: any, props: { message: string; title: string }) =>\n    new Promise((resolve, reject) => {\n      console.log('password', props);\n      if (!/\\d+/.test(value) || !/[a-z]+/i.test(value)) {\n        reject(new Error(props.message.replace('{title}', props.title)));\n      } else {\n        resolve(true);\n      }\n    }),\n};\n\nconst isExist: RuleFunc = (value, _, callback) => {\n  if (value.indexOf('so') >= 0) callback(new Error(`\"${value}\" is existed.`));\n  else callback(true);\n};\n\nconst rules = Rule(\n  // validate function package\n  {\n    password,\n    isExist,\n  },\n  // language package\n  {\n    password: {\n      message: '{title} at least has one numeral and one letter',\n    },\n  },\n);\n\nconst Sub: React.FC = () => {\n  const form = Form.useFormInstance();\n\n  const validateForm = () => {\n    console.log('form in child: >>', form)\n    form.validateFields(['password', 'age']);\n  }\n\n  return (\n    <div>\n      <Button type=\"warning\" onClick={validateForm}>use hook in children</Button>\n    </div>\n  );\n}\n\nconst FormComp: React.FC = () => {\n  const [value, setValue] = useState<FormValue>(undefined);\n\n  const [form, setForm] = Form.useForm<FormValue>();\n\n  const validateForm = () => {\n    console.log('form in parent: >>', form)\n    form.validateFields(['email', 'name']);\n  }\n\n  return (\n    <Form\n      setForm={setForm}\n      value={value}\n      onChange={setValue}\n      onSubmit={(d) => console.log(d)}\n    >\n      <Form.Item required label='Email'>\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required, rules.isExist]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20), rules.password]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Age' tip='between 18 and 60'>\n        <Input\n          name='age'\n          title='Age'\n          style={{ width: 100 }}\n          type='integer'\n          clearable\n          rules={[rules.required, rules.integer, rules.range(18, 60)]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Tel'>\n        <Input\n          name='tel'\n          title='Tel'\n          rules={[rules.required, rules.regExp('^[\\\\d\\\\s ().-]+$')]}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item required label='IPv4'>\n        <Input name='IPv4' title='IP' rules={[rules.required, rules.ipv4]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Favorite Colors' tip='select your favorite colors'>\n        <Checkbox.Group\n          name='colors'\n          keygen={(d) => d}\n          data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']}\n          defaultValue={[]}\n          renderItem={(d) => <div style={{ width: 40 }}>{d}</div>}\n          style={{\n            display: 'flex',\n            gap: 12,\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n          }}\n          rules={[rules.required('At least select one favorite color'), rules.min(2), rules.max(3)]}\n        />\n      </Form.Item>\n\n      <Form.Item label=''>\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\n          <Sub></Sub>\n          <Button onClick={validateForm} type=\"danger\">use hook in parent</Button>\n        </div>\n        <div style={{marginTop: 32}}>\n          <Form.Button>Sumbit</Form.Button>\n          <Form.Reset>Reset</Form.Reset>\n        </div>\n      </Form.Item>\n    </Form>\n  );\n};\n\nconst App = () => (\n  <Grid gutter={36} style={{padding: 36}}>\n    <Grid>\n      <Alert type=\"info\" style={{ marginBottom: 12 }}>\n        表单1\n      </Alert>\n      <FormComp />\n    </Grid>\n    <Grid>\n      <Alert type=\"info\" style={{ marginBottom: 12 }}>\n        表单2\n      </Alert>\n      <FormComp />\n    </Grid>\n  </Grid>\n)\n\nexport default App;\n"
    },
    {
      "title": "表格中使用",
      "description": "表单嵌套在表格中使用的场景",
      "scenario": "advanced",
      "code": "/**\n * cn - 表格中使用\n *    --  表单嵌套在表格中使用的场景\n * en - Table usage\n *    -- Form usage in table\n */\n\nimport { useState } from 'react';\nimport { Button, Form, Input, Table, TYPE, Rule, Link, Modal } from 'shineout';\nimport { ItemWithRequired} from './014-table-2';\n\ninterface TableRowData {\n  id?: number;\n  name?: string;\n  age?: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst rules = Rule();\n\nexport default () => {\n  const [formDatas, setFormDatas] = useState<TableRowData[]>([\n    { id: 1, name: 'Tom1', age: '18' },\n    { id: 2, name: 'Tom2', age: '28' },\n  ]);\n\n  const columns: TableColumnItem[] = [\n    { title: 'ID', width: 100, render: (d) => <div style={{ lineHeight: '32px' }}>{d.id}</div> },\n    {\n      title: <ItemWithRequired>Name</ItemWithRequired>,\n      width: 200,\n      render: (d) => {\n        return (\n          <ItemWithRequired>\n            <Form.Item style={{marginBottom: 0}}>\n              <Input\n                rules={[rules.required]}\n                value={d.name}\n                onChange={(v) => {\n                  setFormDatas(\n                    formDatas.map((item) => (item.id === d.id ? { ...item, name: v } : item)),\n                  );\n                }}\n              />\n            </Form.Item>\n          </ItemWithRequired>\n        );\n      },\n    },\n    {\n      title: 'Age',\n      width: 200,\n      render: (d) => {\n        return (\n          <Form.Item style={{marginBottom: 0}}>\n            <Input\n              rules={[rules.required]}\n              value={d.age}\n              onChange={(v) => {\n                setFormDatas(\n                  formDatas.map((item) => (item.id === d.id ? { ...item, age: v } : item)),\n                );\n              }}\n            />\n          </Form.Item>\n        );\n      },\n    },\n    {\n      title: 'Operation',\n      width: 100,\n      render: (d) => {\n        return (\n          <Link\n            type='danger'\n            onClick={() => {\n              setFormDatas(formDatas.filter((item) => item.id !== d.id));\n            }}\n            style={{ lineHeight: '32px' }}\n          >\n            Delete\n          </Link>\n        );\n      },\n    },\n  ];\n\n  return (\n    <Form value={formDatas} onChange={setFormDatas} onSubmit={() => console.log('submit:>>', JSON.stringify(formDatas, null, 2))}>\n      <div style={{ marginBottom: 12 }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            setFormDatas([\n              ...formDatas,\n              {\n                id: formDatas.length + 1,\n                name: `Tom${formDatas.length + 1}`,\n                age: `${(formDatas.length + 1) * 10 + 8}`,\n              },\n            ]);\n          }}\n        >\n          Add\n        </Button>\n\n        <Form.Submit onClick={() => {\n          Modal.info({\n            title: 'Form Data in Table',\n            content: <pre>{JSON.stringify(formDatas, null, 2)}</pre>,\n          })\n        }}>Submit</Form.Submit>\n      </div>\n\n      <Table data={formDatas} columns={columns} keygen='id' />\n    </Form>\n  );\n};\n"
    },
    {
      "title": "*    -- Form的表单项使用 name 绑定字段用法",
      "description": "Form的表单项使用 name 绑定字段用法",
      "scenario": "advanced",
      "code": "/**\n * cn -\n *    -- Form的表单项使用 name 绑定字段用法\n *    -- Form的`value`需要是一个对象，对象的属性值是数组，数组的每一项是一个对象\n * en -\n *    -- Form item use name to bind field\n *    -- The `value` of Form needs to be an object, the value of the object is an array, and each item of the array is an object\n */\n\nimport { useState } from 'react';\nimport { Button, Form, Input, Table, TYPE, Rule, Link, Modal } from 'shineout';\n\nexport function ItemWithRequired(props: { children: React.ReactNode }) {\n  return (\n    <div style={{position: 'relative'}}>\n      <span style={{ color: '#EB4242', position: 'absolute', top: 0, left: -2, transform: 'translate(-100%, 0)' }}>*</span>\n      {props.children}\n    </div>\n  )\n}\ninterface TableRowData {\n  id?: number;\n  name?: string;\n  age?: string;\n}\n\ninterface FormTableValues {\n  values: TableRowData[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst rules = Rule();\n\nexport default () => {\n  const [formDatas, setFormDatas] = useState<FormTableValues>({\n    values:[\n      { id: 1, name: 'Tom1', age: '18' },\n      { id: 2, name: 'Tom2', age: '28' },\n    ]\n  });\n\n  const columns: TableColumnItem[] = [\n    { title: 'ID', width: 100, render: (d) => <div style={{ lineHeight: '32px' }}>{d.id}</div> },\n    {\n      title: <ItemWithRequired>Name</ItemWithRequired>,\n      width: 200,\n      render: (d, index) => {\n        return (\n          <ItemWithRequired>\n            <Form.Item style={{marginBottom: 0}}>\n              <Input\n                rules={[rules.required]}\n                name={`values[${index}].name`}\n              />\n            </Form.Item>\n          </ItemWithRequired>\n        );\n      },\n    },\n    {\n      title: 'Age',\n      width: 200,\n      render: (d, index) => {\n        return (\n          <Form.Item style={{marginBottom: 0}}>\n            <Input\n              rules={[rules.required]}\n              name={`values[${index}].age`}\n            />\n          </Form.Item>\n        );\n      },\n    },\n    {\n      title: 'Operation',\n      width: 100,\n      render: (d, index) => {\n        return (\n          <Link\n            type='danger'\n            onClick={() => {\n              setFormDatas({\n                values: formDatas.values.filter((item, idx) => idx !== index),\n              });\n            }}\n            style={{ lineHeight: '32px' }}\n          >\n            Delete\n          </Link>\n        );\n      },\n    },\n  ];\n\n  return (\n    <Form value={formDatas} onChange={setFormDatas} onSubmit={() => console.log('submit:>>', JSON.stringify(formDatas, null, 2))}>\n      <div style={{ marginBottom: 12 }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            setFormDatas({\n              values: [\n                ...formDatas.values,\n                {\n                  id: formDatas.values.length + 1,\n                  name: `Tom${formDatas.values.length + 1}`,\n                  age: `${(formDatas.values.length + 1) * 10 + 8}`,\n                },\n              ]\n            });\n          }}\n        >\n          Add\n        </Button>\n\n        <Form.Submit onClick={() => {\n          Modal.info({\n            title: 'Form Data in Table',\n            content: <pre>{JSON.stringify(formDatas, null, 2)}</pre>,\n          })\n        }}>Submit</Form.Submit>\n      </div>\n\n      <Table data={formDatas.values} columns={columns} keygen='id' />\n    </Form>\n  );\n};\n"
    },
    {
      "title": "initValidate",
      "description": "* en - initValidate",
      "scenario": "validation",
      "code": "/**\n * cn - initValidate\n *    --\n * en - initValidate\n *    --\n */\nimport { Form, Input, Button } from 'shineout';\nimport React from 'react';\n\nexport default () => {\n  const [v, setV] = React.useState({});\n  return (\n    <div>\n      <Form\n        initValidate\n        value={v}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          setV(v);\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='name'>\n          <Input\n            rules={[\n              { required: true, message: 'name is required' },\n              { max: 10, message: 'name length must less than 10' },\n            ]}\n            name={'name'}\n            clearable\n            placeholder='please input name'\n          />\n        </Form.Item>\n        <Form.Item label='email'>\n          <Input\n            name={'email'}\n            rules={[{ required: true, message: 'email is required' }]}\n            clearable\n            placeholder='please input email'\n          />\n        </Form.Item>\n\n        <Form.Item label=''>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n          <Button\n            onClick={() => {\n              setV({ name: 'aelsssssllonnnnggggggg' });\n            }}\n          >\n            Automatically verify modified fields after changing values\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
    },
    {
      "title": "size",
      "description": "表单元素的尺寸",
      "scenario": "basic",
      "code": "/**\n * cn - size\n *    -- 表单元素的尺寸\n * en - size\n *    -- The size of the form element\n */\nimport React from 'react';\nimport { Form, Input, Radio, Textarea, TYPE } from 'shineout';\n\ntype RadioSize = TYPE.Radio.GroupProps<any, any>['size'];\n\nconst App: React.FC = () => {\n  const [size, setSize] = React.useState<RadioSize>('default');\n  return (\n    <>\n      <Radio.Group data={['default', 'small', 'large']} keygen value={size} onChange={setSize} />\n      <Form disabled size={size}>\n        <Form.Item label='Email'>\n          <Input name='email' />\n        </Form.Item>\n        <Form.Item label='Email2'>\n          <Input />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' />\n        </Form.Item>\n\n        <Form.Item label='Name'>\n          <Input.Group style={{ width: 300 }} disabled>\n            <Input name='firstName' placeholder='First Name' />\n            -\n            <Input name='lastName' placeholder='Last Name' />\n          </Input.Group>\n        </Form.Item>\n\n        <Form.Item label='Age'>\n          <Input.Number\n            style={{ width: 100 }}\n            name='age'\n            type='number'\n            digits={0}\n            defaultValue='0'\n          />\n        </Form.Item>\n        <Form.Item label='address'>\n          <Textarea rows={2} name='address' defaultValue='xxx' />\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default App;\n"
    }
  ],
  "subComponents": [
    "Item",
    "Field",
    "FieldSet",
    "Button",
    "Submit",
    "Reset",
    "Flow",
    "useForm",
    "useFormInstance"
  ],
  "version": "3.7.7"
}