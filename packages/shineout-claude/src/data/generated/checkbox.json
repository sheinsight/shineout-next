{
  "name": "Checkbox",
  "description": "在一组数据中，用户可通过复选框选择一个或多个数据",
  "category": "form",
  "importPath": "import { Checkbox } from 'shineout'",
  "props": [
    {
      "name": "onChange",
      "type": "((value: T , checked: boolean, raw: T) => void)",
      "required": false,
      "description": "值改变回调函数"
    },
    {
      "name": "checked",
      "type": "boolean | \"indeterminate\" | ((d: T) => boolean | \"indeterminate\")",
      "required": false,
      "description": "checked 传入时为受控组件"
    },
    {
      "name": "defaultChecked",
      "type": "boolean | \"indeterminate\"",
      "required": false,
      "description": "默认选中状态"
    },
    {
      "name": "onClick",
      "type": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void)",
      "required": false,
      "description": "勾选框点击回调"
    },
    {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否禁用"
    },
    {
      "name": "inputRef",
      "type": "Ref<HTMLInputElement>",
      "required": false,
      "description": "获取input dom"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\" | \"default\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "不同尺寸"
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "内容"
    },
    {
      "name": "htmlValue",
      "type": "any",
      "required": false,
      "defaultValue": "true",
      "description": "选中后返回的值"
    },
    {
      "name": "onRawChange",
      "type": "((value: T , checked: boolean, raw: T) => void)",
      "required": false,
      "description": "值改变回调函数"
    },
    {
      "name": "value",
      "type": "any",
      "required": false,
      "description": "如果 checked 未设置，checked 状态为 value === htmlValue"
    },
    {
      "name": "defaultValue",
      "type": "Value",
      "required": false,
      "description": "默认值和 value 类型相同"
    },
    {
      "name": "name",
      "type": "Name",
      "required": false,
      "description": "Form 内存取数据的 key"
    },
    {
      "name": "beforeChange",
      "type": "((value: T) => void | T )",
      "required": false,
      "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
    },
    {
      "name": "reserveAble",
      "type": "boolean",
      "required": false,
      "description": "设置为 true 组件卸载后表单不自动删除数据"
    },
    {
      "name": "rules",
      "type": "RuleItem[]",
      "required": false,
      "description": "校验规则 详见 [Rule](/components/rule)"
    },
    {
      "name": "onError",
      "type": "((error?: Error ) => void)",
      "required": false,
      "description": "rules 校验回调"
    },
    {
      "name": "bind",
      "type": "string[]",
      "required": false,
      "description": "当值改变是会联动校验 bind 中的字段, 需要配合 Form 使用"
    }
  ],
  "examples": [
    {
      "title": "基本用法",
      "description": "基本的 Checkbox",
      "scenario": "basic",
      "code": "/**\n * cn - 基本用法\n *    -- 基本的 Checkbox\n * en - Base\n *    -- Basic Checkbox\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => <Checkbox>Checkbox</Checkbox>;\n\nexport default App;\n"
    },
    {
      "title": "尺寸",
      "description": "设置 `size` 属性改变组件的尺寸大小, 内置三种尺寸：small、default、large",
      "scenario": "basic",
      "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性改变组件的尺寸大小, 内置三种尺寸：small、default、large\n * en - Base\n *    -- Set the size property to change the size of the component. There are three built-in sizes: small, default, and large\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', alignItems: 'center' }}>\n    <Checkbox size={'small'}>Checkbox</Checkbox>\n    <Checkbox>Checkbox</Checkbox>\n    <Checkbox size={'large'}>Checkbox</Checkbox>\n  </div>\n);\n\nexport default App;\n"
    },
    {
      "title": "状态",
      "description": "checked 有三个值，选中(true)、未选中(false)、半选中('indeterminate')，checked 设置时为受控组件（此示例没有处理 onChange 事件）",
      "scenario": "basic",
      "code": "/**\n * cn - 状态\n *    -- checked 有三个值，选中(true)、未选中(false)、半选中('indeterminate')，checked 设置时为受控组件（此示例没有处理 onChange 事件）\n * en - Checked\n *    -- The checked has three values: true(checked), false(not checked), 'indeterminate'(half-checked)\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <div style={{ marginBottom: 12, lineHeight: 0 }}>\n      <Checkbox checked={false}>not checked</Checkbox>\n      <Checkbox checked>checked</Checkbox>\n      <Checkbox checked='indeterminate'>indeterminate</Checkbox>\n    </div>\n\n    <div style={{ lineHeight: 0 }}>\n      <Checkbox checked={false} disabled>\n        not checked\n      </Checkbox>\n      <Checkbox checked disabled>\n        checked\n      </Checkbox>\n      <Checkbox checked='indeterminate' disabled>\n        indeterminate\n      </Checkbox>\n    </div>\n  </div>\n);\n\nexport default App;\n"
    },
    {
      "title": "全选/半选",
      "description": "通过设置 checked = 'indeterminate' 属性，可以实现半选效果",
      "scenario": "basic",
      "code": "/**\n * cn - 全选/半选\n *    -- 通过设置 checked = 'indeterminate' 属性，可以实现半选效果\n * en - Check all\n *    -- Set checked = 'indeterminate' to achieve half-check effect\n */\nimport React, { useState } from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = ['Option1', 'Option2', 'Option3'];\nconst getChecked = (value: string[], num: number) => {\n  if (value.length === num) return true;\n  if (value.length === 0) return false;\n  return 'indeterminate';\n};\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<string[]>([]);\n  return (\n    <div>\n      <Checkbox\n        checked={getChecked(value, data.length)}\n        onChange={(v) => {\n          if (v) {\n            setValue(data);\n          } else {\n            setValue([]);\n          }\n        }}\n      >\n        {getChecked(value, data.length) === true ? 'UnCheckAll' : 'CheckAll'}\n      </Checkbox>\n      <Checkbox.Group\n        style={{ marginTop: 12 }}\n        data={data}\n        keygen\n        value={value}\n        onChange={setValue}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "选中值",
      "description": "未设置htmlValue的状态下，checkbox选中时返回true，如果设置 htmlValue，返回 htmlValue。未选中状态都是返回 undefined",
      "scenario": "basic",
      "code": "/**\n * cn - 选中值\n *    -- 未设置htmlValue的状态下，checkbox选中时返回true，如果设置 htmlValue，返回 htmlValue。未选中状态都是返回 undefined\n * en - Value\n *    -- When the htmlValue is set, the checkbox return the htmlValue (checked) and undefined (not checked)\n *    -- When the htmlValue is not set, the checkbox selected return true (checked) and undefined (not checked)\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <Checkbox htmlValue='ok' onChange={console.log}>\n    {'value is \"ok\"'}\n  </Checkbox>\n);\n\nexport default App;\n"
    },
    {
      "title": "一组复选框",
      "description": "一组复选框可以放在 Checkbox.Group 中",
      "scenario": "advanced",
      "code": "/**\n * cn - 一组复选框\n *    -- 一组复选框可以放在 Checkbox.Group 中\n * en - Group\n *    -- A series of checkboxes group by Checkbox.Group\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = [\n  { id: 1, color: 'red' },\n  { id: 2, color: 'cyan' },\n  { id: 3, color: 'blue' },\n  { id: 4, color: 'green' },\n  { id: 5, color: 'yellow' },\n  { id: 6, color: 'orange' },\n  { id: 7, color: 'violet' },\n];\n\nconst App: React.FC = () => (\n  <Checkbox.Group keygen='id' defaultValue={[3, 5]}>\n    {data.map((d) => (\n      <Checkbox key={d.id} htmlValue={d.id}>\n        {d.color}\n      </Checkbox>\n    ))}\n  </Checkbox.Group>\n);\n\nexport default App;\n"
    },
    {
      "title": "*    -- 可以直接通过数据来渲染一组 Checkbox",
      "description": "可以直接通过数据来渲染一组 Checkbox",
      "scenario": "advanced",
      "code": "/**\n * cn -\n *    -- 可以直接通过数据来渲染一组 Checkbox\n * en -\n *    -- Render a group of checkboxes from data\n */\nimport React from 'react';\nimport { Checkbox, TYPE } from 'shineout';\n\ntype CheckboxGroupProps = TYPE.Checkbox.GroupProps<string, string[]>;\ntype CheckboxGroupRenderItem = CheckboxGroupProps['renderItem'];\n\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst renderItem: CheckboxGroupRenderItem = (color) => {\n  const style = { borderBottom: `solid 1px ${color}` };\n  return <span style={style}>{color}</span>;\n};\n\nconst App: React.FC = () => (\n  <Checkbox.Group\n    keygen={(c) => c}\n    data={data}\n    defaultValue={['blue', 'cyan']}\n    renderItem={renderItem}\n  />\n);\n\nexport default App;\n"
    },
    {
      "title": "布局",
      "description": "默认是水平布局，设置 block 属性可以改为垂直布局",
      "scenario": "advanced",
      "code": "/**\n * cn - 布局\n *    -- 默认是水平布局，设置 block 属性可以改为垂直布局\n * en - Layout\n *    -- The default layout is horizontal, and the block property can be set to vertical\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => (\n  <>\n    <Checkbox.Group keygen={(c) => c} data={data} defaultValue={['blue', 'cyan']} />\n    <Checkbox.Group\n      keygen={(c) => c}\n      data={data}\n      defaultValue={['blue', 'cyan']}\n      block\n      style={{ marginTop: 24, display: 'inline-block' }}\n    />\n  </>\n);\n\nexport default App;\n"
    },
    {
      "title": "复选框组禁用",
      "description": "设置 Checkbox.Group 的 disabled 为 true，禁用全部选项",
      "scenario": "advanced",
      "code": "/**\n * cn - 复选框组禁用\n *    -- 设置 Checkbox.Group 的 disabled 为 true，禁用全部选项\n * en - Group disabled\n *    -- Set the disabled property of Checkbox.Group to true to disable all options\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => (\n  <>\n    <Checkbox.Group disabled keygen={(c) => c} data={data} defaultValue={['blue', 'cyan']} />\n  </>\n);\n\nexport default App;\n"
    },
    {
      "title": "*    -- disabled 为函数时，根据函数结果实现有条件禁用",
      "description": "disabled 为函数时，根据函数结果实现有条件禁用",
      "scenario": "advanced",
      "code": "/**\n * cn -\n *    -- disabled 为函数时，根据函数结果实现有条件禁用\n * en -\n *    -- When the disabled property is a function, the conditional disable is implemented according to the function result\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => (\n  <>\n    <Checkbox.Group\n      disabled={(d) => d === 'yellow'}\n      keygen={(c) => c}\n      data={data}\n      defaultValue={['blue', 'cyan']}\n    />\n  </>\n);\n\nexport default App;\n"
    },
    {
      "title": "点击回调",
      "description": "点击选择框后的回调",
      "scenario": "advanced",
      "code": "/**\n * cn - 点击回调\n *    -- 点击选择框后的回调\n * en - OnClick\n *    -- Checkbox click callback\n */\nimport React, { useState } from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => {\n  const [total, setTotal] = useState(0);\n\n  return (\n    <div>\n      <Checkbox onClick={() => setTotal(total + 1)}>\n        Click Me\n        {` ${total} Times!`}\n      </Checkbox>\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "separator",
      "description": "通过 separator 属性设置分隔符",
      "scenario": "basic",
      "code": "/**\n * cn - separator\n *    -- 通过 separator 属性设置分隔符\n * en - separator\n *    -- Set the separator by separator property\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = [\n  { id: '1', color: 'red' },\n  { id: '2', color: 'cyan' },\n  { id: '3', color: 'blue' },\n  { id: '4', color: 'green' },\n  { id: '5', color: 'yellow' },\n  { id: '6', color: 'orange' },\n  { id: '7', color: 'violet' },\n];\n\nconst App: React.FC = () => (\n  <Checkbox.Group separator={','} keygen='id' defaultValue={'3,5'}>\n    {data.map((d) => (\n      <Checkbox key={d.id} htmlValue={d.id}>\n        {d.color}\n      </Checkbox>\n    ))}\n  </Checkbox.Group>\n);\n\nexport default App;\n"
    },
    {
      "title": "带输入（deprecated）",
      "description": "设置 inputable 属性可以显示输入框，返回值为输入框内容",
      "scenario": "basic",
      "code": "/**\n * cn - 带输入（deprecated）\n *    -- 设置 inputable 属性可以显示输入框，返回值为输入框内容\n * en - Inputable\n *    -- Set the inputable property to true can show the input box and the return value is the value of the input box.\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <Checkbox inputable onChange={console.log}>\n    more...\n  </Checkbox>\n);\n\nexport default App;\n"
    }
  ],
  "subComponents": [],
  "version": "3.7.7"
}