#!/usr/bin/env node

/**
 * Ë∞ÉËØï Button Á±ªÂûãËß£Êûê
 */

import * as ts from 'typescript';
import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function debugButtonType() {
  console.log('üîç Ë∞ÉËØï Button Á±ªÂûãËß£Êûê...\n');
  
  const rootPath = path.join(__dirname, '..', '..');
  const buttonTypePath = path.join(rootPath, 'packages/shineout/src/button/button.type.ts');
  
  console.log('üìÑ ËØªÂèñÊñá‰ª∂:', buttonTypePath);
  const sourceCode = fs.readFileSync(buttonTypePath, 'utf-8');
  console.log('üìÑ Êñá‰ª∂ÂÜÖÂÆπ:');
  console.log(sourceCode);
  
  console.log('\nüîç Ëß£ÊûêÁ±ªÂûãÂÆö‰πâ...');
  
  // ÂàõÂª∫ÁÆÄÂçïÁöÑ TypeScript Á®ãÂ∫è
  const compilerOptions = {
    target: ts.ScriptTarget.ES2020,
    module: ts.ModuleKind.ESNext,
  };
  
  const program = ts.createProgram([buttonTypePath], compilerOptions);
  const sourceFile = program.getSourceFile(buttonTypePath);
  
  if (sourceFile) {
    ts.forEachChild(sourceFile, (node) => {
      if (ts.isTypeAliasDeclaration(node)) {
        console.log(`üìã ÊâæÂà∞Á±ªÂûãÂà´Âêç: ${node.name.text}`);
        console.log(`üìÑ Á±ªÂûãÂÆö‰πâ: ${node.type.getText()}`);
        
        if (node.name.text === 'ButtonProps') {
          console.log('\nüéØ ËøôÊòØ ButtonProps ÂÆö‰πâ!');
          console.log('Á±ªÂûãÁßçÁ±ª:', ts.SyntaxKind[node.type.kind]);
          
          // ÂàÜÊûê Omit Á±ªÂûã
          if (ts.isTypeReferenceNode(node.type)) {
            console.log('ËøôÊòØ‰∏Ä‰∏™Á±ªÂûãÂºïÁî®');
            console.log('Á±ªÂûãÂêçÁß∞:', node.type.typeName.getText());
            
            if (node.type.typeArguments) {
              console.log('Á±ªÂûãÂèÇÊï∞:');
              node.type.typeArguments.forEach((arg, i) => {
                console.log(`  ÂèÇÊï∞ ${i}: ${arg.getText()}`);
              });
            }
          }
        }
      }
    });
  }
}

debugButtonType();