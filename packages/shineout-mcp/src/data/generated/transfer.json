{
  "name": "Transfer",
  "description": "在两栏中移动元素，完成选择行为，左栏是“源”，右边是“目标”",
  "category": "other",
  "importPath": "import { Transfer } from 'shineout'",
  "props": [
    {
      "name": "value",
      "type": "Value",
      "required": false,
      "description": "显示在右侧框数据的值集合"
    },
    {
      "name": "data",
      "type": "DataItem[]",
      "required": true,
      "defaultValue": "index",
      "description": "数据源"
    },
    {
      "name": "selectedKeys",
      "type": "(string | number)[]",
      "required": false,
      "description": "被勾选的列表, 勾选的值均使用的是 keygen 的结果"
    },
    {
      "name": "defaultSelectedKeys",
      "type": "(string | number)[]",
      "required": false,
      "description": "默认被勾选的列表"
    },
    {
      "name": "defaultValue",
      "type": "Value",
      "required": false,
      "description": "默认值  和 value 类型相同"
    },
    {
      "name": "format",
      "type": "((data: DataItem) => Value[number]) | ObjectKey<DataItem>",
      "required": false,
      "defaultValue": "d => d",
      "description": "格式化 value, 默认值，返回原始数据。 为 string 时，会作为 key 从原始数据中获取值，相当于 (d) => d[format]; 为函数时，以函数返回结果作为 value"
    },
    {
      "name": "keygen",
      "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number) | true",
      "required": false,
      "defaultValue": "index",
      "description": "生成每一项key的辅助方法 为 true 时，以数据项本身作为key，相当于 (d => d) 为函数时，使用此函数返回值 为string时，使用这个string对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
    },
    {
      "name": "simple",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否开启简单模式"
    },
    {
      "name": "disabled",
      "type": "boolean | ((data: DataItem) => boolean)",
      "required": false,
      "description": "如果 disabled 为 true，禁用全部选项，如果 disabled 为函数，根据函数反回结果禁用选项"
    },
    {
      "name": "prediction",
      "type": "((value: Value[number], Data: DataItem) => boolean)",
      "required": false,
      "description": "默认使用 format 函数执行的结果来比较是否匹配，在某些情况下（例如返回原始数据的对象，更新数据时，生成了一个值相同，非同一个对象的选项），需要借助 prediction 函数来判断是否匹配"
    },
    {
      "name": "onChange",
      "type": "((value: Value, currentData: DataItem | DataItem[], isTarget: boolean) => void)",
      "required": false,
      "description": "改变回调,参数为当前选中值"
    },
    {
      "name": "onFilter",
      "type": "((text: string, data: DataItem, isSource: boolean) => boolean)",
      "required": false,
      "description": "筛选函数, 参数为: 输入文本, 数据, 是否为左侧数据"
    },
    {
      "name": "onSearch",
      "type": "((text: string, isSource: boolean) => void)",
      "required": false,
      "description": "输入框值变化的回调, 参数为: 输入文本, 是否为左侧数据"
    },
    {
      "name": "onSelectChange",
      "type": "((sourceKeys: (string | number)[], targetKeys?: (string | number)[] ) => void) | ((selectKeys: (string | number)[]) => void)",
      "required": false,
      "description": "勾选触发的方法"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\" | \"default\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "不同尺寸"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "listHeight",
      "type": "number",
      "required": false,
      "defaultValue": "186",
      "description": "列表高度"
    },
    {
      "name": "lineHeight",
      "type": "number",
      "required": false,
      "defaultValue": "34",
      "description": "列表行高"
    },
    {
      "name": "renderItem",
      "type": "ObjectKey<DataItem> | ((data: DataItem) => ReactNode)",
      "required": false,
      "defaultValue": "d => d",
      "description": "为 string 时，返回 d[string] 为 function 时，返回函数结果"
    },
    {
      "name": "itemClass",
      "type": "string",
      "required": false,
      "description": "选项 className"
    },
    {
      "name": "empty",
      "type": "ReactNode",
      "required": false,
      "description": "无内容的展示"
    },
    {
      "name": "rowsInView",
      "type": "number",
      "required": false,
      "defaultValue": "20",
      "description": "一次加载的数据条数"
    },
    {
      "name": "listClassName",
      "type": "string",
      "required": false,
      "description": "列表扩展的 class"
    },
    {
      "name": "listStyle",
      "type": "CSSProperties",
      "required": false,
      "description": "列表扩展的样式"
    },
    {
      "name": "titles",
      "type": "[ReactNode, ReactNode]",
      "required": false,
      "description": "两侧的标题, 顺序是从左到右"
    },
    {
      "name": "footers",
      "type": "[ReactNode, ReactNode]",
      "required": false,
      "description": "底部元素, 顺序是从左到右"
    },
    {
      "name": "operations",
      "type": "[ReactNode, ReactNode]",
      "required": false,
      "description": "操作元素, 顺序是从上到下"
    },
    {
      "name": "operationIcon",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否显示操作按钮的图标"
    },
    {
      "name": "loading",
      "type": "boolean | [boolean, boolean]",
      "required": false,
      "description": "加载中, 如果需要两侧加载中状态不一致, 需要传入数组"
    },
    {
      "name": "searchPlaceholder",
      "type": "string | [string, string]",
      "required": false,
      "description": "搜索框占位"
    },
    {
      "name": "renderFilter",
      "type": "((filterProps: FilterProps) => ReactNode)",
      "required": false,
      "description": "自定义过滤器渲染"
    },
    {
      "name": "children",
      "type": "((props: { onSelected: ((string | number)[]) => void; direction: \"left\" | \"right\"; selectedKeys: (string | number)[]; value: Value; filterText: string; }) => ReactNode)",
      "required": false,
      "description": "自定义渲染内容"
    },
    {
      "name": "equalPanelWidth",
      "type": "boolean",
      "required": false,
      "description": "面板均等分配容器宽度"
    },
    {
      "name": "name",
      "type": "Name",
      "required": false,
      "description": "Form 内存取数据的 key"
    },
    {
      "name": "beforeChange",
      "type": "((value: T) => void | T )",
      "required": false,
      "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
    },
    {
      "name": "reserveAble",
      "type": "boolean",
      "required": false,
      "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
    },
    {
      "name": "rules",
      "type": "RuleItem[]",
      "required": false,
      "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
    },
    {
      "name": "onError",
      "type": "((error?: Error ) => void)",
      "required": false,
      "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
    },
    {
      "name": "bind",
      "type": "string[]",
      "required": false,
      "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
    }
  ],
  "examples": [
    {
      "title": "Base",
      "description": "Base Transfer",
      "scenario": "basic",
      "code": "/**\n * cn - 基本用法\n *    -- 基础 Transfer 使用\n * en - Base\n *    -- Base Transfer\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return (\n    <div style={{ width: 600 }}>\n      <Transfer data={data} keygen='id' listHeight={232} renderItem='name'></Transfer>\n    </div>\n  );\n};\n"
    },
    {
      "title": "Size",
      "description": "There are three built-in sizes, small, default, and large",
      "scenario": "basic",
      "code": "/**\n * cn - 尺寸\n *    -- 内置三种尺寸，small、default、large\n * en - Size\n *    -- There are three built-in sizes, small, default, and large\n */\nimport { useState } from 'react';\nimport { Transfer, Radio } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\nconst radios = ['small', 'default', 'large'];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const [radio, setRadio] = useState<'small' | 'default' | 'large'>('default');\n\n  return (\n    <div>\n      <Radio.Group\n        style={{ marginBottom: 24 }}\n        keygen\n        value={radio}\n        onChange={setRadio}\n        data={radios}\n      ></Radio.Group>\n      <Transfer data={data} size={radio} keygen='id' listHeight={232} renderItem='name'></Transfer>\n    </div>\n  );\n};\n"
    },
    {
      "title": "Simple",
      "description": "By turning on the `simple` property, you can use the simple mode. In simple mode, `selectKeys` and `onSelectChange` are not valid",
      "scenario": "basic",
      "code": "/**\n * cn - 简单模式\n *    -- 通过开启 `simple` 属性，可以使用简单模式\n *    -- 简单模式下`selectedKeys`和`onSelectChange`不生效\n * en - Simple\n *    -- By turning on the `simple` property, you can use the simple mode. In simple mode, `selectKeys` and `onSelectChange` are not valid\n *    -- In simple mode, `selectKeys` and `onSelectChange` are not valid\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return (\n    <Transfer\n      simple\n      data={data}\n      defaultValue={['id-7', 'id-8', 'id-9']}\n      keygen='id'\n      format='id'\n      listHeight={232}\n      renderItem='name'\n    ></Transfer>\n  );\n};\n"
    },
    {
      "title": "Filter",
      "description": "Set custom filter method through the `onFilter` property",
      "scenario": "basic",
      "code": "/**\n * cn - 筛选\n *    -- 通过`onFilter`属性设置自定义筛选方法\n * en - Filter\n *    -- Set custom filter method through the `onFilter` property\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const handleFilter = (text: string, item: { id: string; name: string }) => {\n    return item.name.indexOf(text) > -1;\n  };\n  return (\n    <Transfer\n      data={data}\n      keygen='id'\n      listHeight={188}\n      renderItem='name'\n      searchPlaceholder='Input search text'\n      onFilter={handleFilter}\n    ></Transfer>\n  );\n};\n"
    },
    {
      "title": "Custom render filter",
      "description": "Use `renderFilter` to get the filter parameters to achieve custom rendering of the filter area",
      "scenario": "custom",
      "code": "/**\n * cn - 自定义渲染筛选\n *    -- 通过`renderFilter`获取过滤参数实现自定义渲染过滤区域\n * en - Custom render filter\n *    -- Use `renderFilter` to get the filter parameters to achieve custom rendering of the filter area\n */\nimport { Transfer, Input, TYPE } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\ntype FilterProps = TYPE.Transfer.TransferFilterProps;\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const handleFilter = (text: string, item: { id: string; name: string }) => {\n    return item.name.indexOf(text) > -1;\n  };\n\n  const renderFilter = (filterProps: FilterProps) => {\n    return (\n      <div style={{ display: 'flex', padding: '8px 12px 4px 12px' }}>\n        <Input\n          placeholder='Custom filter'\n          onChange={filterProps.onFilter as (text?: string) => void}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <Transfer\n      data={data}\n      keygen='id'\n      listHeight={188}\n      renderItem='name'\n      searchPlaceholder='Input search text'\n      onFilter={handleFilter}\n      renderFilter={renderFilter}\n    ></Transfer>\n  );\n};\n"
    },
    {
      "title": "Custom render",
      "description": "Support custom rendering of title, button, and bottom content area",
      "scenario": "custom",
      "code": "/**\n * cn - 自定义渲染\n *    -- 支持自定义渲染标题、按钮、底部内容区域\n * en - Custom render\n *    -- Support custom rendering of title, button, and bottom content area\n */\nimport { Transfer, Button } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const renderFooter = () => {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          padding: '8px 12px',\n          boxSizing: 'border-box',\n        }}\n      >\n        <Button type='secondary'>Button</Button>\n      </div>\n    );\n  };\n\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <div style={{ minWidth: 530 }}>\n        <Transfer\n          titles={['Source', 'Target']}\n          footers={[renderFooter(), renderFooter()]}\n          data={data}\n          keygen='id'\n          operations={['To right', 'To left']}\n          listHeight={184}\n          renderItem='name'\n        ></Transfer>\n      </div>\n    </div>\n  );\n};\n"
    },
    {
      "title": "Loading",
      "description": "Set the `loading` property to display the loading state",
      "scenario": "basic",
      "code": "/**\n * cn - 加载中\n *    -- 设置`loading`属性可以显示加载中状态\n * en - Loading\n *    -- Set the `loading` property to display the loading state\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return <Transfer data={data} loading keygen='id' listHeight={232} renderItem='name'></Transfer>;\n};\n"
    },
    {
      "title": "*    -- The `loading` property supports array types, which can set different loading states for each list",
      "description": "",
      "scenario": "basic",
      "code": "/**\n * cn -\n *    -- `loading`属性支持数组类型，可以对每个列表设置不同的加载状态\n * en -\n *    -- The `loading` property supports array types, which can set different loading states for each list\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return (\n    <Transfer\n      data={data}\n      loading={[true, false]}\n      keygen='id'\n      listHeight={232}\n      renderItem='name'\n    ></Transfer>\n  );\n};\n"
    },
    {
      "title": "Controlled",
      "description": "The value of Transfer can be controlled",
      "scenario": "basic",
      "code": "/**\n * cn - 受控\n *    -- 支持组件受控\n *    -- 可以通过`format`属性指定最终获取的数据类型，默认返回选中的数据项\n * en - Controlled\n *    -- The value of Transfer can be controlled\n *   -- The data type of the final value can be specified by the `format` property. The default is to return the selected data item\n */\nimport { useState } from 'react';\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const [value, setValue] = useState([]);\n\n  const handleChange = (v: { id: string; name: string }, dataItem) => {\n    console.log('======================')\n    console.log('dataItem: >>', dataItem)\n    console.log('======================')\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <Transfer\n        data={data}\n        value={value}\n        onChange={handleChange}\n        keygen='id'\n        listHeight={232}\n        renderItem='name'\n      ></Transfer>\n    </div>\n  );\n};\n"
    },
    {
      "title": "Selected control",
      "description": "The selected item supports controlled",
      "scenario": "basic",
      "code": "/**\n * cn - 勾选受控\n *    -- 勾选项支持受控\n *    -- 注意，勾选项返回值为`keygen`所组成的数组\n * en - Selected control\n *    -- The selected item supports controlled\n *    -- Note that the return value of the selected item is an array of `keygen`\n */\nimport { useState } from 'react';\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const [selectedKeys, setSelectedKeys] = useState([]);\n\n  const handleSelectedChange = (source, target) => {\n    setSelectedKeys([...source, ...target]);\n  };\n\n  return (\n    <div>\n      <Transfer\n        data={data}\n        selectedKeys={selectedKeys}\n        onSelectChange={handleSelectedChange}\n        keygen='id'\n        listHeight={232}\n        renderItem='name'\n      ></Transfer>\n    </div>\n  );\n};\n"
    },
    {
      "title": "Big data",
      "description": "Transfer turns on virtual list by default, supports rendering of large data",
      "scenario": "basic",
      "code": "/**\n * cn - 大数据性能\n *    -- Transfer 默认开启虚拟列表，支持大数据渲染\n *    -- 本例数据量为10万\n * en - Big data\n *    -- Transfer turns on virtual list by default, supports rendering of large data\n *    -- The amount of data in this example is 100,000\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 100000; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return <Transfer data={data} keygen='id' listHeight={232} renderItem='name'></Transfer>;\n};\n"
    },
    {
      "title": "Different height",
      "description": "Transfer with different height",
      "scenario": "custom",
      "code": "/**\n * cn - 左右高度不同\n *    -- 左右高度不同的 Transfer\n * en - Different height\n *    -- Transfer with different height\n */\nimport { Transfer, Input } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\ninterface FilterProps {\n  text?: string;\n  disabled: boolean;\n  onFilter?: (text: string) => void;\n  placeholder?: string;\n  isSource?: boolean;\n}\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const handleFilter = (text: string, item: { id: string; name: string }) => {\n    return item.name.indexOf(text) > -1;\n  };\n\n  const renderFilter = (filterProps: FilterProps) => {\n    if(filterProps.isSource) {\n      return <div style={{width: 200}}>\n        <Input placeholder=\"请输入\" />\n        <Input placeholder=\"请输入\" />\n      </div>\n    }\n\n    return (\n      <div style={{ display: 'flex' }}>\n        <Input\n          placeholder='Custom filter'\n          onChange={filterProps.onFilter as (text?: string) => void}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <Transfer\n      data={data}\n      keygen='id'\n      listHeight={188}\n      renderItem='name'\n      searchPlaceholder='Input search text'\n      onFilter={handleFilter}\n      renderFilter={renderFilter}\n    ></Transfer>\n  );\n};\n"
    }
  ],
  "subComponents": [],
  "version": "3.7.10-beta.3",
  "notes": {},
  "apiSummary": {
    "totalProps": 40,
    "requiredProps": 1,
    "propsWithWhen": 0,
    "examplesCount": 12
  }
}