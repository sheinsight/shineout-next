{
  "name": "Table",
  "description": "展示行列数据，用于数据收集展示、分析整理、操作处理",
  "category": "other",
  "importPath": "import { Table } from 'shineout'",
  "props": [
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "onCellClick",
      "type": "((data: DataItem, info: { rowIndex: number; columnIndex: number; columnKey: string | number; }) => void)",
      "required": false,
      "description": "单元格点击事件的回调函数。参数：data（行数据），info.rowIndex（行索引），info.columnIndex（列索引），info.columnKey（列的唯一标识）"
    },
    {
      "name": "scrollLeft",
      "type": "number",
      "required": false,
      "description": "横向滚动位置（仅在虚拟滚动模式下生效）"
    },
    {
      "name": "rowHeight",
      "type": "number",
      "required": false,
      "defaultValue": "40",
      "description": "单行的预估高度。用于虚拟滚动的计算和滚动条显示"
    },
    {
      "name": "hover",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否启用行的鼠标悬浮高亮效果"
    },
    {
      "name": "empty",
      "type": "ReactNode",
      "required": false,
      "defaultValue": "getLocale(\\\"Data not found\\\")",
      "description": "表格无数据时显示的内容"
    },
    {
      "name": "cellSelectable",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否启用 Ctrl/Cmd + 点击来选中单元格"
    },
    {
      "name": "height",
      "type": "string | number",
      "required": false,
      "description": "表格高度（与 style.height 作用相同）"
    },
    {
      "name": "onScroll",
      "type": "((x: number, y: number, left: number, top: number) => void)",
      "required": false,
      "description": "滚动事件回调函数。参数：x（横向滚动比例 0-1），y（纵向滚动比例 0-1），left（横向滚动像素值），top（纵向滚动像素值）"
    },
    {
      "name": "pagination",
      "type": "PaginationProps",
      "required": false,
      "description": "分页配置项。详见 [Pagination](/components/Pagination) 组件文档"
    },
    {
      "name": "loading",
      "type": "ReactNode",
      "required": false,
      "defaultValue": "false",
      "description": "加载状态。为 true 时显示默认的 [Spin](/components/Spin) 组件，也可传入自定义的加载组件"
    },
    {
      "name": "virtual",
      "type": "boolean | \"lazy\"",
      "required": false,
      "description": "启用虚拟滚动。设置为 \\\"lazy\\\" 可在滚动时避免重新渲染，提升性能"
    },
    {
      "name": "rowsInView",
      "type": "number",
      "required": false,
      "defaultValue": "20",
      "description": "单次渲染的最大行数。使用懒加载优化大数据量性能。若表格超过 20 行，可调整此值。设为 0 渲染全部数据"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\" | \"default\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "表格尺寸大小"
    },
    {
      "name": "radio",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "启用单选模式（只能选中一行）"
    },
    {
      "name": "verticalAlign",
      "type": "\"top\" | \"middle\"",
      "required": false,
      "defaultValue": "\\\"top\\\"",
      "description": "单元格内容的垂直对齐方式"
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "原生 tr/td 元素（仅应用样式，不提供功能）"
    },
    {
      "name": "width",
      "type": "string | number",
      "required": false,
      "description": "表格总宽度。默认为容器宽度，不能小于各列宽度之和"
    },
    {
      "name": "columns",
      "type": "CommonColumn[]",
      "required": false,
      "defaultValue": "[]",
      "description": "列配置数组。详见 Table columns 配置"
    },
    {
      "name": "disabled",
      "type": "boolean | ((d: DataItem) => boolean)",
      "required": false,
      "description": "禁用行选择。为 true 时禁用所有行。为函数时：参数 d 为行数据，返回 true 禁用该行"
    },
    {
      "name": "treeEmptyExpand",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "树形表格中，即使节点没有子数据也显示展开按钮"
    },
    {
      "name": "rowClickAttr",
      "type": "string | boolean | string[]",
      "required": false,
      "defaultValue": "[\\\"*\\\"]",
      "description": "指定哪些元素可以触发行点击。\\\"*\\\" 表示任何元素都可触发，也可指定特定的属性名"
    },
    {
      "name": "onRowClick",
      "type": "((rowData: DataItem, index: number, fireAttr?: string | boolean ) => void)",
      "required": false,
      "description": "行点击事件回调。参数：rowData（当前行数据），index（行索引），fireAttr（触发点击的元素属性）"
    },
    {
      "name": "striped",
      "type": "boolean",
      "required": false,
      "description": "启用交替行颜色（斑马纹效果）"
    },
    {
      "name": "rowClassName",
      "type": "(rowData: DataItem, index: number) => string | undefined",
      "required": false,
      "description": "为每一行设置自定义 CSS 类名。参数：rowData（行数据），index（行索引）。返回类名字符串"
    },
    {
      "name": "rowEvents",
      "type": "object",
      "required": false,
      "description": "表格行 (tr) 元素的事件处理器集合"
    },
    {
      "name": "data",
      "type": "object[]",
      "required": false,
      "description": "表格数据数组"
    },
    {
      "name": "showSelectAll",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否在表头显示全选复选框"
    },
    {
      "name": "bordered",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "显示表格边框"
    },
    {
      "name": "treeCheckAll",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "全选时是否包含所有子孙节点（树形模式）"
    },
    {
      "name": "renderSorter",
      "type": "((params: { status?: \"asc\" | \"desc\" | null , triggerAsc: () => void, triggerDesc: () => void }) => ReactNode)",
      "required": false,
      "description": "自定义渲染排序图标的函数。参数：status 当前排序状态（\\\"asc\\\"|\\\"desc\\\"|null），triggerAsc 触发升序排序，triggerDesc 触发降序排序"
    },
    {
      "name": "hideHeader",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "隐藏表格头部"
    },
    {
      "name": "summary",
      "type": "({ render: () => ReactNode, colSpan?: number , rowSpan?: number })[] | ({ render: () => ReactNode, colSpan?: number , rowSpan?: number })[][]",
      "required": false,
      "description": "表格底部，用于显示汇总行"
    },
    {
      "name": "sticky",
      "type": "boolean | { top?: number ; css?: boolean ; target?: Element | null ; }",
      "required": false,
      "description": "固定表头。为 true 时固定在顶部（偏移量为 0）。也可传入对象配置 top 偏移量和 CSS 模式等选项"
    },
    {
      "name": "showTopScrollbar",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "在表格顶部显示横向滚动条",
      "version": "3.4.0"
    },
    {
      "name": "showBottomScrollbar",
      "type": "boolean | BottomScrollbarOption",
      "required": false,
      "defaultValue": "false",
      "description": "在表格底部显示固定的横向滚动条。可传入布尔值或包含 bottom 偏移量和 zIndex 的对象",
      "version": "3.7.0"
    },
    {
      "name": "tableRef",
      "type": "((table: TableRef) => void)",
      "required": false,
      "description": "获取表格实例引用。提供方法：scrollToIndex 滚动到指定行，getRenderIndexByData 获取数据的渲染索引，scrollColumnIntoView 滚动到指定列，scrollColumnByLeft 按像素横向滚动，sortByColumn 程序化排序。请谨慎使用，仅在虚拟模式下支持"
    },
    {
      "name": "onRowSelect",
      "type": "((rows: Value) => void)",
      "required": false,
      "description": "行选择回调函数。参数 rows 包含选中的数据。如需数据格式化，请配合使用 format 和 prediction"
    },
    {
      "name": "defaultTreeExpandKeys",
      "type": "(string | number)[]",
      "required": false,
      "description": "默认展开行(非受控)"
    },
    {
      "name": "onTreeExpand",
      "type": "((openKeys: (string | number)[], data: Item, expand: boolean, index: number) => void)",
      "required": false,
      "description": "当设置 treeExpandKeys 后，展开行时会触发该回调，keys 为展开的行"
    },
    {
      "name": "treeExpandKeys",
      "type": "(string | number)[]",
      "required": false,
      "description": "树形数据展开行，受控"
    },
    {
      "name": "treeExpandIcon",
      "type": "((data: Item, index: number, isExpanded: boolean) => ReactNode)",
      "required": false,
      "description": "树形数据展开图标，函数返回 null 时隐藏展开图标",
      "version": "3.5.0"
    },
    {
      "name": "expandIcon",
      "type": "((data: Item, index: number, isExpanded: boolean, expandInstance: ReactNode, clickEvent?: (() => void) ) => ReactNode)",
      "required": false,
      "description": "自定义渲染可展开行的图标内容，其中 data 为当前行的数据，index 为数据下标，isExpanded 为当前行的展开状态，expandInstance 为原始展开行图标实例，clickEvent 为展开事件。展开事件 clickEvent 仅在列类型为 `expand` 时返回",
      "version": "3.5.4"
    },
    {
      "name": "loader",
      "type": "((data: Item, index: number) => Promise<void>)",
      "required": false,
      "description": "树形数据加载函数",
      "version": "3.5.0"
    },
    {
      "name": "sorter",
      "type": "((sortName: string, sorter: \"asc\" | \"desc\", sortedList: ({ order: \"asc\" | \"desc\", manual: boolean, key: string | number, weight?: number })[]) => void | ((a: Item, b: Item) => number) )",
      "required": false,
      "defaultValue": "alphaSort(Column.sorter, sorter)",
      "description": "表格统一排序函数，参数分别为 Column.sorter 和 排序方式;\\n支持多列排序，sorter传入对象{ rule: string | function, weight: number }, rule为排序规则，为字符串时参考单列排序的用法, weight 为权重，指明排序的优先级。\\n多列排序时，sortedList 返回所有参与排序的字段信息"
    },
    {
      "name": "onSortCancel",
      "type": "((preType: \"asc\" | \"desc\", key: string | number, orders: ({ order: \"asc\" | \"desc\", weight?: number , key: string | number, manual: boolean })[], sorter: string) => void)",
      "required": false,
      "description": "排序取消事件回调。当点击已排序的列取消排序时触发。参数：preType（之前的排序方向），key（列的唯一标识），orders（当前所有排序项信息），sorter（列的排序器名称）"
    },
    {
      "name": "sortDirections",
      "type": "(\"asc\" | \"desc\")[]",
      "required": false,
      "defaultValue": "[\\\"asc\\\", \\\"desc\\\"]",
      "description": "排序方向",
      "version": "3.5.0"
    },
    {
      "name": "columnResizable",
      "type": "boolean",
      "required": false,
      "description": "设置 columnResizable 为 true，使所有列可伸缩"
    },
    {
      "name": "onColumnResize",
      "type": "(columns: TableColumn[]) => void",
      "required": false,
      "description": "列宽伸缩后的回调"
    },
    {
      "name": "dataChangeResize",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "数据发生变化后是否重新计算列宽"
    },
    {
      "name": "expandKeys",
      "type": "(string | number)[]",
      "required": false,
      "description": "展开行受控"
    },
    {
      "name": "keygen",
      "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number)",
      "required": true,
      "description": "生成每一项key的辅助方法\\n为函数时，使用此函数返回值\\n为string时，使用这个string对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
    },
    {
      "name": "value",
      "type": "any",
      "required": false,
      "description": "当前选中的数据值，数据格式与 onRowSelect 回调返回的格式保持一致"
    },
    {
      "name": "format",
      "type": "ObjectKey<DataItem> | ((data: DataItem) => Value extends (infer U)[] ? U : Value)",
      "required": false,
      "defaultValue": "d => d",
      "description": "格式化选中值。字符串时：作为属性名提取值（如 \\\"id\\\" 提取 d.id）。函数时：参数为行数据，返回格式化后的值"
    },
    {
      "name": "prediction",
      "type": "((value: Value extends (infer U)[] ? U : Value, data: DataItem) => boolean)",
      "required": false,
      "defaultValue": "(val, d) => val===format(d)",
      "description": "自定义值匹配函数。参数：value（选中值），data（行数据）。返回 true 表示匹配。用于默认比较失效时（如对象引用不同）"
    }
  ],
  "examples": [
    {
      "name": "01-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- 基础的表格用法。推荐 columns 写为常量，以提升性能\n * en - Base\n *    -- Basic table usage\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={data} />\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "01-empty",
      "title": "cn - 空状态",
      "code": "/**\n * cn - 空状态\n *    -- 表格空状态\n * en - Empty\n *    -- Table empty state\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={[]} />\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "02-border",
      "title": "cn - 边框和底纹",
      "code": "/**\n * cn - 边框和底纹\n *    -- 通过 striped 显示交错底纹；通过 bordered 显示边框\n * en - Style\n *    -- Set striped to add zebra-striping; Set bordered to add borders\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={data} bordered striped />\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "03-size",
      "title": "cn - 尺寸类型",
      "code": "/**\n * cn - 尺寸类型\n *    -- 设置 size 为 small 显示紧凑表格，large 为显示松散表格\n * en - Size\n *    -- Set size to small to display compact table, large to display loose table\n */\nimport React from 'react';\nimport { Radio, Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst sizeList = ['small', 'default', 'large'];\nexport default () => {\n  const [size, setSize] = React.useState<'small' | 'large' | 'default'>('default');\n  return (\n    <div>\n      <Radio.Group\n        keygen\n        data={sizeList}\n        value={size}\n        onChange={setSize}\n        style={{ marginBottom: 24 }}\n      />\n      <Table keygen='id' size={size} columns={columns} data={data} />\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "04-group",
      "title": "cn - 表头分组",
      "code": "/**\n * cn - 表头分组\n *    -- Table 会自动合并相邻相同 group 的表头\n * en - Column group\n *    -- Table automatically merges headers with adjacent and identical groups\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst name = (\n  <span style={{ background: '#E8EBF0', display: 'block', lineHeight: '40px', color: '#141737' }}>\n    Name\n  </span>\n);\n\nconst other = <span>Other</span>;\n\nconst columns: TableColumnItem[] = [\n  { title: 'First Name', render: 'firstName', group: [name, 'True Name'] },\n  { title: 'Last Name', render: 'lastName', group: [name, 'True Name'] },\n  { title: 'Nick Name', render: () => 'nickname', group: name },\n  { title: 'Country', render: 'country' },\n  { title: 'Office', render: 'office', group: other },\n  { title: 'Position', render: 'position', group: other, groupProps: { style: { background: '#EEF2FE' }, className: 'my-custom-header' } },\n];\n\nconst App: React.FC = () => <Table bordered keygen='id' columns={columns} data={data} />;\n\nexport default App;\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 56,
    "requiredProps": 1,
    "propsWithWhen": 0
  },
  "subComponentApis": {}
}