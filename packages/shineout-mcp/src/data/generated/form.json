{
  "name": "Form",
  "description": "用以收集、校验和提交数据，一般由输入框、单选框、复选框、选择器等控件组成",
  "category": "other",
  "importPath": "import { Form } from 'shineout'",
  "props": [
    {
      "name": "value",
      "type": "object",
      "required": false,
      "description": "设置后表单变为受控组件，需要配合 onChange 使用。适用于需要外部管理表单状态的场景，如跨组件共享表单数据、实时同步表单数据到状态管理器等"
    },
    {
      "name": "onChange",
      "type": "((value: T) => void)",
      "required": false,
      "description": "在受控模式下必须设置此函数来更新外部状态。每当表单内任意字段值改变时都会触发，参数为整个表单的最新数据"
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "Form 内容"
    },
    {
      "name": "labelWidth",
      "type": "string | number",
      "required": false,
      "defaultValue": "140px",
      "description": "标签宽度，labelAlign 为 \\\"top\\\" 时无效。统一设置表单项标签的宽度。可以是具体像素值（如 \\\"140px\\\"）或百分比（如 \\\"30%\\\"）。当标签顶部对齐时此配置无效。用于保持表单整齐的视觉效果，确保所有表单项的输入区域左对齐"
    },
    {
      "name": "labelAlign",
      "type": "\"left\" | \"right\" | \"top\"",
      "required": false,
      "description": "默认为空，跟随主题样式。标签的对齐方式。\\\"left\\\" 左对齐，\\\"right\\\" 右对齐，\\\"top\\\" 顶部对齐。不同的对齐方式适用于不同的表单布局需求：\\\"right\\\" 适合传统表单布局，\\\"top\\\" 适合移动端或紧凑布局，\\\"left\\\" 适合特殊设计需求"
    },
    {
      "name": "labelVerticalAlign",
      "type": "\"top\" | \"bottom\" | \"middle\"",
      "required": false,
      "defaultValue": "\\\"top\\\"",
      "description": "默认顶部对齐。标签的垂直对齐方式。当标签和输入框在同一行时（labelAlign 为 \\\"left\\\" 或 \\\"right\\\"），控制标签相对于输入框的垂直位置。\\\"top\\\" 与输入框顶部对齐，\\\"middle\\\" 居中对齐，\\\"bottom\\\" 与输入框底部对齐"
    },
    {
      "name": "keepErrorHeight",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "单行错误提示不撑开页面高度。保持错误提示高度固定，避免错误信息出现/消失时页面抖动。开启后会预留错误信息的显示空间，确保表单高度稳定。适用于对布局稳定性要求较高的场景，如表单项较多的长表单。注意：当 keepErrorBelow 为 true 时，此配置会失效"
    },
    {
      "name": "keepErrorBelow",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否保持错误信息在提示信息下方。控制错误信息的显示位置。开启后错误信息始终显示在表单项的 tip 属性下方，保持布局的一致性。关闭时错误信息可能会覆盖 tip 信息。适用于同时需要显示提示信息和错误信息的场景。注意：开启后会使 keepErrorHeight 失效",
      "version": "3.7.0"
    },
    {
      "name": "inline",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否水平布局。将表单项横向排列，适用于简单的单行表单或筛选表单。开启后表单项会在同一行显示，自动换行。通常用于搜索条件、筛选器等需要节省垂直空间的场景"
    },
    {
      "name": "colon",
      "type": "ReactNode",
      "required": false,
      "defaultValue": "false",
      "description": "统一控制所有表单项标签后是否显示冒号。可以是布尔值（true 显示默认冒号 \\\":\\\"）或自定义的 ReactNode（如 \\\"：\\\"、\\\"->\\\"等）。Form.Item 上的 colon 属性优先级更高，可以覆盖此全局设置",
      "version": "3.6.0"
    },
    {
      "name": "name",
      "type": "string",
      "required": false,
      "description": "表单的唯一标识名称。设置后会作为所有表单字段 id 的前缀，确保多个表单共存时 id 不冲突。同时启用 formRef.scrollToField 方法，可以通过字段名称快速定位到指定字段",
      "version": "3.5.3"
    },
    {
      "name": "defaultValue",
      "type": "T",
      "required": false,
      "description": "非受控模式下的表单初始值。仅在组件首次渲染时生效，后续修改不会影响表单内部数据。适用于表单数据由组件内部管理的场景，如新建表单、独立表单等"
    },
    {
      "name": "reserveAble",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "设置为 true 时，表单内所有组件的 reserveAble 都为 true : 卸载后不自动删除数据。控制表单项卸载时是否保留数据。适用于标签页切换、条件渲染等场景，避免用户填写的数据丢失。开启后即使表单项被隐藏或卸载，其数据仍会保留在表单中。可在 Form.Field 组件或支持的表单组件（如 Input、Select、DatePicker 等）上单独设置覆盖此全局配置",
      "version": "3.5.0"
    },
    {
      "name": "rules",
      "type": "RuleItem[]",
      "required": false,
      "description": "表单级别的校验规则配置。支持嵌套对象的规则定义，可以为表单的任意字段设置校验规则。规则对象的 key 对应表单字段路径（如 \\\"name\\\"、\\\"user.email\\\"、\\\"list[0].id\\\"），value 为该字段的校验规则数组（FormItemRule）。这些规则会与 Form.Field 组件上设置的 rules 属性合并，Form 级别的规则会先执行。规则类型请参考 Rule 组件文档"
    },
    {
      "name": "onError",
      "type": "((error: Error) => void)",
      "required": false,
      "description": "校验规则触发时的错误回调函数。当任意字段校验失败时调用，参数为错误对象。可用于统一处理校验错误，如记录日志、显示全局通知、上报错误等"
    },
    {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否禁用，为 true 时，表单内所有元素 disabled 都为 true。全局控制表单的禁用状态。适用于查看详情、提交中等需要临时禁用整个表单的场景。表单内所有受控组件（如 Input、Select、DatePicker 等）都会继承此属性"
    },
    {
      "name": "onReset",
      "type": "(() => void)",
      "required": false,
      "description": "表单重置时的回调函数。在表单被重置为初始值（defaultValue 或空值）后触发。可用于执行额外的重置逻辑，如清除关联状态、重置相关组件等。配合 Form.Reset 按钮或 formRef.reset() 方法使用"
    },
    {
      "name": "onSubmit",
      "type": "((value: T) => void)",
      "required": false,
      "description": "表单提交时的回调函数。只有当所有字段校验通过后才会调用，参数为完整的表单数据。通常用于处理表单数据的提交逻辑，如发送请求到服务器。可配合 Form.Submit 按钮或 formRef.submit() 方法触发"
    },
    {
      "name": "size",
      "type": "\"default\" | \"small\" | \"large\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "表单元素的尺寸。统一设置表单内所有组件的尺寸。支持 \\\"small\\\"、\\\"default\\\"、\\\"large\\\" 三种规格，影响输入框高度、字体大小等。表单内的受控组件会继承此属性，也可以在具体组件上单独覆盖"
    },
    {
      "name": "initValidate",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "当表单 value 发生变化时，是否自动触发校验。开启后可以在数据变化时实时显示校验结果，适用于需要即时反馈的场景。注意：仅在受控模式下有效"
    },
    {
      "name": "scrollToError",
      "type": "number | boolean",
      "required": false,
      "defaultValue": "false",
      "description": "校验失败时是否滚动到第一个校验失败组件，该值为数字时，表示相对于顶部的偏移量"
    },
    {
      "name": "removeUndefined",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "提交表单时是否自动移除值为 undefined 的字段。开启后可以避免提交无意义的空值，保持数据整洁。特别适用于与后端 API 对接时，避免传递不必要的 undefined 值"
    },
    {
      "name": "throttle",
      "type": "number",
      "required": false,
      "defaultValue": "1000",
      "description": "防止用户频繁点击提交按钮的节流时间。在此时间内重复点击提交将被忽略，有效避免重复提交问题。适用于网络请求较慢或处理时间较长的场景"
    },
    {
      "name": "scrollParent",
      "type": "(() => HTMLElement | null)",
      "required": false,
      "description": "指定滚动容器元素。当表单不在 document.body 直接滚动时（如在弹窗、抽屉中），需要指定实际的滚动容器以确保正确滚动到错误位置。返回 null 时使用默认滚动行为"
    },
    {
      "name": "formRef",
      "type": "((form: FormRef<V>) => void) | { current?: FormRef<V> ; }",
      "required": false,
      "description": "获取表单实例的引用。支持函数回调和 ref 对象两种方式。通过 formRef 可以调用表单的各种方法，如手动触发校验（validate、validateFields）、提交（submit）、重置（reset）、获取/设置值（getValue、set）等。FormRef<V> 中的泛型 V 表示表单数据的类型"
    },
    {
      "name": "setForm",
      "type": "((form: FormRef<V>) => void)",
      "required": false,
      "description": "在使用 Form.useForm() hooks 时，用于设置表单引用的回调函数。通常不需要手动设置，Form 组件会自动处理。但在某些特殊场景（如跨组件通信）可能需要使用"
    }
  ],
  "examples": [
    {
      "title": "Basic usage",
      "description": "The form has built-in two-way binding mechanism, which automatically issues and collects data based on the name attribute of the form element",
      "scenario": "basic",
      "code": "/**\n * cn - 基本用法\n *    -- 表单内置了类似双向绑定的机制，根据表单元素的 name 属性自动下发、收集数据\n * en - Basic usage\n *    -- The form has built-in two-way binding mechanism, which automatically issues and collects data based on the name attribute of the form element\n */\n\nimport { Form, Input, Upload, Radio, Checkbox, DatePicker, Rate, Textarea } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nexport default () => {\n  return (\n    <div>\n      <Form\n        defaultValue={{ name: 'zhangsan', email: 'zhangsan@qq.com', score: 3 }}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='Name'>\n          <Input name={'name'} placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Password'>\n          <Input name={'password'} placeholder='please input password' clearable />\n        </Form.Item>\n        <Form.Item label='Email'>\n          <Input name={'email'} clearable placeholder='please input email' />\n        </Form.Item>\n        <Form.Item label='Gendar'>\n          <Radio.Group name='gendar' data={['male', 'female']} keygen />\n        </Form.Item>\n        <Form.Item label='Course'>\n          <Checkbox.Group name='course' data={['chinese', 'maths', 'english', 'physics']} keygen />\n        </Form.Item>\n        <Form.Item label='Enrollment date'>\n          <DatePicker name='date' placeholder={'please select date'} clearable showSelNow />\n        </Form.Item>\n        <Form.Item label='Score'>\n          <StarRate name='score'></StarRate>\n        </Form.Item>\n        <Form.Item label='upload avatar'>\n          <Upload.Image\n            action='/api/upload'\n            accept='image/*'\n            name='file'\n            htmlName='file'\n            recoverAble\n            leftHandler\n            removeConfirm='Are you sure to delete it ?'\n            limit={3}\n            onSuccess={(_res, filem, data) => {\n              return data;\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='Name'>\n          <Input placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Address'>\n          <Textarea name='address' placeholder='please enter' />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
    },
    {
      "title": "Form Methods",
      "description": "You can use formRef to get some methods of the form, including validation, clear validation, submission, etc",
      "scenario": "basic",
      "code": "/**\n * cn - 表单方法\n *    -- 可以通过 formRef 去获得表单的一些方法集, 包含校验, 清空校验, 提交等\n * en - Form Methods\n *    -- You can use formRef to get some methods of the form, including validation, clear validation, submission, etc\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Form, Input, TYPE, Button, Select, Rate, DatePicker } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\ntype ValueType = {\n  name?: string;\n};\ntype FormRef = TYPE.Form.Ref<any>;\n\nconst App: React.FC = () => {\n  const form = useRef<FormRef>();\n  const [value, setValue] = useState<ValueType>({});\n\n  useEffect(() => {}, []);\n\n  return (\n    <Form\n      value={value}\n      formRef={(formRef) => {\n        form.current = formRef;\n      }}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px 12px', marginBottom: 12 }}>\n        <div><Button mode=\"outline\" onClick={() => form.current?.reset()}>Reset</Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.submit()}>Submit</Button></div>\n        <div><Button mode=\"outline\"\n          onClick={() =>\n            form.current?.validate()\n            .then((values) => {\n              console.log('validate success', values);\n              // TODO: 校验成功处理逻辑\n            })\n            .catch((errorInfo) => {\n              console.log('validate failed errorInfo: >>', errorInfo)\n              // TODO: 校验失败处理逻辑\n            })\n          }\n        >\n          Validate\n        </Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.clearValidate()}>Clear validate</Button></div>\n        <div><Button mode=\"outline\" onClick={() => console.log(form.current?.getValue())}>Get value</Button></div>\n        <div><Button mode=\"outline\" onClick={() => {\n          form.current?.set({\n            name: 'Tom',\n            password: '123456',\n            holiday: {\n              startDate: '2024-10-01',\n              endDate: '2024-10-07',\n            },\n            hobby: ['Football', 'Movie']\n          })\n        }}>Set value</Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.submit(false)}>Submit without validate</Button></div>\n      </div>\n\n      <Form.Item label='Name' required>\n        <Input name='name' rules={[{ required: true, message: 'name is required' }]} clearable />\n      </Form.Item>\n\n      <Form.Item label='Rate' required>\n        <StarRate name=\"rate\" allowHalf defaultValue={3.5} />\n      </Form.Item>\n\n      <Form.Item label='Password' required>\n        <Input.Password\n          clearable\n          name='password'\n          rules={[{ required: true, message: 'password is required' }]}\n        />\n      </Form.Item>\n\n      <Form.Item label='Holiday'>\n        <Form.FieldSet name='holiday'>\n          <DatePicker range name={['startDate', 'endDate']} />\n        </Form.FieldSet>\n      </Form.Item>\n      <Form.Item label='Hobby'>\n        <Select multiple keygen data={['Football', 'Movie', 'Barbecue']} name='hobby'></Select>\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "*    --",
      "description": "通过 labelWidth 和 labelAlign 改变标签宽度和水平对齐方式",
      "scenario": "basic",
      "code": "/**\n * cn - 标签对齐方式\n *    -- 通过 labelWidth 和 labelAlign 改变标签宽度和水平对齐方式\n * en -\n *    --\n */\n\nimport { useState } from 'react';\nimport { Form, Input, TYPE, Radio } from 'shineout';\n\ntype FormProps = TYPE.Form.Props<any>;\n\nconst alignArr: FormProps['labelAlign'][] = ['left', 'top', 'right'];\nexport default () => {\n  const [align, setAlign] = useState<FormProps['labelAlign']>('right');\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Radio.Group value={align} data={alignArr} keygen onChange={setAlign} />\n      </div>\n      <Form labelWidth={65} labelAlign={align} style={{ maxWidth: 500 }}>\n        <Form.Item label='Email'>\n          <Input name='email' clearable />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' clearable />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: align === 'top' ? -10 : 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
    },
    {
      "title": "*    -- When the label text has a line break, you can use labelVerticalAlign to control the vertical alignment",
      "description": "",
      "scenario": "basic",
      "code": "/**\n * cn -\n *    -- 当 label 文字存在换行时，可使用 labelVerticalAlign 来控制垂直方向对齐方式\n * en -\n *    -- When the label text has a line break, you can use labelVerticalAlign to control the vertical alignment\n */\n\nimport { useState } from 'react';\nimport { Form, Input, TYPE, Radio, Textarea } from 'shineout';\n\ntype FormProps = TYPE.Form.Props<any>;\n\nconst alignArr: FormProps['labelVerticalAlign'][] = ['bottom', 'top', 'middle'];\n\nexport default () => {\n  const [align, setAlign] = useState<FormProps['labelVerticalAlign']>('top');\n  return (\n    <>\n      <div style={{ marginBottom: 24 }}>\n        <Radio.Group value={align} data={alignArr} keygen onChange={setAlign} />\n      </div>\n      <Form labelWidth={65} labelVerticalAlign={align} style={{ maxWidth: 500 }}>\n        <Form.Item label='Your Email'>\n          <Input name='email' clearable />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' clearable />\n        </Form.Item>\n        <Form.Item label='Your Address'>\n          <Textarea name='address' />\n        </Form.Item>\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n"
    },
    {
      "title": "Label colon",
      "description": "Set the colon property of Form to enable the colon display of all labels.",
      "scenario": "basic",
      "code": "/**\n * cn - 标签冒号\n *    -- 设置 `Form` 的 `colon` 属性，开启所有label的冒号显示。\n *    -- 也可单独设置 `Form.Item` 的 `colon` 属性，优先级高于 `Form` 的 `colon` 属性。\n *    -- `colon` 的格式也可以是自定义的ReactNode。\n * en - Label colon\n *    -- Set the colon property of Form to enable the colon display of all labels.\n *    -- You can also set the colon property of FormItem separately, which has higher priority than the colon property of Form.\n *    -- The format of `colon` can also be a custom ReactNode.\n */\n\nimport { useState } from 'react';\nimport { Form, Input, Switch, Textarea } from 'shineout';\n\nexport default () => {\n  const [colonVisible, setColonVisible] = useState(true);\n  return (\n    <Form labelWidth={120} style={{ maxWidth: 500 }} colon={colonVisible}>\n      <Form.Item label='Show Colon'>\n        <Switch value={colonVisible} onChange={setColonVisible} content={['ON', 'OFF']} />\n      </Form.Item>\n      <Form.Item label='Your Email'>\n        <Input name='email' clearable />\n      </Form.Item>\n      <Form.Item label='Password'>\n        <Input name='password' type='password' clearable />\n      </Form.Item>\n      <Form.Item label='Your Address'>\n        <Textarea name='address' />\n      </Form.Item>\n    </Form>\n  );\n};\n"
    },
    {
      "title": "Inline",
      "description": "Set the inline property to true to make the Form horizontal",
      "scenario": "basic",
      "code": "/**\n * cn - 水平布局\n *    -- 设置 inline 属性使 Form 变为水平布局\n * en - Inline\n *    -- Set the inline property to true to make the Form horizontal\n */\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <Form inline>\n    <Form.Item label='Email' labelWidth={65}>\n      <Input name='email' placeholder='Email' clearable />\n    </Form.Item>\n\n    <Form.Item label='Password' labelWidth={65}>\n      <Input name='password' placeholder='Password' type='password' clearable />\n    </Form.Item>\n\n    <Form.Submit>Submit</Form.Submit>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "Tips",
      "description": "Set the tip property on Form.Item, the prompt text is displayed below the component",
      "scenario": "basic",
      "code": "/**\n * cn - 提示信息\n *    -- 在 Form.Item 上设置提示文案时，提示文案始终显示在组件下方\n * en - Tips\n *    -- Set the tip property on Form.Item, the prompt text is displayed below the component\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rules = Rule();\nconst App: React.FC = () => (\n  <Form style={{ maxWidth: 500 }}>\n    <Form.Item label='Email' tip='Email or nickname or phonenumber' required keepErrorBelow>\n      <Input name='email' clearable rules={[rules.required('Please input your email')]} />\n    </Form.Item>\n\n    <Form.Item\n      label='Password'\n      tip='Use at least one letter, one numeral, and seven characters.'\n      style={{ marginBottom: 0 }}\n      required\n      keepErrorBelow\n    >\n      <Input\n        name='password'\n        type='password'\n        clearable\n        rules={[rules.required('Please input your password')]}\n      />\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "*    -- Set the `tooltip` property of `label`, display the prompt icon and corresponding information",
      "description": "`label.tooltip` configuration is the same as the `Tooltip` component",
      "scenario": "basic",
      "code": "/**\n * cn -\n *    -- `label` 为对象格式时，支持设置`label.tooltip`属性，显示提示图标和相应tip信息\n *    -- `label.tooltip` 的配置同 `Tooltip` 组件\n * en -\n *    -- Set the `tooltip` property of `label`, display the prompt icon and corresponding information\n *    -- `label.tooltip` configuration is the same as the `Tooltip` component\n */\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\nconst MyIcon = () => (\n  <svg viewBox='0 0 24 24' focusable=\"false\" fill=\"currentColor\" aria-hidden=\"true\">\n    <path\n      d='M12.002 1C18.0771 1 23.002 5.92487 23.002 12C23.002 18.0751 18.0771 23 12.002 23C5.92682 23 1.00195 18.0751 1.00195 12C1.00195 5.92487 5.92682 1 12.002 1ZM12.002 3C7.03139 3 3.00195 7.02943 3.00195 12C3.00195 16.9706 7.03139 21 12.002 21C16.9725 21 21.002 16.9706 21.002 12C21.002 7.02943 16.9725 3 12.002 3ZM12.002 9C12.5542 9 13.002 9.44771 13.002 10V18C13.002 18.5523 12.5542 19 12.002 19C11.4497 19 11.002 18.5523 11.002 18V10C11.002 9.44771 11.4497 9 12.002 9ZM12.002 6C12.5542 6 13.002 6.44772 13.002 7C13.002 7.55228 12.5542 8 12.002 8C11.4497 8 11.002 7.55228 11.002 7C11.002 6.44772 11.4497 6 12.002 6Z'\n    />\n  </svg>\n);\n\nconst App: React.FC = () => (\n  <Form style={{ maxWidth: 500 }}>\n    <Form.Item\n      required\n      label={{\n        content: 'Email',\n        tooltip: \"Email or nickname or phonenumber\",\n      }}\n    >\n      <Input name='email' clearable />\n    </Form.Item>\n    <Form.Item\n      required\n      label={{\n        content: 'Password',\n        tooltip: {\n          tip: \"Use at least one letter, one numeral, and seven characters.\",\n          type: 'warning',\n          icon: <MyIcon />,\n        },\n      }}\n    >\n      <Input name='password' type='password' clearable />\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "validate",
      "description": "Use the built-in rules through the Rule object. See Rule for details",
      "scenario": "basic",
      "code": "/**\n * cn - 基础校验\n *    -- 通过 Rule 对象，可以使用内置的规则。规则详见 Rule\n * en - validate\n *    -- Use the built-in rules through the Rule object. See Rule for details\n */\n\nimport React, { useState, useCallback } from 'react';\nimport { Form, Input, Checkbox, Rule, Button, TYPE, DatePicker, Select } from 'shineout';\n\ninterface Value {\n  age?: string;\n  tel?: string;\n  name?: string;\n  IPv4?: string;\n  email?: string;\n  password?: string;\n  colors?: string[];\n}\ntype FormProps = TYPE.Form.Props<Value>;\ntype FormValue = FormProps['value'];\ntype FormRef = TYPE.Form.Ref<any>;\ntype RuleFunc = TYPE.Rule.ValidFunc;\n\nconst password = {\n  func: (value: string, _formData: any, _cb: any, props: { message: string; title: string }) =>\n    new Promise((resolve, reject) => {\n      console.log('password', props);\n      if (!/\\d+/.test(value) || !/[a-z]+/i.test(value)) {\n        reject(new Error(props.message.replace('{title}', props.title)));\n      } else {\n        resolve(true);\n      }\n    }),\n};\n\nconst isExist: RuleFunc = (value, _, callback) => {\n  if (value.indexOf('so') >= 0) callback(new Error(`\"${value}\" is existed.`));\n  else callback(true);\n};\n\nconst rules = Rule(\n  // validate function package\n  {\n    password,\n    isExist,\n  },\n  // language package\n  {\n    password: {\n      message: '{title} at least has one numeral and one letter',\n    },\n  },\n);\n\nconst App: React.FC = () => {\n  const [ref, setRef] = useState<FormRef>();\n  const [value, setValue] = useState<FormValue>(undefined);\n\n  const validFields = useCallback(() => {\n    if (ref && ref.validateFields) {\n      ref.validateFields(['email', 'name']);\n    }\n  }, [ref]);\n\n  console.log('form value: >>', value)\n  return (\n    <Form\n      value={value}\n      scrollToError={200}\n      scrollParent={() => document.getElementById('layout')}\n      onChange={setValue}\n      formRef={(f) => setRef(f)}\n      style={{ maxWidth: 500 }}\n      onSubmit={(d) => console.log(d)}\n    >\n      <Form.Item required label='Email'>\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required, rules.isExist]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20), rules.password]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Age' tip='between 18 and 60'>\n        <Input\n          name='age'\n          title='Age'\n          style={{ width: 100 }}\n          type='integer'\n          clearable\n          rules={[rules.required, rules.integer, rules.range(18, 60)]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Birthday'>\n        <DatePicker\n          name='birthday'\n          range\n          rules={[rules.required]}\n          clearable\n          clearToUndefined\n        />\n      </Form.Item>\n\n      <Form.Item required label='Hobby'>\n        <Select\n          keygen\n          multiple\n          clearable\n          name='hobby'\n          rules={[rules.required]}\n          data={['football', 'basketball', 'tennis', 'swimming', 'running']}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Tel'>\n        <Input\n          name='tel'\n          title='Tel'\n          rules={[rules.required, rules.regExp('^[\\\\d\\\\s ().-]+$')]}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item required label='IPv4'>\n        <Input name='IPv4' title='IP' rules={[rules.required, rules.ipv4]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Favorite Colors' tip='select your favorite colors'>\n        <Checkbox.Group\n          name='colors'\n          keygen={(d) => d}\n          data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']}\n          defaultValue={[]}\n          renderItem={(d) => <div style={{ width: 40 }}>{d}</div>}\n          style={{\n            display: 'flex',\n            gap: 12,\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n          }}\n          rules={[rules.required('At least select one favorite color'), rules.min(2), rules.max(3)]}\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button>Sumbit</Form.Button>\n        <Form.Reset>Reset</Form.Reset>\n        <Button onClick={validFields} mode=\"outline\">Validate Some Field</Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Bind validate",
      "description": "Use the `bind` property for bind validate",
      "scenario": "basic",
      "code": "/**\n * cn - 联动校验\n *    -- 使用 `bind` 属性进行联动校验\n * en - Bind validate\n *    -- Use the `bind` property for bind validate\n */\nimport { Form, Input } from 'shineout';\nimport React from 'react';\n\nexport default () => {\n  const [v, setV] = React.useState({});\n  return (\n    <div>\n      <Form\n        value={v}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          setV(v);\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='password'>\n          <Input.Password\n            bind={['repeat']}\n            rules={[\n              (value, _, callback, _prop) => {\n                if (!value) {\n                  callback(new Error('password is required'));\n                }\n                if (value && value.length > 10) {\n                  callback(new Error('password length must less than 10'));\n                }\n                callback(true);\n              },\n            ]}\n            name={'password'}\n            clearable\n            placeholder='please input password'\n          />\n        </Form.Item>\n        <Form.Item label='repeat'>\n          <Input.Password\n            name={'repeat'}\n            rules={[\n              (value, formValue, callback, _prop) => {\n                if (!value) {\n                  callback(new Error('repeat is required'));\n                }\n                if (value && value !== formValue.password) {\n                  callback(new Error('Two inputs are inconsistent'));\n                }\n                callback(true);\n              },\n            ]}\n            clearable\n            placeholder='please input password again'\n          />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
    },
    {
      "title": "Back-end validation",
      "description": "By setting an `error` on the Form, the back-end validation data is presented. After the form value is changed, the corresponding back-end validation data is cleared",
      "scenario": "basic",
      "code": "/**\n * cn - 服务端校验\n *    -- 通过给 Form 设置 `error`，实现后端校验数据展示\n *    -- 在表单值被改变后，对应后端校验数据会被清空\n *    -- 前端校验优先级大于后端校验\n * en - Back-end validation\n *    -- By setting an `error` on the Form, the back-end validation data is presented. After the form value is changed, the corresponding back-end validation data is cleared\n *    -- front-end validation priority is greater than back-end validation\n */\nimport React, { useState } from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rules = Rule();\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<{ [key: string]: string }>({});\n\n  const handleSubmit = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setError({ email: 'The email has been registered' });\n    }, 1000);\n  };\n\n  return (\n    <Form disabled={loading} error={error} style={{ maxWidth: 500 }} onSubmit={handleSubmit}>\n      <Form.Item required label='Email'>\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20)]}\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button loading={loading}>Sumbit</Form.Button>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "validate style",
      "description": "Use `keepErrorHeight` so that a single-line error prompt will not stretch the page height",
      "scenario": "basic",
      "code": "/**\n * cn - 校验样式\n *    -- 使用 `keepErrorHeight` 使得单行错误提示不会撑开页面高度\n * en - validate style\n *    -- Use `keepErrorHeight` so that a single-line error prompt will not stretch the page height\n */\n\nimport React, { useState } from 'react';\nimport { Form, Input, Checkbox, Rule, TYPE } from 'shineout';\n\ninterface Value {\n  age?: string;\n  tel?: string;\n  name?: string;\n  IPv4?: string;\n  email?: string;\n  password?: string;\n  colors?: string[];\n}\ntype FormProps = TYPE.Form.Props<Value>;\ntype FormValue = FormProps['value'];\ntype RuleFunc = TYPE.Rule.ValidFunc;\n\nconst password = {\n  func: (value: string, _formData: any, _cb: any, props: { message: string; title: string }) =>\n    new Promise((resolve, reject) => {\n      console.log('password', props);\n      if (!/\\d+/.test(value) || !/[a-z]+/i.test(value)) {\n        reject(new Error(props.message.replace('{title}', props.title)));\n      } else {\n        resolve(true);\n      }\n    }),\n};\n\nconst isExist: RuleFunc = (value, _, callback) => {\n  if (value.indexOf('so') >= 0) callback(new Error(`\"${value}\" is existed.`));\n  else callback(true);\n};\n\nconst rules = Rule(\n  // validate function package\n  {\n    password,\n    isExist,\n  },\n  // language package\n  {\n    password: {\n      message: '{title} at least has one numeral and one letter',\n    },\n  },\n);\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<FormValue>(undefined);\n\n  return (\n    <Form\n      value={value}\n      scrollParent={() => document.getElementById('layout')}\n      onChange={setValue}\n      style={{ maxWidth: 500 }}\n      onSubmit={(d) => console.log(d)}\n      keepErrorHeight\n    >\n      <Form.Item required label='Email' tip=\"88888\">\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required, rules.isExist]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20), rules.password]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Age' tip='between 18 and 60'>\n        <Input\n          name='age'\n          title='Age'\n          style={{ width: 100 }}\n          type='integer'\n          clearable\n          rules={[rules.required, rules.integer, rules.range(18, 60)]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Tel'>\n        <Input\n          name='tel'\n          title='Tel'\n          rules={[rules.required, rules.regExp('^[\\\\d\\\\s ().-]+$')]}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item required label='IPv4'>\n        <Input name='IPv4' title='IP' rules={[rules.required, rules.ipv4]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Favorite Colors' tip='select your favorite colors'>\n        <Checkbox.Group\n          name='colors'\n          keygen={(d) => d}\n          data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']}\n          defaultValue={[]}\n          renderItem={(d) => <div style={{ width: 40 }}>{d}</div>}\n          rules={[rules.required('At least select one favorite color'), rules.min(2), rules.max(3)]}\n          style={{\n            display: 'flex',\n            gap: 12,\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n          }}\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button>Sumbit</Form.Button>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Form Methods",
      "description": "Set the `name` property of `Form` to use the `scrollToField` method of `formRef` to scroll to the specified field",
      "scenario": "basic",
      "code": "/**\n * cn - 滚动到字段\n *    -- 设置 `Form` 的 `name` 属性后，可以通过 `formRef` 的 `scrollToField` 方法滚动到指定字段\n *    -- `formRef` 的 `validateFieldsWithValue` 方法可以获取所有字段的校验信息\n * en - Form Methods\n *    -- Set the `name` property of `Form` to use the `scrollToField` method of `formRef` to scroll to the specified field\n *    -- The `validateFieldsWithValue` method of `formRef` can get the validation information of all fields\n */\nimport React, { useState } from 'react';\nimport { Form, Input, Button, Tabs, Grid, Select, Message } from 'shineout';\n\ntype ChildArrayType = {\n  brandName: string;\n  configs: {\n    bussName: string;\n    mockId: string;\n    slotId: string;\n  }[];\n  childConfig: {\n    live: string;\n    brand: string;\n    partner: string;\n  };\n};\n\ntype ValueType = {\n  public: {\n    config1: {\n      field1: string;\n      field2: string;\n      field3: string;\n      field4: string;\n    };\n    config2: {\n      field1: string;\n      field2: string;\n      field3: string;\n      field4: string;\n    };\n  };\n  child: ChildArrayType[];\n};\n\nconst panelStyle = {\n  padding: 12,\n  height: 200,\n  overflow: 'auto',\n  border: '1px solid #f0f0f0',\n  borderTop: 'none',\n};\n\nconst defaultFormValue = {\n  public: {\n    config1: {\n      field1: '1',\n      field2: '2',\n      field3: '3',\n      field4: '4',\n    },\n    config2: {\n      field1: '5',\n      field2: '6',\n      field3: '7',\n      field4: '8',\n    },\n  },\n  child: [\n    {\n      brandName: 'github',\n      configs: [\n        { bussName: '1', mockId: '1', slotId: '1' },\n        { bussName: '2', mockId: '2', slotId: '2' },\n        { bussName: '3', mockId: '3', slotId: '3' },\n      ],\n      childConfig: {\n        live: '1',\n        brand: '1',\n        partner: '1',\n      },\n    },\n    {\n      brandName: 'gitlab',\n      configs: [\n        { bussName: '4', mockId: '4', slotId: '4' },\n        { bussName: '5', mockId: '5', slotId: '5' },\n        { bussName: '6', mockId: '6', slotId: '6' },\n      ],\n      childConfig: {\n        live: '2',\n        brand: '2',\n        partner: '',\n      },\n    },\n  ],\n};\n\nconst App: React.FC = () => {\n  const [activeParentTab, setActiveParentTab] = useState('public-panel');\n  const [activeChildTab, setActiveChildTab] = useState('child-panel-0');\n\n  const [formValue, setFormValue] = useState<ValueType>(defaultFormValue);\n  const [form, setForm] = Form.useForm<ValueType>();\n\n  const [field1, setField1] = useState<string | undefined>();\n  const [field2, setField2] = useState<string | undefined>();\n\n  const myCustomScrollToField = (fieldName: string) => {\n      // 示例这里根据字段名判断模拟交互，开发者以实际情况处理\n      if (fieldName.startsWith('public')) {\n        setActiveParentTab('public-panel');\n      } else {\n        // 切换至child-panel\n        setActiveParentTab('child-panel');\n\n        const index = fieldName.match(/\\d+/)?.[0];\n        // 切换至对应的child-panel-index\n        setActiveChildTab(`child-panel-${index}`);\n      }\n\n      setTimeout(() => {\n        form.scrollToField(fieldName);\n      });\n  };\n\n  const handleMySubmit = () => {\n    form\n      .validateFieldsWithValue()\n      .then((v) => {\n        Message.success('submit success');\n\n        console.log('submit success:>>', JSON.stringify(v, null, 2));\n        form.submit();\n      })\n      .catch((errorInfo) => {\n        Message.error('submit failed');\n\n        console.log('submit failed:>>', errorInfo);\n        if (errorInfo.errorFields.length > 0) {\n          const firstErrorFieldName = errorInfo.errorFields[0].name as string;\n          console.log('firstErrorFieldName: >>', firstErrorFieldName);\n\n          // 滚动到错误字段\n          myCustomScrollToField(firstErrorFieldName);\n        }\n      });\n  };\n\n  return (\n    <Form<ValueType>\n      value={formValue}\n      setForm={setForm}\n      onChange={setFormValue}\n      onSubmit={() => console.log('submit:>>', JSON.stringify(formValue, null, 2))}\n      labelWidth={200}\n      name='my-form'\n      reserveAble\n      scrollToError\n    >\n      <Tabs\n        active={activeParentTab}\n        onChange={(tab) => setActiveParentTab(tab as string)}\n        lazy={false}\n      >\n        <Tabs.Panel id='public-panel' tab='Public Config' style={panelStyle}>\n          <Form.FieldSet name='public'>\n            <Form.FieldSet name='config1'>\n              <Form.Item label='public.config1.field1' required>\n                <Input\n                  name='field1'\n                  rules={[{ required: true, message: 'public.config1.field1 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config1.field2' required>\n                <Input\n                  name='field2'\n                  rules={[{ required: true, message: 'public.config1.field2 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config1.field3' required>\n                <Input\n                  name='field3'\n                  rules={[{ required: true, message: 'public.config1.field3 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config1.field4' required>\n                <Input\n                  name='field4'\n                  rules={[{ required: true, message: 'public.config1.field4 is required' }]}\n                />\n              </Form.Item>\n            </Form.FieldSet>\n            <Form.FieldSet name='config2'>\n              <Form.Item label='public.config2.field1' required>\n                <Input\n                  name='field1'\n                  rules={[{ required: true, message: 'public.config2.field1 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config2.field2' required>\n                <Input\n                  name='field2'\n                  rules={[{ required: true, message: 'public.config2.field2 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config2.field3' required>\n                <Input\n                  name='field3'\n                  rules={[{ required: true, message: 'public.config2.field3 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config2.field4' required>\n                <Input\n                  name='field4'\n                  rules={[{ required: true, message: 'public.config2.field4 is required' }]}\n                />\n              </Form.Item>\n            </Form.FieldSet>\n            <Form.FieldSet name='config3' defaultValue={['1', '2']}>\n              {({ value, onChange, index }) => (\n                <Form.Item label={`public.config3[${index}]`} required>\n                  <Input value={value} onChange={(v) => onChange(v as string)} rules={[{ required: true, message: `public.config3[${index}] is required` }]} />\n                </Form.Item>\n              )}\n            </Form.FieldSet>\n            <Form.Item label='public.config4' required>\n              <Form.Field name='config4' defaultValue={'4'} rules={[{ required: true, message: 'public.config4 is required' }]}>\n                <Input />\n              </Form.Field>\n            </Form.Item>\n          </Form.FieldSet>\n        </Tabs.Panel>\n        <Tabs.Panel id='child-panel' tab='Child Config' style={panelStyle}>\n          <Tabs\n            active={activeChildTab}\n            onChange={(tab) => setActiveChildTab(tab as string)}\n            position='left-top'\n            shape='card'\n            lazy={false}\n            allowNonPanel\n          >\n            <Form.FieldSet name='child'>\n              {({ index }) => {\n                return (\n                  <Tabs.Panel\n                    id={`child-panel-${index}`}\n                    tab={`child-panel-${index}`}\n                    style={{ padding: 12 }}\n                  >\n                    <Form.Item label={`child[${index}].brandName`} required>\n                      <Input\n                        name={'brandName'}\n                        rules={[{ required: true, message: 'brandName is required' }]}\n                      />\n                    </Form.Item>\n                    <Form.FieldSet name='configs'>\n                      {({index: nestIndex}) => (\n                        <Grid>\n                          <Grid width={1 / 3}>\n                            <Form.Item label={`child[${index}].configs[${nestIndex}].bussName`} required>\n                              <Input\n                                name={'bussName'}\n                                rules={[{ required: true, message: 'bussName is required' }]}\n                              />\n                            </Form.Item>\n                          </Grid>\n                          <Grid width={1 / 3}>\n                            <Form.Item label={`child[${index}].configs[${nestIndex}].mockId`} required>\n                              <Input\n                                name={'mockId'}\n                                rules={[{ required: true, message: 'mockId is required' }]}\n                              />\n                            </Form.Item>\n                          </Grid>\n                          <Grid width={1 / 3}>\n                            <Form.Item label={`child[${index}].configs[${nestIndex}].slotId`} required>\n                              <Input\n                                name={'slotId'}\n                                rules={[{ required: true, message: 'slotId is required' }]}\n                              />\n                            </Form.Item>\n                          </Grid>\n                        </Grid>\n                      )}\n                    </Form.FieldSet>\n                    <Form.FieldSet name='childConfig'>\n                      <Form.Item label={`child[${index}].childConfig.live`} required>\n                        <Input\n                          name={'live'}\n                          rules={[{ required: true, message: 'live is required' }]}\n                        />\n                      </Form.Item>\n                      <Form.Item label={`child[${index}].childConfig.brand`} required>\n                        <Select\n                          keygen\n                          name='brand'\n                          data={[1, 2, 3]}\n                          rules={[{ required: true, message: 'brand is required' }]}\n                        />\n                      </Form.Item>\n                      <Form.Item label={`child[${index}].childConfig.partner`} required>\n                        <Input\n                          name={'partner'}\n                          rules={[{ required: true, message: 'partner is required' }]}\n                        />\n                      </Form.Item>\n                    </Form.FieldSet>\n                  </Tabs.Panel>\n                );\n              }}\n            </Form.FieldSet>\n          </Tabs>\n        </Tabs.Panel>\n      </Tabs>\n\n      <Grid style={{ marginTop: 12 }}>\n        <Grid width={2 / 3} style={{ display: 'inline-flex', gap: 12 }}>\n          <div>\n            <p style={{ marginBottom: 8 }}>方法1: form.validateFieldsWithValue</p>\n            <Input.Group style={{ overflow: 'hidden' }}>\n              <Input placeholder='Field Name' value={field1} onChange={setField1} />\n              <Button\n                type=\"primary\"\n                style={{ borderRadius: 0 }}\n                onClick={() => {\n                  form\n                    .validateFieldsWithValue(field1)\n                    .then((values) => {\n                      Message.success(`${field1} validate success`);\n                      console.log('validate success values: >>', values);\n                    })\n                    .catch((errorInfo) => {\n                      Message.error('validate failed');\n                      console.log('validate failed errorInfo: >>', errorInfo);\n                    });\n                }}\n              >\n                Validate\n              </Button>\n            </Input.Group>\n          </div>\n\n          <div>\n            <p style={{ marginBottom: 8 }}>方法2: form.scrollToField</p>\n            <Input.Group style={{ overflow: 'hidden' }}>\n              <Input placeholder='Field Name' value={field2} onChange={setField2} />\n              <Button\n                type=\"primary\"\n                style={{ borderRadius: 0 }}\n                onClick={() => {\n                  if (field2) {\n                    myCustomScrollToField(field2);\n                  }\n                }}\n              >\n                Scroll\n              </Button>\n            </Input.Group>\n          </div>\n        </Grid>\n\n        <Grid width={1 / 3} style={{ textAlign: 'right' }}>\n          <p style={{ marginBottom: 8 }}>&nbsp;</p>\n          <Form.Reset>Reset</Form.Reset>\n          <Button type='primary' onClick={handleMySubmit}>\n            My Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Disabled",
      "description": "Use the disabled property to make the Form support to disable component",
      "scenario": "basic",
      "code": "/**\n * cn - 禁用\n *    -- 使用 disabled 属性使表单内支持 disabled 属性的组件禁用，通常用在表单数据加载或提交时\n * en - Disabled\n *    -- Use the disabled property to make the Form support to disable component\n */\nimport React from 'react';\nimport { Form, Input, Textarea } from 'shineout';\n\nconst App: React.FC = () => (\n  <Form disabled>\n    <Form.Item label='Email'>\n      <Input name='email' clearable />\n    </Form.Item>\n    <Form.Item label='Email2'>\n      <Input clearable />\n    </Form.Item>\n\n    <Form.Item label='Password'>\n      <Input name='password' type='password' clearable />\n    </Form.Item>\n\n    <Form.Item label='Name'>\n      <Input.Group style={{ width: 300 }} disabled>\n        <Input name='firstName' placeholder='First Name' clearable />\n        -\n        <Input name='lastName' placeholder='Last Name' clearable />\n      </Input.Group>\n    </Form.Item>\n\n    <Form.Item label='Age'>\n      <Input.Number\n        style={{ width: 100 }}\n        name='age'\n        type='number'\n        digits={0}\n        defaultValue='0'\n        clearable\n      />\n    </Form.Item>\n    <Form.Item label='address'>\n      <Textarea rows={2} name='address' defaultValue='xxx' />\n    </Form.Item>\n    <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n      <Form.Submit loading>Submit</Form.Submit>\n      <Form.Reset>Reset</Form.Reset>\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "Field",
      "description": "Components that support value property and onChange property can be put in a Form.Field",
      "scenario": "basic",
      "code": "/**\n * cn - 自定义表单组件\n *    -- 非shineout组件也支持放在 Form.Field 中使用，只要组件接收 value 和 onChange 属性即可\n *    -- `Form.Field`的children 为 ReactElement时，必须支持 value 和 onChange 属性\n *    -- `Form.Field`的children 为 Function 时，返回一个或一组 ReactElement，在函数内部自行处理 value 和 onChange\n * en - Field\n *    -- Components that support value property and onChange property can be put in a Form.Field\n *    -- When the children property is a ReactElement, the value and onChange property must be provided\n *    -- When the children property is a function, return one or one group of ReactElement\n */\nimport React from 'react';\nimport { Form, Rule } from 'shineout';\n\nfunction Input(props: any) {\n  const { value = '', status, onChange } = props;\n  const style = { border: `solid 1px ${status === 'error' ? 'red' : '#ccc'}`, outline: 'none' };\n  return (\n    <input\n      {...props}\n      style={style}\n      value={value}\n      onChange={(e) => {\n        onChange(e.target.value);\n      }}\n    />\n  );\n}\nconst rule = Rule();\nconst App: React.FC = () => (\n  <Form style={{ maxWidth: 500 }} onSubmit={(d) => console.log(d)}>\n    <Form.Item required label='Email'>\n      <Form.Field\n        name='email'\n        defaultValue='test@email.com'\n        rules={[rule.required('不能为空'), rule.email('格式不正确')]}\n      >\n        {({ value, onChange, status }) => (\n          <Input value={value || ''} status={status} onChange={onChange} type='text' />\n        )}\n      </Form.Field>\n    </Form.Item>\n\n    <Form.Item label='Password' tip='Use at least one letter, one numeral, and seven characters.'>\n      <Form.Field\n        name='password'\n        rules={[\n          rule.required,\n          rule.min(7, '不能小于7个字符'),\n          rule.regExp(/^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$/, '格式不正确'),\n        ]}\n      >\n        <Input type='password' />\n      </Form.Field>\n    </Form.Item>\n\n    <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n      <Form.Submit>Submit</Form.Submit>\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "FieldSet (Object)",
      "description": "Form.FieldSet handles fields of object type",
      "scenario": "basic",
      "code": "/**\n * cn - FieldSet (Object)\n *    -- Form.FieldSet 可以处理对象类型的字段\n * en - FieldSet (Object)\n *    -- Form.FieldSet handles fields of object type\n */\nimport React, { useState } from 'react';\nimport { Form, Input } from 'shineout';\n\ninterface Value {\n  account?: {\n    name?: {\n      firstName: string;\n      lastName: string;\n    };\n    age?: number;\n  };\n}\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({\n    account: {\n      name: {\n        firstName: 'James',\n        lastName: 'Potter',\n      },\n      age: 20,\n    },\n  });\n\n  const handleChange = (v: Value) => {\n    setValue(v);\n  };\n\n  return (\n    <Form\n      value={value}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <Form.FieldSet name='account'>\n        <Form.Item label='Name'>\n          <Form.FieldSet name='name'>\n            <Input.Group style={{ width: 300 }}>\n              <Input name='firstName' placeholder='First Name' clearable />\n              -\n              <Input name='lastName' placeholder='Last Name' clearable />\n            </Input.Group>\n          </Form.FieldSet>\n        </Form.Item>\n        <Form.Item label='Age'>\n          <Input\n            name='age'\n            digits={0}\n            title='age'\n            type='number'\n            defaultValue='18'\n            style={{ width: 100 }}\n            clearable\n          />\n        </Form.Item>\n      </Form.FieldSet>\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "FieldSet (Loop)",
      "description": "When FieldSet's children is a function, takes the value (type is array) from the form by the name property, and generate a set of subcomponents",
      "scenario": "basic",
      "code": "/**\n * cn - FieldSet (Loop)\n *    -- FieldSet children 为函数时，根据 name 从 Form 中获取 value （类型为 array），遍历这个 value 生成一组子组件\n * en - FieldSet (Loop)\n *    -- When FieldSet's children is a function, takes the value (type is array) from the form by the name property, and generate a set of subcomponents\n */\nimport React, { useState } from 'react';\nimport { Form, Input, Rule, Button } from 'shineout';\n\ninterface FriendsItem {\n  name?: string;\n  age?: string;\n}\ninterface Value {\n  name?: string;\n  age?: string;\n  friends?: FriendsItem[];\n}\n\nconst rules = Rule();\n\nexport const add = (\n  <svg viewBox=\"0 0 24 24\" width=\"16px\" height=\"16px\">\n   <path fill='#197AFA' d=\"M12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1ZM12 7C11.4477 7 11 7.44772 11 8V11H8C7.48716 11 7.06449 11.386 7.00673 11.8834L7 12C7 12.5523 7.44772 13 8 13H11V16C11 16.5128 11.386 16.9355 11.8834 16.9933L12 17C12.5523 17 13 16.5523 13 16V13H16C16.5128 13 16.9355 12.614 16.9933 12.1166L17 12C17 11.4477 16.5523 11 16 11H13V8C13 7.48716 12.614 7.06449 12.1166 7.00673L12 7Z\"></path>\n  </svg>\n);\n\nexport const cancel = (\n  <svg viewBox=\"0 0 24 24\" width=\"16px\" height=\"16px\">\n    <path fill='#EB4242' d=\"M12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1ZM17 12C17 12.5523 16.5523 13 16 13H8C7.44772 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11H16C16.5523 11 17 11.4477 17 12Z\"></path>\n  </svg>\n);\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({});\n\n  const handleChange = (v: Value) => {\n    setValue(v);\n  };\n\n  return (\n    <Form\n      value={value}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <Form.Item label='Name'>\n        <Input name='name' defaultValue='Harry Potter' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='Friends'>\n        <Form.FieldSet\n          name='friends'\n          empty={(insert) => {\n            return (\n              <Button type=\"primary\" mode=\"outline\" onClick={() => insert({ name: '' })}>\n                +\n                Add new friends\n              </Button>\n            );\n          }}\n          defaultValue={[{ name: 'Hermione Granger', age: '16' }, {}]}\n        >\n          {({ onAppend, onRemove }) => (\n            <Form.Item style={{ marginBottom: 12 }}>\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <Input\n                  name='name'\n                  placeholder='Name'\n                  title='Friend name'\n                  rules={[rules.required('Name is required')]}\n                  style={{ width: 180, marginInlineEnd: 8 }}\n                  clearable\n                />\n                <Input\n                  name='age'\n                  type='number'\n                  placeholder='Age'\n                  rules={[rules.required('Age is required')]}\n                  title='Friend age'\n                  style={{ width: 60 }}\n                  clearable\n                />\n                <a\n                  style={{ margin: '0 12px', lineHeight: 1, cursor: 'pointer' }}\n                  onClick={() => onAppend({ name: '', age: '16' })}\n                >\n                  {add}\n                </a>\n                <a style={{ lineHeight: 1, cursor: 'pointer' }} onClick={onRemove}>\n                  {cancel}\n                </a>\n              </div>\n            </Form.Item>\n          )}\n        </Form.FieldSet>\n      </Form.Item>\n      <Form.Item label='' style={{ marginTop: 20, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Array name",
      "description": "When the data is an array type, the name can pass in a corresponding array to process the single data in the array",
      "scenario": "basic",
      "code": "/**\n * cn - 数组 name\n *    -- 数据为数组类型的组件，name 可以传入一个相应的数组，来分别处理数组内的单个数据\n * en - Array name\n *    -- When the data is an array type, the name can pass in a corresponding array to process the single data in the array\n */\nimport React, { useState } from 'react';\nimport { produce } from 'immer';\nimport { Form, DatePicker, Input, Modal, Rule, TYPE } from 'shineout';\n\ntype Value = string[];\ntype FormProps = TYPE.Form.Props<Value>;\n\nconst NameInput = (props: FormProps) => {\n  const { value, onChange } = props;\n\n  const handleLastName = (v: string | undefined) => {\n    const newValue = produce(props.value, (draft: any[]) => {\n      draft[1] = v;\n    });\n    onChange!(newValue!);\n  };\n  const handleFirstName = (v: string | undefined) => {\n    const newValue = produce(props.value, (draft: any[]) => {\n      draft[0] = v;\n    });\n    onChange!(newValue!);\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center' }}>\n      <Input value={value![0]} width={120} onChange={handleFirstName} clearable />\n      <span style={{ margin: '0 4px' }}>-</span>\n      <Input value={value![1]} width={120} onChange={handleLastName} clearable />\n    </div>\n  );\n};\n\nconst rule = Rule();\n\nconst App: React.FC = () => {\n  const [initValue] = useState({\n    firstName: 'Harry',\n    lastName: 'Potter',\n    date: {\n      startDate: Date.now(),\n      endDate: Date.now() + 86400 * 5000,\n    },\n  });\n\n  return (\n    <Form\n      value={initValue}\n      onSubmit={(data) => {\n        Modal.info({ title: 'Form Data', content: <pre>{JSON.stringify(data, null, 2)}</pre> });\n      }}\n    >\n      <Form.Item label='Name'>\n        <Form.Field name={['firstName', 'lastName']}>\n          <NameInput />\n        </Form.Field>\n      </Form.Item>\n\n      <Form.Item label='Date'>\n        <DatePicker\n          range\n          rules={[rule.required]}\n          name={['date.startDate', 'date.endDate']}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Flow",
      "description": "For performance reasons, internal data of the Form is isolated and changing one component does not trigger another component to change",
      "scenario": "basic",
      "code": "/**\n * cn - 联动\n *    -- 在通常情况下，Form 不通过 value 和 onChange 方式处理数据，只是在 submit 的时候获取数据提交\n *    -- 这种情况下，需要联动时，可以使用 Flow 组件来实现。如果设置了 names 属性，只监听 names 包含的字段变化，如果没有设置，会监听 Form 内所有数据的变化\n * en - Flow\n *    -- For performance reasons, internal data of the Form is isolated and changing one component does not trigger another component to change\n *    -- If one component depends on another component's value, place it in the Flow component\n */\nimport React from 'react';\nimport { Form, Input, Checkbox, DatePicker, Rule } from 'shineout';\n\nconst rule = Rule();\n\nconst App: React.FC = () => (\n  <Form onSubmit={(d) => console.log(d)}>\n    <Form.Item label='First Name'>\n      <Input name='firstName' delay={0} defaultValue='Harry' clearable />\n    </Form.Item>\n\n    <Form.Item label='Last Name'>\n      <Input name='lastName' delay={0} defaultValue='Potter' clearable />\n    </Form.Item>\n\n    <Form.Item label='Full Name'>\n      <Form.Flow names={['firstName', 'lastName']}>\n        {(datum) => {\n          console.log('======================')\n          console.log('flow-1 rendered: >>')\n          console.log('======================')\n          return (\n            <div style={{ lineHeight: '32px' }}>{`${datum?.get('firstName')}-${datum?.get(\n              'lastName',\n            )}`}</div>\n          )\n        }}\n      </Form.Flow>\n    </Form.Item>\n\n    <Form.Item label='Password'>\n      <Input name='password' type='password' clearable />\n    </Form.Item>\n\n    <Form.Item label=''>\n      <Checkbox defaultValue name='showAge'>\n        Show age\n      </Checkbox>\n      <Checkbox name='showColors'>Show colors</Checkbox>\n      <Form.Flow names={[]}>\n        {(datum) => (\n          <Checkbox\n            name='dateRange'\n            beforeChange={() => datum?.set({ startDate: undefined, endDate: undefined })}\n          >\n            Date range\n          </Checkbox>\n        )}\n      </Form.Flow>\n    </Form.Item>\n\n    <Form.Flow names={['showAge']}>\n      {(datum) =>\n        datum?.get('showAge') && (\n          <Form.Item required label='Age' tip='between 18 and 60'>\n            <Input\n              name='age'\n              digits={0}\n              title='age'\n              type='number'\n              defaultValue='18'\n              style={{ width: 100 }}\n              clearable\n              rules={[rule.range(18, 60)]}\n            />\n          </Form.Item>\n        )\n      }\n    </Form.Flow>\n\n    <Form.Flow>\n      {(datum) =>\n        datum?.get('showColors') && (\n          <Form.Item required label='Favorite Colors'>\n            <Checkbox.Group\n              keygen={(c) => c}\n              name='colors'\n              data={['red', 'yellow', 'green', 'blue', 'pink']}\n            />\n          </Form.Item>\n        )\n      }\n    </Form.Flow>\n\n    <Form.Item label='Date' tip=''>\n      <Form.Flow names={['dateRange']}>\n        {(datum) =>\n          datum?.get('dateRange') === true ? (\n            <DatePicker key='r' range name={['startDate', 'endDate']} type='date' />\n          ) : (\n            <DatePicker key='s' name='startDate' type='date' />\n          )\n        }\n      </Form.Flow>\n    </Form.Item>\n\n    <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n      <Form.Button>Sumbit</Form.Button>\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
    },
    {
      "title": "Flow",
      "description": "For performance reasons, internal data of the Form is isolated and changing one component does not trigger another component to change",
      "scenario": "basic",
      "code": "/**\n * cn -\n *    -- Form 通过 value 和 onChange 方式处理数据后，依然想要只监听 names 包含的字段变化\n *    -- 这种情况下，设置Form.Flow的 watch 属性为 true\n * en - Flow\n *    -- For performance reasons, internal data of the Form is isolated and changing one component does not trigger another component to change\n *    -- If one component depends on another component's value, place it in the Flow component\n */\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState({});\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <Form value={value} onChange={setValue} onSubmit={(d) => console.log(d)}>\n      <Form.Item label='First Name'>\n        <Input name='firstName' delay={0} defaultValue='Harry' clearable />\n      </Form.Item>\n\n      <Form.Item label='Last Name'>\n        <Input name='lastName' delay={0} defaultValue='Potter' clearable />\n      </Form.Item>\n\n      <Form.Flow names={['firstName']} strict>\n        {\n          (datum) => {\n            // setCount(count + 1);\n            console.log('======================')\n            console.log('flow-2-rendered: >>')\n            console.log('======================')\n            return (\n              <Form.Item label='联动渲染'>\n                <div style={{ lineHeight: '32px' }}>{`${datum?.get('firstName')}-${datum?.get('lastName')}`} {count}</div>\n              </Form.Item>\n            );\n          }\n        }\n      </Form.Flow>\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button>Sumbit</Form.Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nexport default App;\n"
    },
    {
      "title": "Hooks",
      "description": "When using `Form.useForm` outside the Form component, you need to pass the `setForm` method to the Form component. When using it in a child component of the Form component, you don't need to pass it",
      "scenario": "basic",
      "code": "/**\n * cn - Hooks\n *    -- 在Form组件外使用`Form.useForm`时，需要将`setForm`方法传给Form组件，在Form组件内的子组件内使用时无需传递\n * en - Hooks\n *    -- When using `Form.useForm` outside the Form component, you need to pass the `setForm` method to the Form component. When using it in a child component of the Form component, you don't need to pass it\n */\n\nimport React, { useState } from 'react';\nimport { Form, Input, Checkbox, Rule, Button, TYPE, Grid, Alert } from 'shineout';\n\ninterface Value {\n  age?: string;\n  tel?: string;\n  name?: string;\n  IPv4?: string;\n  email?: string;\n  password?: string;\n  colors?: string[];\n}\ntype FormProps = TYPE.Form.Props<Value>;\ntype FormValue = FormProps['value'];\ntype RuleFunc = TYPE.Rule.ValidFunc;\n\nconst password = {\n  func: (value: string, _formData: any, _cb: any, props: { message: string; title: string }) =>\n    new Promise((resolve, reject) => {\n      console.log('password', props);\n      if (!/\\d+/.test(value) || !/[a-z]+/i.test(value)) {\n        reject(new Error(props.message.replace('{title}', props.title)));\n      } else {\n        resolve(true);\n      }\n    }),\n};\n\nconst isExist: RuleFunc = (value, _, callback) => {\n  if (value.indexOf('so') >= 0) callback(new Error(`\"${value}\" is existed.`));\n  else callback(true);\n};\n\nconst rules = Rule(\n  // validate function package\n  {\n    password,\n    isExist,\n  },\n  // language package\n  {\n    password: {\n      message: '{title} at least has one numeral and one letter',\n    },\n  },\n);\n\nconst Sub: React.FC = () => {\n  const form = Form.useFormInstance();\n\n  const validateForm = () => {\n    console.log('form in child: >>', form)\n    form.validateFields(['password', 'age']);\n  }\n\n  return (\n    <div>\n      <Button type=\"warning\" onClick={validateForm}>use hook in children</Button>\n    </div>\n  );\n}\n\nconst FormComp: React.FC = () => {\n  const [value, setValue] = useState<FormValue>(undefined);\n\n  const [form, setForm] = Form.useForm<FormValue>();\n\n  const validateForm = () => {\n    console.log('form in parent: >>', form)\n    form.validateFields(['email', 'name']);\n  }\n\n  return (\n    <Form\n      setForm={setForm}\n      value={value}\n      onChange={setValue}\n      onSubmit={(d) => console.log(d)}\n    >\n      <Form.Item required label='Email'>\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required, rules.isExist]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20), rules.password]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Age' tip='between 18 and 60'>\n        <Input\n          name='age'\n          title='Age'\n          style={{ width: 100 }}\n          type='integer'\n          clearable\n          rules={[rules.required, rules.integer, rules.range(18, 60)]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Tel'>\n        <Input\n          name='tel'\n          title='Tel'\n          rules={[rules.required, rules.regExp('^[\\\\d\\\\s ().-]+$')]}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item required label='IPv4'>\n        <Input name='IPv4' title='IP' rules={[rules.required, rules.ipv4]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Favorite Colors' tip='select your favorite colors'>\n        <Checkbox.Group\n          name='colors'\n          keygen={(d) => d}\n          data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']}\n          defaultValue={[]}\n          renderItem={(d) => <div style={{ width: 40 }}>{d}</div>}\n          style={{\n            display: 'flex',\n            gap: 12,\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n          }}\n          rules={[rules.required('At least select one favorite color'), rules.min(2), rules.max(3)]}\n        />\n      </Form.Item>\n\n      <Form.Item label=''>\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\n          <Sub></Sub>\n          <Button onClick={validateForm} type=\"danger\">use hook in parent</Button>\n        </div>\n        <div style={{marginTop: 32}}>\n          <Form.Button>Sumbit</Form.Button>\n          <Form.Reset>Reset</Form.Reset>\n        </div>\n      </Form.Item>\n    </Form>\n  );\n};\n\nconst App = () => (\n  <Grid gutter={36} style={{padding: 36}}>\n    <Grid>\n      <Alert type=\"info\" style={{ marginBottom: 12 }}>\n        表单1\n      </Alert>\n      <FormComp />\n    </Grid>\n    <Grid>\n      <Alert type=\"info\" style={{ marginBottom: 12 }}>\n        表单2\n      </Alert>\n      <FormComp />\n    </Grid>\n  </Grid>\n)\n\nexport default App;\n"
    },
    {
      "title": "Table usage",
      "description": "Form usage in table",
      "scenario": "basic",
      "code": "/**\n * cn - 表格中使用\n *    --  表单嵌套在表格中使用的场景\n * en - Table usage\n *    -- Form usage in table\n */\n\nimport { useState } from 'react';\nimport { Button, Form, Input, Table, TYPE, Rule, Link, Modal } from 'shineout';\nimport { ItemWithRequired} from './014-table-2';\n\ninterface TableRowData {\n  id?: number;\n  name?: string;\n  age?: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst rules = Rule();\n\nexport default () => {\n  const [formDatas, setFormDatas] = useState<TableRowData[]>([\n    { id: 1, name: 'Tom1', age: '18' },\n    { id: 2, name: 'Tom2', age: '28' },\n  ]);\n\n  const columns: TableColumnItem[] = [\n    { title: 'ID', width: 100, render: (d) => <div style={{ lineHeight: '32px' }}>{d.id}</div> },\n    {\n      title: <ItemWithRequired>Name</ItemWithRequired>,\n      width: 200,\n      render: (d) => {\n        return (\n          <ItemWithRequired>\n            <Form.Item style={{marginBottom: 0}}>\n              <Input\n                rules={[rules.required]}\n                value={d.name}\n                onChange={(v) => {\n                  setFormDatas(\n                    formDatas.map((item) => (item.id === d.id ? { ...item, name: v } : item)),\n                  );\n                }}\n              />\n            </Form.Item>\n          </ItemWithRequired>\n        );\n      },\n    },\n    {\n      title: 'Age',\n      width: 200,\n      render: (d) => {\n        return (\n          <Form.Item style={{marginBottom: 0}}>\n            <Input\n              rules={[rules.required]}\n              value={d.age}\n              onChange={(v) => {\n                setFormDatas(\n                  formDatas.map((item) => (item.id === d.id ? { ...item, age: v } : item)),\n                );\n              }}\n            />\n          </Form.Item>\n        );\n      },\n    },\n    {\n      title: 'Operation',\n      width: 100,\n      render: (d) => {\n        return (\n          <Link\n            type='danger'\n            onClick={() => {\n              setFormDatas(formDatas.filter((item) => item.id !== d.id));\n            }}\n            style={{ lineHeight: '32px' }}\n          >\n            Delete\n          </Link>\n        );\n      },\n    },\n  ];\n\n  return (\n    <Form value={formDatas} onChange={setFormDatas} onSubmit={() => console.log('submit:>>', JSON.stringify(formDatas, null, 2))}>\n      <div style={{ marginBottom: 12 }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            setFormDatas([\n              ...formDatas,\n              {\n                id: formDatas.length + 1,\n                name: `Tom${formDatas.length + 1}`,\n                age: `${(formDatas.length + 1) * 10 + 8}`,\n              },\n            ]);\n          }}\n        >\n          Add\n        </Button>\n\n        <Form.Submit onClick={() => {\n          Modal.info({\n            title: 'Form Data in Table',\n            content: <pre>{JSON.stringify(formDatas, null, 2)}</pre>,\n          })\n        }}>Submit</Form.Submit>\n      </div>\n\n      <Table data={formDatas} columns={columns} keygen='id' />\n    </Form>\n  );\n};\n"
    },
    {
      "title": "*    -- Form item use name to bind field",
      "description": "The `value` of Form needs to be an object, the value of the object is an array, and each item of the array is an object",
      "scenario": "basic",
      "code": "/**\n * cn -\n *    -- Form的表单项使用 name 绑定字段用法\n *    -- Form的`value`需要是一个对象，对象的属性值是数组，数组的每一项是一个对象\n * en -\n *    -- Form item use name to bind field\n *    -- The `value` of Form needs to be an object, the value of the object is an array, and each item of the array is an object\n */\n\nimport { useState } from 'react';\nimport { Button, Form, Input, Table, TYPE, Rule, Link, Modal } from 'shineout';\n\nexport function ItemWithRequired(props: { children: React.ReactNode }) {\n  return (\n    <div style={{position: 'relative'}}>\n      <span style={{ color: '#EB4242', position: 'absolute', top: 0, left: -2, transform: 'translate(-100%, 0)' }}>*</span>\n      {props.children}\n    </div>\n  )\n}\ninterface TableRowData {\n  id?: number;\n  name?: string;\n  age?: string;\n}\n\ninterface FormTableValues {\n  values: TableRowData[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst rules = Rule();\n\nexport default () => {\n  const [formDatas, setFormDatas] = useState<FormTableValues>({\n    values:[\n      { id: 1, name: 'Tom1', age: '18' },\n      { id: 2, name: 'Tom2', age: '28' },\n    ]\n  });\n\n  const columns: TableColumnItem[] = [\n    { title: 'ID', width: 100, render: (d) => <div style={{ lineHeight: '32px' }}>{d.id}</div> },\n    {\n      title: <ItemWithRequired>Name</ItemWithRequired>,\n      width: 200,\n      render: (d, index) => {\n        return (\n          <ItemWithRequired>\n            <Form.Item style={{marginBottom: 0}}>\n              <Input\n                rules={[rules.required]}\n                name={`values[${index}].name`}\n              />\n            </Form.Item>\n          </ItemWithRequired>\n        );\n      },\n    },\n    {\n      title: 'Age',\n      width: 200,\n      render: (d, index) => {\n        return (\n          <Form.Item style={{marginBottom: 0}}>\n            <Input\n              rules={[rules.required]}\n              name={`values[${index}].age`}\n            />\n          </Form.Item>\n        );\n      },\n    },\n    {\n      title: 'Operation',\n      width: 100,\n      render: (d, index) => {\n        return (\n          <Link\n            type='danger'\n            onClick={() => {\n              setFormDatas({\n                values: formDatas.values.filter((item, idx) => idx !== index),\n              });\n            }}\n            style={{ lineHeight: '32px' }}\n          >\n            Delete\n          </Link>\n        );\n      },\n    },\n  ];\n\n  return (\n    <Form value={formDatas} onChange={setFormDatas} onSubmit={() => console.log('submit:>>', JSON.stringify(formDatas, null, 2))}>\n      <div style={{ marginBottom: 12 }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            setFormDatas({\n              values: [\n                ...formDatas.values,\n                {\n                  id: formDatas.values.length + 1,\n                  name: `Tom${formDatas.values.length + 1}`,\n                  age: `${(formDatas.values.length + 1) * 10 + 8}`,\n                },\n              ]\n            });\n          }}\n        >\n          Add\n        </Button>\n\n        <Form.Submit onClick={() => {\n          Modal.info({\n            title: 'Form Data in Table',\n            content: <pre>{JSON.stringify(formDatas, null, 2)}</pre>,\n          })\n        }}>Submit</Form.Submit>\n      </div>\n\n      <Table data={formDatas.values} columns={columns} keygen='id' />\n    </Form>\n  );\n};\n"
    },
    {
      "title": "initValidate",
      "description": "* en - initValidate",
      "scenario": "basic",
      "code": "/**\n * cn - initValidate\n *    --\n * en - initValidate\n *    --\n */\nimport { Form, Input, Button } from 'shineout';\nimport React from 'react';\n\nexport default () => {\n  const [v, setV] = React.useState({});\n  return (\n    <div>\n      <Form\n        initValidate\n        value={v}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          setV(v);\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='name'>\n          <Input\n            rules={[\n              { required: true, message: 'name is required' },\n              { max: 10, message: 'name length must less than 10' },\n            ]}\n            name={'name'}\n            clearable\n            placeholder='please input name'\n          />\n        </Form.Item>\n        <Form.Item label='email'>\n          <Input\n            name={'email'}\n            rules={[{ required: true, message: 'email is required' }]}\n            clearable\n            placeholder='please input email'\n          />\n        </Form.Item>\n\n        <Form.Item label=''>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n          <Button\n            onClick={() => {\n              setV({ name: 'aelsssssllonnnnggggggg' });\n            }}\n          >\n            Automatically verify modified fields after changing values\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
    },
    {
      "title": "size",
      "description": "The size of the form element",
      "scenario": "basic",
      "code": "/**\n * cn - size\n *    -- 表单元素的尺寸\n * en - size\n *    -- The size of the form element\n */\nimport React from 'react';\nimport { Form, Input, Radio, Textarea, TYPE } from 'shineout';\n\ntype RadioSize = TYPE.Radio.GroupProps<any, any>['size'];\n\nconst App: React.FC = () => {\n  const [size, setSize] = React.useState<RadioSize>('default');\n  return (\n    <>\n      <Radio.Group data={['default', 'small', 'large']} keygen value={size} onChange={setSize} />\n      <Form disabled size={size}>\n        <Form.Item label='Email'>\n          <Input name='email' />\n        </Form.Item>\n        <Form.Item label='Email2'>\n          <Input />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' />\n        </Form.Item>\n\n        <Form.Item label='Name'>\n          <Input.Group style={{ width: 300 }} disabled>\n            <Input name='firstName' placeholder='First Name' />\n            -\n            <Input name='lastName' placeholder='Last Name' />\n          </Input.Group>\n        </Form.Item>\n\n        <Form.Item label='Age'>\n          <Input.Number\n            style={{ width: 100 }}\n            name='age'\n            type='number'\n            digits={0}\n            defaultValue='0'\n          />\n        </Form.Item>\n        <Form.Item label='address'>\n          <Textarea rows={2} name='address' defaultValue='xxx' />\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Test Form",
      "description": "Test Form",
      "scenario": "basic",
      "code": "/**\n * cn - 调试用基础 Form\n *    -- 调试用的，在这个例子基础上随便改吧\n * en - Test Form\n *    -- Test Form\n */\nimport { Form, Input } from 'shineout';\n\nexport default () => {\n  return (\n    <Form onSubmit={(v) => console.log(v)}>\n      <Input name='name' trim></Input>\n\n      <Form.Submit>Submit</Form.Submit>\n      <Form.Reset>Reset</Form.Reset>\n    </Form>\n  );\n};\n"
    },
    {
      "title": "FieldSet (Loop)",
      "description": "* en - FieldSet (Loop)",
      "scenario": "basic",
      "code": "/**\n * cn - 绑定重复name\n *    --\n * en - FieldSet (Loop)\n */\nimport React, { useState } from 'react';\nimport { Button, DatePicker, Form, Input, Rule } from 'shineout';\n\n\ninterface Value {\n  id?: string;\n  case?: {\n    attachments: {\n      name: string;\n    }[];\n  };\n}\n\n\nconst ArrayDisplayComponent = ({ value }: {value: {name: string}[]}) => {\n  return value ? value.map((d, index) => <p key={index}>{d.name}</p>) : null;\n}\n\nconst ArrayHandleComponent = ({ value, onChange }: any) => {\n  console.log('ArrayHandleComponent value: >>', value)\n\n  const addItem = () => {\n    onChange([...(value || []), { name: `new item${value?.length || 0}` }])\n  }\n\n  const  removeItem = () => {\n    if(!value) return\n    onChange(value.slice(0, value.length - 1))\n  }\n\n  return <Button.Group>\n    <Button onClick={addItem}>添加条目</Button>\n    <Button onClick={removeItem}>删除条目</Button>\n  </Button.Group>\n}\n\nconst rule = Rule()\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({case: {attachments: [{name: 'item1'}, {name: 'item2'}]}});\n\n  const handleChange = (v: Value) => {\n    setValue(v);\n  };\n\n  return (\n    <Form\n      value={value}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <Form.Item>\n        <Input name=\"id\" rules={[rule.required()]} placeholder='有校验的字段' />\n      </Form.Item>\n      <Form.Item>\n        <Input name=\"name\" placeholder='无校验的字段' />\n      </Form.Item>\n      <Form.Item>\n        <DatePicker name={['start', 'end']} range rules={[rule.required()]} placeholder='name是数组的' />\n      </Form.Item>\n      <Form.Field name=\"case.attachments\" rules={[rule.required()]}>\n        {/* @ts-ignore */}\n        <ArrayDisplayComponent />\n      </Form.Field>\n      <Form.Field name=\"case.attachments\" rules={[rule.required()]}>\n        {/* @ts-ignore */}\n        <ArrayHandleComponent />\n      </Form.Field>\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Form Nested",
      "description": "Form nested",
      "scenario": "basic",
      "code": "/**\n * cn - Form nested\n *    -- 表单嵌套\n * en - Form Nested\n *    -- Form nested\n */\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\ntype ValueType = any;\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Form<ValueType>\n        labelWidth={100}\n        name=\"form1\"\n        onSubmit={(v) => console.log('parent form submit:>>', JSON.stringify(v, null, 2))}\n        onChange={(v) => {\n          console.log('parent form onChange:>>', JSON.stringify(v, null, 2));\n        }}\n        onReset={() => {\n          console.log('form1 reset');\n        }}\n      >\n        <Form.Item label='parent-input1'>\n          <Input name='parent-input1' />\n        </Form.Item>\n\n        <Form.Item label='parent-input2'>\n          <Input name='parent-input2' />\n        </Form.Item>\n\n        <Form\n          name='child-form'\n          onSubmit={(v) => console.log('child form submit:>>', JSON.stringify(v, null, 2))}\n          onReset={() => {\n            console.log('form2 reset');\n          }}\n          onChange={(v) => {\n            console.log('child form onChange:>>', JSON.stringify(v, null, 2));\n          }}\n          style={{ padding: 12, margin: 12, background: '#f0f0f0' }}\n        >\n          <Form.Item label='child-input1'>\n            <Input name='child-input1' />\n          </Form.Item>\n\n          <Form.Item labelAlign='right' label=''>\n            <Form.Submit>Child Form Submit</Form.Submit>\n            <Form.Reset type='warning'>Child Form Reset</Form.Reset>\n          </Form.Item>\n        </Form>\n\n        <Form.Item labelAlign='right' label=''>\n          <Form.Submit>Parent Form Submit</Form.Submit>\n          <Form.Reset type='warning'>Parent Form Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n\n      {/* <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          console.log('form1');\n        }}\n        onReset={() => {\n          console.log('form1 reset');\n        }}\n      >\n        <input type='text' name='test1' />\n\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            console.log('form1');\n          }}\n          onReset={(e) => {\n            e.preventDefault();\n            console.log('form2 reset');\n          }}\n        >\n          <input type='text' name='test2' />\n          <button type='submit'>submit2</button>\n          <button type='reset'>reset2</button>\n        </form>\n\n        <button type='submit'>submit1</button>\n        <button type='reset'>reset1</button>\n      </form> */}\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Test Form",
      "description": "Test Form",
      "scenario": "basic",
      "code": "/**\n * cn - 测试FieldSet销毁\n *    -- 调试用的，在这个例子基础上随便改吧\n * en - Test Form\n *    -- Test Form\n */\nimport { useEffect, useRef } from 'react';\nimport { Button, Form, Input } from 'shineout';\n\nconst CustomInput = (props) => {\n  useEffect(() => {\n    return () => {\n      console.count('destroy');\n    };\n  }, []);\n  return <Input {...props} />;\n};\n\n\nconst AA = () => {\n  const formRef = useRef();\n\n  return (\n    <>\n      <Button onClick={() => formRef.current.set({ list: [{ a: 1 }] })}>set form value</Button>\n      <Form\n        formRef={(ref) => {\n          formRef.current = ref;\n        }}\n      >\n        <Form.FieldSet name='list'>\n          {({}) => (\n            <Form.Field name='a'>\n              <CustomInput />\n            </Form.Field>\n          )}\n        </Form.FieldSet>\n      </Form>\n    </>\n  );\n};\n\nexport default AA;\n"
    },
    {
      "title": "FieldSet set",
      "description": "Use formRef.set to modify the value of FieldSet",
      "scenario": "basic",
      "code": "/**\n * cn - FieldSet set\n *    -- 使用formRef.set修改FieldSet的值\n * en - FieldSet set\n *    -- Use formRef.set to modify the value of FieldSet\n */\nimport React, { useState } from 'react';\nimport { Button, Form, Input, Rule } from 'shineout';\n\ninterface FriendsItem {\n  name?: string;\n  age?: string;\n}\ninterface Value {\n  name?: string;\n  age?: string;\n  friends?: FriendsItem[];\n}\n\nconst rules = Rule();\n\nconst add = (\n  <svg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <g clipPath='url(#clip0_2710_88158)'>\n      <path\n        d='M8.00008 0.666626C12.0502 0.666626 15.3334 3.94987 15.3334 7.99996C15.3334 12.05 12.0502 15.3333 8.00008 15.3333C3.94999 15.3333 0.666748 12.05 0.666748 7.99996C0.666748 3.94987 3.94999 0.666626 8.00008 0.666626ZM8.00008 4.66663C7.63189 4.66663 7.33341 4.9651 7.33341 5.33329V7.33329H5.33341C4.99152 7.33329 4.70974 7.59065 4.67123 7.92221L4.66675 7.99996C4.66675 8.36815 4.96522 8.66663 5.33341 8.66663H7.33341V10.6666C7.33341 11.0085 7.59077 11.2903 7.92233 11.3288L8.00008 11.3333C8.36827 11.3333 8.66675 11.0348 8.66675 10.6666V8.66663H10.6667C11.0086 8.66663 11.2904 8.40927 11.3289 8.07771L11.3334 7.99996C11.3334 7.63177 11.0349 7.33329 10.6667 7.33329H8.66675V5.33329C8.66675 4.9914 8.40939 4.70962 8.07783 4.67111L8.00008 4.66663Z'\n        fill='#197AFA'\n      />\n    </g>\n    <defs>\n      <clipPath id='clip0_2710_88158'>\n        <rect width='16' height='16' fill='white' />\n      </clipPath>\n    </defs>\n  </svg>\n);\n\nconst cancel = (\n  <svg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <g clipPath='url(#clip0_2710_88189)'>\n      <path\n        d='M8.00008 0.666626C3.94999 0.666626 0.666748 3.94987 0.666748 7.99996C0.666748 12.05 3.94999 15.3333 8.00008 15.3333C12.0502 15.3333 15.3334 12.05 15.3334 7.99996C15.3334 3.94987 12.0502 0.666626 8.00008 0.666626ZM11.3334 7.99996C11.3334 8.36815 11.0349 8.66663 10.6667 8.66663H5.33341C4.96522 8.66663 4.66675 8.36815 4.66675 7.99996C4.66675 7.63177 4.96522 7.33329 5.33341 7.33329H10.6667C11.0349 7.33329 11.3334 7.63177 11.3334 7.99996Z'\n        fill='#EB4242'\n      />\n    </g>\n    <defs>\n      <clipPath id='clip0_2710_88189'>\n        <rect width='16' height='16' fill='white' />\n      </clipPath>\n    </defs>\n  </svg>\n);\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({});\n  const [form, setForm] = Form.useForm();\n\n  const handleChange = (v: Value) => {\n    console.log('======================')\n    console.log('handleFormChange: >>', v)\n    console.log('======================')\n    setValue(v);\n  };\n\n  const setFriends = () => {\n    form.set({\n      friends: [{name: '123', age: '456'}]\n    })\n  }\n\n  const getValues = () => {\n    console.log('getvalues friends: >>', JSON.stringify(form.getValue('friends'), null, 2))\n    console.log('getvalues all: >>', JSON.stringify(form.getValue(), null, 2))\n  }\n\n  // console.log('======================')\n  // console.log('formValue: >>', value)\n  // console.log('======================')\n  return (\n    <Form\n      value={value}\n      setForm={setForm}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <Button onClick={setFriends}>set friends</Button>\n      <Button onClick={getValues}>get values</Button>\n      <Form.Item label='Name'>\n        <Input name='name' defaultValue='Harry Potter' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age' defaultValue='20' clearable />\n      </Form.Item>\n      {/* <Form.FieldSet name='abc'> */}\n      <Form.Item label='Friends'>\n        <Form.FieldSet\n          name='friends'\n          empty={(insert) => {\n            return (\n              <button type={'button'} onClick={() => insert({ name: '' })}>\n                Add new friends\n              </button>\n            );\n          }}\n          defaultValue={[{ name: 'Hermione Granger', age: '16' }]}\n        >\n          {({ onAppend, onRemove }) => (\n            <Form.Item style={{ marginBottom: 12 }}>\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <Input\n                  name='name'\n                  placeholder='Name'\n                  title='Friend name'\n                  rules={[rules.required('Name is required')]}\n                  style={{ width: 180, marginInlineEnd: 8 }}\n                  clearable\n                />\n                <Input\n                  name='age'\n                  type='number'\n                  placeholder='Age'\n                  rules={[rules.required('Age is required')]}\n                  title='Friend age'\n                  style={{ width: 60 }}\n                  clearable\n                />\n                <a\n                  style={{ margin: '0 12px', lineHeight: 1, cursor: 'pointer' }}\n                  onClick={() => onAppend({ name: '', age: '16' })}\n                >\n                  {add}\n                </a>\n                <a style={{ lineHeight: 1, cursor: 'pointer' }} onClick={onRemove}>\n                  {cancel}\n                </a>\n              </div>\n            </Form.Item>\n          )}\n        </Form.FieldSet>\n      </Form.Item>\n      {/* </Form.FieldSet> */}\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Test Form",
      "description": "Test Form",
      "scenario": "basic",
      "code": "/**\n * cn - form onchange\n *    -- 调试用的，在这个例子基础上随便改吧\n * en - Test Form\n *    -- Test Form\n */\nimport { Form, Input, DatePicker, Select } from 'shineout';\nimport { useState } from 'react';\n\nexport default () => {\n  const data = [1, 2];\n  const [formValue, setFormValue] = useState<Record<string, any>>({});\n\n  return (\n    <div>\n      <Form\n        value={formValue}\n        onChange={(vv) => {\n          console.log(111, vv);\n          setFormValue(vv);\n        }}\n      >\n        <Form.Item label='时间类型'>\n          <Select\n            name='timeType'\n            clearable\n            data={data}\n            keygen\n            onChange={(v) => {\n              const tempValue = {\n                ...formValue,\n                effectiveTimeEnd: '',\n                timeType: v,\n              };\n              // 为红色则name赋值\n              if (v === 1) {\n                console.log(222);\n                tempValue.effectiveTimeEnd = '2099-12-31 23:59:00';\n              }\n              console.log(333, tempValue);\n              setFormValue(tempValue);\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='生效时间'>\n          {formValue.timeType === 1 ? (\n            <Input.Group style={{ width: '100%' }}>\n              <DatePicker\n                type='datetime'\n                format='YYYY-MM-DD HH:mm'\n                defaultTime='00:00:00'\n                name='effectiveTimeBegin'\n                placeholder={'开始时间'}\n              />\n              <div style={{ display: 'flex', alignItems: 'center', padding: '0 8px' }}>~</div>\n              <div style={{ padding: '5px 8px' }}>{formValue.effectiveTimeEnd?.slice(0, 16)}</div>\n            </Input.Group>\n          ) : (\n            <DatePicker\n              type='datetime'\n              range\n              name={['effectiveTimeBegin', 'effectiveTimeEnd']}\n              reserveAble\n              defaultTime={['00:00:00', '23:59:00']}\n              placeholder={['开始时间', '结束时间']}\n              format='YYYY-MM-DD HH:mm'\n            />\n          )}\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
    },
    {
      "title": "Test Form",
      "description": "Test Form",
      "scenario": "basic",
      "code": "/**\n * cn - Form嵌套提交\n *    -- 调试用的，在这个例子基础上随便改吧\n * en - Test Form\n *    -- Test Form\n */\nimport React from 'react';\nimport { Form, Input, Switch, Button, Modal } from 'shineout';\n\nexport default () => {\n  const [parentForm, setParentForm] = React.useState({\n    parent1: '1',\n    parent2: '2',\n    showChild: true,\n  });\n  const [childForm, setChildForm] = React.useState({ child1: '1' });\n\n  const [modalVisible, setModalVisible] = React.useState(false);\n\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setModalVisible(true);\n        }}\n      >\n        打开Modal\n      </Button>\n      <Modal\n        title='嵌套Form提交'\n        visible={modalVisible}\n        footer={\n          <>\n            <Modal.Submit type='primary' data-apmclick='mindmap-用例列表的用例抽屉提交'>\n              保存\n            </Modal.Submit>\n            <Button\n              onClick={() => {\n                setModalVisible(false);\n              }}\n            >\n              取消\n            </Button>\n          </>\n        }\n      >\n        <Form\n          value={parentForm}\n          onChange={setParentForm}\n          onSubmit={(v) => console.log('parent form submit:>>', v)}\n        >\n          <h4>parent form:</h4>\n          <Input name='parent1' />\n          <Input name='parent2' />\n          <Switch name='showChild' />\n\n          {parentForm.showChild && (\n            <Form value={childForm} onChange={setChildForm}>\n              <h4>child form:</h4>\n              <Input name='child1' trim />\n            </Form>\n          )}\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n"
    },
    {
      "title": "scrollToError",
      "description": "Set the scrollToError property, when an error occurs inside the table, automatically scroll to the error row",
      "scenario": "basic",
      "code": "/**\n * cn - scrollToError\n *    -- 设置 scrollToError 属性，当表格内部发生错误时，自动滚动到错误行\n * en - scrollToError\n *    -- Set the scrollToError property, when an error occurs inside the table, automatically scroll to the error row\n */\nimport React, { useState } from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\ninterface FriendsItem {\n  name?: string;\n  age?: string;\n}\ninterface Value {\n  name?: string;\n  age?: string;\n  friends?: FriendsItem[];\n}\n\nconst rules = Rule();\n\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({});\n\n  const handleChange = (v: Value) => {\n    setValue(v);\n  };\n\n  return (\n    <div style={{ height: '300px', overflow: 'scroll'}} id=\"scrollContainer\">\n    <Form\n      value={value}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n      scrollParent={() => document.getElementById('scrollContainer')}\n      scrollToError\n    >\n      <Form.Submit>Submit</Form.Submit>\n      <Form.Item label='Name'>\n        <Input name='name' defaultValue='Harry Potter' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age1' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age2' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age3' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age4' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age5' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age6' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age7' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age8' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age9' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age10' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age11' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age12' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age13' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age14' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age15' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input name='age16' clearable rules={[rules.required()]} />\n      </Form.Item>\n      <Form.Item label='' style={{ marginTop: 20, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n    </div>\n\n  );\n};\n\nexport default App;\n"
    }
  ],
  "subComponents": [
    {
      "name": "Item",
      "description": "表单项组件，用于包装表单控件并提供标签、错误提示等功能。每个表单控件都应该被 Form.Item 包裹，以便正确显示标签和校验信息",
      "whenCn": "需要为表单控件添加标签、错误提示、必填标记等界面元素时使用。这是最常用的表单布局组件，适合包装 Input、Select、DatePicker 等表单控件",
      "whenEn": "Use when you need to add UI elements like labels, error messages, and required marks to form controls. This is the most commonly used form layout component, suitable for wrapping Input, Select, DatePicker and other form controls"
    },
    {
      "name": "Field",
      "description": "表单字段组件，用于创建自定义的表单控件。提供了表单数据绑定、校验等功能，适用于封装复杂的自定义表单组件",
      "whenCn": "需要创建自定义表单控件或封装复杂的表单逻辑时使用。适合将非标准表单组件（如自定义的颜色选择器、代码编辑器等）接入表单系统",
      "whenEn": "Use when you need to create custom form controls or encapsulate complex form logic. Suitable for integrating non-standard form components (like custom color pickers, code editors, etc.) into the form system"
    },
    {
      "name": "FieldSet",
      "description": "表单字段集组件，用于管理一组相关的表单字段。适用于处理对象或数组类型的表单数据，如动态表单列表、嵌套对象等复杂场景",
      "whenCn": "需要处理动态表单列表、嵌套对象或数组数据时使用。典型场景包括：动态添加/删除表单项、编辑用户列表、管理多个地址信息等",
      "whenEn": "Use when you need to handle dynamic form lists, nested objects or array data. Typical scenarios include: dynamically adding/removing form items, editing user lists, managing multiple address information, etc."
    },
    {
      "name": "Flow",
      "description": "表单流程组件，用于监听表单数据变化并执行相应的副作用。适用于实现表单联动、条件渲染等场景",
      "whenCn": "需要实现表单联动、条件渲染或监听表单数据变化时使用。例如：根据选择的国家显示不同的省份列表、根据用户类型显示不同的表单字段等",
      "whenEn": "Use when you need to implement form linkage, conditional rendering or listen to form data changes. For example: showing different province lists based on selected country, displaying different form fields based on user type, etc."
    },
    {
      "name": "Button",
      "description": "表单按钮组件，htmlType=\\\"button\\\"。防止用户在表单输入框中按回车键时意外提交表单。用户必须显式点击按钮才能提交表单。内部调用 formFunc.submit() 以更好地控制提交逻辑",
      "whenCn": "需要防止回车键意外提交表单，或需要在提交前执行自定义逻辑（如确认对话框）时使用。适合复杂表单或需要额外验证步骤的场景",
      "whenEn": "Use when you need to prevent accidental form submission via Enter key, or need to execute custom logic before submission (like confirmation dialogs). Suitable for complex forms or scenarios requiring additional validation steps"
    },
    {
      "name": "Submit",
      "description": "表单提交按钮组件，htmlType=\\\"submit\\\"。使用浏览器原生提交行为。当用户在任何表单输入框中按回车键时，会自动触发此按钮。适用于希望支持回车提交的简单表单",
      "whenCn": "需要支持回车键快速提交表单时使用。适合登录表单、搜索表单等简单场景，用户体验更流畅",
      "whenEn": "Use when you need to support quick form submission via Enter key. Suitable for login forms, search forms and other simple scenarios for smoother user experience"
    },
    {
      "name": "Reset",
      "description": "表单重置按钮组件，htmlType=\\\"reset\\\"。点击时将所有表单字段重置为初始值。适用于需要让用户快速恢复初始状态的复杂表单",
      "whenCn": "需要提供重置表单功能时使用。适合复杂表单或编辑表单，让用户可以快速恢复到初始状态或默认值",
      "whenEn": "Use when you need to provide form reset functionality. Suitable for complex forms or edit forms, allowing users to quickly restore to initial state or default values"
    }
  ],
  "version": "3.7.10-beta.3",
  "notes": {},
  "apiSummary": {
    "totalProps": 28,
    "requiredProps": 0,
    "propsWithWhen": 0,
    "examplesCount": 33
  },
  "subComponentApis": {
    "Item": {
      "whenCn": "需要为表单控件添加标签、错误提示、必填标记等界面元素时使用。这是最常用的表单布局组件，适合包装 Input、Select、DatePicker 等表单控件",
      "whenEn": "Use when you need to add UI elements like labels, error messages, and required marks to form controls. This is the most commonly used form layout component, suitable for wrapping Input, Select, DatePicker and other form controls",
      "description": "表单项组件，用于包装表单控件并提供标签、错误提示等功能。每个表单控件都应该被 Form.Item 包裹，以便正确显示标签和校验信息",
      "props": [
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "自定义类名"
        },
        {
          "name": "style",
          "type": "CSSProperties",
          "required": false,
          "description": "自定义样式"
        },
        {
          "name": "label",
          "type": "ReactNode | LabelConfig",
          "required": false,
          "description": "未定义时，标签不会 render，也不会占位。如果无内容需要占位，使用空字符串 \\\"\\\"。"
        },
        {
          "name": "tip",
          "type": "ReactNode",
          "required": false,
          "description": "提示文案"
        },
        {
          "name": "required",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "必填标记，纯展示用，不会触发校验"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "表单元素"
        },
        {
          "name": "labelWidth",
          "type": "string | number",
          "required": false,
          "defaultValue": "140px",
          "description": "标签宽度，labelAlign 为 \\\"top\\\" 时无效。统一设置表单项标签的宽度。可以是具体像素值（如 \\\"140px\\\"）或百分比（如 \\\"30%\\\"）。当标签顶部对齐时此配置无效。用于保持表单整齐的视觉效果，确保所有表单项的输入区域左对齐"
        },
        {
          "name": "labelAlign",
          "type": "\"left\" | \"right\" | \"top\"",
          "required": false,
          "description": "默认为空，跟随主题样式。标签的对齐方式。\\\"left\\\" 左对齐，\\\"right\\\" 右对齐，\\\"top\\\" 顶部对齐。不同的对齐方式适用于不同的表单布局需求：\\\"right\\\" 适合传统表单布局，\\\"top\\\" 适合移动端或紧凑布局，\\\"left\\\" 适合特殊设计需求"
        },
        {
          "name": "labelVerticalAlign",
          "type": "\"top\" | \"bottom\" | \"middle\"",
          "required": false,
          "defaultValue": "\\\"top\\\"",
          "description": "默认顶部对齐。标签的垂直对齐方式。当标签和输入框在同一行时（labelAlign 为 \\\"left\\\" 或 \\\"right\\\"），控制标签相对于输入框的垂直位置。\\\"top\\\" 与输入框顶部对齐，\\\"middle\\\" 居中对齐，\\\"bottom\\\" 与输入框底部对齐"
        },
        {
          "name": "keepErrorHeight",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "单行错误提示不撑开页面高度。保持错误提示高度固定，避免错误信息出现/消失时页面抖动。开启后会预留错误信息的显示空间，确保表单高度稳定。适用于对布局稳定性要求较高的场景，如表单项较多的长表单。注意：当 keepErrorBelow 为 true 时，此配置会失效"
        },
        {
          "name": "keepErrorBelow",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "是否保持错误信息在提示信息下方。控制错误信息的显示位置。开启后错误信息始终显示在表单项的 tip 属性下方，保持布局的一致性。关闭时错误信息可能会覆盖 tip 信息。适用于同时需要显示提示信息和错误信息的场景。注意：开启后会使 keepErrorHeight 失效",
          "version": "3.7.0"
        },
        {
          "name": "inline",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "是否水平布局。将表单项横向排列，适用于简单的单行表单或筛选表单。开启后表单项会在同一行显示，自动换行。通常用于搜索条件、筛选器等需要节省垂直空间的场景"
        },
        {
          "name": "colon",
          "type": "ReactNode",
          "required": false,
          "defaultValue": "false",
          "description": "统一控制所有表单项标签后是否显示冒号。可以是布尔值（true 显示默认冒号 \\\":\\\"）或自定义的 ReactNode（如 \\\"：\\\"、\\\"->\\\"等）。Form.Item 上的 colon 属性优先级更高，可以覆盖此全局设置",
          "version": "3.6.0"
        }
      ]
    },
    "Field": {
      "whenCn": "需要创建自定义表单控件或封装复杂的表单逻辑时使用。适合将非标准表单组件（如自定义的颜色选择器、代码编辑器等）接入表单系统",
      "whenEn": "Use when you need to create custom form controls or encapsulate complex form logic. Suitable for integrating non-standard form components (like custom color pickers, code editors, etc.) into the form system",
      "description": "表单字段组件，用于创建自定义的表单控件。提供了表单数据绑定、校验等功能，适用于封装复杂的自定义表单组件",
      "props": [
        {
          "name": "name",
          "type": "string | string[]",
          "required": true,
          "description": "绑定到表单数据的字段名称。支持点表示法访问嵌套对象（如 \\\"user.name\\\"）或数组语法（如 [\\\"user\\\", \\\"name\\\"]）。用于标识和管理特定的表单字段数据"
        },
        {
          "name": "reserveAble",
          "type": "boolean",
          "required": false,
          "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
        },
        {
          "name": "defaultValue",
          "type": "T",
          "required": false,
          "description": "表单首次渲染时字段的初始值。仅在组件初始化时生效，后续更改不会更新。常用于为新记录设置初始状态或提供默认值"
        },
        {
          "name": "rules",
          "type": "RuleItem[]",
          "required": false,
          "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
        },
        {
          "name": "children",
          "type": "((opts: object) => ReactNode) | ReactNode",
          "required": true,
          "description": "要渲染的表单控件。可以是具有 value/onChange 属性的 React 元素，或渲染函数。使用渲染函数时，会接收包含以下属性的对象：value（当前字段值）、onChange（值变更处理器）、error（校验错误）、disabled（继承自表单）、status（字段状态）。适用于自定义组件、第三方控件或复杂输入场景"
        },
        {
          "name": "onError",
          "type": "((error?: Error ) => void)",
          "required": false,
          "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
        },
        {
          "name": "bind",
          "type": "string[]",
          "required": false,
          "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
        }
      ]
    },
    "FieldSet": {
      "whenCn": "需要处理动态表单列表、嵌套对象或数组数据时使用。典型场景包括：动态添加/删除表单项、编辑用户列表、管理多个地址信息等",
      "whenEn": "Use when you need to handle dynamic form lists, nested objects or array data. Typical scenarios include: dynamically adding/removing form items, editing user lists, managing multiple address information, etc.",
      "description": "表单字段集组件，用于管理一组相关的表单字段。适用于处理对象或数组类型的表单数据，如动态表单列表、嵌套对象等复杂场景",
      "props": [
        {
          "name": "name",
          "type": "string",
          "required": true,
          "description": "绑定到表单数据的字段集名称。用于标识和管理一组相关的表单字段或数组数据。支持点表示法访问嵌套对象（如 \\\"users\\\"、\\\"company.employees\\\"）"
        },
        {
          "name": "children",
          "type": "((opts: object) => ReactNode) |ReactNode",
          "required": true,
          "description": "在字段集内渲染的内容。支持两种模式：\\n\\n**对象模式**（React 元素）：用于管理嵌套对象字段。子字段名称会自动加上字段集名称前缀。适用于分组相关表单字段，如地址、联系信息或用户资料等部分。\\n\\n**数组模式**（渲染函数）：用于管理动态数组数据。函数接收包含以下属性的对象：\\n- `list`：该字段集的完整数组数据\\n- `value`：当前索引位置的数据项\\n- `index`：当前数据项在数组中的索引\\n- `error`：当前数据项的校验错误\\n- `onChange`：更新当前数据项\\n- `onInsert`：在当前位置之前插入新数据项\\n- `onAppend`：在当前位置之后插入新数据项\\n- `onRemove`：从数组中移除当前数据项\\n\\n适用于动态列表、可重复表单部分或可编辑表格。"
        },
        {
          "name": "empty",
          "type": "((insert: (val: any) => void) => ReactNode)",
          "required": false,
          "description": "数组为空时显示的内容。仅在数组模式下（children 为函数时）有效。渲染函数接收 `insert` 回调来添加第一个数据项。适用于显示“添加第一个项目”按钮、空状态提示或动态列表的引导信息"
        },
        {
          "name": "defaultValue",
          "type": "T",
          "required": false,
          "description": "默认值"
        },
        {
          "name": "reserveAble",
          "type": "boolean",
          "required": false,
          "description": "设置为 true 组件卸载后表单不自动删除数据"
        },
        {
          "name": "rules",
          "type": "RuleItem[]",
          "required": false,
          "description": "校验规则 详见 Rule"
        }
      ]
    },
    "Flow": {
      "whenCn": "需要实现表单联动、条件渲染或监听表单数据变化时使用。例如：根据选择的国家显示不同的省份列表、根据用户类型显示不同的表单字段等",
      "whenEn": "Use when you need to implement form linkage, conditional rendering or listen to form data changes. For example: showing different province lists based on selected country, displaying different form fields based on user type, etc.",
      "description": "表单流程组件，用于监听表单数据变化并执行相应的副作用。适用于实现表单联动、条件渲染等场景",
      "props": [
        {
          "name": "children",
          "type": "(datum: FormDatum) => ReactNode",
          "required": true,
          "description": "渲染函数，接收表单数据管理器（datum）并返回 React 节点。datum 对象提供了动态获取/设置表单值的方法。适用于创建表单字段依赖关系、基于表单状态的条件渲染，或执行需要访问多个表单值的操作"
        },
        {
          "name": "names",
          "type": "string[]",
          "required": false,
          "description": "要监听变化的字段名称数组。为空或未定义时，表单内任意值变化都会触发重新渲染。指定后，仅这些字段的变化会触发更新。支持嵌套路径如 \\\"user.name\\\" 或 \\\"items[0].price\\\"。通过限制不必要的重新渲染来优化性能"
        },
        {
          "name": "strict",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "设为 true 时，使用缓存机制防止重新渲染，除非监听的字段值真正发生变化。在严格模式下，只有指定的 names 字段值（而非仅引用）改变时才重新渲染子组件。适用于包含昂贵渲染操作的复杂表单的性能优化",
          "version": "3.6.0"
        }
      ]
    },
    "Button": {
      "whenCn": "需要防止回车键意外提交表单，或需要在提交前执行自定义逻辑（如确认对话框）时使用。适合复杂表单或需要额外验证步骤的场景",
      "whenEn": "Use when you need to prevent accidental form submission via Enter key, or need to execute custom logic before submission (like confirmation dialogs). Suitable for complex forms or scenarios requiring additional validation steps",
      "description": "表单按钮组件，htmlType=\\\"button\\\"。防止用户在表单输入框中按回车键时意外提交表单。用户必须显式点击按钮才能提交表单。内部调用 formFunc.submit() 以更好地控制提交逻辑",
      "props": [
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "自定义类名"
        },
        {
          "name": "style",
          "type": "CSSProperties",
          "required": false,
          "description": "自定义样式"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "按钮里面的内容, 可以是文字图标等"
        },
        {
          "name": "onClick",
          "type": "MouseEventHandler<Element>",
          "required": false,
          "description": "按钮点击回调"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "禁用"
        },
        {
          "name": "renderLoading",
          "type": "((buttonEl: ReactNode) => ReactElement)",
          "required": false,
          "description": "自定义loading"
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "loading 状态"
        },
        {
          "name": "mode",
          "type": "\"text\" | \"outline\" | \"dashed\"",
          "required": false,
          "description": "按钮风格"
        },
        {
          "name": "type",
          "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
          "required": false,
          "defaultValue": "\\\"default\\\"",
          "description": "按钮类型"
        },
        {
          "name": "size",
          "type": "\"default\" | \"small\" | \"large\"",
          "required": false,
          "defaultValue": "\\\"default\\\"",
          "description": "按钮尺寸"
        },
        {
          "name": "space",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "仅有2个汉字的按钮，是否在2个汉字中间插入空格"
        },
        {
          "name": "href",
          "type": "string",
          "required": false,
          "description": "如果设置了 href 属性，将会用 <a> 代替 <button>"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "当设置了 href 属性时，target 会被设置到 <a> 元素上"
        },
        {
          "name": "shape",
          "type": "\"circle\" | \"round\" | \"square\"",
          "required": false,
          "defaultValue": "\\\"default\\\"",
          "description": "设置按钮形状"
        },
        {
          "name": "htmlType",
          "type": "\"button\" | \"submit\" | \"reset\"",
          "required": false,
          "defaultValue": "\\\"button\\\"",
          "description": "按钮原生type属性"
        }
      ]
    },
    "Submit": {
      "whenCn": "需要支持回车键快速提交表单时使用。适合登录表单、搜索表单等简单场景，用户体验更流畅",
      "whenEn": "Use when you need to support quick form submission via Enter key. Suitable for login forms, search forms and other simple scenarios for smoother user experience",
      "description": "表单提交按钮组件，htmlType=\\\"submit\\\"。使用浏览器原生提交行为。当用户在任何表单输入框中按回车键时，会自动触发此按钮。适用于希望支持回车提交的简单表单",
      "props": [
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "自定义类名"
        },
        {
          "name": "style",
          "type": "CSSProperties",
          "required": false,
          "description": "自定义样式"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "按钮里面的内容, 可以是文字图标等"
        },
        {
          "name": "onClick",
          "type": "MouseEventHandler<Element>",
          "required": false,
          "description": "按钮点击回调"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "禁用"
        },
        {
          "name": "renderLoading",
          "type": "((buttonEl: ReactNode) => ReactElement)",
          "required": false,
          "description": "自定义loading"
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "loading 状态"
        },
        {
          "name": "mode",
          "type": "\"text\" | \"outline\" | \"dashed\"",
          "required": false,
          "description": "按钮风格"
        },
        {
          "name": "type",
          "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
          "required": false,
          "defaultValue": "\\\"default\\\"",
          "description": "按钮类型"
        },
        {
          "name": "size",
          "type": "\"default\" | \"small\" | \"large\"",
          "required": false,
          "defaultValue": "\\\"default\\\"",
          "description": "按钮尺寸"
        },
        {
          "name": "space",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "仅有2个汉字的按钮，是否在2个汉字中间插入空格"
        },
        {
          "name": "href",
          "type": "string",
          "required": false,
          "description": "如果设置了 href 属性，将会用 <a> 代替 <button>"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "当设置了 href 属性时，target 会被设置到 <a> 元素上"
        },
        {
          "name": "shape",
          "type": "\"circle\" | \"round\" | \"square\"",
          "required": false,
          "defaultValue": "\\\"default\\\"",
          "description": "设置按钮形状"
        },
        {
          "name": "htmlType",
          "type": "\"button\" | \"submit\" | \"reset\"",
          "required": false,
          "defaultValue": "\\\"button\\\"",
          "description": "按钮原生type属性"
        }
      ]
    },
    "Reset": {
      "whenCn": "需要提供重置表单功能时使用。适合复杂表单或编辑表单，让用户可以快速恢复到初始状态或默认值",
      "whenEn": "Use when you need to provide form reset functionality. Suitable for complex forms or edit forms, allowing users to quickly restore to initial state or default values",
      "description": "表单重置按钮组件，htmlType=\\\"reset\\\"。点击时将所有表单字段重置为初始值。适用于需要让用户快速恢复初始状态的复杂表单",
      "props": [
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "自定义类名"
        },
        {
          "name": "style",
          "type": "CSSProperties",
          "required": false,
          "description": "自定义样式"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "按钮里面的内容, 可以是文字图标等"
        },
        {
          "name": "onClick",
          "type": "MouseEventHandler<Element>",
          "required": false,
          "description": "按钮点击回调"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "禁用"
        },
        {
          "name": "renderLoading",
          "type": "((buttonEl: ReactNode) => ReactElement)",
          "required": false,
          "description": "自定义loading"
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "loading 状态"
        },
        {
          "name": "mode",
          "type": "\"text\" | \"outline\" | \"dashed\"",
          "required": false,
          "description": "按钮风格"
        },
        {
          "name": "type",
          "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
          "required": false,
          "defaultValue": "\\\"default\\\"",
          "description": "按钮类型"
        },
        {
          "name": "size",
          "type": "\"default\" | \"small\" | \"large\"",
          "required": false,
          "defaultValue": "\\\"default\\\"",
          "description": "按钮尺寸"
        },
        {
          "name": "space",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "仅有2个汉字的按钮，是否在2个汉字中间插入空格"
        },
        {
          "name": "href",
          "type": "string",
          "required": false,
          "description": "如果设置了 href 属性，将会用 <a> 代替 <button>"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "当设置了 href 属性时，target 会被设置到 <a> 元素上"
        },
        {
          "name": "shape",
          "type": "\"circle\" | \"round\" | \"square\"",
          "required": false,
          "defaultValue": "\\\"default\\\"",
          "description": "设置按钮形状"
        },
        {
          "name": "htmlType",
          "type": "\"button\" | \"submit\" | \"reset\"",
          "required": false,
          "defaultValue": "\\\"button\\\"",
          "description": "按钮原生type属性"
        }
      ]
    }
  }
}