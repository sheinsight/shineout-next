{
  "name": "Form",
  "description": "用以收集、校验和提交数据，一般由输入框、单选框、复选框、选择器等控件组成",
  "category": "other",
  "importPath": "import { Form } from 'shineout'",
  "props": [
    {
      "name": "value",
      "type": "object",
      "required": false,
      "description": "设置后表单变为受控组件，需要配合 onChange 使用。适用于需要外部管理表单状态的场景，如跨组件共享表单数据、实时同步表单数据到状态管理器等"
    },
    {
      "name": "onChange",
      "type": "((value: T) => void)",
      "required": false,
      "description": "在受控模式下必须设置此函数来更新外部状态。每当表单内任意字段值改变时都会触发，参数为整个表单的最新数据"
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "Form 内容"
    },
    {
      "name": "labelWidth",
      "type": "string | number",
      "required": false,
      "defaultValue": "140px",
      "description": "标签宽度，labelAlign 为 \\\"top\\\" 时无效。统一设置表单项标签的宽度。可以是具体像素值（如 \\\"140px\\\"）或百分比（如 \\\"30%\\\"）。当标签顶部对齐时此配置无效。用于保持表单整齐的视觉效果，确保所有表单项的输入区域左对齐"
    },
    {
      "name": "labelAlign",
      "type": "\"left\" | \"right\" | \"top\"",
      "required": false,
      "description": "默认为空，跟随主题样式。标签的对齐方式。\\\"left\\\" 左对齐，\\\"right\\\" 右对齐，\\\"top\\\" 顶部对齐。不同的对齐方式适用于不同的表单布局需求：\\\"right\\\" 适合传统表单布局，\\\"top\\\" 适合移动端或紧凑布局，\\\"left\\\" 适合特殊设计需求"
    },
    {
      "name": "labelVerticalAlign",
      "type": "\"top\" | \"bottom\" | \"middle\"",
      "required": false,
      "defaultValue": "\\\"top\\\"",
      "description": "默认顶部对齐。标签的垂直对齐方式。当标签和输入框在同一行时（labelAlign 为 \\\"left\\\" 或 \\\"right\\\"），控制标签相对于输入框的垂直位置。\\\"top\\\" 与输入框顶部对齐，\\\"middle\\\" 居中对齐，\\\"bottom\\\" 与输入框底部对齐"
    },
    {
      "name": "keepErrorHeight",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "单行错误提示不撑开页面高度。保持错误提示高度固定，避免错误信息出现/消失时页面抖动。开启后会预留错误信息的显示空间，确保表单高度稳定。适用于对布局稳定性要求较高的场景，如表单项较多的长表单。注意：当 keepErrorBelow 为 true 时，此配置会失效"
    },
    {
      "name": "keepErrorBelow",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否保持错误信息在提示信息下方。控制错误信息的显示位置。开启后错误信息始终显示在表单项的 tip 属性下方，保持布局的一致性。关闭时错误信息可能会覆盖 tip 信息。适用于同时需要显示提示信息和错误信息的场景。注意：开启后会使 keepErrorHeight 失效",
      "version": "3.7.0"
    },
    {
      "name": "inline",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否水平布局。将表单项横向排列，适用于简单的单行表单或筛选表单。开启后表单项会在同一行显示，自动换行。通常用于搜索条件、筛选器等需要节省垂直空间的场景"
    },
    {
      "name": "colon",
      "type": "ReactNode",
      "required": false,
      "defaultValue": "false",
      "description": "统一控制所有表单项标签后是否显示冒号。可以是布尔值（true 显示默认冒号 \\\":\\\"）或自定义的 ReactNode（如 \\\"：\\\"、\\\"->\\\"等）。Form.Item 上的 colon 属性优先级更高，可以覆盖此全局设置",
      "version": "3.6.0"
    },
    {
      "name": "name",
      "type": "string",
      "required": false,
      "description": "表单的唯一标识名称。设置后会作为所有表单字段 id 的前缀，确保多个表单共存时 id 不冲突。同时启用 formRef.scrollToField 方法，可以通过字段名称快速定位到指定字段",
      "version": "3.5.3"
    },
    {
      "name": "defaultValue",
      "type": "T",
      "required": false,
      "description": "非受控模式下的表单初始值。仅在组件首次渲染时生效，后续修改不会影响表单内部数据。适用于表单数据由组件内部管理的场景，如新建表单、独立表单等"
    },
    {
      "name": "reserveAble",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "设置为 true 时，表单内所有组件的 reserveAble 都为 true : 卸载后不自动删除数据。控制表单项卸载时是否保留数据。适用于标签页切换、条件渲染等场景，避免用户填写的数据丢失。开启后即使表单项被隐藏或卸载，其数据仍会保留在表单中。可在 Form.Field 组件或支持的表单组件（如 Input、Select、DatePicker 等）上单独设置覆盖此全局配置",
      "version": "3.5.0"
    },
    {
      "name": "rules",
      "type": "RuleItem[]",
      "required": false,
      "description": "表单级别的校验规则配置。支持嵌套对象的规则定义，可以为表单的任意字段设置校验规则。规则对象的 key 对应表单字段路径（如 \\\"name\\\"、\\\"user.email\\\"、\\\"list[0].id\\\"），value 为该字段的校验规则数组（FormItemRule）。这些规则会与 Form.Field 组件上设置的 rules 属性合并，Form 级别的规则会先执行。规则类型请参考 Rule 组件文档"
    },
    {
      "name": "onError",
      "type": "((error: Error) => void)",
      "required": false,
      "description": "校验规则触发时的错误回调函数。当任意字段校验失败时调用，参数为错误对象。可用于统一处理校验错误，如记录日志、显示全局通知、上报错误等"
    },
    {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否禁用，为 true 时，表单内所有元素 disabled 都为 true。全局控制表单的禁用状态。适用于查看详情、提交中等需要临时禁用整个表单的场景。表单内所有受控组件（如 Input、Select、DatePicker 等）都会继承此属性"
    },
    {
      "name": "size",
      "type": "\"small\" | \"default\" | \"large\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "表单元素的尺寸。统一设置表单内所有组件的尺寸。支持 \\\"small\\\"、\\\"default\\\"、\\\"large\\\" 三种规格，影响输入框高度、字体大小等。表单内的受控组件会继承此属性，也可以在具体组件上单独覆盖"
    },
    {
      "name": "initValidate",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "当表单 value 发生变化时，是否自动触发校验。开启后可以在数据变化时实时显示校验结果，适用于需要即时反馈的场景。注意：仅在受控模式下有效"
    },
    {
      "name": "onSubmit",
      "type": "((value: T) => void)",
      "required": false,
      "description": "表单提交时的回调函数。只有当所有字段校验通过后才会调用，参数为完整的表单数据。通常用于处理表单数据的提交逻辑，如发送请求到服务器。可配合 Form.Submit 按钮或 formRef.submit() 方法触发"
    },
    {
      "name": "onReset",
      "type": "(() => void)",
      "required": false,
      "description": "表单重置时的回调函数。在表单被重置为初始值（defaultValue 或空值）后触发。可用于执行额外的重置逻辑，如清除关联状态、重置相关组件等。配合 Form.Reset 按钮或 formRef.reset() 方法使用"
    },
    {
      "name": "scrollToError",
      "type": "number | boolean",
      "required": false,
      "defaultValue": "false",
      "description": "校验失败时是否滚动到第一个校验失败组件，该值为数字时，表示相对于顶部的偏移量"
    },
    {
      "name": "removeUndefined",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "提交表单时是否自动移除值为 undefined 的字段。开启后可以避免提交无意义的空值，保持数据整洁。特别适用于与后端 API 对接时，避免传递不必要的 undefined 值"
    },
    {
      "name": "throttle",
      "type": "number",
      "required": false,
      "defaultValue": "1000",
      "description": "防止用户频繁点击提交按钮的节流时间。在此时间内重复点击提交将被忽略，有效避免重复提交问题。适用于网络请求较慢或处理时间较长的场景"
    },
    {
      "name": "scrollParent",
      "type": "(() => HTMLElement | null)",
      "required": false,
      "description": "指定滚动容器元素。当表单不在 document.body 直接滚动时（如在弹窗、抽屉中），需要指定实际的滚动容器以确保正确滚动到错误位置。返回 null 时使用默认滚动行为"
    },
    {
      "name": "formRef",
      "type": "((form: FormRef<V>) => void) | { current?: FormRef<V> ; }",
      "required": false,
      "description": "获取表单实例的引用。支持函数回调和 ref 对象两种方式。通过 formRef 可以调用表单的各种方法，如手动触发校验（validate、validateFields）、提交（submit）、重置（reset）、获取/设置值（getValue、set）等。FormRef<V> 中的泛型 V 表示表单数据的类型"
    },
    {
      "name": "setForm",
      "type": "((form: FormRef<V>) => void)",
      "required": false,
      "description": "在使用 Form.useForm() hooks 时，用于设置表单引用的回调函数。通常不需要手动设置，Form 组件会自动处理。但在某些特殊场景（如跨组件通信）可能需要使用"
    }
  ],
  "examples": [
    {
      "name": "001-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- 表单内置了类似双向绑定的机制，根据表单元素的 name 属性自动下发、收集数据\n * en - Basic usage\n *    -- The form has built-in two-way binding mechanism, which automatically issues and collects data based on the name attribute of the form element\n */\n\nimport { Form, Input, Upload, Radio, Checkbox, DatePicker, Rate, Textarea } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nexport default () => {\n  return (\n    <div>\n      <Form\n        defaultValue={{ name: 'zhangsan', email: 'zhangsan@qq.com', score: 3 }}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='Name'>\n          <Input name={'name'} placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Password'>\n          <Input name={'password'} placeholder='please input password' clearable />\n        </Form.Item>\n        <Form.Item label='Email'>\n          <Input name={'email'} clearable placeholder='please input email' />\n        </Form.Item>\n        <Form.Item label='Gendar'>\n          <Radio.Group name='gendar' data={['male', 'female']} keygen />\n        </Form.Item>\n        <Form.Item label='Course'>\n          <Checkbox.Group name='course' data={['chinese', 'maths', 'english', 'physics']} keygen />\n        </Form.Item>\n        <Form.Item label='Enrollment date'>\n          <DatePicker name='date' placeholder={'please select date'} clearable showSelNow />\n        </Form.Item>\n        <Form.Item label='Score'>\n          <StarRate name='score'></StarRate>\n        </Form.Item>\n        <Form.Item label='upload avatar'>\n          <Upload.Image\n            action='/api/upload'\n            accept='image/*'\n            name='file'\n            htmlName='file'\n            recoverAble\n            leftHandler\n            removeConfirm='Are you sure to delete it ?'\n            limit={3}\n            onSuccess={(_res, filem, data) => {\n              return data;\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='Name'>\n          <Input placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Address'>\n          <Textarea name='address' placeholder='please enter' />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "002-control",
      "title": "cn - 表单方法",
      "code": "/**\n * cn - 表单方法\n *    -- 可以通过 formRef 去获得表单的一些方法集, 包含校验, 清空校验, 提交等\n * en - Form Methods\n *    -- You can use formRef to get some methods of the form, including validation, clear validation, submission, etc\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Form, Input, TYPE, Button, Select, Rate, DatePicker } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\ntype ValueType = {\n  name?: string;\n};\ntype FormRef = TYPE.Form.Ref<any>;\n\nconst App: React.FC = () => {\n  const form = useRef<FormRef>();\n  const [value, setValue] = useState<ValueType>({});\n\n  useEffect(() => {}, []);\n\n  return (\n    <Form\n      value={value}\n      formRef={(formRef) => {\n        form.current = formRef;\n      }}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px 12px', marginBottom: 12 }}>\n        <div><Button mode=\"outline\" onClick={() => form.current?.reset()}>Reset</Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.submit()}>Submit</Button></div>\n        <div><Button mode=\"outline\"\n          onClick={() =>\n            form.current?.validate()\n            .then((values) => {\n              console.log('validate success', values);\n              // TODO: 校验成功处理逻辑\n            })\n            .catch((errorInfo) => {\n              console.log('validate failed errorInfo: >>', errorInfo)\n              // TODO: 校验失败处理逻辑\n            })\n          }\n        >\n          Validate\n        </Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.clearValidate()}>Clear validate</Button></div>\n        <div><Button mode=\"outline\" onClick={() => console.log(form.current?.getValue())}>Get value</Button></div>\n        <div><Button mode=\"outline\" onClick={() => {\n          form.current?.set({\n            name: 'Tom',\n            password: '123456',\n            holiday: {\n              startDate: '2024-10-01',\n              endDate: '2024-10-07',\n            },\n            hobby: ['Football', 'Movie']\n          })\n        }}>Set value</Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.submit(false)}>Submit without validate</Button></div>\n      </div>\n\n      <Form.Item label='Name' required>\n        <Input name='name' rules={[{ required: true, message: 'name is required' }]} clearable />\n      </Form.Item>\n\n      <Form.Item label='Rate' required>\n        <StarRate name=\"rate\" allowHalf defaultValue={3.5} />\n      </Form.Item>\n\n      <Form.Item label='Password' required>\n        <Input.Password\n          clearable\n          name='password'\n          rules={[{ required: true, message: 'password is required' }]}\n        />\n      </Form.Item>\n\n      <Form.Item label='Holiday'>\n        <Form.FieldSet name='holiday'>\n          <DatePicker range name={['startDate', 'endDate']} />\n        </Form.FieldSet>\n      </Form.Item>\n      <Form.Item label='Hobby'>\n        <Select multiple keygen data={['Football', 'Movie', 'Barbecue']} name='hobby'></Select>\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "003-label-1",
      "title": "cn - 标签对齐方式",
      "code": "/**\n * cn - 标签对齐方式\n *    -- 通过 labelWidth 和 labelAlign 改变标签宽度和水平对齐方式\n * en -\n *    --\n */\n\nimport { useState } from 'react';\nimport { Form, Input, TYPE, Radio } from 'shineout';\n\ntype FormProps = TYPE.Form.Props<any>;\n\nconst alignArr: FormProps['labelAlign'][] = ['left', 'top', 'right'];\nexport default () => {\n  const [align, setAlign] = useState<FormProps['labelAlign']>('right');\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Radio.Group value={align} data={alignArr} keygen onChange={setAlign} />\n      </div>\n      <Form labelWidth={65} labelAlign={align} style={{ maxWidth: 500 }}>\n        <Form.Item label='Email'>\n          <Input name='email' clearable />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' clearable />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: align === 'top' ? -10 : 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "003-label-2",
      "title": "cn -",
      "code": "/**\n * cn -\n *    -- 当 label 文字存在换行时，可使用 labelVerticalAlign 来控制垂直方向对齐方式\n * en -\n *    -- When the label text has a line break, you can use labelVerticalAlign to control the vertical alignment\n */\n\nimport { useState } from 'react';\nimport { Form, Input, TYPE, Radio, Textarea } from 'shineout';\n\ntype FormProps = TYPE.Form.Props<any>;\n\nconst alignArr: FormProps['labelVerticalAlign'][] = ['bottom', 'top', 'middle'];\n\nexport default () => {\n  const [align, setAlign] = useState<FormProps['labelVerticalAlign']>('top');\n  return (\n    <>\n      <div style={{ marginBottom: 24 }}>\n        <Radio.Group value={align} data={alignArr} keygen onChange={setAlign} />\n      </div>\n      <Form labelWidth={65} labelVerticalAlign={align} style={{ maxWidth: 500 }}>\n        <Form.Item label='Your Email'>\n          <Input name='email' clearable />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' clearable />\n        </Form.Item>\n        <Form.Item label='Your Address'>\n          <Textarea name='address' />\n        </Form.Item>\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "003-label-3",
      "title": "cn - 标签冒号",
      "code": "/**\n * cn - 标签冒号\n *    -- 设置 `Form` 的 `colon` 属性，开启所有label的冒号显示。\n *    -- 也可单独设置 `Form.Item` 的 `colon` 属性，优先级高于 `Form` 的 `colon` 属性。\n *    -- `colon` 的格式也可以是自定义的ReactNode。\n * en - Label colon\n *    -- Set the colon property of Form to enable the colon display of all labels.\n *    -- You can also set the colon property of FormItem separately, which has higher priority than the colon property of Form.\n *    -- The format of `colon` can also be a custom ReactNode.\n */\n\nimport { useState } from 'react';\nimport { Form, Input, Switch, Textarea } from 'shineout';\n\nexport default () => {\n  const [colonVisible, setColonVisible] = useState(true);\n  return (\n    <Form labelWidth={120} style={{ maxWidth: 500 }} colon={colonVisible}>\n      <Form.Item label='Show Colon'>\n        <Switch value={colonVisible} onChange={setColonVisible} content={['ON', 'OFF']} />\n      </Form.Item>\n      <Form.Item label='Your Email'>\n        <Input name='email' clearable />\n      </Form.Item>\n      <Form.Item label='Password'>\n        <Input name='password' type='password' clearable />\n      </Form.Item>\n      <Form.Item label='Your Address'>\n        <Textarea name='address' />\n      </Form.Item>\n    </Form>\n  );\n};\n",
      "language": "tsx"
    }
  ],
  "subComponents": [
    "Item",
    "Field",
    "FieldSet",
    "Button",
    "Submit",
    "Reset",
    "Flow",
    "useForm",
    "useFormInstance"
  ],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 28,
    "requiredProps": 0,
    "propsWithWhen": 0
  },
  "subComponentApis": {
    "Item": {
      "props": [
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "自定义类名"
        },
        {
          "name": "style",
          "type": "CSSProperties",
          "required": false,
          "description": "自定义样式"
        },
        {
          "name": "label",
          "type": "ReactNode | LabelConfig",
          "required": false,
          "description": "未定义时，标签不会 render，也不会占位。如果无内容需要占位，使用空字符串 \\\"\\\"。"
        },
        {
          "name": "tip",
          "type": "ReactNode",
          "required": false,
          "description": "提示文案"
        },
        {
          "name": "required",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "必填标记，纯展示用，不会触发校验"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "表单元素"
        },
        {
          "name": "labelWidth",
          "type": "string | number",
          "required": false,
          "defaultValue": "140px",
          "description": "标签宽度，labelAlign 为 \\\"top\\\" 时无效。统一设置表单项标签的宽度。可以是具体像素值（如 \\\"140px\\\"）或百分比（如 \\\"30%\\\"）。当标签顶部对齐时此配置无效。用于保持表单整齐的视觉效果，确保所有表单项的输入区域左对齐"
        },
        {
          "name": "labelAlign",
          "type": "\"left\" | \"right\" | \"top\"",
          "required": false,
          "description": "默认为空，跟随主题样式。标签的对齐方式。\\\"left\\\" 左对齐，\\\"right\\\" 右对齐，\\\"top\\\" 顶部对齐。不同的对齐方式适用于不同的表单布局需求：\\\"right\\\" 适合传统表单布局，\\\"top\\\" 适合移动端或紧凑布局，\\\"left\\\" 适合特殊设计需求"
        },
        {
          "name": "labelVerticalAlign",
          "type": "\"top\" | \"bottom\" | \"middle\"",
          "required": false,
          "defaultValue": "\\\"top\\\"",
          "description": "默认顶部对齐。标签的垂直对齐方式。当标签和输入框在同一行时（labelAlign 为 \\\"left\\\" 或 \\\"right\\\"），控制标签相对于输入框的垂直位置。\\\"top\\\" 与输入框顶部对齐，\\\"middle\\\" 居中对齐，\\\"bottom\\\" 与输入框底部对齐"
        },
        {
          "name": "keepErrorHeight",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "单行错误提示不撑开页面高度。保持错误提示高度固定，避免错误信息出现/消失时页面抖动。开启后会预留错误信息的显示空间，确保表单高度稳定。适用于对布局稳定性要求较高的场景，如表单项较多的长表单。注意：当 keepErrorBelow 为 true 时，此配置会失效"
        },
        {
          "name": "keepErrorBelow",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "是否保持错误信息在提示信息下方。控制错误信息的显示位置。开启后错误信息始终显示在表单项的 tip 属性下方，保持布局的一致性。关闭时错误信息可能会覆盖 tip 信息。适用于同时需要显示提示信息和错误信息的场景。注意：开启后会使 keepErrorHeight 失效",
          "version": "3.7.0"
        },
        {
          "name": "inline",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "是否水平布局。将表单项横向排列，适用于简单的单行表单或筛选表单。开启后表单项会在同一行显示，自动换行。通常用于搜索条件、筛选器等需要节省垂直空间的场景"
        },
        {
          "name": "colon",
          "type": "ReactNode",
          "required": false,
          "defaultValue": "false",
          "description": "统一控制所有表单项标签后是否显示冒号。可以是布尔值（true 显示默认冒号 \\\":\\\"）或自定义的 ReactNode（如 \\\"：\\\"、\\\"->\\\"等）。Form.Item 上的 colon 属性优先级更高，可以覆盖此全局设置",
          "version": "3.6.0"
        }
      ]
    },
    "Field": {
      "props": [
        {
          "name": "name",
          "type": "string | string[]",
          "required": true,
          "description": "绑定到表单数据的字段名称。支持点表示法访问嵌套对象（如 \\\"user.name\\\"）或数组语法（如 [\\\"user\\\", \\\"name\\\"]）。用于标识和管理特定的表单字段数据"
        },
        {
          "name": "reserveAble",
          "type": "boolean",
          "required": false,
          "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
        },
        {
          "name": "defaultValue",
          "type": "T",
          "required": false,
          "description": "表单首次渲染时字段的初始值。仅在组件初始化时生效，后续更改不会更新。常用于为新记录设置初始状态或提供默认值"
        },
        {
          "name": "rules",
          "type": "RuleItem[]",
          "required": false,
          "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
        },
        {
          "name": "children",
          "type": "((opts: object) => ReactNode) | ReactNode",
          "required": true,
          "description": "要渲染的表单控件。可以是具有 value/onChange 属性的 React 元素，或渲染函数。使用渲染函数时，会接收包含以下属性的对象：value（当前字段值）、onChange（值变更处理器）、error（校验错误）、disabled（继承自表单）、status（字段状态）。适用于自定义组件、第三方控件或复杂输入场景"
        },
        {
          "name": "onError",
          "type": "((error?: Error ) => void)",
          "required": false,
          "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
        },
        {
          "name": "bind",
          "type": "string[]",
          "required": false,
          "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
        }
      ]
    },
    "FieldSet": {
      "props": [
        {
          "name": "name",
          "type": "string",
          "required": true,
          "description": "绑定到表单数据的字段集名称。用于标识和管理一组相关的表单字段或数组数据。支持点表示法访问嵌套对象（如 \\\"users\\\"、\\\"company.employees\\\"）"
        },
        {
          "name": "children",
          "type": "((opts: object) => ReactNode) |ReactNode",
          "required": true,
          "description": "在字段集内渲染的内容。支持两种模式：\\n\\n**对象模式**（React 元素）：用于管理嵌套对象字段。子字段名称会自动加上字段集名称前缀。适用于分组相关表单字段，如地址、联系信息或用户资料等部分。\\n\\n**数组模式**（渲染函数）：用于管理动态数组数据。函数接收包含以下属性的对象：\\n- `list`：该字段集的完整数组数据\\n- `value`：当前索引位置的数据项\\n- `index`：当前数据项在数组中的索引\\n- `error`：当前数据项的校验错误\\n- `onChange`：更新当前数据项\\n- `onInsert`：在当前位置之前插入新数据项\\n- `onAppend`：在当前位置之后插入新数据项\\n- `onRemove`：从数组中移除当前数据项\\n\\n适用于动态列表、可重复表单部分或可编辑表格。"
        },
        {
          "name": "empty",
          "type": "((insert: (val: any) => void) => ReactNode)",
          "required": false,
          "description": "数组为空时显示的内容。仅在数组模式下（children 为函数时）有效。渲染函数接收 `insert` 回调来添加第一个数据项。适用于显示“添加第一个项目”按钮、空状态提示或动态列表的引导信息"
        },
        {
          "name": "defaultValue",
          "type": "T",
          "required": false,
          "description": "默认值"
        },
        {
          "name": "reserveAble",
          "type": "boolean",
          "required": false,
          "description": "设置为 true 组件卸载后表单不自动删除数据"
        },
        {
          "name": "rules",
          "type": "RuleItem[]",
          "required": false,
          "description": "校验规则 详见 Rule"
        }
      ]
    },
    "Flow": {
      "props": [
        {
          "name": "children",
          "type": "(datum: FormDatum) => ReactNode",
          "required": true,
          "description": "渲染函数，接收表单数据管理器（datum）并返回 React 节点。datum 对象提供了动态获取/设置表单值的方法。适用于创建表单字段依赖关系、基于表单状态的条件渲染，或执行需要访问多个表单值的操作"
        },
        {
          "name": "names",
          "type": "string[]",
          "required": false,
          "description": "要监听变化的字段名称数组。为空或未定义时，表单内任意值变化都会触发重新渲染。指定后，仅这些字段的变化会触发更新。支持嵌套路径如 \\\"user.name\\\" 或 \\\"items[0].price\\\"。通过限制不必要的重新渲染来优化性能"
        },
        {
          "name": "strict",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "设为 true 时，使用缓存机制防止重新渲染，除非监听的字段值真正发生变化。在严格模式下，只有指定的 names 字段值（而非仅引用）改变时才重新渲染子组件。适用于包含昂贵渲染操作的复杂表单的性能优化",
          "version": "3.6.0"
        }
      ]
    }
  }
}