{
  "name": "Radio",
  "description": "单选框代表从一组互斥的选项中仅选择一个选项",
  "category": "other",
  "importPath": "import { Radio } from 'shineout'",
  "props": [
    {
      "name": "onChange",
      "type": "((value: T) => void)",
      "required": false,
      "description": "改变选中状态时触发回调"
    },
    {
      "name": "checked",
      "type": "boolean | ((d: T) => boolean)",
      "required": false,
      "description": "checked 传入时为受控组件"
    },
    {
      "name": "onClick",
      "type": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void)",
      "required": false,
      "description": "勾选框点击回调"
    },
    {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否禁用"
    },
    {
      "name": "inputRef",
      "type": "Ref<HTMLInputElement>",
      "required": false,
      "description": "获取input dom"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\" | \"default\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "不同尺寸"
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "内容"
    },
    {
      "name": "htmlValue",
      "type": "T",
      "required": false,
      "defaultValue": "true",
      "description": "选中后返回的值"
    }
  ],
  "examples": [
    {
      "name": "001-base-0",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- 最基础的 Radio\n * en - Base\n *    -- Simple Radio\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState('');\n  return (\n    <Radio\n      checked={value === 'option'}\n      htmlValue={'option'}\n      onChange={(v) => {\n        setValue(v);\n      }}\n    >\n      Option\n    </Radio>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "001-base-1",
      "title": "cn - 状态",
      "code": "/**\n * cn - 状态\n *    -- checked 属性设置 Radio 选中状态； disabled 属性设置 Radio 禁用状态\n * en - Base\n *    -- checked property set the checked status of Radio; disabled property set the disabled status of Radio\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Radio checked={false}>OptionA</Radio>\n      <Radio checked={true}>OptionB</Radio>\n      <Radio checked={false} disabled>\n        OptionC\n      </Radio>\n      <Radio checked={true} disabled>\n        OptionD\n      </Radio>\n    </>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "001-size",
      "title": "cn - 尺寸",
      "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性可以控制 Radio 的大小\n * en - Size\n *    -- Set `size` property to change the size of Radio\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <Radio.Group keygen>\n      <Radio size={'small'} htmlValue={'a'}>\n        OptionA\n      </Radio>\n      <Radio htmlValue={'b'}>OptionB</Radio>\n      <Radio size={'large'} htmlValue={'c'}>\n        OptionC\n      </Radio>\n    </Radio.Group>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "002-group-0",
      "title": "cn - 单选框组",
      "code": "/**\n * cn - 单选框组\n *    -- Radio.Group 通过数据来生成一组单选框\n * en - Group\n *    -- Radio.Group generate a group of radios from an array\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    myRadioGroup: {\n      '& .soui-radio': {\n        marginBottom: 12\n      },\n    },\n  },\n  { name: 'example-radio-group-0' },\n);\n\n\ntype RadioGroupItem = string;\n\nconst data: RadioGroupItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return <Radio.Group keygen data={data} defaultValue='blue' renderItem={(d) => d} className={classes.myRadioGroup} />;\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "002-group-1",
      "title": "cn -",
      "code": "/**\n * cn -\n *    -- 将一组 Radio 放在 Radio.Group 中，以 React 组件方式调用\n * en -\n *    -- A series of radios group by Radio.Group\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    myRadioGroup: {\n      '& .soui-radio': {\n        marginBottom: 12\n      },\n    },\n  },\n  { name: 'example-radio-group-1' },\n);\n\nconst data: string[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Radio.Group\n        keygen\n        defaultValue='yellow'\n        onChange={(...args) => {\n          console.log(args);\n        }}\n        className={classes.myRadioGroup}\n      >\n        {data.map((d) => (\n          <Radio key={d} htmlValue={d}>\n            {d}\n          </Radio>\n        ))}\n      </Radio.Group>\n    </>\n  )\n};\nexport default App;\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 10,
    "requiredProps": 0,
    "propsWithWhen": 0
  },
  "subComponentApis": {}
}