{
  "name": "Popover",
  "description": "通常用于鼠标悬浮即显的操作，以及一般性的二次确认对话框承载",
  "category": "other",
  "importPath": "import { Popover } from 'shineout'",
  "props": [
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "position",
      "type": "| \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"left\" | \"right\" | \"top\" | \"bottom\" | \"auto\"",
      "required": false,
      "description": "弹出层位置。若不设置，则默认为 auto"
    },
    {
      "name": "priorityDirection",
      "type": "\"auto\" | \"vertical\" | \"horizontal\"",
      "required": false,
      "defaultValue": "\\\"vertical\\\"",
      "description": "弹出位置优先级, 默认为左右优先, 只在未设置 position 时生效"
    },
    {
      "name": "mouseEnterDelay",
      "type": "number",
      "required": false,
      "defaultValue": "0",
      "description": "移入显示延迟(毫秒)"
    },
    {
      "name": "mouseLeaveDelay",
      "type": "number",
      "required": false,
      "defaultValue": "0",
      "description": "移除隐藏延迟(毫秒)"
    },
    {
      "name": "trigger",
      "type": "\"click\" | \"hover\"",
      "required": false,
      "defaultValue": "\\\"hover\\\"",
      "description": "触发方式"
    },
    {
      "name": "destroy",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "关闭 Popover 后销毁内容 dom"
    },
    {
      "name": "visible",
      "type": "boolean",
      "required": false,
      "description": "是否可见(受控)"
    },
    {
      "name": "onVisibleChange",
      "type": "((open: boolean) => void)",
      "required": false,
      "description": "The event of visible change"
    },
    {
      "name": "onOpen",
      "type": "(() => void)",
      "required": false,
      "description": "Popover 弹出回调事件"
    },
    {
      "name": "onClose",
      "type": "(() => void)",
      "required": false,
      "description": "Popover 关闭时回调事件"
    },
    {
      "name": "children",
      "type": "ReactNode | ((close: () => void) => ReactNode)",
      "required": false,
      "defaultValue": "index",
      "description": "弹出显示内容，如果内容为函数，则参数是主动关闭操作"
    },
    {
      "name": "getPopupContainer",
      "type": "(() => HTMLElement | null)",
      "required": false,
      "description": "自定义 Popover 容器，覆盖默认渲染在 body 下的行为, () => DOMElement"
    },
    {
      "name": "useTextStyle",
      "type": "boolean",
      "required": false,
      "description": "使用内置文本样式"
    },
    {
      "name": "type",
      "type": "\"info\" | \"success\" | \"warning\" | \"danger\" | \"error\"",
      "required": false,
      "description": "Type of popover"
    },
    {
      "name": "border",
      "type": "string",
      "required": false,
      "description": "弹出层边框颜色（含箭头）"
    },
    {
      "name": "background",
      "type": "string",
      "required": false,
      "description": "弹出层背景色（含箭头）"
    },
    {
      "name": "zIndex",
      "type": "number",
      "required": false,
      "defaultValue": "1060",
      "description": "Popover 层级"
    },
    {
      "name": "showArrow",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否显示箭头"
    },
    {
      "name": "defaultVisible",
      "type": "boolean",
      "required": false,
      "description": "默认是否显示"
    },
    {
      "name": "clickToCancelDelay",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "MouseEnterDelay 内点击元素后取消弹出"
    },
    {
      "name": "scrollDismiss",
      "type": "boolean | (() => HTMLElement | null)",
      "required": false,
      "defaultValue": "false",
      "description": "滚动来关闭气泡框，如果需要指定滚动元素，则通过函数返回"
    },
    {
      "name": "arrowClass",
      "type": "string",
      "required": false,
      "description": "箭头的 class 名称"
    },
    {
      "name": "offset",
      "type": "[number, number]",
      "required": false,
      "defaultValue": "[0,0]",
      "description": "弹出层宽度|高度的附加值，期望弹出层的宽度|高度增加或减少的值，可以是负数；举例：[4, 0] 表示宽度增加 4px，高度不变",
      "version": "3.6.0"
    },
    {
      "name": "popupGap",
      "type": "number",
      "required": false,
      "defaultValue": "0",
      "description": "弹出层与触发元素的间距",
      "version": "3.6.0"
    },
    {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "description": "是否禁用弹出",
      "version": "3.7.0"
    }
  ],
  "examples": [
    {
      "name": "01-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- 基本的用法，支持鼠标悬浮即显提示文字\n * en - Basic\n *    -- Basic usage, support mouse hover to show prompt text\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nexport default () => {\n  return (\n    <Button mode='outline'>\n      Hover\n      <Popover>some Text</Popover>\n    </Button>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "02-position",
      "title": "cn - 弹出位置",
      "code": "/**\n * cn - 弹出位置\n *    -- 内置了十二个弹出的位置\n * en - Position\n *    -- Twelve pop-up positions are built in\n */\n\nimport React from 'react';\nimport { Button, Popover, TYPE } from 'shineout';\n\ntype PopoverProps = TYPE.Popover.Props;\ntype PopoverPosition = PopoverProps['position'];\n\nconst positions: Array<PopoverPosition[]> = [\n  [undefined, 'bottom-left', 'bottom', 'bottom-right', undefined],\n  ['right-top', undefined, undefined, undefined, 'left-top'],\n  ['right', undefined, undefined, undefined, 'left'],\n  ['right-bottom', undefined, undefined, undefined, 'left-bottom'],\n  [undefined, 'top-left', 'top', 'top-right', undefined],\n];\n\nconst style: React.CSSProperties = {\n  margin: 4,\n  width: 110,\n  display: 'inline-block',\n};\n\nconst App: React.FC = () => (\n  <div>\n    {positions.map((row, i) => (\n      <div key={i}>\n        {row.map((p, j) =>\n          p ? (\n            <Button key={j} mode={'outline'} style={style}>\n              <Popover trigger='hover' position={p} useTextStyle>\n                <div>i am popover content</div>\n                <div>{p}</div>\n              </Popover>\n              {p}\n            </Button>\n          ) : (\n            <div key={j} style={{ ...style, border: 0 }} />\n          ),\n        )}\n      </div>\n    ))}\n  </div>\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "03-click",
      "title": "cn - 点击触发",
      "code": "/**\n * cn - 点击触发\n *    -- 默认是移入组件触发，设置 trigger 为 'click'，可以改为点击触发\n * en - Trigger\n *    -- Set the trigger property to change the trigger event to 'click'\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst App: React.FC = () => (\n  <Button mode=\"outline\">\n    <Popover trigger='click'>hello shineout</Popover>\n    Click me\n  </Button>\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "04-controll",
      "title": "cn - 受控模式",
      "code": "/**\n * cn - 受控模式\n *    -- 可以通过 visible 去控制\n * en -  control\n *    -- can be controlled by visible\n */\nimport React, { useState } from 'react';\nimport { Button, Popover, Switch } from 'shineout';\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Switch value={visible} onChange={setVisible} />\n        <span style={{ marginInlineStart: 8, fontSize: 14 }}>\n          {!visible ? 'Turn on switch to display popover' : 'Turn off switch to hide popover'}{' '}\n        </span>\n      </div>\n      <Button mode=\"outline\">\n        <Popover\n          priorityDirection='horizontal'\n          visible={visible}\n          onVisibleChange={(v) => {\n            console.log('onVisibleChange', v);\n          }}\n        >\n          Some text1\n        </Popover>\n        Hover\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "05-delay",
      "title": "cn - 延迟",
      "code": "/**\n * cn - 延迟\n *    -- 可以设置展示延时和关闭延时\n * en - delay\n *    -- the hidden/show delay\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst App: React.FC = () => (\n  <Button mode=\"outline\">\n    <Popover mouseEnterDelay={200} mouseLeaveDelay={1000}>\n      Some text\n    </Popover>\n    Hover\n  </Button>\n);\n\nexport default App;\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 27,
    "requiredProps": 0,
    "propsWithWhen": 0
  },
  "subComponentApis": {}
}