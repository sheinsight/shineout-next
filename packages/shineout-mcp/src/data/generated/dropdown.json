{
  "name": "Dropdown",
  "description": "通常用于展示用户可供选择的选项，在操作选项较多时，可以将这些选项收纳起来",
  "category": "navigation",
  "importPath": "import { Dropdown } from 'shineout'",
  "props": [
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\" | \"default\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "不同尺寸"
    },
    {
      "name": "absolute",
      "type": "boolean | (() => HTMLElement | null)",
      "required": false,
      "defaultValue": "false",
      "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
    },
    {
      "name": "type",
      "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "按钮类型"
    },
    {
      "name": "mode",
      "type": "\"text\" | \"outline\" | \"dashed\"",
      "required": false,
      "description": "按钮风格"
    },
    {
      "name": "shape",
      "type": "\"circle\" | \"round\" | \"square\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "设置按钮形状"
    },
    {
      "name": "onClick",
      "type": "((data: any) => void)",
      "required": false,
      "description": "点击事件。参数为渲染的数据,注: 如果数据内设置了onClick，会忽略此方法，调用data.onClick"
    },
    {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "禁用"
    },
    {
      "name": "placeholder",
      "type": "ReactNode",
      "required": false,
      "description": "按钮显示内容"
    },
    {
      "name": "adjust",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否开启自动调整面板位置功能。当面板被窗口遮挡时，自动调整位置"
    },
    {
      "name": "columns",
      "type": "number",
      "required": false,
      "description": "页面多元素展示,此属性需要依赖width属性,请合理的设置列数和宽度"
    },
    {
      "name": "animation",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否开启动画"
    },
    {
      "name": "data",
      "type": "object[]",
      "required": true,
      "defaultValue": "[]",
      "description": "下拉数据 详见 DropdownData"
    },
    {
      "name": "trigger",
      "type": "\"click\" | \"hover\"",
      "required": false,
      "defaultValue": "\\\"click\\\"",
      "description": "触发方式"
    },
    {
      "name": "width",
      "type": "number",
      "required": false,
      "description": "弹出选项层的宽度"
    },
    {
      "name": "position",
      "type": "| \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"left\" | \"right\" | \"top\" | \"bottom\" | \"auto\"",
      "required": false,
      "defaultValue": "\\\"bottom-left\\\"",
      "description": "弹出的方向和位置"
    },
    {
      "name": "renderItem",
      "type": "string | ((data: any) => ReactNode)",
      "required": false,
      "description": "设置显示的内容,如果是字符串,则为对应的值。如果是函数,则返回值为显示的内容,参数为当条数据"
    },
    {
      "name": "open",
      "type": "boolean",
      "required": false,
      "description": "控制浮层显隐"
    },
    {
      "name": "onCollapse",
      "type": "((collapse: boolean) => void)",
      "required": false,
      "description": "下拉列表展开/收起回调"
    },
    {
      "name": "hideArrow",
      "type": "boolean",
      "required": false,
      "description": "隐藏箭头"
    },
    {
      "name": "zIndex",
      "type": "number",
      "required": false,
      "description": "面板的 zIndex 值，默认为 1051",
      "version": "3.4.0"
    }
  ],
  "examples": [
    {
      "name": "001-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- Dropdown 通过数据来渲染，支持 json 格式数据、React 组件\n * en - Base\n *   -- Dropdown is rendered through data and supports json formatted data and React components\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\nconst data: DropdownItem[] = [\n  {\n    content: 'Submenu',\n    children: [\n      {\n        content: 'Link to Google',\n        target: '_blank',\n        url: 'https://google.com',\n      },\n      {\n        content: <div style={{cursor: 'not-allowed'}}>Disabled</div>,\n        disabled: true,\n        children: [\n          { content: 'Child 1' },\n          { content: 'Child 2' },\n        ],\n      },\n    ],\n  },\n  <a key={'link'} href='/'>\n    Home\n  </a>,\n  {\n    content: 'Message',\n    onClick: () => {\n      console.info('Some message.');\n    },\n  },\n];\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Dropdown placeholder='Click me' data={data} onClick={console.log} />\n      <Dropdown placeholder='Click me' data={data} disabled />\n    </>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "002-hover",
      "title": "cn - 触发方式",
      "code": "/**\n * cn - 触发方式\n *    -- Dropdown 默认通过点击触发下拉行为，设置 trigger=\"hover\" 属性可以改为移入触发\n * en - Trigger\n *    -- By default, Dropdown toggled clicking, setting trigger=\"hover\" can toggled by mouse move in\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\n\nconst menu: DropdownItem[] = [\n  { content: 'America' },\n  { content: 'Germany' },\n  { content: 'United Kingdom' },\n  { content: 'France' },\n  { content: 'Russia' },\n];\n\nconst App: React.FC = () => (\n  <>\n    <Dropdown trigger='click' placeholder='Click me' data={menu} />\n    <Dropdown trigger='hover' placeholder='Hover me' data={menu} />\n  </>\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "003-position",
      "title": "cn - 弹出位置",
      "code": "/**\n * cn - 弹出位置\n *    -- 设置 position 属性可以控制下拉菜单弹出的方向和位置\n * en - Position\n *    -- Set position property can control the direction and position of the drop-down menu\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\n\nconst menu: DropdownItem[] = [\n  {\n    content: 'First',\n    children: [\n      {\n        content: 'link1',\n      },\n      {\n        content: 'link2',\n      },\n    ],\n  },\n  {\n    content: 'Second',\n    children: [\n      {\n        content: 'link3',\n      },\n      {\n        content: 'link4',\n        children: [\n          {\n            content: 'link5',\n          },\n          {\n            content: 'link6',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App: React.FC = () => (\n  <div style={{ display: 'inline-flex', flexDirection: 'column', gap: 12 }}>\n    <div style={{ display: 'flex', justifyContent: 'center', gap: 12, padding: '0 120px' }}>\n      <Dropdown placeholder='Bottom left' position='bottom-left' data={menu} />\n      <Dropdown placeholder='Bottom' position='bottom' data={menu} />\n      <Dropdown placeholder='Bottom right' position='bottom-right' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <Dropdown placeholder='Right Top' position='right-top' data={menu} />\n      <Dropdown placeholder='Left Top' position='left-top' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <Dropdown placeholder='Right' position='right' data={menu} />\n      <Dropdown placeholder='Left' position='left' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <Dropdown placeholder='Right Bottom' position='right-bottom' data={menu} />\n      <Dropdown placeholder='Left Bottom' position='left-bottom' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'center', gap: 12 }}>\n      <Dropdown placeholder='Top Left' position='top-left' data={menu} />\n      <Dropdown placeholder='Top' position='top' data={menu} />\n      <Dropdown placeholder='Top right' position='top-right' data={menu} />\n    </div>\n  </div>\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "004-button",
      "title": "cn - 按钮下拉",
      "code": "/**\n * cn - 按钮下拉\n *    -- 和 Button 属性相同, 支持 type text outline\n * en - Button\n *    -- Same as Button, support type text outline\n */\nimport React from 'react';\nimport { Dropdown } from 'shineout';\n\nconst menu: {\n  id: string;\n  content: string;\n}[] = [];\n\nfor (let i = 1; i <= 3; i++) {\n  menu.push({\n    id: `${i}`,\n    content: `item${i}`,\n  });\n}\n\nconst columnStyle: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'flex-start',\n  gap: 24,\n};\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', gap: 24 }}>\n    <div style={columnStyle}>\n      <Dropdown data={menu} type={'primary'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'secondary'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'danger'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'warning'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'success'} placeholder={'Default'} />\n    </div>\n    <div style={columnStyle}>\n      <Dropdown data={menu} type={'primary'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'secondary'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'danger'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'warning'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'success'} placeholder={'Outline'} outline />\n    </div>\n    <div style={columnStyle}>\n      <Dropdown data={menu} type={'primary'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'secondary'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'danger'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'warning'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'success'} placeholder={'Text'} text />\n    </div>\n  </div>\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "005-children",
      "title": "cn - 多级菜单",
      "code": "/**\n * cn - 多级菜单\n *    -- 带有多个下钻层级菜单的下拉框, 在 data 中设置 children 属性即可\n * en - Multi-level\n *   -- Dropdown with multiple levels of menu, set the children property in data\n */\nimport React from 'react';\nimport { Dropdown } from 'shineout';\n\nconst menu = new Array(5).fill(null).map((_, index) => ({\n  id: `${index}`,\n  content: `item${index}`,\n  children: new Array(5).fill(null).map((_, i) => ({\n    id: `${index}-${i}`,\n    content: `item${index}-${i}`,\n  })),\n}));\n\nconst App: React.FC = () => <Dropdown data={menu} placeholder={'Click me'} />;\n\nexport default App;\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 22,
    "requiredProps": 1,
    "propsWithWhen": 0
  },
  "subComponentApis": {}
}