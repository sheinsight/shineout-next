{
  "name": "Input",
  "description": "通常用于承载用户信息录入的文本框，常用于表单、对话框、表格等场景，在输入框基础样式上可以根据需求拓展出多种信息录入形式",
  "category": "other",
  "importPath": "import { Input } from 'shineout'",
  "props": [
    {
      "name": "value",
      "type": "string",
      "required": false,
      "description": "输入值"
    },
    {
      "name": "onChange",
      "type": "(value: string) => void",
      "required": false,
      "description": "值改变回调"
    },
    {
      "name": "defaultValue",
      "type": "string",
      "required": false,
      "description": "默认值"
    },
    {
      "name": "clearable",
      "type": "boolean | (() => void)",
      "required": false,
      "defaultValue": "false",
      "description": "可点击清空图标删除输入框内容，为函数式表示清空回调"
    },
    {
      "name": "name",
      "type": "string",
      "required": false,
      "description": "Form 内存取数据的 key"
    },
    {
      "name": "onBlur",
      "type": "FocusEventHandler<HTMLInputElement>",
      "required": false,
      "description": "失去焦点后的回调"
    },
    {
      "name": "onFocus",
      "type": "FocusEventHandler<HTMLInputElement>",
      "required": false,
      "description": "聚焦后的回调"
    },
    {
      "name": "onClick",
      "type": "MouseEventHandler<Element>",
      "required": false,
      "description": "点击回调"
    },
    {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "禁用组件"
    },
    {
      "name": "autoSelect",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否自动获得焦点"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\" | \"default\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "不同尺寸"
    },
    {
      "name": "prefix",
      "type": "ReactNode",
      "required": false,
      "description": "前缀"
    },
    {
      "name": "width",
      "type": "string | number",
      "required": false,
      "description": "宽度"
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "status",
      "type": "\"error\"",
      "required": false,
      "description": "组件状态"
    },
    {
      "name": "clearIcon",
      "type": "ReactNode",
      "required": false,
      "description": "自定义清除图标"
    },
    {
      "name": "suffix",
      "type": "ReactNode",
      "required": false,
      "description": "后缀"
    },
    {
      "name": "underline",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "仅仅展示下边框"
    },
    {
      "name": "border",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否展示边框"
    },
    {
      "name": "onEnterPress",
      "type": "((value: string, e: KeyboardEvent<Element>) => void)",
      "required": false,
      "description": "回车键回调函数"
    },
    {
      "name": "trim",
      "type": "boolean",
      "required": false,
      "description": "是否去除前后空格"
    },
    {
      "name": "numType",
      "type": "\"non-negative\" | \"positive\"",
      "required": false,
      "description": "设置数字类型 支持 \\\"positive\\\" 和 \\\"non-negative\\\", 仅在 type = number 下生效"
    },
    {
      "name": "coin",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "以千位分隔符展示,仅当 type 为 number 时有效"
    },
    {
      "name": "integerLimit",
      "type": "number",
      "required": false,
      "description": "整数位数限制, 仅在 type = number 下生效"
    },
    {
      "name": "digits",
      "type": "number",
      "required": false,
      "description": "小数位数限制, 仅在 type = number 下生效"
    },
    {
      "name": "autoFix",
      "type": "boolean",
      "required": false,
      "description": "是否自动补全小数位数, 仅在 type = number 下生效"
    },
    {
      "name": "tip",
      "type": "ReactNode",
      "required": false,
      "description": "提示信息"
    },
    {
      "name": "forwardRef",
      "type": "Ref<HTMLInputElement>",
      "required": false,
      "description": "获取input dom元素"
    },
    {
      "name": "innerTitle",
      "type": "ReactNode",
      "required": false,
      "description": "内嵌标题"
    },
    {
      "name": "placeTitle",
      "type": "ReactNode",
      "required": false,
      "description": "占位标题，需要配合 innerTitle 一起使用"
    },
    {
      "name": "htmlName",
      "type": "string",
      "required": false,
      "description": "原生 html 属性"
    },
    {
      "name": "clearToUndefined",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "点击清除按钮后数据变为 undefined"
    },
    {
      "name": "info",
      "type": "number | ((value: string | undefined) => string)",
      "required": false,
      "description": "提示信息"
    },
    {
      "name": "delay",
      "type": "number",
      "required": false,
      "description": "用户输入触发 onChange 和校验间隔时间，单位 毫秒"
    },
    {
      "name": "popover",
      "type": "PopoverProps[\"position\"]",
      "required": false,
      "description": "校验信息弹出位置"
    },
    {
      "name": "popoverProps",
      "type": "PopoverProps",
      "required": false,
      "description": "校验或者tip弹框接受的属性"
    },
    {
      "name": "beforeChange",
      "type": "((value: T) => void | T )",
      "required": false,
      "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
    },
    {
      "name": "onError",
      "type": "((error?: Error ) => void)",
      "required": false,
      "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
    },
    {
      "name": "reserveAble",
      "type": "boolean",
      "required": false,
      "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
    },
    {
      "name": "rules",
      "type": "RuleItem[]",
      "required": false,
      "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
    },
    {
      "name": "bind",
      "type": "string[]",
      "required": false,
      "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
    }
  ],
  "examples": [
    {
      "name": "01-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- Input 通常需要和其他的组件配合使用，所以默认的宽度是 100%，默认 display 为 block\n *    -- 如果设置了 style.width，默认 display 为 inline-flex\n * en - Base\n *    -- Input usually needs to be used with other components, so the default width is 100% and the default display is block\n *    -- If the style.width is set, the default display is inline-flex\n */\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => <Input width={300} placeholder='input something' clearable />;\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "02-size",
      "title": "cn - 尺寸大小",
      "code": "/**\n * cn - 尺寸大小\n *    -- 设置 `size` 属性改变输入框组件的尺寸大小。内置三种尺寸：small、default、large\n * en - Size\n *    -- Set the size property to change the size of the input box component. There are three built-in sizes available: small, default, and large\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ width: '100%', display: 'flex', alignItems: 'center', gap: 24, flexWrap: 'wrap' }}>\n    <Input size='small' width={240} placeholder='small size' clearable />\n    <Input width={240} placeholder='default size' clearable />\n    <Input size='large' width={240} placeholder='large size' clearable />\n  </div>\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "03-number-0",
      "title": "cn - 数字",
      "code": "/**\n * cn - 数字\n *    -- 设置 `type` 为 number，输入时会做一次校验，禁止输入非数字类型字符\n *    -- 设置 `digits` 限制小数位数\n *    -- 设置 `integerLimit` 限制整数位数\n *    -- 设置 `numType` 限制数字格式, 支持 'positive' 和 'non-negative'\n * en - Number\n *    -- Set `type` to number, the input will be verified once when inputting, and non-numeric characters are not allowed to be entered\n *    -- Set `digits` to limit the number of decimal places\n *    -- Set `integerLimit` to limit the number of integers\n *    -- Set `numType` to limit the number format, support 'positive' and 'non-negative'\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst style: React.CSSProperties = { marginBottom: 24 };\n\nconst App: React.FC = () => (\n  <div style={{ width: 300 }}>\n    <Input style={style} type='number' placeholder='digits undefined' clearable />\n    <Input style={style} digits={0} type='number' placeholder='digits 0' clearable />\n    <Input style={style} digits={1} type='number' placeholder='digits 1' clearable />\n    <Input style={style} digits={2} type='number' placeholder='digits 2' clearable />\n    <Input style={style} numType='non-negative' type='number' placeholder='non-negative' clearable />\n    <Input style={style} type='number' integerLimit={3} placeholder='integerLimit 3' clearable />\n    <Input\n      style={style}\n      autoFix\n      digits={3}\n      type='number'\n      placeholder='digits 3; autoFix'\n      clearable\n    />\n    <Input\n      style={style}\n      numType='positive'\n      integerLimit={3}\n      type='number'\n      placeholder='positive;integerLimit 3'\n      clearable\n    />\n    <Input.Number numType='positive' integerLimit={3} placeholder='positive; integerLimit 3' clearable />\n  </div>\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "03-number-1",
      "title": "cn -",
      "code": "/**\n * cn -\n *    -- Input.Number 组件，可以通过鼠标和上下键辅助输入\n *    -- 需要注意在输入的过程中 value 是 string 类型；blur 时会转换为 number 类型\n * en -\n *    -- Input.Number component, can be assisted by mouse and up and down keys to input\n *    -- Note that the value is a string type during input; it will be converted to a number type when blur\n */\n\nimport React from 'react';\nimport { Input, Gap, Link, icons } from 'shineout';\n\nconst btnStyle: React.CSSProperties = {\n  cursor: 'pointer',\n  padding: '0 8px',\n  background: 'var(--soui-input-group-font-background-color,var(--soui-neutral-fill-2,#F4F5F8))',\n};\n\nconst leftBtnStyle: React.CSSProperties = {\n  ...btnStyle,\n  borderLeft: 'none',\n  borderRadius: '4px 0 0 4px',\n};\nconst rightBtnStyle: React.CSSProperties = {\n  ...btnStyle,\n  borderRight: 'none',\n  borderRadius: '0 4px 4px 0',\n};\n\nconst iconStyle: React.CSSProperties = {\n  width: 16,\n  height: 16,\n};\n\nconst App: React.FC = () => {\n  const [number, setNumber] = React.useState<string | undefined>();\n\n  const onMinus = () => {\n    setNumber((Number(number || 0) - 1).toString());\n  };\n\n  const onPlus = () => {\n    setNumber((Number(number || 0) + 1).toString());\n  };\n\n  return (\n    <Gap style={{ flexDirection: 'column', gap: 24 }}>\n      <Input.Group width={300}>\n        <Link onClick={onMinus} style={leftBtnStyle} type='secondary'>\n          <div style={iconStyle}>{icons.Minus}</div>\n        </Link>\n        <Input\n          type='number'\n          value={number}\n          onChange={(v) => setNumber(v)}\n          placeholder='please enter'\n        />\n        <Link onClick={onPlus} style={rightBtnStyle} type='secondary'>\n          <div style={iconStyle}>{icons.Add}</div>\n        </Link>\n      </Input.Group>\n\n      <Input.Number\n        width={300}\n        onChange={(v) => {\n          console.log('🚀outter Input.Number onChange', v);\n        }}\n        placeholder='please enter'\n      />\n    </Gap>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "04-01-group",
      "title": "cn - 前后标签",
      "code": "/**\n * cn - 前后标签\n *    -- 利用内置的 group 组件可以在前后增加标签\n * en - Front and rear tags\n *    -- Use the built-in group component to add tags before and after\n */\n\nimport React from 'react';\nimport { Input, Select, DatePicker, Button } from 'shineout';\n\nconst style: React.CSSProperties = { width: 300, marginBottom: 24 };\n\nconst App: React.FC = () => (\n  <div>\n    <Input.Group style={style}>\n      <b>http://</b>\n      <Input placeholder='please enter' />\n    </Input.Group>\n    <Input.Group style={style}>\n      <Input placeholder='please enter' />\n      <b>.com</b>\n    </Input.Group>\n    <Input.Group style={style}>\n      <b>http://</b>\n      <Input placeholder='please enter' />\n      <b>.com</b>\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Input placeholder='please enter' />\n      <div style={{ lineHeight: '30px' }}>-</div>\n      <Input placeholder='please enter' />\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Select keygen data={['Option1', 'Option2']} style={{width: 100, flex: 'none'}} defaultValue='Option1' />\n      <Input placeholder='please enter' />\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Select keygen data={['Option1', 'Option2']} style={{width: 100, flex: 'none'}} defaultValue='Option1' />\n      <DatePicker placeholder='please select' />\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Select keygen data={['Option1', 'Option2']} style={{width: 100, flex: 'none'}} defaultValue='Option1' />\n      <Input placeholder='please enter' />\n      <Button type='primary'>Search</Button>\n    </Input.Group>\n\n    <h3 style={{ marginBottom: 12, fontSize: 16 }}>Other Size</h3>\n    <Input.Group style={style} size=\"small\">\n      <b>http://</b>\n      <Input placeholder='email' />\n      <b>.com</b>\n    </Input.Group>\n\n    <Input.Group style={style} size=\"large\">\n      <b>http://</b>\n      <Input placeholder='email' />\n      <b>.com</b>\n    </Input.Group>\n  </div>\n);\n\nexport default App;\n",
      "language": "tsx"
    }
  ],
  "subComponents": [
    "Group"
  ],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 42,
    "requiredProps": 0,
    "propsWithWhen": 0
  },
  "subComponentApis": {
    "Group": {
      "props": [
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "type": "\"error\"",
          "required": false,
          "description": "组件状态"
        },
        {
          "name": "style",
          "type": "CSSProperties",
          "required": false,
          "description": "自定义样式"
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"default\"",
          "required": false,
          "defaultValue": "\\\"default\\\"",
          "description": "不同尺寸"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "子元素"
        },
        {
          "name": "width",
          "type": "string | number",
          "required": false,
          "description": "宽度"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "是否禁用 Input.Group 区域内容"
        },
        {
          "name": "onBlur",
          "type": "FocusEventHandler<HTMLInputElement>",
          "required": false,
          "description": "失去焦点后的回调"
        },
        {
          "name": "separate",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "是否分离边框",
          "version": "3.7.0"
        }
      ]
    }
  }
}