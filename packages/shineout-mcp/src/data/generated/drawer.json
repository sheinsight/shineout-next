{
  "name": "Drawer",
  "description": "屏幕边缘滑出的浮层面板, 通常位于页面的侧栏或顶部菜单中，用于存储和显示交互的相关信息和菜单选项",
  "category": "feedback",
  "importPath": "import { Drawer } from 'shineout'",
  "props": [
    {
      "name": "position",
      "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
      "required": false,
      "defaultValue": "\\\"right\\\"",
      "description": "Pop-up position"
    },
    {
      "name": "width",
      "type": "string | number",
      "required": false,
      "defaultValue": "auto",
      "description": "the width of the Drawer"
    },
    {
      "name": "height",
      "type": "string | number",
      "required": false,
      "defaultValue": "auto",
      "description": "the height of the Drawer"
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "hideMask",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否隐藏遮罩"
    },
    {
      "name": "forceMask",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否强制设置遮罩透明度（多层Modal中，除第一层外的其他弹出层遮罩透明度会被调整为0.01）"
    },
    {
      "name": "top",
      "type": "string | number",
      "required": false,
      "defaultValue": "10vh",
      "description": "弹框距离顶部距离"
    },
    {
      "name": "fullScreen",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否全屏展示"
    },
    {
      "name": "bodyStyle",
      "type": "CSSProperties",
      "required": false,
      "description": "扩展弹出层 body 的样式"
    },
    {
      "name": "footer",
      "type": "ReactNode",
      "required": false,
      "description": "底部内容"
    },
    {
      "name": "maskCloseAble",
      "type": "boolean | null",
      "required": false,
      "defaultValue": "true",
      "description": "点击遮罩层是否关闭对话框, 设置为 null 右上角关闭图标会保留"
    },
    {
      "name": "padding",
      "type": "string | number",
      "required": false,
      "description": "内容内边距"
    },
    {
      "name": "title",
      "type": "ReactNode",
      "required": false,
      "description": "弹出层的标题"
    },
    {
      "name": "visible",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否显示"
    },
    {
      "name": "zIndex",
      "type": "number",
      "required": false,
      "defaultValue": "1050",
      "description": "弹出层 z-index 值，注意：如果嵌套 Select 组件，并且 Select 组件含有 absolute 字段，需要修改 Select 的 z-index 的值"
    },
    {
      "name": "rootClassName",
      "type": "string",
      "required": false,
      "description": "弹出层的根元素类名, 为遮罩层的父元素"
    },
    {
      "name": "container",
      "type": "(() => HTMLElement | null) | HTMLElement | null",
      "required": false,
      "defaultValue": "document.body",
      "description": "渲染的目标节点"
    },
    {
      "name": "maskBackground",
      "type": "string",
      "required": false,
      "description": "遮罩背景色，设置后透明度将失效"
    },
    {
      "name": "onClose",
      "type": "(() => void)",
      "required": false,
      "description": "弹出层关闭回调"
    },
    {
      "name": "destroy",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "关闭时是否销毁元素"
    },
    {
      "name": "hideClose",
      "type": "boolean",
      "required": false,
      "description": "是否隐藏关闭按钮"
    },
    {
      "name": "type",
      "type": "\"success\" | \"info\" | \"warning\" | \"error\"",
      "required": false,
      "description": "弹出层 title 显示状态 icon，drawer模式下需配合title使用"
    },
    {
      "name": "zoom",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否开启 zoom 动画效果"
    },
    {
      "name": "esc",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否支持 esc 键关闭"
    },
    {
      "name": "events",
      "type": "object",
      "required": false,
      "defaultValue": "{}",
      "description": "外层元素所接受的事件列表，可用于在 createPortal 场景中阻止冒泡"
    },
    {
      "name": "resizable",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否可调整大小"
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "弹出层内容"
    }
  ],
  "examples": [
    {
      "title": "Base",
      "description": "The basic usage for component",
      "code": "/**\n * cn - 基本用法\n *    -- 最基本的组件用法\n *    -- Drawer 会在 document.body 中创建一个新的层显示弹出内容\n *    -- 关闭 Drawer 时默认没有对组件进行销毁, 只是隐藏, 组件的状态会被保留。 如果不需要保留组件之前的状态, 可以设置 destroy 属性\n * en - Base\n *    -- The basic usage for component\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerVisible = DrawerProps['visible'];\ntype DrawerOnClose = DrawerProps['onClose'];\n\nconst App: React.FC = () => {\n  const [content, setContent] = useState(1);\n  const [visible, setVisible] = useState<DrawerVisible>(false);\n\n  const handleCancel: DrawerOnClose = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked cancel');\n  };\n\n  const handleOk = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked ok!');\n  };\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  return (\n    <div>\n      <Button onClick={show} mode=\"outline\">click me</Button>\n      <Drawer\n        width={400}\n        visible={visible}\n        title='Drawer Title'\n        onClose={handleCancel}\n        footer={[\n          <Button key='cancel' onClick={handleCancel} mode='outline'>\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleOk}>\n            Ok\n          </Button>,\n        ]}\n      >\n        {`you are visited ${content}`}\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Position",
      "description": "Set position property to specify the pop-up position",
      "code": "/**\n * cn - 位置\n *    -- 通过 position 可设置 Drawer 弹出的位置, 现支持 top、right、bottom 和 left 四个位置配置\n * en - Position\n *    -- Set position property to specify the pop-up position\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Form, Input, Radio, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerPosition = DrawerProps['position'];\n\nconst positionList: DrawerPosition[] = ['right', 'top', 'bottom', 'left'];\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [position, setPosition] = useState<DrawerPosition>('right');\n\n  const toggle = (v: boolean) => {\n    setVisible(v);\n  };\n\n  const footer = () => (\n    <div>\n      <Button mode='outline' onClick={() => toggle(false)}>\n        Cancel\n      </Button>\n      <Drawer.Submit>Submit</Drawer.Submit>\n    </div>\n  );\n  return (\n    <div>\n      <Radio.Group\n        keygen\n        value={position}\n        data={positionList}\n        onChange={(p) => setPosition(p)}\n        style={{ marginBottom: 24 }}\n      />\n\n      <Button onClick={() => toggle(true)} mode=\"outline\">click me</Button>\n\n      <Drawer\n        title='Form'\n        key={position}\n        footer={footer()}\n        visible={visible}\n        position={position}\n        onClose={() => toggle(false)}\n      >\n        <Form\n          labelWidth={100}\n          labelAlign='right'\n          style={{ width: 500 }}\n          onSubmit={() => toggle(false)}\n        >\n          <Form.Item required label='Email'>\n            <Input name='email' />\n          </Form.Item>\n\n          <Form.Item required label='Password'>\n            <Input name='password' type='password' />\n          </Form.Item>\n        </Form>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Target",
      "description": "set container to render target node",
      "code": "/**\n * cn - 指定目标\n *    -- 使用 container 来指定 Drawer 渲染的目标节点\n * en - Target\n *    -- set container to render target node\n */\nimport React, { useState } from 'react';\nimport { Button, Drawer, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerContainer = DrawerProps['container'];\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [wrapper, setWrapper] = useState<DrawerContainer>();\n\n  const handleDismiss = () => {\n    setVisible(false);\n  };\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  return (\n    <div ref={(ref) => setWrapper(ref!)}>\n      <Button onClick={show} mode=\"outline\">click me</Button>\n      <Drawer\n        width={400}\n        visible={visible}\n        container={wrapper}\n        title='Drawer Title'\n        onClose={handleDismiss}\n        footer={[\n          <Button key='cancel' onClick={handleDismiss} mode='outline'>\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleDismiss}>\n            Ok\n          </Button>,\n        ]}\n      >\n        Drawer mount after Button\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Form",
      "description": "The internal form of Drawer can use Drawer.Submit to trigger submit",
      "code": "/**\n * cn - 表单\n *    -- Drawer 支持 Form 表单，并且支持 Form 的所有特性，表单提交可以使用 Drawer.Submit 来代替 Button[type=submit]\n * en - Form\n *    --The internal form of Drawer can use Drawer.Submit to trigger submit\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Form, Input, Message, TYPE } from 'shineout';\n\ninterface FormValue {\n  email?: string;\n  password?: string;\n}\n\ntype FormProps = TYPE.Form.Props<FormValue>;\ntype FormRules = FormProps['rules'];\n\nconst rules: FormRules = {\n  email: [\n    { required: true, message: 'Please enter your email.' },\n    { type: 'email', message: 'Please enter a valid email.' },\n  ],\n  password: [\n    { required: true, message: 'Please enter password.' },\n    { min: 7, message: 'Password must be at least {min} characters.' },\n    { regExp: /[a-z]+/i, message: 'Password at least has one letter.' },\n    (value: string, _formData: any, callback: any) => {\n      if (/\\d+/.test(value)) callback(true);\n      else callback(new Error('Password at least has one numeral.'));\n    },\n  ],\n};\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const handleClose = () => {\n    setVisible(false);\n  };\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  const handleSubmit = (data: FormValue) => {\n    setVisible(false);\n    Message.success(JSON.stringify(data));\n  };\n\n  const renderFooter = () => (\n    <div>\n      <Button onClick={handleClose} mode='outline'>Cancel</Button>\n      <Drawer.Submit>Submit</Drawer.Submit>\n    </div>\n  );\n\n  return (\n    <div>\n      <Button onClick={show} mode=\"outline\">Drawer Form</Button>\n\n      <Drawer\n        visible={visible}\n        width={456}\n        title='Form'\n        onClose={handleClose}\n        footer={renderFooter()}\n      >\n        <Form\n          labelWidth={85}\n          rules={rules}\n          labelAlign='right'\n          onSubmit={handleSubmit}\n        >\n          <Form.Item required label='Email'>\n            <Input name='email' />\n          </Form.Item>\n\n          <Form.Item required label='Password'>\n            <Input name='password' type='password' />\n          </Form.Item>\n        </Form>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Close",
      "description": "By default, clicking on the blank page outside the Modal box will closes the Modal box",
      "code": "/**\n * cn - 点击空白关闭\n *    -- 默认点击对话框外部空白页面会关闭对话框\n *    -- 设置 maskCloseAble 属性为 false，禁用点击空白关闭，同时右上角的关闭图标也会隐藏\n *    -- 设置 maskCloseAble 属性为 null，禁用点击空白关闭，右上角的关闭图标会保留\n * en - Close\n *    -- By default, clicking on the blank page outside the Modal box will closes the Modal box\n *    -- Set maskCloseAble to false to disable the function that click mask to close and the close icon in the upper right corner will be hidden at the same time\n *    -- Set maskCloseAbel to null to disable the function that click mask to close and the close icon in the upper right corner will be preserved\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Radio } from 'shineout';\n\nconst list: { title: string; value: boolean | null }[] = [\n  {\n    title: 'false',\n    value: false,\n  },\n  {\n    title: 'true',\n    value: true,\n  },\n  {\n    title: 'null',\n    value: null,\n  },\n];\n\nconst App: React.FC = () => {\n  const [selected, setSelected] = useState(list[0]);\n  const [visible, setVisible] = useState(false);\n\n  const footer = () => (\n    <Button mode='outline' onClick={() => setVisible(false)}>\n      Close\n    </Button>\n  );\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 24 }}>\n        <Radio.Group\n          data={list}\n          keygen='title'\n          value={selected}\n          renderItem='title'\n          onChange={(c) => setSelected(c)}\n          prediction={(v, d) => v.title === d.title}\n          style={{ marginInlineEnd: 20 }}\n        />\n      </div>\n\n      <Button onClick={() => setVisible(true)} mode=\"outline\">Open</Button>\n\n      <Drawer\n        width={400}\n        visible={visible}\n        footer={footer()}\n        title='Modal Title'\n        maskCloseAble={selected.value}\n        onClose={() => setVisible(false)}\n      >\n        The prop maskCloseAble is &nbsp;\n        {selected.title}\n        .\n        <br />\n        You must click the button to close the Modal.\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Full Screen",
      "description": "Use the fullScreen property to display the Drawer in full screen",
      "code": "/**\n * cn - 全屏\n *    -- 使用 fullScreen 属性来使抽屉全屏展示\n * en - Full Screen\n *    -- Use the fullScreen property to display the Drawer in full screen\n */\nimport React, { useState, useCallback } from 'react';\n\nimport {\n  Form,\n  Drawer,\n  Button,\n  Input,\n  Upload,\n  Radio,\n  Checkbox,\n  DatePicker,\n  Rate,\n  Textarea,\n} from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst Content = () => {\n  return (\n    <div>\n      <Form\n        defaultValue={{ name: 'zhangsan', email: 'zhangsan@qq.com', score: 3 }}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='Name'>\n          <Input name={'name'} placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Password'>\n          <Input name={'password'} placeholder='please input password' clearable />\n        </Form.Item>\n        <Form.Item label='Email'>\n          <Input name={'email'} clearable placeholder='please input email' />\n        </Form.Item>\n        <Form.Item label='Gendar'>\n          <Radio.Group name='gendar' data={['male', 'female']} keygen />\n        </Form.Item>\n        <Form.Item label='Course'>\n          <Checkbox.Group name='course' data={['chinese', 'maths', 'english', 'physics']} keygen />\n        </Form.Item>\n        <Form.Item label='Enrollment date'>\n          <DatePicker name='date' placeholder={'please select date'} clearable showSelNow />\n        </Form.Item>\n        <Form.Item label='Score'>\n          <StarRate name='score'></StarRate>\n        </Form.Item>\n        <Form.Item label='upload avatar'>\n          <Upload.Image\n            action='/api/upload'\n            accept='image/*'\n            name='file'\n            htmlName='file'\n            recoverAble\n            leftHandler\n            removeConfirm='Are you sure to delete it ?'\n            limit={3}\n            onSuccess={(_res, filem, data) => {\n              return data;\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='Address'>\n          <Textarea name='address' />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const cancel = useCallback(() => {\n    setVisible(false);\n  }, [visible]);\n\n  const footer = () => (\n    <Button type='primary' onClick={cancel}>\n      OK\n    </Button>\n  );\n\n  return (\n    <div>\n      <Drawer title='Profile' fullScreen visible={visible} onClose={cancel} footer={footer()}>\n        <Content></Content>\n      </Drawer>\n      <Button onClick={() => setVisible(true)} mode=\"outline\">Full Screen</Button>\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Icon",
      "description": "use type display type icon",
      "code": "/**\n * cn - 附带图标\n *    -- 使用 type 属性来指定标题附带的图标，需配合title使用\n * en - Icon\n *    -- use type display type icon\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Radio, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerType = DrawerProps['type'];\n\nconst typeList: DrawerType[] = ['info', 'success', 'warning', 'error'];\n\nconst App: React.FC = () => {\n  const [type, setType] = useState<DrawerType>('success');\n  const [visible, setVisible] = useState(false);\n\n  const handleOk = () => {\n    setVisible(false);\n    console.log('clicked ok!');\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    console.log('clicked cancel');\n  };\n\n  const show = () => setVisible(true);\n\n  const footer = () => [\n    <Button key='cancel' onClick={handleCancel} mode=\"outline\">\n      Cancel\n    </Button>,\n\n    <Button key='ok' type={type === 'error' ? 'danger' : 'primary'} onClick={handleOk}>\n      Ok\n    </Button>,\n  ];\n\n  return (\n    <div>\n      <Radio.Group\n        style={{ marginBottom: 24 }}\n        data={typeList}\n        value={type}\n        keygen\n        onChange={setType}\n      />\n\n      <Button onClick={show} mode='outline' >\n        click me\n      </Button>\n\n      <Drawer\n        type={type}\n        width={500}\n        visible={visible}\n        footer={footer()}\n        onClose={handleCancel}\n        title={`Drawer Title with ${type} Icon`}\n      >\n        <span>Drawer type: </span>\n        <b>{type}</b>\n      </Drawer>\n    </div>\n  );\n};\nexport default App;\n"
    },
    {
      "title": "hide mask",
      "description": "use hideMask property to hide mask",
      "code": "/**\n * cn - 隐藏遮罩\n *    -- 使用 hideMask 属性来隐藏遮罩\n * en - hide mask\n *    -- use hideMask property to hide mask\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const [content, setContent] = useState(1);\n  const [visible, setVisible] = useState<boolean>(false);\n\n  const handleCancel = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked cancel');\n  };\n\n  const handleOk = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked ok!');\n  };\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  return (\n    <div>\n      <Button onClick={show} mode=\"outline\">click me</Button>\n      <Drawer\n        width={400}\n        hideMask\n        visible={visible}\n        title='Drawer Title'\n        onClose={handleCancel}\n        footer={[\n          <Button key='cancel' onClick={handleCancel} mode='outline' >\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleOk}>\n            Ok\n          </Button>,\n        ]}\n      >\n        {`you are visited ${content}`}\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "Resizable",
      "description": "Set resizable to resize Drawer freely",
      "code": "/**\n * cn - 可伸缩\n *    -- 设置 resizable 来自由调整 Drawer 大小\n * en - Resizable\n *    -- Set resizable to resize Drawer freely\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Form, Input, Radio, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerPosition = DrawerProps['position'];\n\nconst positionList: DrawerPosition[] = ['right', 'top', 'bottom', 'left'];\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [position, setPosition] = useState<DrawerPosition>('right');\n\n  const toggle = (v: boolean) => {\n    setVisible(v);\n  };\n\n  const footer = () => (\n    <div>\n      <Button mode='outline' onClick={() => toggle(false)}>\n        Cancel\n      </Button>\n      <Drawer.Submit>Submit</Drawer.Submit>\n    </div>\n  );\n  return (\n    <div>\n      <Radio.Group\n        keygen\n        value={position}\n        data={positionList}\n        onChange={(p) => setPosition(p)}\n        style={{ marginBottom: 24 }}\n      />\n\n      <Button onClick={() => toggle(true)} mode=\"outline\">click me</Button>\n\n      <Drawer\n        title='Form'\n        key={position}\n        resizable\n        footer={footer()}\n        visible={visible}\n        position={position}\n        onClose={() => toggle(false)}\n      >\n        <Form\n          labelWidth={100}\n          labelAlign='right'\n          style={{ width: 500 }}\n          onSubmit={() => toggle(false)}\n        >\n          <Form.Item required label='Email'>\n            <Input name='email' />\n          </Form.Item>\n\n          <Form.Item required label='Password'>\n            <Input name='password' type='password' />\n          </Form.Item>\n        </Form>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
    }
  ],
  "subComponents": [
    "Submit"
  ],
  "version": "3.7.10-beta.3",
  "notes": {},
  "apiSummary": {
    "totalProps": 28,
    "requiredProps": 0,
    "propsWithWhen": 0,
    "examplesCount": 9
  }
}