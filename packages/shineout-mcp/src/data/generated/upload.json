{
  "name": "Upload",
  "description": "用户可传输文件或提交相应的内容 (本页中的示例服务端限制为 10 KB，大于此限制的文件会上传失败)",
  "category": "other",
  "importPath": "import { Upload } from 'shineout'",
  "props": [
    {
      "name": "onChange",
      "type": "((value: T[]) => void)",
      "required": false,
      "description": "值改变回调(上传成功，删除)。values: 数组, 其每个值是 onSuccess 的返回值"
    },
    {
      "name": "value",
      "type": "any[]",
      "required": false,
      "description": "defaultValue 和 value 可以同时设置，defaultValue 会被value覆盖 在 Form 中，value会被表单接管，value 无效"
    },
    {
      "name": "accept",
      "type": "string",
      "required": false,
      "description": "上传文件类型, 和标准一致, 详见[accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)"
    },
    {
      "name": "action",
      "type": "string | ((file: File) => string)",
      "required": false,
      "description": "上传地址"
    },
    {
      "name": "beforeUpload",
      "type": "((file: File) => Promise<any>)",
      "required": false,
      "description": "上传前的回调"
    },
    {
      "name": "validatorHandle",
      "type": "boolean | ((error: any, file: File) => boolean)",
      "required": false,
      "defaultValue": "true",
      "description": "是否处理校验失败的情况, 如果提供一个函数, 则以函数的返回值判断是否处理此 error"
    },
    {
      "name": "headers",
      "type": "object",
      "required": false,
      "description": "请求头部信息"
    },
    {
      "name": "htmlName",
      "type": "string",
      "required": false,
      "description": "服务端接收的 filename，不填使用 name"
    },
    {
      "name": "limit",
      "type": "number",
      "required": false,
      "defaultValue": "100",
      "description": "最大上传文件数"
    },
    {
      "name": "responseType",
      "type": "XMLHttpRequestResponseType",
      "required": false,
      "description": "设置 xhr.responseType"
    },
    {
      "name": "request",
      "type": "(options: UploadOptions) => Xhr | void",
      "required": false,
      "description": "自定义上传方法。 options: 上传的配置"
    },
    {
      "name": "params",
      "type": "object",
      "required": false,
      "description": "上传参数"
    },
    {
      "name": "withCredentials",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否携带 cookie"
    },
    {
      "name": "onStart",
      "type": "((file: File) => void)",
      "required": false,
      "description": "开始上传的回调函数"
    },
    {
      "name": "onProgress",
      "type": "false | ((fileInfo: FileRecord) => any)",
      "required": false,
      "description": "上传中进度"
    },
    {
      "name": "onSuccess",
      "type": "((res: any, file: File, data?: any, xhr?: XhrResult ) => ValueItem | Error)",
      "required": false,
      "description": "上传成功事件\\nres: 上传接口返回结果\\nfile: 选择的文件\\ndata: 请求的数据\\nxhr: 返回的 response"
    },
    {
      "name": "onHttpError",
      "type": "((xhr: XhrResult, file: File) => string )",
      "required": false,
      "description": "上传出错事件(props 中为 onHttpError)"
    },
    {
      "name": "filesFilter",
      "type": "((fileList: File[]) => File[])",
      "required": false,
      "description": "文件选中后的筛选，用户可自定义最终需要上传的文件列表。需返回一个新的文件列表"
    },
    {
      "name": "validator",
      "type": "Validator",
      "required": false,
      "description": "上传前文件校验，详见下方 Validator"
    },
    {
      "name": "forceAccept",
      "type": "string",
      "required": false,
      "description": "在使用时关闭了 accept 提供的文件类型过滤后，强制对文件类型进行校验（值同accept)"
    },
    {
      "name": "onErrorRemove",
      "type": "((xhr: XhrResult, file: File, fileInfo?: any) => void)",
      "required": false,
      "description": "上传失败图片删除之后的回调"
    },
    {
      "name": "beforeCancel",
      "type": "((file: FileRecord) => void)",
      "required": false,
      "description": "取消文件上传前的回调"
    },
    {
      "name": "recoverAble",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否可以恢复已删除的value"
    },
    {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否禁用"
    },
    {
      "name": "beforeRemove",
      "type": "((value: ValueItem) => Promise<any>)",
      "required": false,
      "description": "删除前的确认，返回一个Promise用于最终确定是否删除"
    },
    {
      "name": "ignorePreview",
      "type": "boolean",
      "required": false,
      "description": "是否忽略上传图片预览"
    },
    {
      "name": "functionalOnChange",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "设置为true后，组件的onChange参数会返回函数，即回调函数方式的setState",
      "version": "3.6.5"
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "showUploadList",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否展示上传列表"
    },
    {
      "name": "drop",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否开启拖拽上传文件"
    },
    {
      "name": "multiple",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "文件多选"
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "上传占位内容"
    },
    {
      "name": "webkitdirectory",
      "type": "string | boolean",
      "required": false,
      "description": "同原生 input 标签的 webkitdirectory 属性"
    },
    {
      "name": "defaultValue",
      "type": "T[]",
      "required": false,
      "description": "默认值"
    },
    {
      "name": "renderResult",
      "type": "((data: any) => ReactNode)",
      "required": false,
      "defaultValue": "a => a",
      "description": "结果展示"
    },
    {
      "name": "canDelete",
      "type": "boolean | ((item: T, index: number) => boolean)",
      "required": false,
      "defaultValue": "true",
      "description": "文件是否可以删除"
    },
    {
      "name": "customResult",
      "type": "((options: { value: any; files: any; onValueRemove: (index: number) => void; onFileRemove: (id: string) => void; filesInstances: ReactNode; valueInstances: ReactNode; recoverValue: any; onValueRecover: (index: number) => void; handler: ReactNode; }) => ReactNode)",
      "required": false,
      "description": "自定义Result 组件"
    },
    {
      "name": "forceAcceptErrorMsg",
      "type": "string",
      "required": false,
      "description": "forceAccept 类型校验失败后自定义错误提示"
    },
    {
      "name": "removeConfirm",
      "type": "string | PopoverConfirmProps",
      "required": false,
      "description": "是否在删除文件和图片前弹出确认"
    },
    {
      "name": "listType",
      "type": "\"text\" | \"image\"",
      "required": false,
      "defaultValue": "\\\"text\\\"",
      "description": "展示类型"
    },
    {
      "name": "hideHandler",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否隐藏图片上传触发器。注意，开启该属性后不会影响 customResult 中的 handler 返回，只会隐藏默认的触发器",
      "version": "3.6.0"
    },
    {
      "name": "beforeDrop",
      "type": "((e: DragEvent<Element>) => Promise<FileList>)",
      "required": false,
      "description": "拖拽释放前的回调。允许用户自行处理拖拽事件以及读取文件列表，要求返回值必须为 Promise<FileList> 类型",
      "version": "3.7.0"
    },
    {
      "name": "leftHandler",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "添加图片视图是否在左侧展示"
    },
    {
      "name": "imageStyle",
      "type": "CSSProperties",
      "required": false,
      "defaultValue": "{width: 80, height: 80}",
      "description": "图片选择框的样式"
    },
    {
      "name": "renderContent",
      "type": "((res: any, item: T, index: number, values: T[]) => ReactNode)",
      "required": false,
      "description": "自定义渲染上传的图片"
    },
    {
      "name": "onPreview",
      "type": "((url: string, value: T, index: number, values: T[], fun: { preview: () => void; }) => void)",
      "required": false,
      "description": "自定义预览图片操作，默认为画廊展示"
    },
    {
      "name": "name",
      "type": "Name",
      "required": false,
      "description": "Form 内存取数据的 key"
    },
    {
      "name": "beforeChange",
      "type": "((value: T) => void | T )",
      "required": false,
      "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
    },
    {
      "name": "reserveAble",
      "type": "boolean",
      "required": false,
      "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
    },
    {
      "name": "rules",
      "type": "RuleItem[]",
      "required": false,
      "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
    },
    {
      "name": "onError",
      "type": "((error?: Error ) => void)",
      "required": false,
      "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
    },
    {
      "name": "bind",
      "type": "string[]",
      "required": false,
      "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
    }
  ],
  "examples": [
    {
      "name": "01-base-0",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- 基础的文件上传, onSuccess 的返回值会作为 value 传给 onChange\n * en - Base\n *    -- Basic usage for uploading file, the onSuccess's returns will be the onChange params\n\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\n\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<string[]>([]);\n\n  return (\n    <Upload\n      action='//jsonplaceholder.typicode.com/posts'\n      accept='image/*'\n      value={value}\n      htmlName='file'\n      onSuccess={(_res, file) => file.name}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  );\n};\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "01-base-1-image",
      "title": "cn - 上传图片",
      "code": "/**\n * cn - 上传图片\n *    -- 使用 Upload.Image 处理带预览的图片上\n * en - Upload Image\n *    -- Basic usage for uploading file, the onSuccess's returns will be the onChange params\n\n */\nimport React from 'react';\nimport { Upload } from 'shineout';\nimport { mockRquest } from './request';\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<string[]>([]);\n\n  return (\n    <Upload.Image\n      request={mockRquest({\n        uploadTime: 5000,\n        success: true,\n      })}\n      accept='image/*'\n      value={value}\n      htmlName='file'\n      recoverAble\n      leftHandler\n      removeConfirm='Are you sure to delete it ?'\n      limit={3}\n      onSuccess={(_res, filem, data) => {\n        return data;\n      }}\n      onChange={(v) => {\n        setValue(v);\n      }}\n    />\n  );\n};\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "01-base-2-button",
      "title": "cn - 按钮上传",
      "code": "/**\n * cn - 按钮上传\n *    -- 使用 Upload.Button 展示单个文件的上传进度\n * en - Button\n *    -- Use Upload.Button to show the upload progress of individual files\n */\nimport React from 'react';\nimport { Upload } from 'shineout';\nimport { mockRquest } from './request';\n\nconst App: React.FC = () => {\n\n  return (\n  <Upload.Button\n    type={'primary'}\n    request={mockRquest({\n      uploadTime: 5000,\n      success: true\n    })}\n    name='file'\n    onSuccess={(_res, file) => file.name}\n    loading='Uploading...'\n    placeholder='Click to upload'\n  />\n)\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "02-result-a",
      "title": "cn - 自定义结果",
      "code": "/**\n * cn - 自定义结果\n *    -- 默认展示的结果和 value 里面所存储的值是一样的, 如果有需求需要, 可以用 renderResult 自行处理\n * en - Custom result\n *    -- The result of the default display is the same as the value stored in the value. If there is a need, you can use the renderResult to handle it yourself\n\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\nimport { mockRquest } from './request';\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<{ name: string }[]>([]);\n\n  return (\n    <Upload\n      request={mockRquest({\n        uploadTime: 5000,\n        // 随机成功或失败\n        success: Math.random() > 0.5,\n      })}\n      accept='image/*'\n      value={value}\n      htmlName='file'\n      renderResult={(f) => f.name}\n      onSuccess={(_res, file) => ({\n        name: file.name,\n      })}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      limit={3}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "02-result-b",
      "title": "cn -",
      "code": "/**\n * cn -\n *    -- 设置 `customResult` 属性可以自定义上传结果展示\n * en -\n *    -- Set the `customResult` property to customize the upload result display\n\n */\nimport React from 'react';\nimport { Button, Upload, Link, icons } from 'shineout';\nimport { UploadIcon, FilePdfIcon, FielWordIcon, FileIcon, ImageIcon } from './static/icon';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    item: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: '4px 8px',\n      gap: 4,\n      marginTop: 2,\n      '&:hover': {\n        borderRadius: 2,\n        backgroundColor: 'var(---Neutral-fill-2-, #F4F5F8)',\n      },\n    },\n    btn: {\n      marginLeft: 'auto',\n    }\n  },\n  { name: 'upload-custom' },\n);\n\n\ninterface FileItem {\n  name: string;\n}\nconst df = [\n  {\n    name: '文件名称.doc',\n  },\n  {\n    name: '文件名称.pdf',\n  },\n  {\n    name: '文件名称.txt',\n  },\n  {\n    name: '文件名称.png',\n  },\n  {\n    name: '文件名称.gif',\n  },\n];\n\n// 根据文件名获取文件图标\nconst renderFileIcon = (name: string) => {\n  const ext = name.split('.').pop();\n  if (ext === 'pdf') {\n    return <FilePdfIcon fontSize={14} />;\n  }\n  if (ext === 'doc') {\n    return <FielWordIcon fontSize={14} />;\n  }\n  if(ext === 'png' || ext === 'gif') {\n    return <ImageIcon fontSize={14} />\n  }\n  return <FileIcon fontSize={14} />;\n}\n\ninterface CustomResultProps {\n  value: FileItem[];\n  files: any;\n  onValueRemove: (index: number) => void;\n  onFileRemove: (id: string) => void;\n  recoverValue: any;\n  onValueRecover: (index: number) => void;\n}\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<FileItem[]>(df);\n\n  const classnames = useStyles();\n\n  const customResult = (options: CustomResultProps) => {\n    const { value, onValueRemove } = options;\n    return value.map((item, index) => {\n\n      return <div key={item.name} className={classnames.item} style={index === 0 ? { marginTop: 12 } : {}}>\n        {renderFileIcon(item.name)}\n        {item.name}\n        <Link type=\"secondary\" onClick={() => onValueRemove(index)} style={{width: 14, height: 14}} className={classnames.btn}>\n          {icons.Delete}\n        </Link>\n      </div>\n    }) as any;\n  }\n  return (\n    <Upload\n      accept='*'\n      value={value}\n      htmlName='file'\n      customResult={customResult}\n      onSuccess={(_res, file) => ({\n        name: file.name,\n      })}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 53,
    "requiredProps": 0,
    "propsWithWhen": 0
  },
  "subComponentApis": {}
}