{
  "name": "Message",
  "description": "用户进行操作后，系统对该操作行为内容作出的反馈",
  "category": "feedback",
  "importPath": "import { Message } from 'shineout'",
  "props": [
    {
      "name": "content",
      "type": "ReactNode",
      "required": true,
      "description": "消息内容"
    },
    {
      "name": "duration",
      "type": "number",
      "required": false,
      "defaultValue": "3",
      "description": "消息持续时间，单位秒；如果设置为 0，必须手动关闭"
    }
  ],
  "examples": [
    {
      "name": "01-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- Message 封装了一组全局函数，方便在任意地方调用，包括常规（不带/带icon）、Success、Warn、Error和关闭所有消息提醒\n * en - Base\n *    -- Message has 6 static functions that are convenient to call anywhere, includes normal(with/without icon)、success、warn、error and close all messages\n */\nimport React from 'react';\nimport { Button, Message } from 'shineout';\n\nconst commonStyle = { margin: 0 };\nconst App: React.FC = () => (\n  <div style={{display: 'flex', flexWrap: 'wrap', gap: 24}}>\n    <Button\n      onClick={() => {\n        Message.show('Some message.');\n      }}\n    >\n      Show\n    </Button>\n    <Button\n      style={commonStyle}\n      onClick={() => {\n        Message.info('This is a message of info.');\n      }}\n      type='primary'\n    >\n      Info\n    </Button>\n    <Button\n      type='success'\n      style={commonStyle}\n      onClick={() => {\n        Message.success('This is a message of success.');\n      }}\n    >\n      Success\n    </Button>\n    <Button\n      style={commonStyle}\n      type='warning'\n      onClick={() => {\n        Message.warn('This is a message of warning.');\n      }}\n    >\n      Warn\n    </Button>\n    <Button\n      type='danger'\n      style={commonStyle}\n      onClick={() => {\n        Message.error('This is a message of error.');\n      }}\n    >\n      Error\n    </Button>\n\n    <Button\n      style={commonStyle}\n      onClick={() => {\n        Message.close();\n      }}\n    >\n      Close All\n    </Button>\n  </div>\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "02-duration",
      "title": "cn - 显示时长",
      "code": "/**\n * cn - 显示时长\n *    -- 通过 duration 属性可以控制消息显示的时长，默认为3秒；当设定为 0s 时，则需要用户手动关闭 Message\n * en - Duration\n *    -- Set duration property to control the duration of the message display. The default value is 3 seconds\n *    -- When duration is set to 0, the message will not hide automatically\n */\nimport React from 'react';\nimport { Button, Message } from 'shineout';\n\nconst s10 = () => Message.info('This message will close after 10 seconds.', 10);\nconst s0 = () => Message.error('This message will not close utill click the close icon.', 0);\n\nconst commonStyle = { marginInlineStart: '24px' };\nconst App: React.FC = () => (\n  <div>\n    <Button onClick={s10}>Duration 10 s.</Button>\n    <Button onClick={s0} style={commonStyle}>\n      Manually close\n    </Button>\n  </div>\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "03-position",
      "title": "cn - 弹出位置",
      "code": "/**\n * cn - 弹出位置\n *    -- 设置 positoin 参数，修改显示位置，可以实现消息提醒展示位置，可选值：top, middle, top-left, top-right, bottom-left, bottom-right\n * en - Notification\n *    -- Set position property to specify the pop-up layer location, optional value: top, middle, top-left, top-right, bottom-left, bottom-right\n */\nimport React, { useState } from 'react';\nimport { Button, Message, Radio, TYPE } from 'shineout';\n\ntype MessageOptions = TYPE.Message.Options;\n\nconst App: React.FC = () => {\n  const [position, setPosition] = useState<MessageOptions['position']>('top-right');\n\n  const show = () => {\n    Message.info(<div style={{ width: 240 }}>some message.</div>, 3, {\n      position,\n      title: 'notify title',\n    });\n  };\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 24 }}>\n        <Radio.Group\n          keygen\n          value={position}\n          onChange={setPosition}\n          data={['top', 'middle', 'top-left', 'top-right', 'bottom-left', 'bottom-right']}\n        />\n      </div>\n      <Button onClick={show}>Show message.</Button>\n    </div>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "04-close",
      "title": "cn - 关闭回调",
      "code": "/**\n * cn - 关闭回调\n *    -- 通过第三个参数[options]的 onClose 属性处理消息关闭回调。以下用例将在 Message 关闭后弹出新的 Message\n * en - Close\n *    -- Set onClose to handle close event\n */\nimport React from 'react';\nimport { Button, Message } from 'shineout';\n\nconst App: React.FC = () => {\n  const close = () => {\n    Message.warn('Close this message will display another message.', 0, {\n      onClose: () => {\n        Message.info('You can close the message now.');\n      },\n    });\n  };\n\n  return <Button onClick={close}>Close callback</Button>;\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "05-manual-close",
      "title": "cn - 手动关闭",
      "code": "/**\n * cn - 手动关闭\n *    -- Message 会异步返回一个关闭函数，调用它来关闭当前 Messsage\n * en - Close\n *    -- Message return close func async\n */\nimport React from 'react';\nimport { Button, Message, Link } from 'shineout';\n\nconst App: React.FC = () => {\n  const msg = async () => {\n    const close = await Message.success(\n      <div>\n        I will always show until &nbsp;\n        <Link onClick={() => close()}>manually closed</Link>\n      </div>,\n      0,\n      {\n        title: 'Manual Close',\n      },\n    );\n  };\n\n  return <Button onClick={msg}>Manual Close</Button>;\n};\n\nexport default App;\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 2,
    "requiredProps": 1,
    "propsWithWhen": 0
  },
  "subComponentApis": {}
}