{
  "name": "Steps",
  "description": "提示用户进度以及当前的步骤，用于引导用户按照步骤完成任务的导航条",
  "category": "navigation",
  "importPath": "import { Steps } from 'shineout'",
  "props": [
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\" | \"default\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "不同尺寸"
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": true,
      "description": "子元素"
    },
    {
      "name": "direction",
      "type": "\"horizontal\" | \"vertical\"",
      "required": false,
      "defaultValue": "\\\"horizontal\\\"",
      "description": "步骤条方向"
    },
    {
      "name": "type",
      "type": "\"default\" | \"dot\" | \"arrow\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "节点样式类型"
    },
    {
      "name": "labelPlacement",
      "type": "\"horizontal\" | \"vertical\"",
      "required": false,
      "defaultValue": "\\\"vertical\\\"",
      "description": "标签描述文字放置的位置"
    },
    {
      "name": "status",
      "type": "\"wait\" | \"process\" | \"finish\" | \"error\"",
      "required": false,
      "description": "当前步数节点状态"
    },
    {
      "name": "current",
      "type": "number",
      "required": false,
      "defaultValue": "0",
      "description": "当前步数"
    },
    {
      "name": "renderIcon",
      "type": "((index: number, status?: \"wait\" | \"process\" | \"finish\" | \"error\" ) => ReactNode)",
      "required": false,
      "description": "自定义节点图标"
    },
    {
      "name": "onChange",
      "type": "((index: number) => void)",
      "required": false,
      "description": "步骤切换的回调,配置该属性可让步骤条可点击"
    },
    {
      "name": "disabled",
      "type": "boolean | ((index: number, id: any) => boolean)",
      "required": false,
      "description": "当前步骤节点是否被禁用，支持传入函数进行判断。优先级低于 Step 上的 disabled"
    }
  ],
  "examples": [
    {
      "name": "01-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- 步骤条基础用法\n * en - Basic\n *    -- Basic steps\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps current={1}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "02-size",
      "title": "cn - 尺寸",
      "code": "/**\n * cn - 尺寸\n *    -- 步骤条支持三种尺寸small、default、large\n * en - Size\n *    -- Steps support three sizes: small, default, large\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps size='small' current={1} style={{ marginBottom: 32 }}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n      <Steps current={1} style={{ marginBottom: 32 }}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n      <Steps size='large' current={1}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "03-description",
      "title": "cn - 描述信息",
      "code": "/**\n * cn - 描述信息\n *    -- 通过配置`description`属性可以设置步骤条的描述信息\n * en - Description\n *    -- Set description by `description` property\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps current={1}>\n        <Steps.Step title='Succeeded' description='This is a description' />\n        <Steps.Step title='Processing' description='This is a description' />\n        <Steps.Step title='Pending' description='This is a description' />\n      </Steps>\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "04-status",
      "title": "cn - 节点状态",
      "code": "/**\n * cn - 节点状态\n *    -- 通过指定`status`属性可以设置步骤条节点的状态\n *    -- 注意，step 的 status 优先级高于 steps 的 status\n * en - Status\n *    -- Set step status by `status` property\n *    -- Note that the status of the step has a higher priority than the status of the steps\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps current={1}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Error' status='error' />\n        <Steps.Step title='Pending' />\n      </Steps>\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "05-icon",
      "title": "cn - 自定义图标",
      "code": "/**\n * cn - 自定义图标\n *    -- 通过`renderIcon`属性可以自定义渲染步骤条节点的图标\n * en - Custom icon\n *    -- Set custom icon by `renderIcon` property\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\nimport { successIcon, warningIcon, iconWait } from './static/icon';\n\nexport default () => {\n  const renderIcon = (index: number, status: any) => {\n    if (status === 'wait') {\n      return iconWait;\n    }\n    if (status === 'finish') {\n      return successIcon;\n    }\n    if (status === 'process') {\n      return warningIcon;\n    }\n    return index + 1;\n  };\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <Steps current={1} renderIcon={renderIcon}>\n        <Steps.Step title='Step1' />\n        <Steps.Step title='Step2' />\n        <Steps.Step title='Step3' />\n        <Steps.Step title='Step4' />\n      </Steps>\n    </div>\n  );\n};\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 12,
    "requiredProps": 1,
    "propsWithWhen": 0
  },
  "subComponentApis": {}
}