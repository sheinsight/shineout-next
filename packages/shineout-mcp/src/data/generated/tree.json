{
  "name": "Tree",
  "description": "用于承载有父子关系的结构化内容，提供内容层级的展示",
  "category": "other",
  "importPath": "import { Tree } from 'shineout'",
  "props": [
    {
      "name": "tiledData",
      "type": "DataItem[]",
      "required": false,
      "description": ""
    },
    {
      "name": "active",
      "type": "string | number",
      "required": false,
      "description": "激活节点的key"
    },
    {
      "name": "value",
      "type": "Value",
      "required": false,
      "description": "选中的 key （受控）"
    },
    {
      "name": "defaultValue",
      "type": "(string | number)[]",
      "required": false,
      "description": "默认选中的 key （非受控）"
    },
    {
      "name": "data",
      "type": "DataItem[]",
      "required": true,
      "description": "数据，子节点为 children，如果 children 值为 null 或 长度为 0 时，视为叶子节点"
    },
    {
      "name": "expanded",
      "type": "(string | number)[]",
      "required": false,
      "description": "展开的节点 key(受控)"
    },
    {
      "name": "defaultExpanded",
      "type": "(string | number)[]",
      "required": false,
      "description": "默认展开的节点 key（非受控）"
    },
    {
      "name": "defaultExpandAll",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "默认展开所有节点"
    },
    {
      "name": "disabled",
      "type": "boolean | ((item: DataItem) => boolean) | { disabled: (data: DataItem) => boolean, isRealtime: boolean }",
      "required": false,
      "defaultValue": "false",
      "description": "显示选择框时有效，为 true 时，所有节点禁用选择，为函数时，根据函数返回结果确定是否禁用"
    },
    {
      "name": "keygen",
      "type": "| ObjectKey<DataItem> | ((data: DataItem, index: string) => string | number)",
      "required": true,
      "defaultValue": "index",
      "description": "生成 key 的辅助方法, 为函数时，使用此函数返回值, 为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d) => d.id"
    },
    {
      "name": "childrenKey",
      "type": "ObjectKey<DataItem>",
      "required": false,
      "defaultValue": "\\\"children\\\"",
      "description": "指定子数据的属性名"
    },
    {
      "name": "mode",
      "type": "0 | 1 | 2 | 3 | 4",
      "required": false,
      "defaultValue": "1",
      "description": "选中值模式，未设置值为单选 0: 只返回完全选中的节点，包含父节点 1: 返回全部选中的节点和半选中的父节点 2: 只返回选中的子节点 3: 如果父节点选中，只返回父节点 4: 所选即所得"
    },
    {
      "name": "dataUpdate",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否监听 data 变化更新数据"
    },
    {
      "name": "unmatch",
      "type": "boolean",
      "required": false,
      "description": "是否开启不匹配模式"
    },
    {
      "name": "onExpand",
      "type": "((value: (string | number)[]) => void)",
      "required": false,
      "description": "节点展开回调，参数为当前展开节点 key 数组"
    },
    {
      "name": "virtual",
      "type": "boolean",
      "required": false,
      "description": "虚拟列表",
      "version": "3.6.0"
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "line",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否显示连接线"
    },
    {
      "name": "iconClass",
      "type": "string",
      "required": false,
      "description": "展开/收起按钮的类名"
    },
    {
      "name": "nodeClass",
      "type": "string | ((data: DataItem) => string)",
      "required": false,
      "description": "节点的class，如果是函数，参数为该节点数据"
    },
    {
      "name": "contentClass",
      "type": "string | ((data: DataItem) => string)",
      "required": false,
      "description": "内容样式"
    },
    {
      "name": "leafClass",
      "type": "string | ((data: DataItem) => string)",
      "required": false,
      "description": "叶子节点的 class, 函数的参数为该条叶子节点数据"
    },
    {
      "name": "leafIcon",
      "type": "boolean | ((d: T) => ReactNode) | ReactNode",
      "required": false,
      "description": "开启叶子节点前的图标，或者自定义函数渲染",
      "version": "3.7.0"
    },
    {
      "name": "expandIcons",
      "type": "(ReactNode | ((d: DataItem) => ReactNode))[]",
      "required": false,
      "description": "自定义展开/收起按钮"
    },
    {
      "name": "childrenClass",
      "type": "string | ((data: DataItem) => string)",
      "required": false,
      "description": "子节点 class, 函数的参数为该条叶子节点数据"
    },
    {
      "name": "onDrop",
      "type": "((data: DataItem[], key: string | number, targetKey: string | number, position: number) => void)",
      "required": false,
      "description": "设置 onDrop 属性时，为可拖动状态"
    },
    {
      "name": "setActive",
      "type": "((key: string | number , data?: DataItem ) => void)",
      "required": false,
      "description": "设置激活节点的key",
      "version": "3.4.0"
    },
    {
      "name": "doubleClickExpand",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "双击是否展开节点"
    },
    {
      "name": "parentClickExpand",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "点击父节点展开"
    },
    {
      "name": "actionOnClick",
      "type": "ActionOnClick | ActionOnClick[]",
      "required": false,
      "description": "点击节点展开是的操作: \\\"expand\\\" 展开节点，\\\"check\\\" 选中复选框",
      "version": "3.6.0"
    },
    {
      "name": "dragImageSelector",
      "type": "string | ((data?: DataItem ) => string)",
      "required": false,
      "description": "定义拖拽图片的选择器"
    },
    {
      "name": "renderItem",
      "type": "| ((item: DataItem, expanded: boolean, active: boolean, id: string | number) => ReactNode) | ObjectKey<DataItem>",
      "required": true,
      "defaultValue": "index",
      "description": "为 string 时，返回 d[string]。 为 function 时，返回函数结果"
    },
    {
      "name": "onChange",
      "type": "((value: Value, id: string | number) => void)",
      "required": false,
      "description": "设置 onChange 属性时，显示 选择框。参数为当前选中值，和 mode 属性相关"
    },
    {
      "name": "dragImageStyle",
      "type": "CSSProperties",
      "required": false,
      "description": "拖拽图片的原生 style 样式"
    },
    {
      "name": "dragSibling",
      "type": "boolean",
      "required": false,
      "description": "是否只能平级拖拽"
    },
    {
      "name": "dragHoverExpand",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "拖拽时自动展开含有子节点的节点"
    },
    {
      "name": "inlineNode",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "节点是否内联"
    },
    {
      "name": "highlight",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "点击节点高亮"
    },
    {
      "name": "loader",
      "type": "((key: string | number, data: DataItem) => void)",
      "required": false,
      "description": "设置 loader 属性后，未定义 children 的节点视为动态加载节点，点击展开触发 loader事件，children 为 null 或者长度为 0 视为叶子节点"
    },
    {
      "name": "onClick",
      "type": "((data: DataItem, id: string | number, path?: { children: (string | number)[], path: (string | number)[], isDisabled: boolean, indexPath: number[], index: number } ) => void)",
      "required": false,
      "description": "节点点击事件"
    },
    {
      "name": "onDragStart",
      "type": "((e: DragEvent<Element>, data: DataItem) => void)",
      "required": false,
      "description": "拖拽开始事件"
    },
    {
      "name": "onDragEnd",
      "type": "((e: DragEvent<Element>, data: DataItem) => void)",
      "required": false,
      "description": "拖拽结束事件"
    },
    {
      "name": "onDragOver",
      "type": "((e: DragEvent<Element>, data: DataItem) => void)",
      "required": false,
      "description": "拖拽经过事件"
    },
    {
      "name": "onDragLeave",
      "type": "((e: DragEvent<Element>, data: DataItem) => void)",
      "required": false,
      "description": "拖拽离开事件"
    },
    {
      "name": "lineHeight",
      "type": "number",
      "required": false,
      "description": "列表项高度"
    },
    {
      "name": "height",
      "type": "number",
      "required": false,
      "description": "列表高度，仅开启virtual时生效",
      "version": "3.6.0"
    },
    {
      "name": "rowsInView",
      "type": "number",
      "required": false,
      "defaultValue": "20",
      "description": "同时展示的列表项数量",
      "version": "3.6.0"
    },
    {
      "name": "rootStyle",
      "type": "CSSProperties",
      "required": false,
      "description": ""
    },
    {
      "name": "ignoreSetFlat",
      "type": "boolean",
      "required": false,
      "description": ""
    },
    {
      "name": "size",
      "type": "\"small\" | \"default\" | \"large\"",
      "required": false,
      "defaultValue": "default",
      "description": "组件尺寸",
      "version": "3.7.0"
    }
  ],
  "examples": [
    {
      "name": "01-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- 基础 Tree 组件用法，当配置 `children` 字段时，允许展开和收起节点\n * en - Base\n *    -- Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes\n */\n\nimport { Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n            },\n            {\n              id: '0-0-1',\n              children: [\n                {\n                  id: '0-0-1-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: '1',\n      children: [\n        {\n          id: '1-0',\n          children: [\n            {\n              id: '1-0-0',\n            },\n            {\n              id: '1-0-1',\n              children: [\n                {\n                  id: '1-0-1-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '1-1',\n          children: [\n            {\n              id: '1-1-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return `node ${node.id}`;\n  };\n\n  return (\n    <div>\n      <Tree data={data} keygen='id' renderItem={renderItem}></Tree>\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "03-line",
      "title": "cn - 无连接线",
      "code": "/**\n * cn - 无连接线\n *    -- 设置 `line` 为 false，不显示连接线\n * en - line\n *    -- Set `line` to false to hide the connection line\n */\n\nimport { Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data: DataItem[] = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n              children: [\n                {\n                  id: '0-0-0-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const renderItem: TreeProps['renderItem'] = (node: any) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  return (\n    <div>\n      <Tree\n        defaultExpanded={['0', '0-0']}\n        line={false}\n        data={data}\n        keygen='id'\n        renderItem={renderItem}\n      ></Tree>\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "04-01-expand",
      "title": "cn - 控制展开",
      "code": "/**\n * cn - 控制展开\n *    -- 基础 Tree 组件用法，当配置 `children` 字段时，允许展开和收起节点\n * en - expand\n *    -- Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes\n *\n */\nimport { useState } from 'react';\nimport { Tree, Button, TYPE } from 'shineout';\nimport { createNestedArray, getIds } from './utils';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = createNestedArray([2, 2, 2]);\n\nexport default () => {\n  const [expanded, setExpanded] = useState<TreeProps['expanded']>([]);\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  const handleExpandAll = () => {\n    setExpanded(getIds(data));\n  };\n\n  const handleCloseAll = () => {\n    setExpanded([]);\n  };\n\n  const handleExpand: TreeProps['onExpand'] = (ids) => {\n    setExpanded([...ids]);\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Button size='small' mode='outline' type='secondary' onClick={handleExpandAll}>\n          Expand all\n        </Button>\n        <Button size='small' mode='outline' type='secondary' onClick={handleCloseAll}>\n          Collapse all\n        </Button>\n      </div>\n      <Tree\n        line={false}\n        data={data}\n        expanded={expanded}\n        onExpand={handleExpand}\n        keygen='id'\n        renderItem={renderItem}\n      ></Tree>\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "04-02-expandall",
      "title": "cn - 默认展开全部",
      "code": "/**\n * cn - 默认展开全部\n *    -- 设置 `defaultExpandAll` 属性，可以默认展开所有节点\n * en - Default Expand all\n *    -- Set the `defaultExpandAll` property to expand all nodes by default\n *\n */\nimport { Tree, TYPE } from 'shineout';\nimport { createNestedArray } from './utils';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = createNestedArray([2, 2, 2]);\nexport default () => {\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  return (\n    <div>\n      <Tree defaultExpandAll line={false} data={data} keygen='id' renderItem={renderItem}></Tree>\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "05-disabled",
      "title": "cn - 禁用状态",
      "code": "/**\n * cn - 禁用状态\n *    -- 基础 Tree 组件用法，当配置 `children` 字段时，允许展开和收起节点\n * en - disabled\n *    -- Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes\n */\n\nimport { useState } from 'react';\nimport { Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data: DataItem[] = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n        {\n          id: '0-2',\n          children: [\n            {\n              id: '0-2-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [value, setValue] = useState<TreeProps['value']>([]);\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  const isDisabled: TreeProps['disabled'] = (node) => {\n    return node.id === '0-0';\n  };\n\n  const handleChange: TreeProps['onChange'] = (keys) => {\n    setValue(keys);\n  };\n\n  return (\n    <div>\n      <Tree\n        line={false}\n        value={value}\n        data={data}\n        keygen='id'\n        mode={0}\n        defaultExpanded={['0']}\n        onChange={handleChange}\n        disabled={isDisabled}\n        renderItem={renderItem}\n      ></Tree>\n    </div>\n  );\n};\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 51,
    "requiredProps": 3,
    "propsWithWhen": 0
  }
}