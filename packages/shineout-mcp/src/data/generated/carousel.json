{
  "name": "Carousel",
  "description": "轮播视图容器",
  "category": "display",
  "importPath": "import { Carousel } from 'shineout'",
  "props": [
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "animation",
      "type": "\"slide\" | \"slide-y\" | \"fade\"",
      "required": false,
      "defaultValue": "\\\"slide\\\"",
      "description": "动画效果，可选值为 slide - 横向滑动 ，slide-y - 垂直滑动 ，fade - 淡入淡出"
    },
    {
      "name": "indicatorPosition",
      "type": "\"left\" | \"center\" | \"right\" | \"outer\"",
      "required": false,
      "defaultValue": "\\\"center\\\"",
      "description": "指示标示位置"
    },
    {
      "name": "indicatorType",
      "type": "\"number\" | ((current: number, moveTo: (index: number) => void) => ReactNode) | \"circle\" | \"line\" | \"bar\"",
      "required": false,
      "defaultValue": "\\\"circle\\\"",
      "description": "指示标示样式, 函数则可以自定义样式: (current, moveTo) => (<Component />)"
    },
    {
      "name": "interval",
      "type": "number",
      "required": false,
      "defaultValue": "0",
      "description": "动画间隔时间，为 0 时，不自动播放"
    },
    {
      "name": "onMove",
      "type": "((current: number, extra: { prev: number; direction: \"forward\" | \"backward\"; moveTo: (n: number) => void; }) => void)",
      "required": false,
      "description": "轮播后的回调"
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "子元素"
    },
    {
      "name": "showArrow",
      "type": "\"always\" | \"hover\"",
      "required": false,
      "description": "切换箭头显示时机"
    },
    {
      "name": "showIndicator",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否展示指示器"
    },
    {
      "name": "arrowClassName",
      "type": "string",
      "required": false,
      "description": "箭头扩展 class"
    },
    {
      "name": "itemClassName",
      "type": "string",
      "required": false,
      "description": "轮播项的 class"
    }
  ],
  "examples": [
    {
      "title": "基本用法",
      "description": "最基本的使用",
      "scenario": "basic",
      "code": "/**\n * cn - 基本用法\n *    -- 最基本的使用\n * en - Base\n *    -- The basic usage\n */\nimport React from 'react';\nimport { Carousel } from 'shineout';\n\nconst images = [\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n];\nconst App: React.FC = () => {\n  return (\n    <Carousel\n      style={{ width: 600, height: 280 }}\n      showArrow={'hover'}\n      interval={5000}\n      onMove={console.log}\n    >\n      {images.map((src) => (\n        <img key={src} src={src} />\n      ))}\n    </Carousel>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "指示器",
      "description": "可以指定指示器类型和位置",
      "scenario": "basic",
      "code": "/**\n * cn - 指示器\n *    -- 可以指定指示器类型和位置\n * en - Indicator\n *    -- You can set indicator type and position\n */\nimport React, { useState } from 'react';\nimport { Carousel, Radio, TYPE } from 'shineout';\n\ntype CarouselProps = TYPE.Carousel.Props;\ntype CarouselIndicatorType = CarouselProps['indicatorType'];\ntype CarouselIndicatorPosition = CarouselProps['indicatorPosition'];\n\nconst images = [\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n];\nconst App: React.FC = () => {\n  const [indicatorType, setIndicatorType] = useState<CarouselIndicatorType>('circle');\n  const [indicatorPosition, setIndicatorPosition] = useState<CarouselIndicatorPosition>('center');\n\n  const rowStyle = { display: 'flex', marginBottom: 16, alignItems: 'center' };\n  return (\n    <div>\n      <div style={rowStyle}>\n        <div style={{ width: 150 }}>indicator position:</div>\n        <Radio.Group\n          keygen\n          value={indicatorPosition}\n          data={['left', 'center', 'right', 'outer']}\n          onChange={(v) => setIndicatorPosition(v)}\n        />\n      </div>\n      <div style={rowStyle}>\n        <div style={{ width: 150 }}>indicator type:</div>\n        <Radio.Group\n          keygen\n          value={indicatorType}\n          data={['circle', 'line', 'bar', 'number']}\n          onChange={(v) => setIndicatorType(v)}\n        />\n      </div>\n\n      <Carousel\n        style={{ width: 600, height: 280 }}\n        indicatorPosition={indicatorPosition}\n        indicatorType={indicatorType}\n        interval={3000}\n      >\n        {images.map((src) => (\n          <img key={src} src={src} />\n        ))}\n      </Carousel>\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "切换方向",
      "description": "轮播组件提供了三种动画过渡方式，可以切换选项查看效果",
      "scenario": "basic",
      "code": "/**\n * cn - 切换方向\n *    -- 轮播组件提供了三种动画过渡方式，可以切换选项查看效果\n * en - Animation\n *    -- The carousel component provides three animation transition modes, you can switch options to see the effect\n */\nimport React, { useState } from 'react';\nimport { Carousel, Radio, TYPE } from 'shineout';\n\ntype CarouselProps = TYPE.Carousel.Props;\n\nconst images = [\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n];\nconst App: React.FC = () => {\n  const [animationType, setAnimation] = useState<CarouselProps['animation']>('slide');\n\n  const rowStyle = { display: 'flex', marginBottom: 16, alignItems: 'center' };\n  return (\n    <div>\n      <div style={rowStyle}>\n        <div style={{ width: 150 }}>animation type:</div>\n        <Radio.Group\n          keygen\n          value={animationType}\n          data={['slide', 'slide-y', 'fade']}\n          onChange={(v) => setAnimation(v)}\n        />\n      </div>\n\n      <Carousel style={{ width: 600, height: 280 }} interval={3000} animation={animationType}>\n        {images.map((src) => (\n          <img key={src} src={src} />\n        ))}\n      </Carousel>\n    </div>\n  );\n};\n\nexport default App;\n"
    },
    {
      "title": "自定义 Indicator",
      "description": "当 indicatorType 为函数时，可以自定义 Indicator",
      "scenario": "advanced",
      "code": "/**\n * cn - 自定义 Indicator\n *    -- 当 indicatorType 为函数时，可以自定义 Indicator\n * en - Custom Indicator\n *    -- Indicators can be customized when indicatorType is a function\n */\nimport React from 'react';\nimport { Carousel, TYPE } from 'shineout';\nimport classnames from 'classnames';\n\nrequire('./style-2-custom-indicator.css');\n\ntype CarouselProps = TYPE.Carousel.Props;\ntype CarouselInterval = CarouselProps['interval'];\ntype CarouselIndicatorType = CarouselProps['indicatorType'];\n\nconst containerStyle = {\n  fontSize: 40,\n  color: '#fff',\n  display: 'flex',\n  margin: 'auto',\n};\nconst items = ['S', 'H', 'I', 'N', 'E'];\nconst duration: CarouselInterval = 5000;\n\nconst App: React.FC = () => {\n  const indicatorSwitch: CarouselIndicatorType = (current, moveTo) => (\n    <div className='indicator'>\n      {items.map((item, index) => {\n        const isActive = current === index;\n        const itemClassname = classnames('indicator-item', isActive && 'active');\n        const animationStyle = isActive\n          ? { animation: `indicator-rise ${duration / 1000}s linear` }\n          : {};\n        return (\n          <div key={item} onClick={() => moveTo(index)} className={itemClassname}>\n            <span>{item}</span>\n            <div className='indicator-progress'>\n              <div className='fg' style={animationStyle} />\n              <div className='bg' />\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  return (\n    <Carousel\n      indicatorType={indicatorSwitch}\n      style={{ width: 600, height: 280 }}\n      interval={duration}\n    >\n      {items.map((item) => (\n        <div key={item} style={{ background: '#2e97f1', display: 'flex' }}>\n          <div style={containerStyle}>{item}</div>\n        </div>\n      ))}\n    </Carousel>\n  );\n};\n\nexport default App;\n\n/* style-2-custom-indicator.css\n@keyframes indicator-rise {\n  from {\n    width: 0;\n  }\n  to {\n    width: 100%;\n  }\n}\ndiv.indicator {\n  text-align: center;\n  user-select: none;\n  float: left;\n}\ndiv.indicator-item {\n  margin-right: 10px;\n  float: left;\n  width: 36px;\n  height: 30px;\n  font-size: 20px;\n  color: #ffffff50;\n  cursor: pointer;\n}\ndiv.indicator-item.active {\n  color: #fff;\n}\ndiv.indicator .indicator-progress {\n  position: relative;\n}\ndiv.indicator .indicator-progress > div {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  border-radius: 1000px;\n}\ndiv.indicator .indicator-progress .bg {\n  width: 100%;\n  background: #ffffff50;\n}\ndiv.indicator .indicator-progress .fg {\n  width: 0;\n  background: #ffffff;\n}\n*/\n"
    }
  ],
  "subComponents": [],
  "version": "3.7.7"
}