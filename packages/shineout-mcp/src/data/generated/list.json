{
  "name": "List",
  "description": "最基础的列表展示，可承载文字、列表、图片、段落",
  "category": "other",
  "importPath": "import { List } from 'shineout'",
  "props": [
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "striped",
      "type": "boolean",
      "required": false,
      "description": "是否显示交错斑马底纹"
    },
    {
      "name": "pagination",
      "type": "PaginationProps",
      "required": false,
      "defaultValue": "PaginationProps",
      "description": "分页展示, 详见 Pagination"
    },
    {
      "name": "itemStyle",
      "type": "CSSProperties",
      "required": false,
      "description": "列表容器样式"
    },
    {
      "name": "colNum",
      "type": "number",
      "required": false,
      "defaultValue": "1",
      "description": "多列展示"
    },
    {
      "name": "data",
      "type": "any[]",
      "required": true,
      "description": "渲染数据"
    },
    {
      "name": "keygen",
      "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number) | true",
      "required": true,
      "description": "生成每一项key的辅助方法\\n为 true 时，以数据项本身作为 key，相当于 (d => d)\\n为函数时，使用此函数返回值\\n为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
    },
    {
      "name": "renderItem",
      "type": "ObjectKey<DataItem> | ((d: DataItem, index: number) => ReactNode)",
      "required": false,
      "description": "需要渲染成列表的数据"
    },
    {
      "name": "fixed",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否启用虚拟列表"
    },
    {
      "name": "height",
      "type": "number",
      "required": false,
      "description": "列表高度"
    },
    {
      "name": "bordered",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否显示边框"
    },
    {
      "name": "lineHeight",
      "type": "number",
      "required": false,
      "defaultValue": "32",
      "description": "列表项高度"
    },
    {
      "name": "rowsInView",
      "type": "number",
      "required": false,
      "defaultValue": "10",
      "description": "同时展示的列表项数量"
    },
    {
      "name": "empty",
      "type": "ReactNode",
      "required": false,
      "description": "无数据时展示的内容"
    },
    {
      "name": "scrollLoading",
      "type": "(() => void)",
      "required": false,
      "description": "滚动到底部时触发"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\" | \"default\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "尺寸"
    },
    {
      "name": "loading",
      "type": "ReactNode",
      "required": false,
      "defaultValue": "false",
      "description": "加载中"
    },
    {
      "name": "loadingPosition",
      "type": "\"center\" | \"bottom\"",
      "required": false,
      "defaultValue": "\\\"center\\\"",
      "description": "loading 图标位置， 如果设置了fixed=true，则bottom位置无效",
      "version": "3.7.0"
    },
    {
      "name": "footer",
      "type": "ReactNode | (() => ReactNode)",
      "required": false,
      "description": "底部内容"
    },
    {
      "name": "rowClassName",
      "type": "string | ((rowData: DataItem, index: number) => string )",
      "required": false,
      "description": "自定义行 className"
    },
    {
      "name": "value",
      "type": "any[]",
      "required": false,
      "description": "当前选中值，格式和 onChange 返回值一致"
    },
    {
      "name": "onChange",
      "type": "((value: Value, data: DataItem, checked: boolean) => void)",
      "required": false,
      "description": "选择行。rowData 为选中的数据，rowIndex 为选中行号。如果需要数据需要格式化的处理，建议配置 format。"
    },
    {
      "name": "prediction",
      "type": "((value: Value extends (infer U)[] ? U : Value, data: DataItem) => boolean)",
      "required": false,
      "defaultValue": "(val, d) => val===format(d)",
      "description": "默认使用 format 函数执行的结果来比较是否匹配，在某些情况下（例如返回原始数据的对象，更新数据时，生成了一个值相同，非同一个对象的选项），需要借助 prediction 函数来判断是否匹配"
    },
    {
      "name": "disabled",
      "type": "((data: Item) => boolean) | boolean",
      "required": false,
      "defaultValue": "false",
      "description": "如果 disabled 为 true，禁用全部选项，如果 disabled 为函数，根据函数反回结果禁用选项"
    },
    {
      "name": "format",
      "type": "ObjectKey<DataItem> | ((data: DataItem) => Value extends (infer U)[] ? U : Value)",
      "required": false,
      "defaultValue": "d => d",
      "description": "格式化 value, 默认值，返回原始数据。 为 string 时，会作为 key 从原始数据中获取值，相当于 (d) => d\\\\[format]; 为函数时，以函数返回结果作为 value。"
    }
  ],
  "examples": [
    {
      "name": "01-01-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- 基础的列表展示，可承载文字、列表、图片、段落\n * en - Base\n *    -- Basic list display, can carry text, list, image, paragraph\n */\nimport React from 'react';\nimport { List } from 'shineout';\n\nconst data = [\n  'This is a long list of contents',\n  'This is a long list of contents',\n  'This is a long list of contents',\n  'This is a long list of contents',\n]\n\nconst App: React.FC = () => {\n  return <List keygen bordered data={data} />;\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "01-02-size",
      "title": "cn - 不同尺寸",
      "code": "/**\n * cn - 不同尺寸\n *    -- 通过设置 size 为 `large` `small` 分别把按钮设为大、小尺寸。若不设置 size，则尺寸为中\n * en - Size\n *    -- Set size to `large` or `small` to change the size of button\n */\nimport React, { useState } from 'react';\nimport { List, Radio, TYPE } from 'shineout';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListData = ListProps['data'];\ntype ListRenderItem = ListProps['renderItem'];\n\nconst data: ListData = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst renderItem: ListRenderItem = (rowData) => (\n  <div>{`Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n);\n\nconst sizeList = ['small', 'default', 'large'];\nconst App: React.FC = () => {\n  const [size, setSize] = useState('default');\n\n  return (\n    <>\n      <Radio.Group\n        style={{ marginBottom: 24 }}\n        keygen\n        data={sizeList}\n        value={size}\n        onChange={setSize}\n      />\n      <List keygen='id' bordered data={data} renderItem={renderItem} size={size} />\n    </>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "01-03-border",
      "title": "cn - 自定义边框",
      "code": "/**\n * cn - 自定义边框\n *    -- 设置 bordered 为 false 关闭默认边框\n * en - custom border\n *    -- Set bordered to false to close the default border\n */\nimport React from 'react';\nimport { List, TYPE } from 'shineout';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListData = ListProps['data'];\ntype ListRenderItem = ListProps['renderItem'];\n\nconst data: ListData = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst renderItem: ListRenderItem = (rowData) => (\n  <div>{`Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n);\n\nconst App: React.FC = () => {\n  return (\n    <div style={{ padding: '0 16px', border: '1px solid #E8EBF0' }}>\n      <List\n        itemStyle={{ paddingLeft: 0, paddingRight: 0 }}\n        keygen='id'\n        bordered={false}\n        data={data}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "02-fixed",
      "title": "cn - 大数据列表",
      "code": "/**\n * cn - 大数据列表\n *    -- 设置 fixed 属性来启用虚拟列表，本例加载了10000条数据\n *    -- 支持自动高度，默认跟随父元素高度\n *    -- lineHeight 用来设置列表项高度\n *    -- rowsInView 用来设置同时所展示的列表项数量，默认为10个\n * en - Big data list\n *    -- Set the fixed property to enable the virtual list, which in this case loads 10,000 pieces of data\n *    -- support automatic height, and follow the height of parent element by default\n *    -- lineheight is used to set the height of list items\n *    -- rowsinview is used to set the number of list items displayed on a page. The default is 10\n */\nimport React from 'react';\nimport { List, TYPE, Avatar} from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, any>;\ntype ListRenderItem = ListProps['renderItem'];\n\nconst names: ListItem[] = user.fetchSync(10000);\n\n// eslint-disable-next-line react/prop-types\nconst renderItem: ListRenderItem = ({ id, firstName }) => (\n  <div style={{ height: 30, display: 'flex', alignItems: 'center' }}>\n    <Avatar shape=\"circle\" icon={firstName.slice(0, 1)} style={{ marginRight: 8 }} />\n    <span style={{ flex: 1 }}>{firstName}</span>\n    <span>-{id}</span>\n  </div>\n);\n\nconst App: React.FC = () => (\n  <List\n    height={300}\n    lineHeight={54}\n    fixed\n    keygen='id'\n    bordered\n    colNum={2}\n    data={names}\n    renderItem={renderItem}\n  />\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "03-pagination",
      "title": "cn - 分页",
      "code": "/**\n * cn - 分页\n *    -- 前端分页的情况下, 设置 pagination 显示分页，没有设置 onChange 处理数据的情况下，会自动对数据进行分页\n *    -- pagination 的参数和 Pagination 组件一致\n * en - Pagination\n *   -- Set the pagination property to show the pagination and if not set onChange property, the data is automatically paged\n *    -- The parameters of pagination are consistent with the Pagination component\n */\nimport React, { useState, useEffect } from 'react';\nimport { List, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListRenderItem = ListProps['renderItem'];\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [current, setCurrent] = useState<number>(1);\n  const [data, setData] = useState<ListItem[]>([]);\n\n  const fetchData = (c: number) => {\n    setLoading(true);\n    user.fetch\n      .get('List', { current, pageSize: 10, sorter: {}, username: '' })\n      .then((_data: { data: any }) => {\n        setData(_data.data);\n        setLoading(false);\n        setCurrent(c);\n      });\n  };\n\n  useEffect(() => {\n    fetchData(1);\n  }, []);\n\n  const renderItem: ListRenderItem = (rowData) => (\n    <div>{`Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n  );\n\n  const handlePageChange = (index: number) => {\n    if (index > 10) return;\n    fetchData(index);\n  };\n\n  const pagination = {\n    current,\n    total: 100,\n    pageSize: 10,\n    align: 'right',\n    onChange: handlePageChange,\n  };\n\n  return (\n    <List\n      keygen='id'\n      format='id'\n      bordered\n      data={data}\n      loading={loading}\n      renderItem={renderItem}\n      pagination={pagination}\n    />\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 26,
    "requiredProps": 2,
    "propsWithWhen": 0
  }
}