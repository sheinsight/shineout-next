{
  "name": "Cascader",
  "description": "对于相关联的数据集，可采用多级分类的级联选择方式",
  "category": "other",
  "importPath": "import { Cascader } from 'shineout'",
  "props": [
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\" | \"default\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "不同尺寸"
    },
    {
      "name": "status",
      "type": "\"error\"",
      "required": false,
      "description": "组件状态"
    },
    {
      "name": "innerTitle",
      "type": "ReactNode",
      "required": false,
      "description": "内嵌标题"
    },
    {
      "name": "filterSameChange",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "当两次选择的值相同时不触发 onChange"
    },
    {
      "name": "absolute",
      "type": "boolean | (() => HTMLElement | null)",
      "required": false,
      "defaultValue": "false",
      "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
    },
    {
      "name": "zIndex",
      "type": "number",
      "required": false,
      "defaultValue": "1000",
      "description": "选项列表 z-index 值, 需要配合 absolute"
    },
    {
      "name": "multiple",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "开启多选"
    },
    {
      "name": "mode",
      "type": "0 | 1 | 2 | 3 | 4",
      "required": false,
      "description": "选中值模式，未设置值为单选 0: 只返回完全选中的节点，包含父节点 1: 返回全部选中的节点和半选中的父节点 2: 只返回选中的子节点 3: 如果父节点选中，只返回父节点 4: 所选即所得"
    },
    {
      "name": "width",
      "type": "string | number",
      "required": false,
      "description": "输入框宽度"
    },
    {
      "name": "open",
      "type": "boolean",
      "required": false,
      "description": "控制浮层显隐"
    },
    {
      "name": "value",
      "type": "Value",
      "required": false,
      "description": "选中的 key （受控)。注意，请勿将 undefined 和 null 作为有意义的选项值，当 value 类型为 undefined 和 null 时，组件将不处理数据和渲染"
    },
    {
      "name": "defaultValue",
      "type": "Value",
      "required": false,
      "description": "默认选中的 key"
    },
    {
      "name": "data",
      "type": "any[]",
      "required": false,
      "description": "数据，子节点为children，如果 children 值为 null 或 长度为 0 时，视为叶子节点"
    },
    {
      "name": "childrenKey",
      "type": "ObjectKey<DataItem>",
      "required": false,
      "defaultValue": "\\\"children\\\"",
      "description": "指定子数据的属性名"
    },
    {
      "name": "final",
      "type": "boolean",
      "required": false,
      "description": "单选只支持选末级节点"
    },
    {
      "name": "filterDelay",
      "type": "number",
      "required": false,
      "defaultValue": "\\\"children\\\"",
      "description": "用户输入触发 fitler 事件的延时，单位为毫秒。"
    },
    {
      "name": "renderOptionList",
      "type": "((list: ReactElement, info: { loading: boolean; }) => ReactElement)",
      "required": false,
      "description": "自定义渲染下拉列表"
    },
    {
      "name": "renderUnmatched",
      "type": "((data: any) => ReactNode)",
      "required": false,
      "description": "渲染未匹配值的方式"
    },
    {
      "name": "height",
      "type": "number",
      "required": false,
      "defaultValue": "300",
      "description": "下拉列表高度"
    },
    {
      "name": "unmatch",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否展示data中不存在的值"
    },
    {
      "name": "clearable",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否显示清除数据图标"
    },
    {
      "name": "wideMatch",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "开启 wideMatch 后，将筛选出所有可能的匹配项目"
    },
    {
      "name": "showArrow",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否显示下拉箭头，仅针对单选情况"
    },
    {
      "name": "finalDismiss",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "选择末级节点后是否关闭选项列表"
    },
    {
      "name": "singleRemove",
      "type": "boolean",
      "required": false,
      "description": "支持单个节点删除"
    },
    {
      "name": "compressedBound",
      "type": "number",
      "required": false,
      "description": "开启多选后，指定允许展示标签数量，超过后将折叠"
    },
    {
      "name": "loading",
      "type": "boolean | ReactNode",
      "required": false,
      "description": "下拉列表加载状态"
    },
    {
      "name": "compressed",
      "type": "boolean | \"no-repeat\" | \"hide-popover\"",
      "required": false,
      "defaultValue": "false",
      "description": "将选中值合并。为\\\"no-repeat\\\"时弹出框中不重复展示值"
    },
    {
      "name": "renderCompressed",
      "type": "((options: { data: DataItem[], onRemove: (item: DataItem) => void }) => ReactNode)",
      "required": false,
      "description": "自定义渲染折叠内容，其中 data 为选中的数据，onRemove 为删除事件",
      "version": "3.5.0"
    },
    {
      "name": "onCollapse",
      "type": "((collapse: boolean) => void)",
      "required": false,
      "description": "下拉列表展开/收起回调"
    },
    {
      "name": "loader",
      "type": "((key: string | number, data: DataItem) => void)",
      "required": false,
      "description": "设置 loader 属性后，未定义 children 的节点视为动态加载节点，点击展开触发 loader 事件，children 为 null 或者长度为 0 视为叶子节点"
    },
    {
      "name": "disabled",
      "type": "boolean | ((data: DataItem) => boolean) | { disabled: (data: DataItem) => boolean, isRealtime: boolean }",
      "required": false,
      "defaultValue": "false",
      "description": "当 disabled 为 true 时，禁用整个选择框。如果 disabled 为函数，根据函数反回结果禁用选项。出于性能考虑，默认情况下 disabled 只会在初始化时调用一次，如果 disabled 为函数且内部依赖外部状态，可以使用配置模式，将 disabled 设置为对象，对象中包含 disabled 函数 和 isRealtime 属性，当 isRealtime 为 true 时，每次状态更新都会调用 disabled 函数重新计算禁用状态"
    },
    {
      "name": "expandTrigger",
      "type": "\"click\" | \"hover\" | \"hover-only\"",
      "required": false,
      "defaultValue": "\\\"click\\\"",
      "description": "节点展开触发方式"
    },
    {
      "name": "onChange",
      "type": "((value: Value, selected?: DataItem ) => void)",
      "required": false,
      "description": "设置 onChange 属性时，显示 选择框。参数为当前选中值，和 mode 属性相关"
    },
    {
      "name": "onFilter",
      "type": "((text: string) => void | ((data: DataItem) => boolean) )",
      "required": false,
      "description": "onFilter 不为空时，可以输入过滤数据;onFilter 如果返回一个函数，使用这个函数做前端过滤;如果不返回，可以自行做后端过滤;单选状态下支持"
    },
    {
      "name": "keygen",
      "type": "ObjectKey<DataItem> | ((data: DataItem, parentKey?: string | number ) => string | number)",
      "required": true,
      "defaultValue": "index",
      "description": "生成 key 的辅助方法, 为函数时，使用此函数返回值, 为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d) => d.id"
    },
    {
      "name": "renderItem",
      "type": "ObjectKey<DataItem> | ((data: DataItem, active?: boolean , id?: string | number ) => ReactNode)",
      "required": true,
      "defaultValue": "d => d",
      "description": "当 renderItem 为 string 时，返回 DataItem\\\\[string]。 若为函数时，则返回函数结果"
    },
    {
      "name": "renderResult",
      "type": "ObjectKey<DataItem> | ((data: DataItem, row: DataItem[]) => ReactNode)",
      "required": false,
      "defaultValue": "renderItem",
      "description": "选中后在结果中显示的内容，默认和 renderItem 相同"
    },
    {
      "name": "onBlur",
      "type": "((e?: KeyboardEvent<HTMLDivElement> ) => void)",
      "required": false,
      "description": "失焦事件"
    },
    {
      "name": "onFocus",
      "type": "((e?: KeyboardEvent<HTMLDivElement> ) => void)",
      "required": false,
      "description": "聚焦事件"
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "description": "占位符"
    },
    {
      "name": "emptyAfterSelect",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "选中后是否清空输入框内容"
    },
    {
      "name": "border",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否展示边框"
    },
    {
      "name": "underline",
      "type": "boolean",
      "required": false,
      "description": "是否只展示下边框"
    },
    {
      "name": "resultClassName",
      "type": "string | ((value: DataItem) => string)",
      "required": false,
      "description": "选中结果内容容器的className"
    },
    {
      "name": "compressedClassName",
      "type": "string",
      "required": false,
      "description": "多选合并展示弹出框的类名"
    },
    {
      "name": "focusSelected",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "onFilter 在多选情况下点击选项后是否选中过滤文本"
    },
    {
      "name": "hideTag",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "隐藏标签样式，默认情况下展示结果以标签模式分割，隐藏标签样式后可通过自定义 renderResult 渲染分割结果"
    },
    {
      "name": "getComponentRef",
      "type": "((comp: CascaderRef) => void) | { current: CascaderRef ; }",
      "required": false,
      "description": "绑定组件的引用, 可以调用某些组件的方法"
    },
    {
      "name": "adjust",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否开启自动调整面板位置功能。当面板被窗口遮挡时，自动调整位置"
    },
    {
      "name": "virtual",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否使用虚拟列表",
      "version": "3.5.0"
    },
    {
      "name": "emptyText",
      "type": "ReactNode",
      "required": false,
      "description": "自定义 empty 文案。与 renderOptionList 搭配使用时，emptyText 设置为 false 后将忽略该功能，如需渲染空内容可在 renderOptionList 中处理",
      "version": "3.6.0"
    },
    {
      "name": "highlight",
      "type": "boolean",
      "required": false,
      "description": "开启搜索关键字高亮功能",
      "version": "3.7.0"
    },
    {
      "name": "popover",
      "type": "PopoverProps[\"position\"]",
      "required": false,
      "description": "校验信息弹出位置"
    },
    {
      "name": "popoverProps",
      "type": "PopoverProps",
      "required": false,
      "description": "校验或者tip弹框接受的属性"
    },
    {
      "name": "name",
      "type": "Name",
      "required": false,
      "description": "Form 内存取数据的 key"
    },
    {
      "name": "beforeChange",
      "type": "((value: T) => void | T )",
      "required": false,
      "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
    },
    {
      "name": "reserveAble",
      "type": "boolean",
      "required": false,
      "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
    },
    {
      "name": "rules",
      "type": "RuleItem[]",
      "required": false,
      "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
    },
    {
      "name": "onError",
      "type": "((error?: Error ) => void)",
      "required": false,
      "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
    },
    {
      "name": "bind",
      "type": "string[]",
      "required": false,
      "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
    }
  ],
  "examples": [
    {
      "name": "01-01-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- 基础级联选择器的用法\n * en - Basic\n *    -- Basic usage of cascader\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "01-02-base",
      "title": "cn -",
      "code": "/**\n * cn -\n *    -- 通过`renderResult`支持自定义渲染结果\n * en -\n *    -- Support custom rendering results through `renderResult`\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const renderResult: CascaderProps['renderResult'] = (node) => {\n    return node.value.toLocaleUpperCase();\n  };\n\n  return (\n    <div>\n      <Cascader\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderResult={renderResult}\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "01-03-base",
      "title": "cn -",
      "code": "/**\n * cn -\n *    -- 通过`hideTag`取消默认的标签分割样式，配合`renderResult`自定义渲染实现丰富的展示效果\n * en -\n *    -- Cancel the default tag split style through `hideTag`, and customize the rendering to achieve a rich display effect\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const renderResult: CascaderProps['renderResult'] = (node) => {\n    return node.value;\n  };\n\n  return (\n    <div>\n      <Cascader\n        width={300}\n        hideTag\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        onChange={v=>console.log(v)}\n        renderResult={renderResult}\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "02-01-multiple",
      "title": "cn - 多选",
      "code": "/**\n * cn - 多选\n *    -- 开启 `multiple` 属性或者设置 `mode` 属性可以选择多个值\n *    -- 模式为 0 时，返回完全选中的节点，包含父节点\n *    -- 模式为 1 时，返回选中、半选中的节点\n *    -- 模式为 2 时，只返回叶子节点\n *    -- 模式为 3 时，只返回完全选中的父节点\n *    -- 模式为 4 时，所选即所得，没有上下级关系\n * en - Basic\n *    --\n */\nimport React, { useState } from 'react';\nimport { Cascader, Radio, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst radio = [\n  {\n    mode: 'full',\n    value: 0,\n  },\n  {\n    mode: 'half',\n    value: 1,\n  },\n  {\n    mode: 'child only',\n    value: 2,\n  },\n  {\n    mode: 'shallow',\n    value: 3,\n  },\n  {\n    mode: 'freedom',\n    value: 4,\n  },\n];\n\nexport default () => {\n  const [value, setValue] = useState<CascaderProps['value']>([]);\n  const [mode, setMode] = useState<0 | 1 | 2 | 3 | 4>(0);\n\n  const handleModeChange = (v: any) => {\n    setMode(v.value);\n    setValue([]);\n  };\n\n  const handleChange: CascaderProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <Radio.Group\n        size='small'\n        keygen='value'\n        prediction={(item, v) => item === v.value}\n        value={mode}\n        onChange={handleModeChange}\n        renderItem={(item) => `模式 ${item.value}`}\n        data={radio}\n        style={{ marginBottom: 24 }}\n      />\n\n      <div style={{ display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          <Cascader\n            clearable\n            multiple\n            singleRemove\n            mode={mode}\n            width={300}\n            placeholder='Please select city'\n            data={data}\n            keygen='value'\n            value={value}\n            onChange={handleChange}\n            renderItem={(n) => `${n?.value}`}\n          />\n        </div>\n        <pre\n          style={{\n            flex: 1,\n            margin: 10,\n            background: '#1d1d1d',\n            color: '#94d5fc',\n            borderRadius: 4,\n            padding: 10,\n          }}\n        >\n          <div style={{ marginBottom: 10 }}>\n            <code style={{ color: '#5D8E4E' }}>\n              <span>/</span>\n              <span>/</span> DataItem[]\n            </code>\n          </div>\n          {value && value.length > 0 && <code>{JSON.stringify(value, null, 2)}</code>}\n          {!value || (value.length === 0 && <code style={{ color: '#757575' }}>no data</code>)}\n        </pre>\n      </div>\n    </div>\n  );\n};\n",
      "language": "tsx"
    },
    {
      "name": "02-02-multiple-all",
      "title": "cn - 全选",
      "code": "/**\n * cn - 全选\n *    -- 使用 `renderOptionList` 属性自定义下拉面板，可以自定义实现全选功能\n * en - Custom dropdown panel\n *    -- Use the `renderOptionList` property to customize the dropdown panel, and you can customize the implementation of the select all function\n */\nimport React from 'react';\nimport { Cascader, Checkbox } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const [full, setFull] = React.useState<'indeterminate' | boolean | undefined>();\n  const [checked, setChecked] = React.useState<string[]>([]);\n  const rootIds = data.map((d) => d.value);\n\n  React.useEffect(() => {\n    setFull(\n      rootIds.every((id) => checked.includes(id))\n        ? true\n        : checked.length > 0\n        ? 'indeterminate'\n        : false,\n    );\n  }, [checked]);\n\n  React.useEffect(() => {\n    if (full === true) {\n      setChecked(rootIds);\n    } else if (!full) {\n      setChecked([]);\n    }\n  }, [full]);\n\n  return (\n    <Cascader\n      width={300}\n      mode={3}\n      clearable\n      multiple\n      value={checked}\n      onChange={(v) => {\n        setChecked(v);\n      }}\n      placeholder='Please select city'\n      data={data}\n      keygen='value'\n      renderItem={(n) => `${n?.value}`}\n      renderOptionList={(list) => (\n        <div>\n          <div\n            style={{\n              padding: '5px 12px',\n              borderBottom:\n                '1px solid var(--soui-cascader-list-border-color,var(--soui-neutral-border-1,#E8EBF0))',\n            }}\n          >\n            <Checkbox checked={full} onChange={setFull} style={{ display: 'flex' }}>\n              全选\n            </Checkbox>\n          </div>\n          {list}\n        </div>\n      )}\n    />\n  );\n};\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 63,
    "requiredProps": 2,
    "propsWithWhen": 0
  },
  "subComponentApis": {}
}