{
  "name": "Cascader",
  "description": "对于相关联的数据集，可采用多级分类的级联选择方式",
  "category": "other",
  "importPath": "import { Cascader } from 'shineout'",
  "props": [
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\" | \"default\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "不同尺寸"
    },
    {
      "name": "status",
      "type": "\"error\"",
      "required": false,
      "description": "组件状态"
    },
    {
      "name": "innerTitle",
      "type": "ReactNode",
      "required": false,
      "description": "内嵌标题"
    },
    {
      "name": "filterSameChange",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "当两次选择的值相同时不触发 onChange"
    },
    {
      "name": "absolute",
      "type": "boolean | (() => HTMLElement | null)",
      "required": false,
      "defaultValue": "false",
      "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
    },
    {
      "name": "zIndex",
      "type": "number",
      "required": false,
      "defaultValue": "1000",
      "description": "选项列表 z-index 值, 需要配合 absolute"
    },
    {
      "name": "multiple",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "开启多选"
    },
    {
      "name": "mode",
      "type": "0 | 1 | 2 | 3 | 4",
      "required": false,
      "description": "选中值模式，未设置值为单选 0: 只返回完全选中的节点，包含父节点 1: 返回全部选中的节点和半选中的父节点 2: 只返回选中的子节点 3: 如果父节点选中，只返回父节点 4: 所选即所得"
    },
    {
      "name": "width",
      "type": "string | number",
      "required": false,
      "description": "输入框宽度"
    },
    {
      "name": "open",
      "type": "boolean",
      "required": false,
      "description": "控制浮层显隐"
    },
    {
      "name": "value",
      "type": "Value",
      "required": false,
      "description": "选中的 key （受控)。注意，请勿将 undefined 和 null 作为有意义的选项值，当 value 类型为 undefined 和 null 时，组件将不处理数据和渲染"
    },
    {
      "name": "defaultValue",
      "type": "Value",
      "required": false,
      "description": "默认选中的 key"
    },
    {
      "name": "data",
      "type": "any[]",
      "required": false,
      "description": "数据，子节点为children，如果 children 值为 null 或 长度为 0 时，视为叶子节点"
    },
    {
      "name": "childrenKey",
      "type": "ObjectKey<DataItem>",
      "required": false,
      "defaultValue": "\\\"children\\\"",
      "description": "指定子数据的属性名"
    },
    {
      "name": "final",
      "type": "boolean",
      "required": false,
      "description": "单选只支持选末级节点"
    },
    {
      "name": "filterDelay",
      "type": "number",
      "required": false,
      "defaultValue": "\\\"children\\\"",
      "description": "用户输入触发 fitler 事件的延时，单位为毫秒。"
    },
    {
      "name": "renderOptionList",
      "type": "((list: ReactElement, info: { loading: boolean; }) => ReactElement)",
      "required": false,
      "description": "自定义渲染下拉列表"
    },
    {
      "name": "renderUnmatched",
      "type": "((data: any) => ReactNode)",
      "required": false,
      "description": "渲染未匹配值的方式"
    },
    {
      "name": "height",
      "type": "number",
      "required": false,
      "defaultValue": "300",
      "description": "下拉列表高度"
    },
    {
      "name": "unmatch",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否展示data中不存在的值"
    },
    {
      "name": "clearable",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否显示清除数据图标"
    },
    {
      "name": "wideMatch",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "开启 wideMatch 后，将筛选出所有可能的匹配项目"
    },
    {
      "name": "showArrow",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否显示下拉箭头，仅针对单选情况"
    },
    {
      "name": "finalDismiss",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "选择末级节点后是否关闭选项列表"
    },
    {
      "name": "singleRemove",
      "type": "boolean",
      "required": false,
      "description": "支持单个节点删除"
    },
    {
      "name": "compressedBound",
      "type": "number",
      "required": false,
      "description": "开启多选后，指定允许展示标签数量，超过后将折叠"
    },
    {
      "name": "loading",
      "type": "boolean | ReactNode",
      "required": false,
      "description": "下拉列表加载状态"
    },
    {
      "name": "compressed",
      "type": "boolean | \"no-repeat\" | \"hide-popover\"",
      "required": false,
      "defaultValue": "false",
      "description": "将选中值合并。为\\\"no-repeat\\\"时弹出框中不重复展示值"
    },
    {
      "name": "renderCompressed",
      "type": "((options: { data: DataItem[], onRemove: (item: DataItem) => void }) => ReactNode)",
      "required": false,
      "description": "自定义渲染折叠内容，其中 data 为选中的数据，onRemove 为删除事件",
      "version": "3.5.0"
    },
    {
      "name": "onCollapse",
      "type": "((collapse: boolean) => void)",
      "required": false,
      "description": "下拉列表展开/收起回调"
    },
    {
      "name": "loader",
      "type": "((key: string | number, data: DataItem) => void)",
      "required": false,
      "description": "设置 loader 属性后，未定义 children 的节点视为动态加载节点，点击展开触发 loader 事件，children 为 null 或者长度为 0 视为叶子节点"
    },
    {
      "name": "disabled",
      "type": "boolean | ((data: DataItem) => boolean) | { disabled: (data: DataItem) => boolean, isRealtime: boolean }",
      "required": false,
      "defaultValue": "false",
      "description": "当 disabled 为 true 时，禁用整个选择框。如果 disabled 为函数，根据函数反回结果禁用选项。出于性能考虑，默认情况下 disabled 只会在初始化时调用一次，如果 disabled 为函数且内部依赖外部状态，可以使用配置模式，将 disabled 设置为对象，对象中包含 disabled 函数 和 isRealtime 属性，当 isRealtime 为 true 时，每次状态更新都会调用 disabled 函数重新计算禁用状态"
    },
    {
      "name": "expandTrigger",
      "type": "\"click\" | \"hover\" | \"hover-only\"",
      "required": false,
      "defaultValue": "\\\"click\\\"",
      "description": "节点展开触发方式"
    },
    {
      "name": "onChange",
      "type": "((value: Value, selected?: DataItem ) => void)",
      "required": false,
      "description": "设置 onChange 属性时，显示 选择框。参数为当前选中值，和 mode 属性相关"
    },
    {
      "name": "onFilter",
      "type": "((text: string) => void | ((data: DataItem) => boolean) )",
      "required": false,
      "description": "onFilter 不为空时，可以输入过滤数据;onFilter 如果返回一个函数，使用这个函数做前端过滤;如果不返回，可以自行做后端过滤;单选状态下支持"
    },
    {
      "name": "keygen",
      "type": "ObjectKey<DataItem> | ((data: DataItem, parentKey?: string | number ) => string | number)",
      "required": true,
      "defaultValue": "index",
      "description": "生成 key 的辅助方法, 为函数时，使用此函数返回值, 为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d) => d.id"
    },
    {
      "name": "renderItem",
      "type": "ObjectKey<DataItem> | ((data: DataItem, active?: boolean , id?: string | number ) => ReactNode)",
      "required": true,
      "defaultValue": "d => d",
      "description": "当 renderItem 为 string 时，返回 DataItem\\\\[string]。 若为函数时，则返回函数结果"
    },
    {
      "name": "renderResult",
      "type": "ObjectKey<DataItem> | ((data: DataItem, row: DataItem[]) => ReactNode)",
      "required": false,
      "defaultValue": "renderItem",
      "description": "选中后在结果中显示的内容，默认和 renderItem 相同"
    },
    {
      "name": "onBlur",
      "type": "((e?: KeyboardEvent<HTMLDivElement> ) => void)",
      "required": false,
      "description": "失焦事件"
    },
    {
      "name": "onFocus",
      "type": "((e?: KeyboardEvent<HTMLDivElement> ) => void)",
      "required": false,
      "description": "聚焦事件"
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "description": "占位符"
    },
    {
      "name": "emptyAfterSelect",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "选中后是否清空输入框内容"
    },
    {
      "name": "border",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否展示边框"
    },
    {
      "name": "underline",
      "type": "boolean",
      "required": false,
      "description": "是否只展示下边框"
    },
    {
      "name": "resultClassName",
      "type": "string | ((value: DataItem) => string)",
      "required": false,
      "description": "选中结果内容容器的className"
    },
    {
      "name": "compressedClassName",
      "type": "string",
      "required": false,
      "description": "多选合并展示弹出框的类名"
    },
    {
      "name": "focusSelected",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "onFilter 在多选情况下点击选项后是否选中过滤文本"
    },
    {
      "name": "hideTag",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "隐藏标签样式，默认情况下展示结果以标签模式分割，隐藏标签样式后可通过自定义 renderResult 渲染分割结果"
    },
    {
      "name": "getComponentRef",
      "type": "((comp: CascaderRef) => void) | { current: CascaderRef ; }",
      "required": false,
      "description": "绑定组件的引用, 可以调用某些组件的方法"
    },
    {
      "name": "adjust",
      "type": "boolean",
      "required": false,
      "defaultValue": "true",
      "description": "是否开启自动调整面板位置功能。当面板被窗口遮挡时，自动调整位置"
    },
    {
      "name": "virtual",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否使用虚拟列表",
      "version": "3.5.0"
    },
    {
      "name": "emptyText",
      "type": "ReactNode",
      "required": false,
      "description": "自定义 empty 文案。与 renderOptionList 搭配使用时，emptyText 设置为 false 后将忽略该功能，如需渲染空内容可在 renderOptionList 中处理",
      "version": "3.6.0"
    },
    {
      "name": "highlight",
      "type": "boolean",
      "required": false,
      "description": "开启搜索关键字高亮功能",
      "version": "3.7.0"
    },
    {
      "name": "popover",
      "type": "PopoverProps[\"position\"]",
      "required": false,
      "description": "校验信息弹出位置"
    },
    {
      "name": "popoverProps",
      "type": "PopoverProps",
      "required": false,
      "description": "校验或者tip弹框接受的属性"
    },
    {
      "name": "name",
      "type": "Name",
      "required": false,
      "description": "Form 内存取数据的 key"
    },
    {
      "name": "beforeChange",
      "type": "((value: T) => void | T )",
      "required": false,
      "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
    },
    {
      "name": "reserveAble",
      "type": "boolean",
      "required": false,
      "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
    },
    {
      "name": "rules",
      "type": "RuleItem[]",
      "required": false,
      "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
    },
    {
      "name": "onError",
      "type": "((error?: Error ) => void)",
      "required": false,
      "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
    },
    {
      "name": "bind",
      "type": "string[]",
      "required": false,
      "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
    }
  ],
  "examples": [
    {
      "title": "Basic",
      "description": "Basic usage of cascader",
      "code": "/**\n * cn - 基本用法\n *    -- 基础级联选择器的用法\n * en - Basic\n *    -- Basic usage of cascader\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "*    -- Support custom rendering results through `renderResult`",
      "description": "",
      "code": "/**\n * cn -\n *    -- 通过`renderResult`支持自定义渲染结果\n * en -\n *    -- Support custom rendering results through `renderResult`\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const renderResult: CascaderProps['renderResult'] = (node) => {\n    return node.value.toLocaleUpperCase();\n  };\n\n  return (\n    <div>\n      <Cascader\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderResult={renderResult}\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "*    -- Cancel the default tag split style through `hideTag`, and customize the rendering to achieve a rich display effect",
      "description": "",
      "code": "/**\n * cn -\n *    -- 通过`hideTag`取消默认的标签分割样式，配合`renderResult`自定义渲染实现丰富的展示效果\n * en -\n *    -- Cancel the default tag split style through `hideTag`, and customize the rendering to achieve a rich display effect\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const renderResult: CascaderProps['renderResult'] = (node) => {\n    return node.value;\n  };\n\n  return (\n    <div>\n      <Cascader\n        width={300}\n        hideTag\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        onChange={v=>console.log(v)}\n        renderResult={renderResult}\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "Basic",
      "description": "开启 `multiple` 属性或者设置 `mode` 属性可以选择多个值",
      "code": "/**\n * cn - 多选\n *    -- 开启 `multiple` 属性或者设置 `mode` 属性可以选择多个值\n *    -- 模式为 0 时，返回完全选中的节点，包含父节点\n *    -- 模式为 1 时，返回选中、半选中的节点\n *    -- 模式为 2 时，只返回叶子节点\n *    -- 模式为 3 时，只返回完全选中的父节点\n *    -- 模式为 4 时，所选即所得，没有上下级关系\n * en - Basic\n *    --\n */\nimport React, { useState } from 'react';\nimport { Cascader, Radio, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst radio = [\n  {\n    mode: 'full',\n    value: 0,\n  },\n  {\n    mode: 'half',\n    value: 1,\n  },\n  {\n    mode: 'child only',\n    value: 2,\n  },\n  {\n    mode: 'shallow',\n    value: 3,\n  },\n  {\n    mode: 'freedom',\n    value: 4,\n  },\n];\n\nexport default () => {\n  const [value, setValue] = useState<CascaderProps['value']>([]);\n  const [mode, setMode] = useState<0 | 1 | 2 | 3 | 4>(0);\n\n  const handleModeChange = (v: any) => {\n    setMode(v.value);\n    setValue([]);\n  };\n\n  const handleChange: CascaderProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <Radio.Group\n        size='small'\n        keygen='value'\n        prediction={(item, v) => item === v.value}\n        value={mode}\n        onChange={handleModeChange}\n        renderItem={(item) => `模式 ${item.value}`}\n        data={radio}\n        style={{ marginBottom: 24 }}\n      />\n\n      <div style={{ display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          <Cascader\n            clearable\n            multiple\n            singleRemove\n            mode={mode}\n            width={300}\n            placeholder='Please select city'\n            data={data}\n            keygen='value'\n            value={value}\n            onChange={handleChange}\n            renderItem={(n) => `${n?.value}`}\n          />\n        </div>\n        <pre\n          style={{\n            flex: 1,\n            margin: 10,\n            background: '#1d1d1d',\n            color: '#94d5fc',\n            borderRadius: 4,\n            padding: 10,\n          }}\n        >\n          <div style={{ marginBottom: 10 }}>\n            <code style={{ color: '#5D8E4E' }}>\n              <span>/</span>\n              <span>/</span> DataItem[]\n            </code>\n          </div>\n          {value && value.length > 0 && <code>{JSON.stringify(value, null, 2)}</code>}\n          {!value || (value.length === 0 && <code style={{ color: '#757575' }}>no data</code>)}\n        </pre>\n      </div>\n    </div>\n  );\n};\n"
    },
    {
      "title": "Custom dropdown panel",
      "description": "Use the `renderOptionList` property to customize the dropdown panel, and you can customize the implementation of the select all function",
      "code": "/**\n * cn - 全选\n *    -- 使用 `renderOptionList` 属性自定义下拉面板，可以自定义实现全选功能\n * en - Custom dropdown panel\n *    -- Use the `renderOptionList` property to customize the dropdown panel, and you can customize the implementation of the select all function\n */\nimport React from 'react';\nimport { Cascader, Checkbox } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const [full, setFull] = React.useState<'indeterminate' | boolean | undefined>();\n  const [checked, setChecked] = React.useState<string[]>([]);\n  const rootIds = data.map((d) => d.value);\n\n  React.useEffect(() => {\n    setFull(\n      rootIds.every((id) => checked.includes(id))\n        ? true\n        : checked.length > 0\n        ? 'indeterminate'\n        : false,\n    );\n  }, [checked]);\n\n  React.useEffect(() => {\n    if (full === true) {\n      setChecked(rootIds);\n    } else if (!full) {\n      setChecked([]);\n    }\n  }, [full]);\n\n  return (\n    <Cascader\n      width={300}\n      mode={3}\n      clearable\n      multiple\n      value={checked}\n      onChange={(v) => {\n        setChecked(v);\n      }}\n      placeholder='Please select city'\n      data={data}\n      keygen='value'\n      renderItem={(n) => `${n?.value}`}\n      renderOptionList={(list) => (\n        <div>\n          <div\n            style={{\n              padding: '5px 12px',\n              borderBottom:\n                '1px solid var(--soui-cascader-list-border-color,var(--soui-neutral-border-1,#E8EBF0))',\n            }}\n          >\n            <Checkbox checked={full} onChange={setFull} style={{ display: 'flex' }}>\n              全选\n            </Checkbox>\n          </div>\n          {list}\n        </div>\n      )}\n    />\n  );\n};\n"
    },
    {
      "title": "Compressed",
      "description": "Set the `compressed` property, when the option is too long, the option will be merged",
      "code": "/**\n * cn - 合并选项\n *    -- 设置`compressed`属性，当选项超长的时候会合并选项\n * en - Compressed\n *    -- Set the `compressed` property, when the option is too long, the option will be merged\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        clearable\n        multiple\n        defaultValue={['jiangning', 'yuhuatai', 'nanjing', 'jiangsu', 'feidong', 'hefei', 'anhui']}\n        mode={0}\n        compressed\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "Compressed no-repeat",
      "description": "When the value of the `compressed` property is 'no-repeat', the repeated content in the merged options will not appear in the result box",
      "code": "/**\n * cn - 合并选项去重\n *    -- 当`compressed`属性值为 \"no-repeat\" 时，合并的选项中不会出现结果框中的重复内容\n * en - Compressed no-repeat\n *    -- When the value of the `compressed` property is 'no-repeat', the repeated content in the merged options will not appear in the result box\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        clearable\n        multiple\n        mode={0}\n        defaultValue={['jiangning', 'yuhuatai', 'nanjing', 'jiangsu', 'feidong', 'hefei', 'anhui']}\n        compressed='no-repeat'\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "Only merge options",
      "description": "Set the `compressed` property to `hide-popover` to merge the selected results, only display the number of merged options, and no longer display the merged options in the pop-up layer",
      "code": "/**\n * cn - 隐藏合并选项\n *    -- 使用 `compressed` 属性并设置值为 \"hide-popover\" 可以合并选中结果，仅展示合并后的选项数量，不再弹出层中展示合并的选项\n *    -- 建议数据量较大的情况下开启该功能，配合固定数值的 `compressedBound` 属性可降额外的低性能开销\n * en - Only merge options\n *    -- Set the `compressed` property to `hide-popover` to merge the selected results, only display the number of merged options, and no longer display the merged options in the pop-up layer\n *    -- It is recommended to enable this function when the data volume is large\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        clearable\n        multiple\n        mode={0}\n        defaultValue={['jiangning', 'yuhuatai', 'nanjing', 'jiangsu', 'feidong', 'hefei', 'anhui']}\n        compressed='hide-popover'\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "Custom rendering of compressed content",
      "description": "Support custom rendering of compressed content by configuring `renderCompressed`, and customize optimized rendering for large data",
      "code": "/**\n * cn - 自定义渲染合并内容\n *    -- 通过配置 `renderCompressed` 支持自定义折叠内容渲染，大体量数据可自定义优化渲染\n *    -- `renderCompressed` 参数为一个对象，包含 `data` 和 `onRemove` 两个属性，`data` 为折叠内容数据，`onRemove` 为删除事件\n *    -- 该示例演示使用Tabel组件的虚拟列表特性渲染大体量的结果\n * en - Custom rendering of compressed content\n *    -- Support custom rendering of compressed content by configuring `renderCompressed`, and customize optimized rendering for large data\n *    -- The `renderCompressed` parameter is an object containing two properties, `data` and `onRemove`, `data` is the compressed content data, and `onRemove` is the delete event\n *    -- This example demonstrates using the virtual list feature of the Table component to render large amounts of results\n */\nimport React, { useState } from 'react';\nimport { Cascader, Popover, Table, Link, TYPE } from 'shineout';\nimport { createNestedArray } from '../../tree/__example__/utils';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    item: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      padding: '5px 8px',\n      '&:hover': {\n        borderRadius: 2,\n        backgroundColor: 'var(---Neutral-fill-2-, #F4F5F8)',\n      },\n    },\n    table: {\n      borderRadius: 4,\n      overflow: 'hidden',\n      '& td': {\n        padding: '0 8px',\n        border: 'none !important',\n      },\n      '& tr:first-child td': {\n        paddingTop: '8px',\n      },\n      '& tr:last-child td': {\n        paddingBottom: '8px',\n      },\n      '& [data-soui-role=\"scroll\"]': {\n        scrollbarColor: '#c0c0c0 transparent',\n      },\n    },\n  },\n  { name: 'cascader-multiple-custom' },\n);\n\nconst d = createNestedArray([100, 100, 1]);\n\ninterface TableRowData {\n  id: string;\n  children: never[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype CascaderProps = TYPE.Cascader.Props<TableRowData, string[]>;\n\nexport default () => {\n  const [value, setValue] = useState<string[]>();\n\n  const classNames = useStyles();\n\n  const handleChange: CascaderProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  const renderCompressed: CascaderProps['renderCompressed'] = (options) => {\n    const { data, onRemove } = options;\n\n    const columns: TableColumnItem[] = [\n      {\n        render: (item) => (\n          <div className={classNames.item}>\n            <span>node-{item.id}</span>\n            <Link type='primary' onClick={() => onRemove(item)}>\n              删除\n            </Link>\n          </div>\n        ),\n      },\n    ];\n\n    return (\n      <span\n        style={{\n          fontSize: 12,\n          color: '#fff',\n          margin: '2px 0',\n          borderRadius: 4,\n          padding: '0 4px',\n          background: 'var(--soui-brand-6)',\n        }}\n      >\n        +{value ? value.length : ''}\n        <Popover position='bottom'>\n          <Table\n            data={data}\n            keygen='id'\n            virtual\n            columns={columns}\n            hideHeader\n            width={200}\n            hover={false}\n            style={{ maxHeight: 160 }}\n            className={classNames.table}\n          />\n        </Popover>\n      </span>\n    );\n  };\n\n  const renderItem: CascaderProps['renderItem'] = (item) => {\n    return (\n      <div style={{ overflow: 'hidden', width: 90, textOverflow: 'ellipsis' }}>node-{item?.id}</div>\n    );\n  };\n\n  return (\n    <div>\n      <Cascader\n        mode={2}\n        value={value}\n        onChange={handleChange}\n        width={300}\n        clearable\n        compressed\n        virtual\n        placeholder='Please select node'\n        data={d}\n        keygen='id'\n        renderResult='id'\n        renderItem={renderItem}\n        renderCompressed={renderCompressed}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "compressedBound",
      "description": "Set the `compressedBound` property, when the number of selected nodes is greater than this value, the option display will be merged",
      "code": "/**\n * cn - 指定合并选项的数量\n *    -- 设置 `compressedBound` 属性，当选中的节点数量大于该值时，则会合并选项展示\n *    -- 该示例设置了 `compressedBound` 为 2，当选中的节点数量大于 2 时，选项展示会合并\n *    -- 建议在表单、表格场景中开启该属性，以减少额外的性能开销\n * en - compressedBound\n *    -- Set the `compressedBound` property, when the number of selected nodes is greater than this value, the option display will be merged\n *    -- This example sets `compressedBound` to 2, when the number of selected nodes is greater than 2, the option display will be merged\n *    -- It is recommended to enable this property in form and table scenarios to reduce additional performance overhead\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        clearable\n        multiple\n        defaultValue={['jiangning', 'yuhuatai', 'nanjing', 'jiangsu', 'feidong', 'hefei', 'anhui']}\n        mode={0}\n        compressed\n        compressedBound={2}\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "Allow delete options",
      "description": "Set the `singleRemove` property, support delete single result.",
      "code": "/**\n * cn - 允许删除选项\n *    -- 设置 `singleRemove` 属性，支持单个结果的删除\n * en - Allow delete options\n *    -- Set the `singleRemove` property, support delete single result.\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        clearable\n        multiple\n        singleRemove\n        defaultValue={['jiangning', 'yuhuatai', 'nanjing', 'jiangsu', 'feidong', 'hefei', 'anhui']}\n        mode={4}\n        compressed\n        compressedBound={2}\n        disabled={item => item.value === 'jiangning'}\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "Trigger",
      "description": "Set `expandTrigger` property to change the trigger event of expanding next level, default is click",
      "code": "/**\n * cn - 移入展开\n *    -- 更改`expandTrigger`属性可以设置鼠标移入节点时展开下一层级，默认为点击展开\n * en - Trigger\n *    -- Set `expandTrigger` property to change the trigger event of expanding next level, default is click\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n          {\n            value: 'feixi',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        width={300}\n        expandTrigger='hover'\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "finalDismiss",
      "description": "Set the `finalDismiss` property to close the panel when the last level node is clicked",
      "code": "/**\n * cn - 点击叶子节点关闭面板\n *    -- 设置`finalDismiss`属性，点击最后一级节点时关闭面板\n * en - finalDismiss\n *    -- Set the `finalDismiss` property to close the panel when the last level node is clicked\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        width={300}\n        finalDismiss\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "Disabled",
      "description": "Set the `disabled` property to disable the component. When `disabled` is a function, support disabling a single option",
      "code": "/**\n * cn - 禁用/禁用选项\n *    -- 通过设置`disabled`属性可以禁用组件。`disabled` 为函数时，支持禁用单个选项\n * en - Disabled\n *    -- Set the `disabled` property to disable the component. When `disabled` is a function, support disabling a single option\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const handleDisabled: CascaderProps['disabled'] = (item) => {\n    return item.value === 'jiangsu';\n  };\n\n  const renderItem: CascaderProps['renderItem'] = (n) => `${n.value}`;\n\n  return (\n    <div style={{ display: 'flex', flexWrap: 'wrap', gap: 32, width: 632}}>\n      <Cascader\n        width={300}\n        disabled\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={renderItem}\n      />\n      <Cascader\n        clearable\n        width={300}\n        disabled={handleDisabled}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={renderItem}\n      />\n      <Cascader\n        width={300}\n        disabled\n        mode={0}\n        onChange={(v) => console.log(v)}\n        defaultValue={['jiangsu', 'nanjing']}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={renderItem}\n      />\n      <Cascader\n        clearable\n        mode={0}\n        onChange={(v) => console.log(v)}\n        width={300}\n        disabled={handleDisabled}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "*    -- For performance reasons, the disabled function will only be called once when the component is initialized by default",
      "description": "If `disabled` is a function and depends on external state, you can set it to an object to use the configuration mode to ensure the accuracy of the disabled result calculation",
      "code": "/**\n * cn -\n *    -- 出于性能考虑，默认情况下 disabled 只会在初始化时调用一次\n *    -- 如果 disabled 为函数且内部依赖外部状态，可以将其设置为一个对象来使用配置模式，以确保禁用结果计算的准确性\n *    -- 配置模式包含 `disabled` 函数 和 `isRealtime` 属性\n *    -- 当 `isRealtime` 为 true 时，每次状态更新都会调用 disabled 函数重新计算禁用结果\n *    -- 注意，配置模式下 disabled 函数会在每次状态更新时调用，可能会带来额外的性能开销，建议配合虚拟列表使用\n * en -\n *    -- For performance reasons, the disabled function will only be called once when the component is initialized by default\n *    -- If `disabled` is a function and depends on external state, you can set it to an object to use the configuration mode to ensure the accuracy of the disabled result calculation\n *    -- The configuration mode includes the `disabled` function and the `isRealtime` attribute\n *    -- When `isRealtime` is true, the disabled function will be called to recalculate the disabled result every time the state is updated\n *    -- Note that the disabled function under the configuration mode will be called every time the state is updated, which may bring additional performance overhead, it is recommended to use it with virtual list\n */\nimport React, { useState } from 'react';\nimport { Cascader, Switch, Form, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const [checked, setChecked] = useState(false);\n\n  const handleDisabledStatus: CascaderProps['disabled'] = (item) => {\n    return checked ? item.value === 'jiangsu' : false;\n  };\n\n  const renderItem: CascaderProps['renderItem'] = (n) => `${n.value}`;\n\n  return (\n    <Form labelWidth={60} labelAlign='left'>\n      <Form.Item label=\"开启禁用\">\n        <Switch value={checked} onChange={setChecked} style={{ marginRight: 12 }} />\n      </Form.Item>\n      <Form.Item label=\"选择选项\">\n        <Cascader\n          clearable\n          width={246}\n          height={100}\n          adjust={false}\n          onChange={(v) => console.log(v)}\n          disabled={{\n            disabled: handleDisabledStatus,\n            isRealtime: true,\n          }}\n          placeholder='Please select city'\n          data={data}\n          keygen='value'\n          renderItem={renderItem}\n        />\n      </Form.Item>\n    </Form>\n  );\n};\n"
    },
    {
      "title": "Loader",
      "description": "Set `loader` property to enable dynamic loading. When the node has no children, the `loader` function will be called",
      "code": "/**\n * cn - 动态加载\n *    -- 配置`loader`开启动态加载功能，当点击的节点没有子节点时，会调用`loader`函数\n *    -- 注意，该功能仅支持`mode`为 3 或 4 模式\n * en - Loader\n *    -- Set `loader` property to enable dynamic loading. When the node has no children, the `loader` function will be called\n *    -- Note that this feature only supports mode 3 or 4\n */\nimport React, { useState } from 'react';\nimport { produce } from 'immer';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value?: string;\n  id?: string;\n  children?: DataItem[];\n}\n\nconst initData = ['0', '1', '2', '3', '4', '5', '6', '7', '8'].map((i) => ({ id: i }));\nconst createRange = () => Array.from({ length: Math.round(Math.random() * 4) }, (_, i) => i);\n\nexport default () => {\n  const [_data, setData] = useState<DataItem[]>(initData);\n  const [value, setValue] = useState<string[]>([]);\n\n  const loader: CascaderProps['loader'] = (key) => {\n    const path = key.toString().split(',');\n    setTimeout(() => {\n      setData(prevState => {\n        const producer = produce((draft) => {\n          let { data } = draft;\n          path.forEach((pid, i) => {\n            data = draft.find((d: { id: string }) => d.id === pid);\n            if (i < path.length - 1) draft = data.children;\n          });\n          data.children = [...createRange().map((i) => ({ id: `${data.id}-${i}` }))];\n        });\n        const nextState = producer(prevState);\n        return nextState;\n      });\n    }, 500);\n  };\n\n  const handleChange: CascaderProps['onChange'] = (v) => setValue(v);\n  const renderItem: CascaderProps['renderItem'] = (node) => `node ${node.id}`;\n  const keyGenerator: CascaderProps['keygen'] = (node, parentKey) =>\n    `${String(parentKey)},${node.id}`.replace(/^,/, '');\n\n  return (\n    <div>\n      <Cascader\n        mode={3}\n        width={300}\n        placeholder='Please select city'\n        data={_data}\n        loader={loader}\n        value={value}\n        onChange={handleChange}\n        keygen={keyGenerator}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "Filter data (local)",
      "description": "Set the `onFilter` property and return the content as a function, the local data will be filtered according to the returned filter function",
      "code": "/**\n * cn - 过滤数据（本地）\n *    -- 设置`onFilter`属性且返回内容为函数时，会根据返回的过滤函数对本地数据进行过滤\n * en - Filter data (local)\n *    -- Set the `onFilter` property and return the content as a function, the local data will be filtered according to the returned filter function\n */\nimport React from 'react';\nimport { Cascader, Form, Switch, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'gulou',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const handleFilter: CascaderProps['onFilter'] = (text) => (d) => d.value.indexOf(text) >= 0;\n\n  const renderItem: CascaderProps['renderItem'] = (n) => `${n.value}`;\n  const [highlight, setHighlight] = React.useState(true);\n\n  return (\n    <div>\n      <Form>\n        <Form.Item label='高亮关键字' labelWidth={72}>\n          <Switch value={highlight} onChange={setHighlight} />\n        </Form.Item>\n      </Form>\n      <div style={{ display: 'flex', gap: 32 }}>\n        <Cascader\n          width={300}\n          placeholder='Please select city'\n          data={data}\n          keygen='value'\n          onFilter={handleFilter}\n          renderItem={renderItem}\n          highlight={highlight}\n        />\n\n        <Cascader\n          mode={3}\n          width={300}\n          placeholder='Please select city'\n          data={data}\n          keygen='value'\n          onFilter={handleFilter}\n          renderItem={renderItem}\n          highlight={highlight}\n        />\n      </div>\n    </div>\n  );\n};\n"
    },
    {
      "title": "Wide match",
      "description": "After opening `wideMatch`, all possible matching items will be filtered out",
      "code": "/**\n * cn - 宽泛过滤\n *    -- 打开`wideMatch`后，将筛选出所有可能的匹配项目\n * en - Wide match\n *    -- After opening `wideMatch`, all possible matching items will be filtered out\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'gulou',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const handleFilter: CascaderProps['onFilter'] = (text: string) => (d: DataItem) =>\n    d.value.indexOf(text) >= 0;\n\n  const renderItem: CascaderProps['renderItem'] = (n) => `${n.value}`;\n\n  return (\n    <div style={{ display: 'flex', gap: 32 }}>\n      <Cascader\n        wideMatch\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        onFilter={handleFilter}\n        renderItem={renderItem}\n        highlight\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "inner title",
      "description": "use innerTitle to display the inner title",
      "code": "/**\n /**\n * cn - 内嵌标题\n *    -- 使用 innerTitle 展示内嵌标题\n * en - inner title\n *    -- use innerTitle to display the inner title\n */\nimport React from 'react';\nimport { Cascader, Gap } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <Gap style={{ flexDirection: 'column', gap: 24 }}>\n      <Cascader\n        innerTitle='Inner Title'\n        width={300}\n        placeholder='Please select city'\n        clearable\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n        size=\"small\"\n      />\n      <Cascader\n        innerTitle='Inner Title'\n        width={300}\n        placeholder='Please select city'\n        clearable\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n      <Cascader\n        innerTitle='Inner Title'\n        width={300}\n        placeholder='Please select city'\n        clearable\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n        size=\"large\"\n      />\n    </Gap>\n  );\n};\n"
    },
    {
      "title": "renderUnmatched",
      "description": "The unmatched value can be rendered through the `renderUnmatched` property",
      "code": "/**\n * cn - 渲染未匹配值\n *    -- 通过`renderUnmatched`属性可以渲染未匹配的值\n * en - renderUnmatched\n *    -- The unmatched value can be rendered through the `renderUnmatched` property\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const renderUnmatched: CascaderProps['renderUnmatched'] = (text) => {\n    return `Unmatched: ${text}`;\n  };\n\n  const renderItem: CascaderProps['renderItem'] = (n) => `${n.value}`;\n\n  return (\n    <div>\n      <Cascader\n        width={300}\n        unmatch\n        defaultValue={['shanghai']}\n        placeholder='Please select city'\n        data={data}\n        renderUnmatched={renderUnmatched}\n        keygen='value'\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n"
    },
    {
      "title": "Can only choose the last level",
      "description": "Set the final property",
      "code": "/**\n * cn - 只能选末级\n *    -- 设置 final 属性\n * en - Can only choose the last level\n *   -- Set the final property\n */\n\nimport React from 'react'\nimport { Cascader, Form } from 'shineout'\n\nconst data = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n]\n\nconst App: React.FC = () => (\n  <div>\n    <Form.Item label=\"Single\">\n      <Cascader\n        onFilter={text => d => d.value.indexOf(text) >= 0}\n        final\n        finalDismiss\n        data={data}\n        keygen=\"value\"\n        renderItem={n => `${n.value}`}\n      />\n    </Form.Item>\n    <Form.Item label=\"multiple\">\n      <Cascader\n        mode={2}\n        final\n        onFilter={text => d => d.value.indexOf(text) >= 0}\n        data={data}\n        keygen=\"value\"\n        renderItem={n => `${n.value}`}\n      />\n    </Form.Item>\n  </div>\n)\n\nexport default App\n"
    },
    {
      "title": "Big data performance",
      "description": "Set the virtual property to enable virtual scrolling",
      "code": "/**\n * cn - 大数据性能\n *    -- 设置 virtual 属性，开启虚拟滚动\n * en - Big data performance\n *   -- Set the virtual property to enable virtual scrolling\n */\n\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\nfunction generateBigTreeData(level: number, count: number) {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    const children: any[] = level > 0 ? generateBigTreeData(level - 1, count) : [];\n    data.push({ value: `${level}-${i}`, children });\n  }\n  return data;\n}\n\nconst bigData = generateBigTreeData(2, 50);\n\nconst App: React.FC = () => (\n  <Cascader\n    keygen='value'\n    data={bigData}\n    virtual\n    renderItem={(n) => `${n.value}`}\n    onFilter={(text) => (d) => d.value.indexOf(text) >= 0}\n  />\n);\n\nexport default App;\n"
    },
    {
      "title": "tip",
      "description": "test tip",
      "code": "/**\n * cn - tip\n *    -- test tip\n * en - tip\n *    -- test tip\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      {/* <Cascader\n        tip='test tip'\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n      <Cascader\n        status='error'\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n      <Cascader\n        tip='test tip'\n        error=\"error\"\n        popover\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      /> */}\n    </div>\n  );\n};\n"
    },
    {
      "title": "Big data performance",
      "description": "Set the virtual property to enable virtual scrolling",
      "code": "/**\n * cn - virtual-compressed\n *    -- 设置 virtual 属性，开启虚拟滚动\n * en - Big data performance\n *   -- Set the virtual property to enable virtual scrolling\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\nimport bigBizData from './big-biz-data';\n\n\n// const bigData = generateBigTreeData(2, 50);\n\nconst App: React.FC = () => (\n  <Cascader\n    keygen='category_id'\n    data={bigBizData}\n    virtual\n    expandTrigger='hover'\n    mode={0}\n    compressed\n    clearable\n    // compressedBound={200}\n    // compressed=\"hide-popover\"\n    // renderResult={() => null}\n    renderItem={(n) => {\n      // if(n.category_name === '加大码'){\n\n      //   return 'long long text 加大码long long text long long text 加大码long long textlong long text 加大码long long textlong long text 加大码long long text long long text 加大码long long textlong long text 加大码long long textlong long text 加大码long long text long long text 加大码long long textlong long text 加大码long long text'\n      // }\n\n        return `${n.category_name}`\n    }}\n    onFilter={(text) => (d) => d.category_name.indexOf(text) >= 0}\n  />\n);\n\nexport default App;"
    }
  ],
  "subComponents": [],
  "version": "3.7.10-beta.3",
  "tips": [
    "在 Form 中使用时通过 name 属性自动接入，无需手动管理 value 和 onChange",
    "通过 rules 属性配置校验规则，会自动集成到 Form 的校验流程",
    "❌ 避免在 Form 中同时使用 name 和 value/onChange"
  ],
  "notes": {},
  "apiSummary": {
    "totalProps": 63,
    "requiredProps": 2,
    "propsWithWhen": 0,
    "examplesCount": 24
  },
  "subComponentApis": {},
  "relatedTypes": {
    "CascaderRef": {
      "title": "CascaderRef",
      "description": "",
      "notes": {},
      "props": [
        {
          "name": "close",
          "type": "(e?: MouseEvent ) => void",
          "required": true,
          "description": "关闭下拉框"
        }
      ]
    }
  }
}