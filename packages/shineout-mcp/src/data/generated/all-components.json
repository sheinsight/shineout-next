{
  "Alert": {
    "name": "Alert",
    "description": "Alert 用于承载显示用户需要关注的关键信息",
    "category": "feedback",
    "importPath": "import { Alert } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "type",
        "type": "\"success\" | \"info\" | \"warning\" | \"danger\" | \"confirmwarning\" | \"error\"",
        "required": false,
        "defaultValue": "\\\"warning",
        "description": "类型"
      },
      {
        "name": "closeItem",
        "type": "ReactNode",
        "required": false,
        "description": "自定义关闭按钮"
      },
      {
        "name": "icon",
        "type": "ReactNode",
        "required": false,
        "description": "为 true 时，根据 type 属性显示状态图标。如果需要显示自定义图标，传入 ReactElement"
      },
      {
        "name": "iconSize",
        "type": "number",
        "required": false,
        "defaultValue": "14",
        "description": "icon 的尺寸"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "标题模式"
      },
      {
        "name": "titleStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "标题样式"
      },
      {
        "name": "closable",
        "type": "boolean | \"only\"",
        "required": false,
        "description": "是否可以关闭Alert，当设置为only的时候，点击按钮不会自动隐藏Alert"
      },
      {
        "name": "onClose",
        "type": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "关闭事件"
      },
      {
        "name": "bordered",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示边框"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "内容，文字或 react 组件"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "The basic usage of Alert, used to display important prompt information in the page",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 提示框基本用法，在页面内用于展示重要提示信息\n * en - Basic\n *    -- The basic usage of Alert, used to display important prompt information in the page\n */\nimport React from 'react';\nimport { Alert } from 'shineout';\n\nexport default () => {\n  return (\n    <Alert icon type='info'>\n      This is a line of important text for alerting purposes\n    </Alert>\n  );\n};\n"
      },
      {
        "title": "Type",
        "description": "Set the `type` property to switch between different types of alert boxes. Support 4 different types: `success`, `info`, `warning`, `danger`",
        "scenario": "basic",
        "code": "/**\n * cn - 不同类型\n *    -- 通过设置 `type` 属性切换不同的提示框类型，支持 4 种不同的类型：`success`、`info`、`warning`、`danger`\n * en - Type\n *    -- Set the `type` property to switch between different types of alert boxes. Support 4 different types: `success`, `info`, `warning`, `danger`\n */\nimport React from 'react';\nimport { Alert } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', flexWrap: 'wrap', gap: 24 }}>\n      <Alert icon type='info' style={{ width: 'calc(50% - 16px)' }}>\n        This is informative text.\n      </Alert>\n      <Alert icon type='success' style={{ width: 'calc(50% - 16px)' }}>\n        This is success text.\n      </Alert>\n      <Alert icon type='warning' style={{ width: 'calc(50% - 16px)' }}>\n        This is warning text.\n      </Alert>\n      <Alert icon type='danger' style={{ width: 'calc(50% - 16px)' }}>\n        This is danger text.\n      </Alert>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Basic",
        "description": "The basic usage of Alert, used to display important prompt information in the page",
        "scenario": "basic",
        "code": "/**\n * cn - 允许关闭\n *    -- 通过设置 `closable` 属性可以展示关闭按钮。通过 `onClose` 属性可以设置关闭回调函数\n *    -- 注意 `onClose` 属性未来不再支持 boolean 类型，`hideClose` 属性即将弃用，请使用 `closable`\n * en - Basic\n *    -- The basic usage of Alert, used to display important prompt information in the page\n */\nimport React, { useState } from 'react';\nimport { Alert, Button } from 'shineout';\n\nexport default () => {\n  const [reset, setReset] = useState(true);\n  const handleReset = () => {\n    setReset(true);\n  };\n\n  const handleClose = () => {\n    setTimeout(() => {\n      setReset(false);\n    }, 300);\n  };\n\n  return (\n    <div>\n      {!reset && (\n        <Button onClick={handleReset} mode='text' type='primary'>\n          重置\n        </Button>\n      )}\n      {reset && (\n        <Alert icon closable type='info' onClose={handleClose}>\n          This is informative text.\n        </Alert>\n      )}\n    </div>\n  );\n};\n"
      },
      {
        "title": "Title",
        "description": "Set the `title` property to display the title mode alert box",
        "scenario": "basic",
        "code": "/**\n * cn - 标题模式\n *    -- 通过设置 `title` 属性可以展示标题模式的提示框\n * en - Title\n *    -- Set the `title` property to display the title mode alert box\n */\nimport React from 'react';\nimport { Alert } from 'shineout';\n\nexport default () => {\n  return (\n    <Alert type='info' icon title='Heading' closable>\n      This is a line of important text for alerting purposes\n    </Alert>\n  );\n};\n"
      },
      {
        "title": "No border",
        "description": "Set the `bordered` property to false to hide the border of the alert box",
        "scenario": "basic",
        "code": "/**\n * cn - 无边框\n *    -- 设置 `bordered` 属性为 false 可以隐藏提示框的边框\n * en - No border\n *    -- Set the `bordered` property to false to hide the border of the alert box\n */\nimport React from 'react';\nimport { Alert } from 'shineout';\n\nexport default () => {\n  return (\n    <Alert icon type='info' bordered={false}>\n      This is a line of important text for alerting purposes\n    </Alert>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 12,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 5
    }
  },
  "Avatar": {
    "name": "Avatar",
    "description": "用图标、图片、字符的形式展示用户或事物信息",
    "category": "other",
    "importPath": "import { Avatar } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": "图像无法显示时的替代文本"
      },
      {
        "name": "src",
        "type": "ReactNode",
        "required": false,
        "description": "图片类头像的资源地址或者图片元素"
      },
      {
        "name": "icon",
        "type": "ReactNode",
        "required": false,
        "description": "设置头像的自定义图标"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "\\\"circle\\\"",
        "description": "指定头像的形状"
      },
      {
        "name": "shape",
        "type": "\"circle\" | \"square\"",
        "required": false,
        "description": "头像文本内容，会根据内容尺寸自适应计算缩放比例"
      },
      {
        "name": "srcSet",
        "type": "string",
        "required": false,
        "description": "设置图片类头像响应式资源地址"
      },
      {
        "name": "gap",
        "type": "number",
        "required": false,
        "description": "字符类型距离左右两侧边界单位像素"
      },
      {
        "name": "draggable",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "图片是否允许拖动"
      },
      {
        "name": "crossOrigin",
        "type": "\"anonymous\" | \"use-credentials\"",
        "required": false,
        "description": "CORS 属性设置"
      },
      {
        "name": "onError",
        "type": "(() => boolean)",
        "required": false,
        "description": "图片加载失败的事件，返回 false 会关闭组件默认的 fallback 行为"
      },
      {
        "name": "onClick",
        "type": "(() => void)",
        "required": false,
        "description": "头像点击事件"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "The basic usage of Avatar",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 头像的基础使用\n * en - Basic\n *    -- The basic usage of Avatar\n */\nimport React from 'react';\nimport { Avatar } from 'shineout';\n\nconst userIcon = (\n  <svg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M7.99992 8.66667C10.2091 8.66667 11.9999 6.87581 11.9999 4.66667C11.9999 2.45753 10.2091 0.666672 7.99992 0.666672C5.79078 0.666672 3.99992 2.45753 3.99992 4.66667C3.99992 6.87581 5.79078 8.66667 7.99992 8.66667Z'\n      fill='#B3B7C1'\n    />\n    <path\n      d='M5.44625 10C3.1747 10 1.33325 11.8415 1.33325 14.113C1.33325 14.4188 1.58114 14.6667 1.88693 14.6667H14.1129C14.4187 14.6667 14.6666 14.4188 14.6666 14.113C14.6666 11.8415 12.8251 10 10.5536 10H5.44625Z'\n      fill='#B3B7C1'\n    />\n  </svg>\n);\n\nexport default () => {\n  return (\n    <div>\n      <Avatar icon={userIcon} />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Basic",
        "description": "The basic usage of Avatar",
        "scenario": "basic",
        "code": "/**\n * cn - 类型\n *    -- 支持三种类型：图片、Icon 以及字符，其中 Icon 和字符型可以自定义图标颜色及背景色\n * en - Basic\n *    -- The basic usage of Avatar\n */\nimport React from 'react';\nimport { Avatar, Badge } from 'shineout';\n\nconst userIcon = (\n  <svg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M7.99992 8.66667C10.2091 8.66667 11.9999 6.87581 11.9999 4.66667C11.9999 2.45753 10.2091 0.666672 7.99992 0.666672C5.79078 0.666672 3.99992 2.45753 3.99992 4.66667C3.99992 6.87581 5.79078 8.66667 7.99992 8.66667Z'\n      fill='#B3B7C1'\n    />\n    <path\n      d='M5.44625 10C3.1747 10 1.33325 11.8415 1.33325 14.113C1.33325 14.4188 1.58114 14.6667 1.88693 14.6667H14.1129C14.4187 14.6667 14.6666 14.4188 14.6666 14.113C14.6666 11.8415 12.8251 10 10.5536 10H5.44625Z'\n      fill='#B3B7C1'\n    />\n  </svg>\n);\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', gap: 24 }}>\n      <Avatar icon={userIcon}></Avatar>\n      <Avatar>J</Avatar>\n      <Avatar src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/avatar/01.png'></Avatar>\n      <Badge count={<div style={{ fontSize: 16, transform: 'rotate(45deg)' }}>🌱</div>}>\n        <Avatar style={{ background: 'linear-gradient(135deg, #ff7e5f, #feb47b)', color: '#fff' }}>\n          🍊\n        </Avatar>\n      </Badge>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Size",
        "description": "Avatar supports three sizes: large, medium, and small",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸和形状\n *    -- 头像尺寸支持三种：小、中、大，默认为中\n *    -- 头像形状支持两种：`circle` | `square`，默认为`circle`\n * en - Size\n *    -- Avatar supports three sizes: large, medium, and small\n *    -- Avatar supports two shapes: `circle` | `square`, default is `circle`\n */\nimport React from 'react';\nimport { Avatar } from 'shineout';\n\nfunction UserIcon(props:any){\n  return <svg width={props.size || '16'} height={props.size || '16'} viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M7.99992 8.66667C10.2091 8.66667 11.9999 6.87581 11.9999 4.66667C11.9999 2.45753 10.2091 0.666672 7.99992 0.666672C5.79078 0.666672 3.99992 2.45753 3.99992 4.66667C3.99992 6.87581 5.79078 8.66667 7.99992 8.66667Z'\n      fill='#B3B7C1'\n    />\n    <path\n      d='M5.44625 10C3.1747 10 1.33325 11.8415 1.33325 14.113C1.33325 14.4188 1.58114 14.6667 1.88693 14.6667H14.1129C14.4187 14.6667 14.6666 14.4188 14.6666 14.113C14.6666 11.8415 12.8251 10 10.5536 10H5.44625Z'\n      fill='#B3B7C1'\n    />\n  </svg>\n}\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', gap: 24, flexDirection: 'column' }}>\n      <div style={{ display: 'flex', gap: 24, alignItems: 'center' }}>\n        <Avatar icon={<UserIcon size={12} />} size='small'></Avatar>\n        <Avatar icon={<UserIcon size={16} />}></Avatar>\n        <Avatar icon={<UserIcon size={20} />} size='large'></Avatar>\n      </div>\n      <div style={{ display: 'flex', gap: 24, alignItems: 'center' }}>\n        <Avatar icon={<UserIcon size={12} />} size='small' shape='square'></Avatar>\n        <Avatar icon={<UserIcon size={16} />} shape='square'></Avatar>\n        <Avatar icon={<UserIcon size={20} />} size='large' shape='square'></Avatar>\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Auto text size",
        "description": "Avatar supports character adaptation, that is, when the character length is too long, the avatar can automatically adjust the character to present the complete content",
        "scenario": "basic",
        "code": "/**\n * cn - 字符大小自适应\n *    -- 头像支持字符自适应，即字符长度过长时，头像可自动调整字符以便呈现完整内容,也可使用 `gap` 来设置字符距离左右两侧边界单位像素\n * en - Auto text size\n *    -- Avatar supports character adaptation, that is, when the character length is too long, the avatar can automatically adjust the character to present the complete content\n */\nimport React from 'react';\nimport { Avatar } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', gap: 24 }}>\n      <Avatar>J</Avatar>\n      <Avatar>Jay</Avatar>\n      <Avatar>Janny</Avatar>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Group",
        "description": "Set the maximum number of avatars displayed by configuring the `max` property. If it exceeds, it will be hidden. If you need to display the content beyond the personalized display, you can use the `renderMax` property",
        "scenario": "basic",
        "code": "/**\n * cn - 头像组\n *    -- 通过配置 `max` 属性设置最大展示个数，超过则隐藏显示，如果需要个性化展示超出内容，可以使用 `renderMax` 属性\n * en - Group\n *    -- Set the maximum number of avatars displayed by configuring the `max` property. If it exceeds, it will be hidden. If you need to display the content beyond the personalized display, you can use the `renderMax` property\n */\nimport React from 'react';\nimport { Avatar, Popover, icons } from 'shineout';\n\nconst url =\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/avatar';\n\nconst avatarImgIndex = [1, 2, 3, 4, 5, 6, 7, 8];\n\nexport default () => {\n  const renderAvatars = () => {\n    return avatarImgIndex.map((item, index) => {\n      return <Avatar key={index} src={`${url}/0${item}.png`}></Avatar>;\n    });\n  };\n\n  const renderMax = (dom: React.ReactNode[]) => {\n    return (\n      <div>\n        <Avatar><div style={{ width: 16, height: 16, display: 'flex' }}>{icons.More}</div></Avatar>\n        <Popover style={{ padding: 16, display: 'flex', gap: 8 }}>{dom}</Popover>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Avatar.Group>{renderAvatars()}</Avatar.Group>\n      </div>\n      <div style={{ marginBottom: 24 }}>\n        <Avatar.Group max={3}>{renderAvatars()}</Avatar.Group>\n      </div>\n      <div>\n        <Avatar.Group max={3} renderMax={renderMax}>\n          {renderAvatars()}\n        </Avatar.Group>\n      </div>\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [
      {
        "name": "Group",
        "description": "",
        "whenCn": "",
        "whenEn": ""
      }
    ],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 14,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 5
    },
    "subComponentApis": {
      "Group": {
        "whenCn": "",
        "whenEn": "",
        "description": "",
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "size",
            "type": "\"small\" | \"large\" | \"default\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "不同尺寸"
          },
          {
            "name": "shape",
            "type": "\"circle\" | \"square\"",
            "required": false,
            "description": "头像文本内容，会根据内容尺寸自适应计算缩放比例"
          },
          {
            "name": "max",
            "type": "number",
            "required": false,
            "description": "设置头像组展示头像的最大数量"
          },
          {
            "name": "renderMax",
            "type": "((hideAvatarNodes: ReactNode[], max: number) => ReactNode)",
            "required": false,
            "description": "自定义渲染隐藏的头像节点，hideAvatarNodes 为隐藏的节点 dom 数组，max 为隐藏的节点数量"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true,
            "description": "头像节点"
          },
          {
            "name": "popover",
            "type": "Pick<PopoverProps, \"position\" | \"zIndex\" | \"getPopupContainer\" | \"adjust\">",
            "required": false,
            "description": "用于展示隐藏头像的 Popover 相关配置，配置属性为 Popover 部分属性: position、zIndex、getPopupContainer、adjust"
          }
        ]
      }
    }
  },
  "Badge": {
    "name": "Badge",
    "description": "图标右上角的圆形徽标数字，一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理",
    "category": "other",
    "importPath": "import { Badge } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "内容"
      },
      {
        "name": "color",
        "type": "string",
        "required": false,
        "description": "自定义徽标颜色"
      },
      {
        "name": "count",
        "type": "ReactNode",
        "required": false,
        "description": "展示的数字，大于 overflowCount 时显示 ${overflowCount}+，为 0 时隐藏"
      },
      {
        "name": "dot",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "小点模式，开启后不展示数字"
      },
      {
        "name": "offset",
        "type": "[number, number]",
        "required": false,
        "description": "偏移量"
      },
      {
        "name": "overflowCount",
        "type": "number",
        "required": false,
        "description": "封顶数值"
      },
      {
        "name": "showZero",
        "type": "boolean",
        "required": false,
        "description": "当数值为 0 时，是否展示 Badge"
      },
      {
        "name": "status",
        "type": "\"default\" | \"processing\" | \"error\" | \"warning\" | \"success\"",
        "required": false,
        "description": "徽标状态"
      },
      {
        "name": "text",
        "type": "ReactNode",
        "required": false,
        "description": "状态点文本，仅在配置了 status 属性后生效"
      },
      {
        "name": "size",
        "type": "\"default\" | \"small\"",
        "required": false,
        "description": "尺寸，仅在非 dot 模式下生效，支持 small 和 default 两种尺寸"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "The basic badge display, the badge is not displayed by default when `count` is 0. You can modify it to display by configuring `showZero`",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基础的徽标展示。当 `count` 为0时默认不展示，可以通过配置 `showZero` 修改为展示。\n * en - Basic\n *    -- The basic badge display, the badge is not displayed by default when `count` is 0. You can modify it to display by configuring `showZero`\n */\nimport React, { useState } from 'react';\nimport { Badge, Switch } from 'shineout';\nimport Avatar from './static/avatar';\n\nexport default () => {\n  const [showZero, setShowZero] = useState(false);\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 32 }}>\n      <Badge count={1}>\n        <Avatar></Avatar>\n      </Badge>\n      <Badge count={0} showZero={showZero}>\n        <Switch onChange={setShowZero} value={showZero}></Switch>\n      </Badge>\n    </div>\n  );\n};\n"
      },
      {
        "title": "No children",
        "description": "Independent use, no wrapping elements is independent use, you can customize the style",
        "scenario": "basic",
        "code": "/**\n * cn - 独立使用\n *    -- 不包裹任何元素即是独立使用，可自定样式展现\n * en - No children\n *    -- Independent use, no wrapping elements is independent use, you can customize the style\n */\nimport React from 'react';\nimport { Badge } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 42 }}>\n      <Badge count={1}></Badge>\n      <Badge count={100} overflowCount={99} color='#faad14'></Badge>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Overflow count",
        "description": "Set the `overflowCount` property, when the number is greater than this value, display $\\{overflowCount\\}+",
        "scenario": "basic",
        "code": "/**\n * cn - 封顶数字\n *    -- 设置`overflowCount`属性，当数字大于该值时显示 $\\{overflowCount\\}+\n * en - Overflow count\n *    -- Set the `overflowCount` property, when the number is greater than this value, display $\\{overflowCount\\}+\n */\nimport React from 'react';\nimport { Badge } from 'shineout';\nimport Avatar from './static/avatar';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 32 }}>\n      <Badge count={99}>\n        <Avatar></Avatar>\n      </Badge>\n      <Badge count={100} overflowCount={9}>\n        <Avatar></Avatar>\n      </Badge>\n      <Badge count={100} overflowCount={99}>\n        <Avatar></Avatar>\n      </Badge>\n      <Badge count={1000} overflowCount={999}>\n        <Avatar></Avatar>\n      </Badge>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Size",
        "description": "Set the `size` property to `small` to display a small badge. The supported sizes are `small` and `default`.",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性为 `small` 可以显示小尺寸的徽标。支持的尺寸有 `small` 和 `default`。\n * en - Size\n *    -- Set the `size` property to `small` to display a small badge. The supported sizes are `small` and `default`.\n */\nimport React from 'react';\nimport { Badge } from 'shineout';\nimport Avatar from './static/avatar';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 24 }}>\n      <Badge count={99} size='small'>\n        <Avatar></Avatar>\n      </Badge>\n      <Badge count={99}>\n        <Avatar></Avatar>\n      </Badge>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Dot",
        "description": "Open `dot` dot mode, do not display numbers",
        "scenario": "basic",
        "code": "/**\n * cn - 小点模式\n *    -- 开启 `dot` 小点模式，不展示数字\n * en - Dot\n *    -- Open `dot` dot mode, do not display numbers\n */\nimport React from 'react';\nimport { Badge } from 'shineout';\nimport Avatar from './static/avatar';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 32 }}>\n      <Badge dot>\n        <Avatar></Avatar>\n      </Badge>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Basic",
        "description": "The basic badge display, the badge is not displayed by default when `count` is 0. You can modify it to display by configuring `showZero`",
        "scenario": "basic",
        "code": "/**\n * cn - 带状态的小点\n *    -- 配置`status`更改徽标的状态\n * en - Basic\n *    -- The basic badge display, the badge is not displayed by default when `count` is 0. You can modify it to display by configuring `showZero`\n */\nimport React from 'react';\nimport { Badge } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', gap: 24, marginBottom: 32 }}>\n        <Badge dot status='default'></Badge>\n        <Badge dot status='processing'></Badge>\n        <Badge dot status='error'></Badge>\n        <Badge dot status='warning'></Badge>\n        <Badge dot status='success'></Badge>\n      </div>\n      <div style={{ display: 'flex', alignItems: 'center', gap: 24 }}>\n        <Badge dot status='default' text='Default'></Badge>\n        <Badge dot status='processing' text='Processing'></Badge>\n        <Badge dot status='error' text='Error'></Badge>\n        <Badge dot status='warning' text='Warning'></Badge>\n        <Badge dot status='success' text='Success'></Badge>\n      </div>\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 12,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 6
    }
  },
  "Breadcrumb": {
    "name": "Breadcrumb",
    "description": "显示页面在系统中的层级结构和当前所在位置，并可以快速返回之前的任意页面",
    "category": "navigation",
    "importPath": "import { Breadcrumb } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "data",
        "type": "any[]",
        "required": false,
        "defaultValue": "[]",
        "description": "面包屑对象数组,见 data"
      },
      {
        "name": "separator",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "\\\"/\\\"",
        "description": "面包屑分隔符,可以是字符串或自定义的元素"
      },
      {
        "name": "keygen",
        "type": "true | ObjectKey<Item> | (data: Item, index?: number ) => string | number",
        "required": false,
        "description": "生成每一项key的辅助方法。为 true 时，以数据项本身作为key，相当于 (d => d)；为函数时，使用此函数返回值；为string时，使用这个string对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
      },
      {
        "name": "renderItem",
        "type": "((value: Item) => ReactNode)",
        "required": false,
        "description": "自定义渲染"
      },
      {
        "name": "max",
        "type": "number",
        "required": false,
        "description": "最大显示个数"
      },
      {
        "name": "maxHeight",
        "type": "string | number",
        "required": false,
        "defaultValue": "50vh",
        "description": "下拉框最大高度，超出可以内滚"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "The basic usage",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 组件调用通过 json 数据配置\n * en - Base\n *    -- The basic usage\n */\n\nimport React from 'react';\nimport { Breadcrumb, Message, TYPE } from 'shineout';\n\ntype BreadcrumbData = TYPE.Breadcrumb.Data;\n\ntype BreadcrumbProps<data> = TYPE.Breadcrumb.Props<data>;\n\nconst data: BreadcrumbProps<BreadcrumbData>['data'] = [\n  { title: 'Home', url: '/' },\n  { title: 'Button', url: '/#/cn/component/shineout/Button?tab=examples' },\n  { title: 'Handler', onClick: () => Message.info('clicked') },\n  { title: 'Self' },\n];\nconst App: React.FC = () => <Breadcrumb data={data} />;\n\nexport default App;\n"
      },
      {
        "title": "Size",
        "description": "set fontSize to change size",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 通过设置 fontSize 设置尺寸\n * en - Size\n *    -- set fontSize to change size\n */\n\nimport React from 'react';\nimport { Breadcrumb, Message, TYPE } from 'shineout';\n\ntype BreadcrumbData = TYPE.Breadcrumb.Data;\n\ntype BreadcrumbProps<data> = TYPE.Breadcrumb.Props<data>;\n\nconst data: BreadcrumbProps<BreadcrumbData>['data'] = [\n  { title: 'Home', url: '/' },\n  { title: 'Button', url: '/#/cn/component/shineout/Button?tab=examples' },\n  { title: 'Handler', onClick: () => Message.info('clicked') },\n  { title: 'Self' },\n];\nconst App: React.FC = () => (\n  <div>\n    <Breadcrumb data={data} style={{ fontSize: 12 }} />\n    <Breadcrumb data={data} style={{ fontSize: 14, marginTop: 24 }} />\n    <Breadcrumb data={data} style={{ fontSize: 16, marginTop: 24 }} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "separator",
        "description": "The default `separator` is '/'",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义分隔符\n *    -- 默认的分隔符为 '/'，可以通过 `separator` 属性自定义\n * en - separator\n *    -- The default `separator` is '/'\n */\n\nimport React from 'react';\nimport { Breadcrumb, TYPE } from 'shineout';\n\nfunction Separator() {\n  const str = '>';\n  return <span>{str}</span>;\n}\n\ntype BreadcrumbData = TYPE.Breadcrumb.Data;\n\ntype BreadcrumbProps<data> = TYPE.Breadcrumb.Props<data>;\n\nconst data: BreadcrumbProps<BreadcrumbData>['data'] = [\n  { title: 'Home', url: '/' },\n  { title: 'Self' },\n];\n\nconst App: React.FC = () => (\n  <div>\n    <Breadcrumb data={data} separator='/' style={{ marginBottom: '24px' }} />\n    <Breadcrumb data={data} separator={<Separator />} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "icon",
        "description": "Breadcrumbs with icons",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义图标\n *    -- 带图标的面包屑\n * en - icon\n *    -- Breadcrumbs with icons\n */\n\nimport React from 'react';\nimport { Breadcrumb, TYPE } from 'shineout';\n\ntype BreadcrumbData = TYPE.Breadcrumb.Data;\n\ntype BreadcrumbProps<data> = TYPE.Breadcrumb.Props<data>;\n\nconst home = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <g clipPath='url(#clip0_423_8269715856220)'>\n      <path\n        fill='currentColor'\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M18.9474 21.9669H5.69595C5.14367 21.9669 4.69595 21.5192 4.69595 20.9669L3.70144 11.0946C2.64017 11.5005 1.82062 10.1075 2.70137 9.38964L11.4079 2.29327C11.7893 1.94652 12.3719 1.94652 12.7533 2.29327L21.9668 9.45261C22.8386 10.13 22.131 11.5127 21.0716 11.2018L20.7063 11.0946L19.9474 20.9669C19.9474 21.5192 19.4997 21.9669 18.9474 21.9669ZM18.0221 19.0479C17.9799 19.5671 17.5462 19.9669 17.0253 19.9669H13.0806V14.6818C13.0806 14.1295 12.6328 13.6818 12.0806 13.6818C11.5283 13.6818 11.0806 14.1295 11.0806 14.6818V19.9669H7.59441C7.08341 19.9669 6.65462 19.5817 6.60012 19.0736L5.67412 10.441C5.63896 10.1132 5.76763 9.78907 6.01809 9.57466L11.456 4.91934C11.8189 4.60865 12.3509 4.59806 12.7259 4.89405L18.3633 9.34372C18.626 9.55108 18.7675 9.8761 18.7404 10.2097L18.0221 19.0479Z'\n      ></path>\n    </g>\n    <defs>\n      <clipPath>\n        <rect width='24' height='24' transform='translate(0.00195312)'></rect>\n      </clipPath>\n    </defs>\n  </svg>\n);\n\nconst tag = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      fill='currentColor'\n      d='M13.9193 1.90465H19.7103C20.7498 1.90465 21.8711 2.77051 21.843 3.90296L22.0771 10.0559C22.1229 10.6391 21.9111 11.2131 21.4975 11.6268L11.6121 21.5121C10.831 22.2932 9.5647 22.2932 8.78365 21.5121L2.50571 15.2342C1.72466 14.4532 1.72466 13.1868 2.50571 12.4058L12.4227 2.48874C12.8181 2.09344 13.3608 1.88163 13.9193 1.90465ZM13.837 3.90296L4.62703 13.1129C4.2365 13.5034 4.2365 14.1366 4.62703 14.5271L9.49076 19.3908C9.88128 19.7814 10.5144 19.7814 10.905 19.3908L20.0833 10.2125L19.9054 4.60225C19.9054 4.17159 19.4508 3.80356 18.9364 3.80356L13.837 3.90296ZM15.3053 5.73973C16.686 5.73973 17.8053 6.85902 17.8053 8.23973C17.8053 9.62044 16.686 10.7397 15.3053 10.7397C13.9246 10.7397 12.8053 9.62044 12.8053 8.23973C12.8053 6.85902 13.9246 5.73973 15.3053 5.73973ZM15.3053 7.73973C15.0292 7.73973 14.8053 7.96359 14.8053 8.23973C14.8053 8.51587 15.0292 8.73973 15.3053 8.73973C15.5815 8.73973 15.8053 8.51587 15.8053 8.23973C15.8053 7.96359 15.5815 7.73973 15.3053 7.73973Z'\n    ></path>\n  </svg>\n);\n\nconst data: BreadcrumbProps<BreadcrumbData>['data'] = [\n  { icon: home, url: '#home' },\n  { icon: tag, title: 'Custom', url: 'https://www.google.com' },\n  { icon: tag, title: 'Demo' },\n];\n\nconst style = { display: 'flex', alignItems: 'center' };\nconst data2: BreadcrumbProps<BreadcrumbData>['data'] = [\n  {\n    title: (\n      <a style={style} href='#home'>\n        Home&nbsp;{home}{' '}\n      </a>\n    ),\n  },\n  {\n    title: (\n      <a style={style} href='https://www.google.com'>\n        Custom&nbsp;{tag}\n      </a>\n    ),\n  },\n  { title: <span style={style}>Custom&nbsp;{tag}</span> },\n];\n\nconst App: React.FC = () => (\n  <div>\n    <Breadcrumb data={data} style={{ marginBottom: 24 }} />\n    <Breadcrumb data={data2} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Base",
        "description": "Custom render content in Breadcrumb",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义渲染\n *    -- 自定义渲染面包屑中的内容\n * en - Base\n *    -- Custom render content in Breadcrumb\n */\n\nimport React, { ReactNode } from 'react';\nimport { Breadcrumb, TYPE } from 'shineout';\n\nconst data = [\n  { name: 'home', link: '#home' },\n  { name: 'menu', link: 'https://www.google.com' },\n  { name: 'self' },\n];\ntype BreadcrumbProps = TYPE.Breadcrumb.Props<typeof data[0]>;\n\nconst renderItem: BreadcrumbProps['renderItem'] = (value) => {\n  let BreadcrumbItem: ReactNode = value.name;\n\n  if (value.link) BreadcrumbItem = <a href={value.link}>{value.name}</a>;\n\n  return BreadcrumbItem;\n};\nexport default function () {\n  return <Breadcrumb renderItem={renderItem} data={data} />;\n}\n"
      },
      {
        "title": "Dropdown",
        "description": "When dataItem is an array, it will be rendered as a dropdown",
        "scenario": "basic",
        "code": "/**\n * cn - 带有下拉\n *    -- dataItem 为数组时，会渲染为下拉\n * en - Dropdown\n *    -- When dataItem is an array, it will be rendered as a dropdown\n */\n\nimport React from 'react';\nimport { Breadcrumb, Message, TYPE } from 'shineout';\n\ntype BreadcrumbData = TYPE.Breadcrumb.Data;\n\ntype BreadcrumbProps<data> = TYPE.Breadcrumb.Props<data>;\n\nconst data: BreadcrumbProps<BreadcrumbData>['data'] = [\n  { title: 'Home', url: '/' },\n  { title: 'Button', url: '/#/cn/component/shineout/Button?tab=examples' },\n  [\n    {\n      title: 'Dropdown',\n      onClick: () => {\n        Message.info('Dropdown');\n      },\n    },\n    { title: 'Menu', url: window.location.href },\n    { title: 'Pagination' },\n    { title: 'Table' },\n  ],\n  { title: 'Self' },\n];\nconst App: React.FC = () => <Breadcrumb data={data} />;\n\nexport default App;\n"
      },
      {
        "title": "Max",
        "description": "Set `max` to limit the number of breadcrumbs displayed",
        "scenario": "basic",
        "code": "/**\n * cn - 显示省略\n *    -- 通过 `max` 来指定最多渲染的面包屑数量，超出的部分将显示为省略号\n * en - Max\n *    -- Set `max` to limit the number of breadcrumbs displayed\n */\n\nimport React from 'react';\nimport { Breadcrumb, Message, TYPE } from 'shineout';\n\ntype BreadcrumbData = TYPE.Breadcrumb.Data;\n\ntype BreadcrumbProps<data> = TYPE.Breadcrumb.Props<data>;\n\nconst data: BreadcrumbProps<BreadcrumbData>['data'] = [\n  { title: 'Home', url: '/' },\n  {\n    title: 'Button',\n    onClick: () => {\n      Message.info('Button');\n    },\n  },\n  {\n    title: 'Dropdown',\n    onClick: () => {\n      Message.info('Dropdown');\n    },\n  },\n  { title: 'Menu', url: window.location.href },\n  {\n    title: 'Pagination',\n    onClick: () => {\n      Message.info('Pagination');\n    },\n  },\n  {\n    title: '我是超宽的面包屑🍞🍞🍞',\n    onClick: () => {\n      Message.info('我是超宽的面包屑🍞🍞🍞');\n    },\n  },\n  { title: 'Self' },\n];\nconst App: React.FC = () => <Breadcrumb max={3} data={data} />;\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 8,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 7
    },
    "subComponentApis": {}
  },
  "Button": {
    "name": "Button",
    "description": "使用按钮触发操作和链接",
    "category": "general",
    "importPath": "import { Button } from 'shineout'",
    "props": [
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "onClick",
        "type": "MouseEventHandler<Element>",
        "required": false,
        "description": "按钮点击回调"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "禁用"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "按钮里面的内容, 可以是文字图标等"
      },
      {
        "name": "renderLoading",
        "type": "((buttonEl: ReactNode) => ReactElement)",
        "required": false,
        "description": "自定义loading"
      },
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "loading 状态"
      },
      {
        "name": "mode",
        "type": "\"text\" | \"outline\" | \"dashed\"",
        "required": false,
        "description": "按钮风格"
      },
      {
        "name": "type",
        "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "按钮类型"
      },
      {
        "name": "size",
        "type": "\"default\" | \"small\" | \"large\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "按钮尺寸"
      },
      {
        "name": "space",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "仅有2个汉字的按钮，是否在2个汉字中间插入空格"
      },
      {
        "name": "href",
        "type": "string",
        "required": false,
        "description": "如果设置了 href 属性，将会用 <a> 代替 <button>"
      },
      {
        "name": "target",
        "type": "string",
        "required": false,
        "description": "当设置了 href 属性时，target 会被设置到 <a> 元素上"
      },
      {
        "name": "shape",
        "type": "\"circle\" | \"round\" | \"square\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "设置按钮形状"
      },
      {
        "name": "htmlType",
        "type": "\"button\" | \"submit\" | \"reset\"",
        "required": false,
        "defaultValue": "\\\"button\\\"",
        "description": "按钮原生type属性"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Button is divided into five types: primary, secondary, outline, dash, and text. The primary button can only appear once in the same operation area",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 按钮分为主要按钮、次要按钮、线框按钮、虚框按钮、文字按钮五种，主按钮在同一个操作区域最多出现一次\n * en - Base\n *    -- Button is divided into five types: primary, secondary, outline, dash, and text. The primary button can only appear once in the same operation area\n */\n\nimport { Button } from 'shineout';\nexport default () => {\n  const buttonStyle = {\n    margin: 0,\n  };\n\n  return (\n    <div style={{ display: 'flex', gap: 24, flexWrap: 'wrap' }}>\n      <Button type='primary' style={buttonStyle}>\n        Primary\n      </Button>\n\n      <Button type='secondary' style={buttonStyle}>\n        Secondary\n      </Button>\n\n      <Button type='secondary' mode='outline' style={buttonStyle}>\n        Outline\n      </Button>\n\n      <Button type='secondary' mode='dashed' style={buttonStyle}>\n        Dashed\n      </Button>\n\n      <Button type='primary' mode='text' style={buttonStyle}>\n        Text\n      </Button>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Button with icon",
        "description": "Button can embed icons",
        "scenario": "basic",
        "code": "/**\n * cn - 图标按钮\n *    -- Button 可以嵌入图标\n * en - Button with icon\n *    -- Button can embed icons\n */\n\nimport { Button } from 'shineout';\nimport { Icon01 } from './static/icon';\n\nexport default () => {\n  const buttonStyle = {\n    margin: 0,\n  };\n\n  return (\n    <div style={{ display: 'flex', gap: 24, flexWrap: 'wrap' }}>\n      <Button type='primary' style={buttonStyle}>\n        <Icon01 style={{ marginInlineEnd: 4 }}></Icon01>\n        Primary\n      </Button>\n      <Button type='primary' style={buttonStyle}>\n        Primary\n        <Icon01 style={{ marginInlineStart: 4 }}></Icon01>\n      </Button>\n      <Button type='primary' shape='square' style={buttonStyle}>\n        <Icon01></Icon01>\n      </Button>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Button shape",
        "description": "Button is divided into square, circle, round, and rectangle",
        "scenario": "basic",
        "code": "/**\n * cn - 按钮形状\n *    -- 按钮分为矩形、全圆角、方形、圆形四种\n * en - Button shape\n *    -- Button is divided into square, circle, round, and rectangle\n */\n\nimport { Button } from 'shineout';\nimport { Icon01 } from './static/icon';\n\nexport default () => {\n  const buttonStyle = {\n    margin: 0,\n  };\n\n  const iconWarpperStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 4,\n  };\n\n  return (\n    <div style={{ display: 'flex', gap: 24, flexWrap: 'wrap' }}>\n      <Button type='primary' style={buttonStyle}>\n        Primary\n      </Button>\n      <Button type='primary' shape='round' style={buttonStyle}>\n        Primary\n      </Button>\n      <Button type='primary' shape='square' style={buttonStyle}>\n        <span style={iconWarpperStyle}>\n          <Icon01></Icon01>\n        </span>\n      </Button>\n      <Button type='primary' shape='circle' style={buttonStyle}>\n        <span style={iconWarpperStyle}>\n          <Icon01></Icon01>\n        </span>\n      </Button>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Button size",
        "description": "Button is divided into small, medium, and large. The recommended and default size is medium. You can choose the appropriate size in different scenarios and different business needs",
        "scenario": "basic",
        "code": "/**\n * cn - 按钮尺寸\n *    -- 按钮分为小、中、大三种尺寸，推荐及默认为尺寸「中」，可在不同场景及不同业务需求选择适合尺寸\n * en - Button size\n *    -- Button is divided into small, medium, and large. The recommended and default size is medium. You can choose the appropriate size in different scenarios and different business needs\n */\n\nimport { Button } from 'shineout';\nexport default () => {\n  const buttonStyle = {\n    margin: 0,\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 24, flexWrap: 'wrap' }}>\n      <Button type='primary' size='small' style={buttonStyle}>\n        Primary\n      </Button>\n      <Button type='primary' style={buttonStyle}>\n        Primary\n      </Button>\n      <Button type='primary' size='large' style={buttonStyle}>\n        Primary\n      </Button>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Button status",
        "description": "Button status is divided into danger, warning, and success. It can take effect at the same time as the button type, and the priority is higher than the button type",
        "scenario": "basic",
        "code": "/**\n * cn - 按钮状态\n *    -- 按钮状态分为危险、警告、成功三种，可以与按钮类型同时生效，优先级高于按钮类型\n * en - Button status\n *    -- Button status is divided into danger, warning, and success. It can take effect at the same time as the button type, and the priority is higher than the button type\n */\n\nimport { Button } from 'shineout';\n\nconst buttonStyle = {\n  margin: 0,\n  width: 72,\n} as React.CSSProperties;\n\nconst wrapperStyle = {\n  gap: 24,\n  display: 'flex',\n  flexWrap: 'wrap',\n  flexDirection: 'column',\n} as React.CSSProperties;\n\nconst buttonWrapperStyle = {\n  gap: 24,\n  display: 'flex',\n  flexWrap: 'wrap',\n  alignItems: 'center',\n} as React.CSSProperties;\nexport default () => {\n  return (\n    <div style={wrapperStyle}>\n      <div style={buttonWrapperStyle}>\n        <Button type='default' style={buttonStyle}>\n          Default\n        </Button>\n        <Button type='default' mode='outline' style={buttonStyle}>\n          Default\n        </Button>\n        <Button type='default' mode='dashed' style={buttonStyle}>\n          Default\n        </Button>\n        <Button type='default' mode='text' style={buttonStyle}>\n          Default\n        </Button>\n      </div>\n      <div style={buttonWrapperStyle}>\n        <Button type='primary' style={buttonStyle}>\n          Primary\n        </Button>\n        <Button type='primary' mode='outline' style={buttonStyle}>\n          Primary\n        </Button>\n        <Button type='primary' mode='dashed' style={buttonStyle}>\n          Primary\n        </Button>\n        <Button type='primary' mode='text' style={buttonStyle}>\n          Primary\n        </Button>\n      </div>\n      <div style={buttonWrapperStyle}>\n        <Button type='danger' style={buttonStyle}>\n          Danger\n        </Button>\n        <Button type='danger' mode='outline' style={buttonStyle}>\n          Danger\n        </Button>\n        <Button type='danger' mode='dashed' style={buttonStyle}>\n          Danger\n        </Button>\n        <Button type='danger' mode='text' style={buttonStyle}>\n          Danger\n        </Button>\n      </div>\n      <div style={buttonWrapperStyle}>\n        <Button type='warning' style={buttonStyle}>\n          Warning\n        </Button>\n        <Button type='warning' mode='outline' style={buttonStyle}>\n          Warning\n        </Button>\n        <Button type='warning' mode='dashed' style={buttonStyle}>\n          Warning\n        </Button>\n        <Button type='warning' mode='text' style={buttonStyle}>\n          Warning\n        </Button>\n      </div>\n      <div style={buttonWrapperStyle}>\n        <Button type='success' style={buttonStyle}>\n          Success\n        </Button>\n        <Button type='success' mode='outline' style={buttonStyle}>\n          Success\n        </Button>\n        <Button type='success' mode='dashed' style={buttonStyle}>\n          Success\n        </Button>\n        <Button type='success' mode='text' style={buttonStyle}>\n          Success\n        </Button>\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Disabled",
        "description": "Button disabled state",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用按钮\n *    -- 按钮的禁用状态\n * en - Disabled\n *    -- Button disabled state\n */\n\nimport { Button } from 'shineout';\nexport default () => {\n  const buttonStyle = {\n    margin: 0,\n    width: 72,\n  };\n\n  const wrapperStyle = {\n    gap: 24,\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'column',\n  };\n\n  const buttonWrapperStyle = {\n    gap: 24,\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n  };\n\n  return (\n    <div style={wrapperStyle}>\n      <div style={buttonWrapperStyle}>\n        <Button type='primary' disabled style={buttonStyle}>\n          Primary\n        </Button>\n        <Button type='primary' disabled mode='outline' style={buttonStyle}>\n          Primary\n        </Button>\n        <Button type='primary' disabled mode='dashed' style={buttonStyle}>\n          Primary\n        </Button>\n        <Button type='primary' disabled mode='text' style={buttonStyle}>\n          Primary\n        </Button>\n      </div>\n      <div style={buttonWrapperStyle}>\n        <Button type='danger' disabled style={buttonStyle}>\n          Danger\n        </Button>\n        <Button type='danger' disabled mode='outline' style={buttonStyle}>\n          Danger\n        </Button>\n        <Button type='danger' disabled mode='dashed' style={buttonStyle}>\n          Danger\n        </Button>\n        <Button type='danger' disabled mode='text' style={buttonStyle}>\n          Danger\n        </Button>\n      </div>\n      <div style={buttonWrapperStyle}>\n        <Button type='warning' disabled style={buttonStyle}>\n          Warning\n        </Button>\n        <Button type='warning' disabled mode='outline' style={buttonStyle}>\n          Warning\n        </Button>\n        <Button type='warning' disabled mode='dashed' style={buttonStyle}>\n          Warning\n        </Button>\n        <Button type='warning' disabled mode='text' style={buttonStyle}>\n          Warning\n        </Button>\n      </div>\n      <div style={buttonWrapperStyle}>\n        <Button type='success' disabled style={buttonStyle}>\n          Success\n        </Button>\n        <Button type='success' disabled mode='outline' style={buttonStyle}>\n          Success\n        </Button>\n        <Button type='success' disabled mode='dashed' style={buttonStyle}>\n          Success\n        </Button>\n        <Button type='success' disabled mode='text' style={buttonStyle}>\n          Success\n        </Button>\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Loading",
        "description": "Set loading to make a button loading. The button in the loading state does not trigger the click event",
        "scenario": "basic",
        "code": "/**\n * cn - 加载中按钮\n *    -- 通过设置 loading 可以让一个按钮处于加载中状态，处于加载中状态的按钮不会触发点击事件\n * en - Loading\n *    -- Set loading to make a button loading. The button in the loading state does not trigger the click event\n */\n\nimport { useState } from 'react';\nimport { Button, Gap, Icon, Message, icons } from 'shineout';\n\nconst url = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css';\n\nconst ShineoutIcon = Icon(url, 'FontAwesome', 'fa');\n\nconst prefixIconStyle = {\n  marginRight: 4,\n  fontSize: 12,\n  width: 12,\n  height: 12,\n};\n\n\nexport default () => {\n  const [loadings, setLoadings] = useState([false, false, false, false]);\n\n  const handleMockLoading = (index: number) => {\n    setLoadings(prev => prev.map((loading, i) => i === index ? true : loading));\n    Message.info('Deleting...', 2);\n    setTimeout(() => {\n      setLoadings(prev => prev.map((loading, i) => i === index ? false : loading));\n      Message.success('Delete success');\n    }, 2000);\n  };\n\n  return (\n    <Gap style={{width: 400}}>\n      <Gap>\n        <Button type='primary' loading>\n          Loading\n        </Button>\n\n        <Button type='primary' loading shape='square'>\n          <ShineoutIcon name='trash-o' style={{ ...prefixIconStyle, marginRight: 0 }} />\n        </Button>\n\n        <Button type='primary' loading>\n          <ShineoutIcon name='trash-o' style={prefixIconStyle} />\n          Delete\n        </Button>\n\n        <Button type='primary' loading>\n          <ShineoutIcon name='trash-o' style={prefixIconStyle} />\n          Delete\n          <div style={{ width: 14, display: 'flex', marginLeft: 4 }}>\n            {icons.HelpCircleOutline}\n          </div>\n        </Button>\n      </Gap>\n\n      <Gap>\n        <Button type='primary' loading={loadings[0]} onClick={() => handleMockLoading(0)}>\n          Loading\n        </Button>\n\n        <Button type='primary' loading={loadings[1]} shape='square' onClick={() => handleMockLoading(1)}>\n          <ShineoutIcon name='trash-o' style={{ ...prefixIconStyle, marginRight: 0 }}/>\n        </Button>\n\n        <Button type='primary' loading={loadings[2]} onClick={() => handleMockLoading(2)}>\n          <ShineoutIcon name='trash-o' style={prefixIconStyle} />\n          Delete\n        </Button>\n\n        <Button type='primary' loading={loadings[3]} onClick={() => handleMockLoading(3)}>\n          <ShineoutIcon name='trash-o' style={prefixIconStyle} />\n          Delete\n          <div style={{ width: 14, display: 'flex', marginLeft: 4 }}>\n            {icons.HelpCircleOutline}\n          </div>\n        </Button>\n      </Gap>\n    </Gap>\n  );\n};\n"
      },
      {
        "title": "Group",
        "description": "Can be used in the same level of multiple operations, in the form of button group",
        "scenario": "basic",
        "code": "/**\n * cn - 组合按钮\n *    -- 可用在同级多项操作，以按钮组合方式出现\n * en - Group\n *    -- Can be used in the same level of multiple operations, in the form of button group\n */\n\nimport { Button } from 'shineout';\nimport { Icon02, Icon03 } from './static/icon';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', gap: 24, flexWrap: 'wrap', flexDirection: 'column' }}>\n      <Button.Group mode='text'>\n        <Button type='primary'>Publish</Button>\n        <Button type='secondary'>Publish</Button>\n        <Button type='secondary'>Publish</Button>\n        <Button type='secondary' disabled>\n          Publish\n        </Button>\n      </Button.Group>\n\n      <Button.Group type='secondary'>\n        <Button type='primary'>Publish</Button>\n        <Button>Publish</Button>\n        <Button>Publish</Button>\n        <Button>Publish</Button>\n      </Button.Group>\n\n      <Button.Group type='secondary' mode='outline'>\n        <Button>Publish</Button>\n        <Button>Publish</Button>\n        <Button>Publish</Button>\n        <Button>Publish</Button>\n      </Button.Group>\n\n      <div style={{ display: 'flex', gap: 24 }}>\n        <Button.Group type='primary'>\n          <Button>Publish</Button>\n          <Button>\n            <Icon02></Icon02>\n          </Button>\n        </Button.Group>\n\n        <Button.Group type='secondary'>\n          <Button>Publish</Button>\n          <Button>\n            <Icon03 color='#666C7C'></Icon03>\n          </Button>\n        </Button.Group>\n      </div>\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [
      {
        "name": "Group",
        "description": "",
        "whenCn": "",
        "whenEn": ""
      }
    ],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 15,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 8
    },
    "subComponentApis": {
      "Group": {
        "whenCn": "",
        "whenEn": "",
        "description": "",
        "props": [
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "size",
            "type": "\"small\" | \"large\" | \"default\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "不同尺寸"
          },
          {
            "name": "shape",
            "type": "\"round\"",
            "required": false,
            "description": "设置按钮形状"
          },
          {
            "name": "mode",
            "type": "\"text\" | \"outline\" | \"dashed\"",
            "required": false,
            "description": "按钮风格;如果Button和Group同时设置mode,以Group为准"
          },
          {
            "name": "type",
            "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "按钮类型;如果Button和Group同时设置type,以Button为准"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true,
            "defaultValue": "index",
            "description": "由 Button 组成的 array"
          },
          {
            "name": "id",
            "type": "string",
            "required": false,
            "description": "按钮组id"
          }
        ]
      }
    }
  },
  "Card": {
    "name": "Card",
    "description": "最基础的卡片容器，能够创建清晰的视觉单元，让信息更具逻辑性",
    "category": "other",
    "importPath": "import { Card } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "collapsible",
        "type": "boolean | \"bottom\"",
        "required": false,
        "defaultValue": "false",
        "description": "是否可折叠，\\\"bottom\\\" 表示从下方点击折叠"
      },
      {
        "name": "collapsed",
        "type": "boolean",
        "required": false,
        "description": "是否折叠，用于受控状态"
      },
      {
        "name": "defaultCollapsed",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "初始折叠状态（仅在 collapsible 为 true 时有效）"
      },
      {
        "name": "onCollapse",
        "type": "((collapsed: boolean) => void)",
        "required": false,
        "description": "折叠状态改变时回调事件"
      },
      {
        "name": "shadow",
        "type": "boolean | \"hover\"",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示阴影\\n \\\"hover\\\" - 鼠标移到元素上显示;\\n true - 总是显示;\\n false - 从不显示"
      },
      {
        "name": "id",
        "type": "any",
        "required": false,
        "description": "手风琴下控制展开的值"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素"
      },
      {
        "name": "forwardedRef",
        "type": "((el: HTMLDivElement) => void)",
        "required": false,
        "description": "获取 Card dom"
      },
      {
        "name": "resizable",
        "type": "boolean | \"x\" | \"y\" | \"xy\"",
        "required": false,
        "defaultValue": "false",
        "description": "是否可以拖动大小"
      },
      {
        "name": "moveable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可以拖拽移动"
      },
      {
        "name": "split",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否分割头部和主体"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "The card is composed of three components: Header, Body, and Footer. It can be combined or used separately",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- Card 内部由 Header, Body, Footer 三个自组件组成，可以组合或单独使用\n * en - Base\n *    -- The card is composed of three components: Header, Body, and Footer. It can be combined or used separately\n */\nimport React from 'react';\nimport { Card, TYPE, Button, icons } from 'shineout';\n\ntype CardProps = TYPE.Card.Props;\n\ntype CardStyle = CardProps['style'];\n\nconst cardStyle: CardStyle = {\n  width: 360,\n};\n\nconst iconStyle = {\n  width: 32,\n  height: 32,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  cursor: 'pointer',\n};\n\nconst App: React.FC = () => (\n  <div>\n    <Card style={cardStyle} split>\n      <Card.Header\n        extra={\n          <Button mode='text' type='primary'>\n            Text Button\n          </Button>\n        }\n      >\n        Card title\n      </Card.Header>\n      <Card.Body>\n        Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n        bird in the open.\n      </Card.Body>\n      <Card.Footer>\n        <div style={{ display: 'flex' }}>\n          <div\n            style={{\n              marginInlineEnd: 8,\n              ...iconStyle,\n            }}\n          >\n            <svg viewBox='0 0 24 24' width='14px' height='14px'>\n              <path\n                fill='#666C7C'\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M2.13086 12.0313L2.13086 19.8967C2.13086 21.0013 3.02629 21.8967 4.13086 21.8967H17.82C18.8497 21.8967 19.6753 20.922 19.9251 20.1414L21.7909 13.0313C22.1943 11.2058 21.1563 9.0314 18.9662 9.0314L17.1948 9.0267L15.9702 9.0314C15.9702 9.0314 16.1695 8.63356 16.1695 6.00363C16.1695 3.37371 14.5167 2.10327 12.5332 2.10327C10.5498 2.10327 9.16804 4.02533 9.16804 6.00363L8.92932 8.35131C8.84757 8.89355 8.29867 10.0052 7.07103 10.0313H4.13086C3.02629 10.0313 2.13086 10.9268 2.13086 12.0313ZM6.13086 13.0313V18.8967C6.13086 19.449 5.68314 19.8967 5.13086 19.8967C4.57857 19.8967 4.13086 19.449 4.13086 18.8967V13.0313C4.13086 12.479 4.57857 12.0313 5.13086 12.0313C5.68314 12.0313 6.13086 12.479 6.13086 13.0313ZM18.1258 11.0197C19.4353 11.0197 19.9251 11.7337 19.4509 13.4116L18.0256 18.7959C17.8971 19.2813 17.5216 19.5991 17.0451 19.5991H8.90474C8.35246 19.5991 7.90474 19.1514 7.90474 18.5991V11.7337C8.55706 11.7337 10.8301 10.7338 10.9409 8.0492L11.1446 5.706C11.1446 4.82715 11.6544 4.1147 12.5332 4.1147C13.4121 4.1147 14.105 4.32596 14.1245 5.706C14.1441 7.08605 14.0885 7.18361 14.0362 8.0492C14.0123 8.44433 13.8523 9.09771 13.6855 9.69123C13.5006 10.349 13.985 11.0197 14.6682 11.0197H18.1258Z'\n              ></path>\n            </svg>\n          </div>\n          <div\n            style={{\n              marginInlineEnd: 8,\n              ...iconStyle,\n            }}\n          >\n            <svg viewBox='0 0 24 24' width='14px' height='14px' fill='#666C7C'>\n              <path d='M6.80237 19.0674C6.5783 19.0674 6.36073 19.1427 6.18454 19.2811L3.61977 21.2963C2.96365 21.8118 2.00195 21.3444 2.00195 20.51V4.03613C2.00195 3.05649 3.01528 2.03613 4.00195 2.03613H20.002C20.9855 2.03613 22.002 3.0505 22.002 4.03613V17.0674C22.002 18.0792 21.1558 19.0674 20.002 19.0674H6.80237ZM5.49281 17.2811C5.669 17.1427 5.88657 17.0674 6.11064 17.0674H20.002V5.03613C20.002 4.48385 19.5542 4.03613 19.002 4.03613H5.00195C4.44967 4.03613 4.00195 4.48385 4.00195 5.03613V18.4525L5.49281 17.2811Z'></path>\n              <path d='M9.54688 10.7754C9.54688 11.6038 8.8753 12.2754 8.04688 12.2754C7.21845 12.2754 6.54688 11.6038 6.54688 10.7754C6.54688 9.94696 7.21845 9.27539 8.04688 9.27539C8.8753 9.27539 9.54688 9.94696 9.54688 10.7754Z'></path>\n              <path d='M13.4883 10.7754C13.4883 11.6038 12.8167 12.2754 11.9883 12.2754C11.1599 12.2754 10.4883 11.6038 10.4883 10.7754C10.4883 9.94696 11.1599 9.27539 11.9883 9.27539C12.8167 9.27539 13.4883 9.94696 13.4883 10.7754Z'></path>\n              <path d='M17.4297 10.7754C17.4297 11.6038 16.7581 12.2754 15.9297 12.2754C15.1013 12.2754 14.4297 11.6038 14.4297 10.7754C14.4297 9.94696 15.1013 9.27539 15.9297 9.27539C16.7581 9.27539 17.4297 9.94696 17.4297 10.7754Z'></path>\n            </svg>\n          </div>\n          <div style={iconStyle}>\n            <svg viewBox='0 0 24 24' width='14px' height='14px'>\n              <path\n                fill='#666C7C'\n                d='M20.3911 2.55892C20.591 2.52313 20.7844 2.55061 20.9545 2.62457C20.9606 2.62853 20.9676 2.63161 20.9746 2.63478C21.0778 2.68129 21.1714 2.74566 21.2522 2.82324C21.2574 2.8281 21.2625 2.8331 21.2675 2.83816L21.2824 2.85339C21.36 2.93425 21.4243 3.02782 21.4717 3.13031C21.4741 3.13803 21.4771 3.14503 21.4801 3.15205C21.5747 3.36663 21.5939 3.61952 21.5042 3.87561L21.5235 3.81524C21.5196 3.82903 21.5155 3.84275 21.511 3.85639L21.5042 3.87561L14.8542 21.3083C14.555 22.1632 13.3644 22.2118 12.9965 21.3841L9.35236 14.7523L2.6017 11.1091C1.81349 10.7588 1.82001 9.66213 2.56086 9.30003L2.67749 9.25141L20.23 2.60141C20.2367 2.59907 20.2434 2.59681 20.25 2.59462C20.2629 2.59022 20.2766 2.58607 20.2904 2.58221C20.3191 2.57409 20.3471 2.56739 20.3751 2.56192C20.3779 2.56196 20.3809 2.5614 20.384 2.56086L20.3911 2.55892ZM18.1683 7.35134L11.3023 14.2173L13.7994 18.267L18.1683 7.35134ZM16.7553 5.93433L5.71784 10.3053L9.88733 12.8023L16.7553 5.93433Z'\n              ></path>\n            </svg>\n          </div>\n          <div style={{ ...iconStyle, marginInlineStart: 'auto', color: '#666C7C' }}>\n            <div style={{ width: 14 }}>{icons.More}</div>\n          </div>\n        </div>\n      </Card.Footer>\n    </Card>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "BoxShadow",
        "description": "Set the `shadow` property to determined how to display the shadow",
        "scenario": "basic",
        "code": "/**\n * cn - 阴影\n *    -- 可以通过 `shadow` 属性控制阴影\n * en - BoxShadow\n *    -- Set the `shadow` property to determined how to display the shadow\n */\nimport React from 'react';\nimport { Card, TYPE } from 'shineout';\n\ntype CardProps = TYPE.Card.Props;\n\ntype CardStyle = CardProps['style'];\n\nconst cardStyle: CardStyle = {\n  width: 140,\n  display: 'inline-flex',\n  marginInlineEnd: 20,\n};\n\nconst App: React.FC = () => (\n  <div>\n    <Card style={cardStyle}>\n      <Card.Body>Never</Card.Body>\n    </Card>\n\n    <Card style={cardStyle} shadow='hover'>\n      <Card.Body>Hover</Card.Body>\n    </Card>\n\n    <Card style={cardStyle} shadow>\n      <Card.Body>Always</Card.Body>\n    </Card>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Hover",
        "description": "Set shadow to hover to show shadow when the mouse is over the card, and you can customize the hover style by overriding the style",
        "scenario": "basic",
        "code": "/**\n * cn - 悬浮样式\n *    -- 可以设置 `shadow` = 'hover'，让卡片在鼠标移入时显示阴影，同时你可以通过样式覆盖来自定义悬浮样式\n * en - Hover\n *    -- Set shadow to hover to show shadow when the mouse is over the card, and you can customize the hover style by overriding the style\n */\nimport React from 'react';\nimport { Card, TYPE, Button } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\ntype CardProps = TYPE.Card.Props;\n\ntype CardStyle = CardProps['style'];\n\nconst cardStyle: CardStyle = {\n  width: 360,\n  display: 'inline-flex',\n};\n\nconst iconStyle = {\n  width: 32,\n  height: 32,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  cursor: 'pointer',\n};\n\nconst HoverCard: React.FC<{ className?: string }> = (props) => (\n  <Card\n    style={{...cardStyle, margin: '16px'}}\n    split\n    className={props.className}\n    shadow='hover'\n  >\n    <Card.Header\n      extra={\n        <Button mode='text' type='primary'>\n          Text Button\n        </Button>\n      }\n    >\n      Card title\n    </Card.Header>\n    <Card.Body>\n      Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n      bird in the open.\n    </Card.Body>\n    <Card.Footer>\n      <div style={{ display: 'flex' }}>\n        <div\n          style={{\n            marginInlineEnd: 8,\n            ...iconStyle,\n          }}\n        >\n          <svg\n            width='14'\n            height='14'\n            viewBox='0 0 14 14'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <path\n              d='M11.6084 4.76308C11.5697 4.75817 11.5308 4.75559 11.4917 4.75534L9.33165 4.74819C9.42966 4.30236 9.48157 3.85177 9.48157 3.43331C9.48157 3.00474 9.43549 2.57319 9.34507 2.14938C9.33827 2.11717 9.3285 2.08568 9.31591 2.05534C9.0814 1.1845 8.32423 0.583313 7.4434 0.583313C6.40039 0.583313 5.61348 1.45653 5.61348 2.61427L5.61289 2.64403C5.61127 2.6823 5.61127 2.72063 5.61289 2.75891C5.56739 3.96546 4.59497 5.01843 3.38338 5.1732L1.67654 5.20117C1.39501 5.17907 1.11723 5.27806 0.910387 5.4742C0.703543 5.67034 0.586463 5.94578 0.587457 6.23391L0.583374 12.3869C0.583374 12.9541 1.03429 13.4166 1.58904 13.4166H3.46213L10.5794 13.4041C10.9737 13.4041 11.2211 13.2911 11.5145 13.097C11.805 12.9041 12.0409 12.6369 12.1987 12.322C12.253 12.2327 12.2932 12.1375 12.3189 12.0381L12.3236 12.0184L13.3841 7.13748C13.4074 7.04224 13.4173 6.94462 13.4133 6.847C13.4372 6.4303 13.3361 6.01604 13.1233 5.6595C12.7891 5.09879 12.2792 4.7976 11.6084 4.76308ZM2.18914 6.2391L2.30975 6.23731C2.63189 6.23254 2.89681 6.49515 2.90149 6.82385C2.90153 6.82673 2.90155 6.82961 2.90155 6.83249V11.7738C2.90155 12.1025 2.64038 12.369 2.31821 12.369H2.19338C1.87121 12.3695 1.61004 12.103 1.61004 11.7743L1.6105 11.7738L1.61426 6.83381C1.61451 6.50862 1.87048 6.24381 2.18914 6.2391ZM12.3831 6.90296L11.3255 11.7714C11.3129 11.7904 11.3016 11.8103 11.2917 11.8309C11.2162 11.989 11.0998 12.123 10.9551 12.2184C10.7672 12.3428 10.713 12.3565 10.5742 12.3565L4.51258 12.3674C4.19041 12.368 3.92879 12.1019 3.92822 11.7732L3.92822 11.7722V6.13272C5.46006 5.7476 6.59581 4.37141 6.63898 2.76367C6.63993 2.74442 6.63954 2.72513 6.63781 2.70593V2.67617L6.63956 2.61367C6.63956 2.12558 6.91548 1.63034 7.4434 1.63034C7.87098 1.63034 8.2379 1.93748 8.3359 2.37736C8.34123 2.40165 8.34825 2.42552 8.3569 2.44879C8.42131 2.77265 8.45394 3.10226 8.45432 3.43272C8.45432 3.95058 8.3499 4.55772 8.16848 5.09939C8.11461 5.25914 8.13966 5.43562 8.23573 5.57322C8.3318 5.71082 8.48708 5.79261 8.65265 5.79284L11.4912 5.80296C11.5087 5.80534 11.5256 5.80712 11.5425 5.80772C11.8791 5.822 12.0891 5.93986 12.2466 6.20355C12.354 6.38442 12.4031 6.59508 12.3872 6.80593C12.3854 6.8321 12.3856 6.85837 12.3877 6.8845L12.3837 6.90236L12.3831 6.90296Z'\n              fill='#666C7C'\n            />\n          </svg>\n        </div>\n        <div\n          style={{\n            marginInlineEnd: 8,\n            ...iconStyle,\n          }}\n        >\n          <svg\n            width='14'\n            height='14'\n            viewBox='0 0 14 14'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <path\n              d='M11.6666 1.75C12.311 1.75 12.8333 2.26557 12.8333 2.90155V11.5382C12.8333 11.9313 12.5104 12.25 12.1121 12.25C12.0002 12.25 11.8898 12.2243 11.7897 12.1749L8.41102 11.0839C8.24907 11.004 8.0705 10.9624 7.88944 10.9624H2.33329C1.68896 10.9624 1.16663 10.4468 1.16663 9.81085V2.90155C1.16663 2.26557 1.68896 1.75 2.33329 1.75H11.6666ZM11.0833 2.90155H2.91663C2.59446 2.90155 2.33329 3.15933 2.33329 3.47733V9.23508C2.33329 9.55307 2.59446 9.81085 2.91663 9.81085H7.88944C8.19982 9.81085 8.50655 9.87197 8.79183 9.99006L8.9326 10.0538L11.2947 10.7214C11.4495 10.7652 11.611 10.6767 11.6554 10.5239C11.6628 10.4981 11.6666 10.4714 11.6666 10.4446V3.47733C11.6666 3.15933 11.4055 2.90155 11.0833 2.90155ZM7.5832 6.93198C7.90533 6.93202 8.16645 7.18979 8.16645 7.50775C8.16645 7.82571 7.90533 8.08348 7.5832 8.08353H4.0832C3.76107 8.08348 3.49996 7.82571 3.49996 7.50775C3.49996 7.18979 3.76107 6.93202 4.0832 6.93198H7.5832ZM9.91654 4.62888C10.125 4.62884 10.3176 4.73858 10.4218 4.91674C10.526 5.0949 10.526 5.3144 10.4218 5.49256C10.3176 5.67072 10.125 5.78046 9.91654 5.78043H4.0832C3.76107 5.78038 3.49996 5.52261 3.49996 5.20465C3.49996 4.88669 3.76107 4.62892 4.0832 4.62888H9.91654Z'\n              fill='#666C7C'\n            />\n          </svg>\n        </div>\n        <div style={iconStyle}>\n          <svg\n            width='14'\n            height='14'\n            viewBox='0 0 14 14'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <path\n              d='M12.1513 0.592407C12.2679 0.571526 12.3807 0.587559 12.48 0.6307C12.4836 0.633009 12.4876 0.634808 12.4917 0.636657C12.5519 0.663785 12.6065 0.701338 12.6537 0.746589C12.6566 0.749428 12.6596 0.752341 12.6626 0.755292L12.6712 0.764178C12.7165 0.811346 12.754 0.865931 12.7817 0.925713C12.7831 0.930218 12.7849 0.9343 12.7866 0.938397C12.8418 1.06357 12.8529 1.21109 12.8006 1.36048L12.8119 1.32526C12.8096 1.3333 12.8072 1.34131 12.8046 1.34926L12.8006 1.36048L8.92148 12.4438C8.74695 12.9425 8.05241 12.9708 7.83784 12.488L5.71206 7.70519L0.929811 5.58C0.470019 5.37564 0.473825 4.73594 0.905988 4.52472L0.974021 4.49635L12.0574 0.617187C12.0613 0.615824 12.0651 0.614504 12.069 0.613227C12.0766 0.610661 12.0846 0.608239 12.0926 0.605992C12.1093 0.601251 12.1257 0.597343 12.142 0.594157C12.1436 0.594178 12.1454 0.593853 12.1472 0.593537L12.1513 0.592407ZM10.8547 3.38798L6.84954 7.39315L8.30614 10.6697L10.8547 3.38798ZM10.0305 2.5614L2.74756 5.1111L6.02412 6.56773L10.0305 2.5614Z'\n              fill='#666C7C'\n            />\n          </svg>\n        </div>\n        <div style={{ ...iconStyle, marginInlineStart: 'auto' }}>\n          <svg\n            width='14'\n            height='14'\n            viewBox='0 0 14 14'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <path\n              d='M2.91667 5.83331C3.561 5.83331 4.08333 6.35565 4.08333 6.99998C4.08333 7.64431 3.561 8.16665 2.91667 8.16665C2.27233 8.16665 1.75 7.64431 1.75 6.99998C1.75 6.35565 2.27233 5.83331 2.91667 5.83331ZM7 5.83331C7.64433 5.83331 8.16667 6.35565 8.16667 6.99998C8.16667 7.64431 7.64433 8.16665 7 8.16665C6.35567 8.16665 5.83333 7.64431 5.83333 6.99998C5.83333 6.35565 6.35567 5.83331 7 5.83331ZM11.0833 5.83331C11.7277 5.83331 12.25 6.35565 12.25 6.99998C12.25 7.64431 11.7277 8.16665 11.0833 8.16665C10.439 8.16665 9.91667 7.64431 9.91667 6.99998C9.91667 6.35565 10.439 5.83331 11.0833 5.83331Z'\n              fill='#666C7C'\n            />\n          </svg>\n        </div>\n      </div>\n    </Card.Footer>\n  </Card>\n);\n\nconst useStyle = createUseStyles(\n  {\n    customCard: {\n      transitionProperty: 'all',\n      '&:hover': {\n        transform: 'translateY(-4px)',\n      },\n    },\n  },\n\n  { name: 'custom-card' },\n);\n\nconst App = () => {\n  const classes = useStyle();\n  return (\n    <div style={{display: 'flex', flexWrap: 'wrap', margin:'-16px'}}>\n      <HoverCard />\n      <HoverCard className={classes?.customCard} />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Hover",
        "description": "Set shadow to hover to show shadow when the mouse is over the card, and you can customize the hover style by overriding the style",
        "scenario": "basic",
        "code": "/**\n * cn - 无边框卡片\n *    -- 通过设置 border 样式，可以去掉卡片的边框\n * en - Hover\n *    -- Set shadow to hover to show shadow when the mouse is over the card, and you can customize the hover style by overriding the style\n */\nimport React from 'react';\nimport { Card, TYPE, Button } from 'shineout';\n\ntype CardProps = TYPE.Card.Props;\n\ntype CardStyle = CardProps['style'];\n\nconst cardStyle: CardStyle = {\n  width: 360,\n  border: 'none',\n};\n\nconst App: React.FC = () => (\n  <div style={{ padding: 32, background: '#f4f5f8' }}>\n    <Card style={cardStyle} split>\n      <Card.Header\n        extra={\n          <Button mode='text' type='primary'>\n            Text Button\n          </Button>\n        }\n      >\n        Card title\n      </Card.Header>\n      <Card.Body>\n        Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n        bird in the open.\n      </Card.Body>\n    </Card>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "No split",
        "description": "Set `split` = false to remove the split line of the card",
        "scenario": "basic",
        "code": "/**\n * cn - 无分割线\n *    -- 通过设置 `split` = false 属性，可以去掉卡片的分割线\n * en - No split\n *    -- Set `split` = false to remove the split line of the card\n */\nimport React from 'react';\nimport { Card, TYPE, Button } from 'shineout';\n\ntype CardProps = TYPE.Card.Props;\n\ntype CardStyle = CardProps['style'];\n\nconst cardStyle: CardStyle = {\n  width: 360,\n};\n\nconst iconStyle = {\n  width: 32,\n  height: 32,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  cursor: 'pointer',\n};\n\nconst App: React.FC = () => (\n  <div>\n    <Card style={cardStyle} split={false}>\n      <Card.Header\n        extra={\n          <Button mode='text' type='primary'>\n            Text Button\n          </Button>\n        }\n      >\n        Card title\n      </Card.Header>\n      <Card.Body>\n        Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n        bird in the open.\n      </Card.Body>\n      <Card.Footer>\n        <div style={{ display: 'flex' }}>\n          <div\n            style={{\n              marginInlineEnd: 8,\n              ...iconStyle,\n            }}\n          >\n            <svg\n              width='14'\n              height='14'\n              viewBox='0 0 14 14'\n              fill='none'\n              xmlns='http://www.w3.org/2000/svg'\n            >\n              <path\n                d='M11.6084 4.76308C11.5697 4.75817 11.5308 4.75559 11.4917 4.75534L9.33165 4.74819C9.42966 4.30236 9.48157 3.85177 9.48157 3.43331C9.48157 3.00474 9.43549 2.57319 9.34507 2.14938C9.33827 2.11717 9.3285 2.08568 9.31591 2.05534C9.0814 1.1845 8.32423 0.583313 7.4434 0.583313C6.40039 0.583313 5.61348 1.45653 5.61348 2.61427L5.61289 2.64403C5.61127 2.6823 5.61127 2.72063 5.61289 2.75891C5.56739 3.96546 4.59497 5.01843 3.38338 5.1732L1.67654 5.20117C1.39501 5.17907 1.11723 5.27806 0.910387 5.4742C0.703543 5.67034 0.586463 5.94578 0.587457 6.23391L0.583374 12.3869C0.583374 12.9541 1.03429 13.4166 1.58904 13.4166H3.46213L10.5794 13.4041C10.9737 13.4041 11.2211 13.2911 11.5145 13.097C11.805 12.9041 12.0409 12.6369 12.1987 12.322C12.253 12.2327 12.2932 12.1375 12.3189 12.0381L12.3236 12.0184L13.3841 7.13748C13.4074 7.04224 13.4173 6.94462 13.4133 6.847C13.4372 6.4303 13.3361 6.01604 13.1233 5.6595C12.7891 5.09879 12.2792 4.7976 11.6084 4.76308ZM2.18914 6.2391L2.30975 6.23731C2.63189 6.23254 2.89681 6.49515 2.90149 6.82385C2.90153 6.82673 2.90155 6.82961 2.90155 6.83249V11.7738C2.90155 12.1025 2.64038 12.369 2.31821 12.369H2.19338C1.87121 12.3695 1.61004 12.103 1.61004 11.7743L1.6105 11.7738L1.61426 6.83381C1.61451 6.50862 1.87048 6.24381 2.18914 6.2391ZM12.3831 6.90296L11.3255 11.7714C11.3129 11.7904 11.3016 11.8103 11.2917 11.8309C11.2162 11.989 11.0998 12.123 10.9551 12.2184C10.7672 12.3428 10.713 12.3565 10.5742 12.3565L4.51258 12.3674C4.19041 12.368 3.92879 12.1019 3.92822 11.7732L3.92822 11.7722V6.13272C5.46006 5.7476 6.59581 4.37141 6.63898 2.76367C6.63993 2.74442 6.63954 2.72513 6.63781 2.70593V2.67617L6.63956 2.61367C6.63956 2.12558 6.91548 1.63034 7.4434 1.63034C7.87098 1.63034 8.2379 1.93748 8.3359 2.37736C8.34123 2.40165 8.34825 2.42552 8.3569 2.44879C8.42131 2.77265 8.45394 3.10226 8.45432 3.43272C8.45432 3.95058 8.3499 4.55772 8.16848 5.09939C8.11461 5.25914 8.13966 5.43562 8.23573 5.57322C8.3318 5.71082 8.48708 5.79261 8.65265 5.79284L11.4912 5.80296C11.5087 5.80534 11.5256 5.80712 11.5425 5.80772C11.8791 5.822 12.0891 5.93986 12.2466 6.20355C12.354 6.38442 12.4031 6.59508 12.3872 6.80593C12.3854 6.8321 12.3856 6.85837 12.3877 6.8845L12.3837 6.90236L12.3831 6.90296Z'\n                fill='#666C7C'\n              />\n            </svg>\n          </div>\n          <div\n            style={{\n              marginInlineEnd: 8,\n              ...iconStyle,\n            }}\n          >\n            <svg\n              width='14'\n              height='14'\n              viewBox='0 0 14 14'\n              fill='none'\n              xmlns='http://www.w3.org/2000/svg'\n            >\n              <path\n                d='M11.6666 1.75C12.311 1.75 12.8333 2.26557 12.8333 2.90155V11.5382C12.8333 11.9313 12.5104 12.25 12.1121 12.25C12.0002 12.25 11.8898 12.2243 11.7897 12.1749L8.41102 11.0839C8.24907 11.004 8.0705 10.9624 7.88944 10.9624H2.33329C1.68896 10.9624 1.16663 10.4468 1.16663 9.81085V2.90155C1.16663 2.26557 1.68896 1.75 2.33329 1.75H11.6666ZM11.0833 2.90155H2.91663C2.59446 2.90155 2.33329 3.15933 2.33329 3.47733V9.23508C2.33329 9.55307 2.59446 9.81085 2.91663 9.81085H7.88944C8.19982 9.81085 8.50655 9.87197 8.79183 9.99006L8.9326 10.0538L11.2947 10.7214C11.4495 10.7652 11.611 10.6767 11.6554 10.5239C11.6628 10.4981 11.6666 10.4714 11.6666 10.4446V3.47733C11.6666 3.15933 11.4055 2.90155 11.0833 2.90155ZM7.5832 6.93198C7.90533 6.93202 8.16645 7.18979 8.16645 7.50775C8.16645 7.82571 7.90533 8.08348 7.5832 8.08353H4.0832C3.76107 8.08348 3.49996 7.82571 3.49996 7.50775C3.49996 7.18979 3.76107 6.93202 4.0832 6.93198H7.5832ZM9.91654 4.62888C10.125 4.62884 10.3176 4.73858 10.4218 4.91674C10.526 5.0949 10.526 5.3144 10.4218 5.49256C10.3176 5.67072 10.125 5.78046 9.91654 5.78043H4.0832C3.76107 5.78038 3.49996 5.52261 3.49996 5.20465C3.49996 4.88669 3.76107 4.62892 4.0832 4.62888H9.91654Z'\n                fill='#666C7C'\n              />\n            </svg>\n          </div>\n          <div style={iconStyle}>\n            <svg\n              width='14'\n              height='14'\n              viewBox='0 0 14 14'\n              fill='none'\n              xmlns='http://www.w3.org/2000/svg'\n            >\n              <path\n                d='M12.1513 0.592407C12.2679 0.571526 12.3807 0.587559 12.48 0.6307C12.4836 0.633009 12.4876 0.634808 12.4917 0.636657C12.5519 0.663785 12.6065 0.701338 12.6537 0.746589C12.6566 0.749428 12.6596 0.752341 12.6626 0.755292L12.6712 0.764178C12.7165 0.811346 12.754 0.865931 12.7817 0.925713C12.7831 0.930218 12.7849 0.9343 12.7866 0.938397C12.8418 1.06357 12.8529 1.21109 12.8006 1.36048L12.8119 1.32526C12.8096 1.3333 12.8072 1.34131 12.8046 1.34926L12.8006 1.36048L8.92148 12.4438C8.74695 12.9425 8.05241 12.9708 7.83784 12.488L5.71206 7.70519L0.929811 5.58C0.470019 5.37564 0.473825 4.73594 0.905988 4.52472L0.974021 4.49635L12.0574 0.617187C12.0613 0.615824 12.0651 0.614504 12.069 0.613227C12.0766 0.610661 12.0846 0.608239 12.0926 0.605992C12.1093 0.601251 12.1257 0.597343 12.142 0.594157C12.1436 0.594178 12.1454 0.593853 12.1472 0.593537L12.1513 0.592407ZM10.8547 3.38798L6.84954 7.39315L8.30614 10.6697L10.8547 3.38798ZM10.0305 2.5614L2.74756 5.1111L6.02412 6.56773L10.0305 2.5614Z'\n                fill='#666C7C'\n              />\n            </svg>\n          </div>\n          <div style={{ ...iconStyle, marginInlineStart: 'auto' }}>\n            <svg\n              width='14'\n              height='14'\n              viewBox='0 0 14 14'\n              fill='none'\n              xmlns='http://www.w3.org/2000/svg'\n            >\n              <path\n                d='M2.91667 5.83331C3.561 5.83331 4.08333 6.35565 4.08333 6.99998C4.08333 7.64431 3.561 8.16665 2.91667 8.16665C2.27233 8.16665 1.75 7.64431 1.75 6.99998C1.75 6.35565 2.27233 5.83331 2.91667 5.83331ZM7 5.83331C7.64433 5.83331 8.16667 6.35565 8.16667 6.99998C8.16667 7.64431 7.64433 8.16665 7 8.16665C6.35567 8.16665 5.83333 7.64431 5.83333 6.99998C5.83333 6.35565 6.35567 5.83331 7 5.83331ZM11.0833 5.83331C11.7277 5.83331 12.25 6.35565 12.25 6.99998C12.25 7.64431 11.7277 8.16665 11.0833 8.16665C10.439 8.16665 9.91667 7.64431 9.91667 6.99998C9.91667 6.35565 10.439 5.83331 11.0833 5.83331Z'\n                fill='#666C7C'\n              />\n            </svg>\n          </div>\n        </div>\n      </Card.Footer>\n    </Card>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Form",
        "description": "Use Card.submit to trigger the submimt event of the form in the card",
        "scenario": "form",
        "code": "/**\n * cn - 表单\n *    -- Card.Submit 可以用来触发 Card 内部表单提交\n * en - Form\n *    -- Use Card.submit to trigger the submimt event of the form in the card\n */\nimport React from 'react';\nimport { Card, Form, Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <Card style={{ width: 360 }}>\n    <Card.Header>Card title</Card.Header>\n    <Card.Body>\n      <Form\n        labelAlign='top'\n        onSubmit={(data) => {\n          console.log(data);\n        }}\n      >\n        <Form.Item label='User name :'>\n          <Input name='name' defaultValue='user' />\n        </Form.Item>\n\n        <Form.Item label='Email :'>\n          <Input name='email' defaultValue='test@example.com' />\n        </Form.Item>\n      </Form>\n    </Card.Body>\n\n    <Card.Footer align='right'>\n      <Card.Submit>Submit</Card.Submit>\n    </Card.Footer>\n  </Card>\n);\n\nexport default App;\n"
      },
      {
        "title": "Collapse",
        "description": "Set `collapsible` can collapse the Card panel",
        "scenario": "basic",
        "code": "/**\n * cn - 折叠\n *    -- 设置 `collapsible` 可以折叠 Card，通过 collapsed 或 defaultCollapsed 属性控制状态\n * en - Collapse\n *    -- Set `collapsible` can collapse the Card panel\n */\nimport React from 'react';\nimport { Card, DatePicker } from 'shineout';\n\nconst App: React.FC = () => (\n  <Card collapsible>\n    <Card.Header>Card title</Card.Header>\n\n    <Card.Body>\n      <div>\n        <DatePicker />\n      </div>\n    </Card.Body>\n  </Card>\n);\n\nexport default App;\n"
      },
      {
        "title": "Accordion",
        "description": "Put a group of Card in the Card.Accordion, only one panel can be expanded at the same time",
        "scenario": "basic",
        "code": "/**\n * cn - 手风琴\n *    -- 使用 Card.Accordion 可以使一组 Card 实现手风琴效果（每次打开一个 Card）\n * en - Accordion\n *    -- Put a group of Card in the Card.Accordion, only one panel can be expanded at the same time\n */\nimport React from 'react';\nimport { Card } from 'shineout';\n\nconst bodyStyle = {\n  background: 'var(--soui-neutral-fill-2)',\n};\nconst App: React.FC = () => (\n  <Card.Accordion defaultActive={1}>\n    <Card split>\n      <Card.Header>Card title 1</Card.Header>\n      <Card.Body style={bodyStyle}>\n        Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n        bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n        as a mask. People who have this joy do not need to talk about it; they radiate it. They just\n        live out their joy and let it splash its sunlight and glow into other lives as naturally as\n        bird sings.\n      </Card.Body>\n    </Card>\n    <Card split>\n      <Card.Header>Card title 2</Card.Header>\n      <Card.Body style={bodyStyle}>\n        Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n        bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n        as a mask. People who have this joy do not need to talk about it; they radiate it. They just\n        live out their joy and let it splash its sunlight and glow into other lives as naturally as\n        bird sings.\n      </Card.Body>\n    </Card>\n    <Card split>\n      <Card.Header>Card title 3</Card.Header>\n      <Card.Body style={bodyStyle}>\n        Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n        bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n        as a mask. People who have this joy do not need to talk about it; they radiate it. They just\n        live out their joy and let it splash its sunlight and glow into other lives as naturally as\n        bird sings.\n      </Card.Body>\n    </Card>\n  </Card.Accordion>\n);\n\nexport default App;\n"
      }
    ],
    "subComponents": [
      {
        "name": "Header",
        "description": "",
        "whenCn": "",
        "whenEn": ""
      },
      {
        "name": "Body",
        "description": "",
        "whenCn": "",
        "whenEn": ""
      },
      {
        "name": "Footer",
        "description": "",
        "whenCn": "",
        "whenEn": ""
      }
    ],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 13,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 8
    },
    "subComponentApis": {
      "Header": {
        "whenCn": "",
        "whenEn": "",
        "description": "",
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "align",
            "type": "\"left\" | \"center\" | \"right\"",
            "required": false,
            "description": "对齐方式"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "子元素"
          },
          {
            "name": "extra",
            "type": "ReactNode",
            "required": false,
            "description": "额外元素"
          }
        ]
      },
      "Body": {
        "whenCn": "",
        "whenEn": "",
        "description": "",
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "子元素"
          }
        ]
      },
      "Footer": {
        "whenCn": "",
        "whenEn": "",
        "description": "",
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "align",
            "type": "\"left\" | \"center\" | \"right\"",
            "required": false,
            "description": "对齐方式"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "子元素"
          }
        ]
      }
    }
  },
  "Carousel": {
    "name": "Carousel",
    "description": "轮播视图容器",
    "category": "other",
    "importPath": "import { Carousel } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "animation",
        "type": "\"slide\" | \"slide-y\" | \"fade\"",
        "required": false,
        "defaultValue": "\\\"slide\\\"",
        "description": "动画效果，可选值为 slide - 横向滑动 ，slide-y - 垂直滑动 ，fade - 淡入淡出"
      },
      {
        "name": "indicatorPosition",
        "type": "\"left\" | \"center\" | \"right\" | \"outer\"",
        "required": false,
        "defaultValue": "\\\"center\\\"",
        "description": "指示标示位置"
      },
      {
        "name": "indicatorType",
        "type": "\"number\" | ((current: number, moveTo: (index: number) => void) => ReactNode) | \"circle\" | \"line\" | \"bar\"",
        "required": false,
        "defaultValue": "\\\"circle\\\"",
        "description": "指示标示样式, 函数则可以自定义样式: (current, moveTo) => (<Component />)",
        "version": "3.6.0 新增bar类型"
      },
      {
        "name": "interval",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "动画间隔时间，为 0 时，不自动播放"
      },
      {
        "name": "onMove",
        "type": "((current: number, extra: { prev: number; direction: \"forward\" | \"backward\"; moveTo: (n: number) => void; }) => void)",
        "required": false,
        "description": "轮播后的回调"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素"
      },
      {
        "name": "showArrow",
        "type": "\"always\" | \"hover\"",
        "required": false,
        "description": "切换箭头显示时机"
      },
      {
        "name": "showIndicator",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示指示器",
        "version": "3.7.0"
      },
      {
        "name": "arrowClassName",
        "type": "string",
        "required": false,
        "description": "箭头扩展 class"
      },
      {
        "name": "itemClassName",
        "type": "string",
        "required": false,
        "description": "轮播项的 class"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "The basic usage",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的使用\n * en - Base\n *    -- The basic usage\n */\nimport React from 'react';\nimport { Carousel } from 'shineout';\n\nconst images = [\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n];\nconst App: React.FC = () => {\n  return (\n    <Carousel\n      style={{ width: 600, height: 280 }}\n      showArrow={'hover'}\n      interval={5000}\n      onMove={console.log}\n    >\n      {images.map((src) => (\n        <img key={src} src={src} />\n      ))}\n    </Carousel>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Indicator",
        "description": "You can set indicator type and position",
        "scenario": "basic",
        "code": "/**\n * cn - 指示器\n *    -- 可以指定指示器类型和位置\n * en - Indicator\n *    -- You can set indicator type and position\n */\nimport React, { useState } from 'react';\nimport { Carousel, Radio, TYPE } from 'shineout';\n\ntype CarouselProps = TYPE.Carousel.Props;\ntype CarouselIndicatorType = CarouselProps['indicatorType'];\ntype CarouselIndicatorPosition = CarouselProps['indicatorPosition'];\n\nconst images = [\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n];\nconst App: React.FC = () => {\n  const [indicatorType, setIndicatorType] = useState<CarouselIndicatorType>('circle');\n  const [indicatorPosition, setIndicatorPosition] = useState<CarouselIndicatorPosition>('center');\n\n  const rowStyle = { display: 'flex', marginBottom: 16, alignItems: 'center' };\n  return (\n    <div>\n      <div style={rowStyle}>\n        <div style={{ width: 150 }}>indicator position:</div>\n        <Radio.Group\n          keygen\n          value={indicatorPosition}\n          data={['left', 'center', 'right', 'outer']}\n          onChange={(v) => setIndicatorPosition(v)}\n        />\n      </div>\n      <div style={rowStyle}>\n        <div style={{ width: 150 }}>indicator type:</div>\n        <Radio.Group\n          keygen\n          value={indicatorType}\n          data={['circle', 'line', 'bar', 'number']}\n          onChange={(v) => setIndicatorType(v)}\n        />\n      </div>\n\n      <Carousel\n        style={{ width: 600, height: 280 }}\n        indicatorPosition={indicatorPosition}\n        indicatorType={indicatorType}\n        interval={3000}\n      >\n        {images.map((src) => (\n          <img key={src} src={src} />\n        ))}\n      </Carousel>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Animation",
        "description": "The carousel component provides three animation transition modes, you can switch options to see the effect",
        "scenario": "basic",
        "code": "/**\n * cn - 切换方向\n *    -- 轮播组件提供了三种动画过渡方式，可以切换选项查看效果\n * en - Animation\n *    -- The carousel component provides three animation transition modes, you can switch options to see the effect\n */\nimport React, { useState } from 'react';\nimport { Carousel, Radio, TYPE } from 'shineout';\n\ntype CarouselProps = TYPE.Carousel.Props;\n\nconst images = [\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n];\nconst App: React.FC = () => {\n  const [animationType, setAnimation] = useState<CarouselProps['animation']>('slide');\n\n  const rowStyle = { display: 'flex', marginBottom: 16, alignItems: 'center' };\n  return (\n    <div>\n      <div style={rowStyle}>\n        <div style={{ width: 150 }}>animation type:</div>\n        <Radio.Group\n          keygen\n          value={animationType}\n          data={['slide', 'slide-y', 'fade']}\n          onChange={(v) => setAnimation(v)}\n        />\n      </div>\n\n      <Carousel style={{ width: 600, height: 280 }} interval={3000} animation={animationType}>\n        {images.map((src) => (\n          <img key={src} src={src} />\n        ))}\n      </Carousel>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Custom Indicator",
        "description": "Indicators can be customized when indicatorType is a function",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义 Indicator\n *    -- 当 indicatorType 为函数时，可以自定义 Indicator\n * en - Custom Indicator\n *    -- Indicators can be customized when indicatorType is a function\n */\nimport React from 'react';\nimport { Carousel, TYPE } from 'shineout';\nimport classnames from 'classnames';\n\nrequire('./style-2-custom-indicator.css');\n\ntype CarouselProps = TYPE.Carousel.Props;\ntype CarouselInterval = CarouselProps['interval'];\ntype CarouselIndicatorType = CarouselProps['indicatorType'];\n\nconst containerStyle = {\n  fontSize: 40,\n  color: '#fff',\n  display: 'flex',\n  margin: 'auto',\n};\nconst items = ['S', 'H', 'I', 'N', 'E'];\nconst duration: CarouselInterval = 5000;\n\nconst App: React.FC = () => {\n  const indicatorSwitch: CarouselIndicatorType = (current, moveTo) => (\n    <div className='indicator'>\n      {items.map((item, index) => {\n        const isActive = current === index;\n        const itemClassname = classnames('indicator-item', isActive && 'active');\n        const animationStyle = isActive\n          ? { animation: `indicator-rise ${duration / 1000}s linear` }\n          : {};\n        return (\n          <div key={item} onClick={() => moveTo(index)} className={itemClassname}>\n            <span>{item}</span>\n            <div className='indicator-progress'>\n              <div className='fg' style={animationStyle} />\n              <div className='bg' />\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  return (\n    <Carousel\n      indicatorType={indicatorSwitch}\n      style={{ width: 600, height: 280 }}\n      interval={duration}\n    >\n      {items.map((item) => (\n        <div key={item} style={{ background: '#2e97f1', display: 'flex' }}>\n          <div style={containerStyle}>{item}</div>\n        </div>\n      ))}\n    </Carousel>\n  );\n};\n\nexport default App;\n\n/* style-2-custom-indicator.css\n@keyframes indicator-rise {\n  from {\n    width: 0;\n  }\n  to {\n    width: 100%;\n  }\n}\ndiv.indicator {\n  text-align: center;\n  user-select: none;\n  float: left;\n}\ndiv.indicator-item {\n  margin-right: 10px;\n  float: left;\n  width: 36px;\n  height: 30px;\n  font-size: 20px;\n  color: #ffffff50;\n  cursor: pointer;\n}\ndiv.indicator-item.active {\n  color: #fff;\n}\ndiv.indicator .indicator-progress {\n  position: relative;\n}\ndiv.indicator .indicator-progress > div {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  border-radius: 1000px;\n}\ndiv.indicator .indicator-progress .bg {\n  width: 100%;\n  background: #ffffff50;\n}\ndiv.indicator .indicator-progress .fg {\n  width: 0;\n  background: #ffffff;\n}\n*/\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 12,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 4
    }
  },
  "Cascader": {
    "name": "Cascader",
    "description": "对于相关联的数据集，可采用多级分类的级联选择方式",
    "category": "other",
    "importPath": "import { Cascader } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "innerTitle",
        "type": "ReactNode",
        "required": false,
        "description": "内嵌标题"
      },
      {
        "name": "filterSameChange",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "当两次选择的值相同时不触发 onChange"
      },
      {
        "name": "absolute",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1000",
        "description": "选项列表 z-index 值, 需要配合 absolute"
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "开启多选"
      },
      {
        "name": "mode",
        "type": "0 | 1 | 2 | 3 | 4",
        "required": false,
        "description": "选中值模式，未设置值为单选 0: 只返回完全选中的节点，包含父节点 1: 返回全部选中的节点和半选中的父节点 2: 只返回选中的子节点 3: 如果父节点选中，只返回父节点 4: 所选即所得"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "输入框宽度"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "控制浮层显隐"
      },
      {
        "name": "value",
        "type": "Value",
        "required": false,
        "description": "选中的 key （受控)。注意，请勿将 undefined 和 null 作为有意义的选项值，当 value 类型为 undefined 和 null 时，组件将不处理数据和渲染"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认选中的 key"
      },
      {
        "name": "data",
        "type": "any[]",
        "required": false,
        "description": "数据，子节点为children，如果 children 值为 null 或 长度为 0 时，视为叶子节点"
      },
      {
        "name": "childrenKey",
        "type": "ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "\\\"children\\\"",
        "description": "指定子数据的属性名"
      },
      {
        "name": "final",
        "type": "boolean",
        "required": false,
        "description": "单选只支持选末级节点"
      },
      {
        "name": "filterDelay",
        "type": "number",
        "required": false,
        "defaultValue": "\\\"children\\\"",
        "description": "用户输入触发 fitler 事件的延时，单位为毫秒。"
      },
      {
        "name": "renderOptionList",
        "type": "((list: ReactElement, info: { loading: boolean; }) => ReactElement)",
        "required": false,
        "description": "自定义渲染下拉列表"
      },
      {
        "name": "renderUnmatched",
        "type": "((data: any) => ReactNode)",
        "required": false,
        "description": "渲染未匹配值的方式"
      },
      {
        "name": "height",
        "type": "number",
        "required": false,
        "defaultValue": "300",
        "description": "下拉列表高度"
      },
      {
        "name": "unmatch",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示data中不存在的值"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示清除数据图标"
      },
      {
        "name": "wideMatch",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "开启 wideMatch 后，将筛选出所有可能的匹配项目"
      },
      {
        "name": "showArrow",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示下拉箭头，仅针对单选情况"
      },
      {
        "name": "finalDismiss",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "选择末级节点后是否关闭选项列表"
      },
      {
        "name": "singleRemove",
        "type": "boolean",
        "required": false,
        "description": "支持单个节点删除"
      },
      {
        "name": "compressedBound",
        "type": "number",
        "required": false,
        "description": "开启多选后，指定允许展示标签数量，超过后将折叠"
      },
      {
        "name": "loading",
        "type": "boolean | ReactNode",
        "required": false,
        "description": "下拉列表加载状态"
      },
      {
        "name": "compressed",
        "type": "boolean | \"no-repeat\" | \"hide-popover\"",
        "required": false,
        "defaultValue": "false",
        "description": "将选中值合并。为\\\"no-repeat\\\"时弹出框中不重复展示值"
      },
      {
        "name": "renderCompressed",
        "type": "((options: { data: DataItem[], onRemove: (item: DataItem) => void }) => ReactNode)",
        "required": false,
        "description": "自定义渲染折叠内容，其中 data 为选中的数据，onRemove 为删除事件",
        "version": "3.5.0"
      },
      {
        "name": "onCollapse",
        "type": "((collapse: boolean) => void)",
        "required": false,
        "description": "下拉列表展开/收起回调"
      },
      {
        "name": "loader",
        "type": "((key: string | number, data: DataItem) => void)",
        "required": false,
        "description": "设置 loader 属性后，未定义 children 的节点视为动态加载节点，点击展开触发 loader 事件，children 为 null 或者长度为 0 视为叶子节点"
      },
      {
        "name": "disabled",
        "type": "boolean | ((data: DataItem) => boolean) | { disabled: (data: DataItem) => boolean, isRealtime: boolean }",
        "required": false,
        "defaultValue": "false",
        "description": "当 disabled 为 true 时，禁用整个选择框。如果 disabled 为函数，根据函数反回结果禁用选项。出于性能考虑，默认情况下 disabled 只会在初始化时调用一次，如果 disabled 为函数且内部依赖外部状态，可以使用配置模式，将 disabled 设置为对象，对象中包含 disabled 函数 和 isRealtime 属性，当 isRealtime 为 true 时，每次状态更新都会调用 disabled 函数重新计算禁用状态"
      },
      {
        "name": "expandTrigger",
        "type": "\"click\" | \"hover\" | \"hover-only\"",
        "required": false,
        "defaultValue": "\\\"click\\\"",
        "description": "节点展开触发方式"
      },
      {
        "name": "onChange",
        "type": "((value: Value, selected?: DataItem ) => void)",
        "required": false,
        "description": "设置 onChange 属性时，显示 选择框。参数为当前选中值，和 mode 属性相关"
      },
      {
        "name": "onFilter",
        "type": "((text: string) => void | ((data: DataItem) => boolean) )",
        "required": false,
        "description": "onFilter 不为空时，可以输入过滤数据;onFilter 如果返回一个函数，使用这个函数做前端过滤;如果不返回，可以自行做后端过滤;单选状态下支持"
      },
      {
        "name": "keygen",
        "type": "ObjectKey<DataItem> | ((data: DataItem, parentKey?: string | number ) => string | number)",
        "required": true,
        "defaultValue": "index",
        "description": "生成 key 的辅助方法, 为函数时，使用此函数返回值, 为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d) => d.id"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((data: DataItem, active?: boolean , id?: string | number ) => ReactNode)",
        "required": true,
        "defaultValue": "d => d",
        "description": "当 renderItem 为 string 时，返回 DataItem\\\\[string]。 若为函数时，则返回函数结果"
      },
      {
        "name": "renderResult",
        "type": "ObjectKey<DataItem> | ((data: DataItem, row: DataItem[]) => ReactNode)",
        "required": false,
        "defaultValue": "renderItem",
        "description": "选中后在结果中显示的内容，默认和 renderItem 相同"
      },
      {
        "name": "onBlur",
        "type": "((e?: KeyboardEvent<HTMLDivElement> ) => void)",
        "required": false,
        "description": "失焦事件"
      },
      {
        "name": "onFocus",
        "type": "((e?: KeyboardEvent<HTMLDivElement> ) => void)",
        "required": false,
        "description": "聚焦事件"
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": "占位符"
      },
      {
        "name": "emptyAfterSelect",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "选中后是否清空输入框内容"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示边框"
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "description": "是否只展示下边框"
      },
      {
        "name": "resultClassName",
        "type": "string | ((value: DataItem) => string)",
        "required": false,
        "description": "选中结果内容容器的className"
      },
      {
        "name": "compressedClassName",
        "type": "string",
        "required": false,
        "description": "多选合并展示弹出框的类名"
      },
      {
        "name": "focusSelected",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "onFilter 在多选情况下点击选项后是否选中过滤文本"
      },
      {
        "name": "hideTag",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "隐藏标签样式，默认情况下展示结果以标签模式分割，隐藏标签样式后可通过自定义 renderResult 渲染分割结果"
      },
      {
        "name": "getComponentRef",
        "type": "((comp: CascaderRef) => void) | { current: CascaderRef ; }",
        "required": false,
        "description": "绑定组件的引用, 可以调用某些组件的方法"
      },
      {
        "name": "adjust",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启自动调整面板位置功能。当面板被窗口遮挡时，自动调整位置"
      },
      {
        "name": "virtual",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否使用虚拟列表",
        "version": "3.5.0"
      },
      {
        "name": "emptyText",
        "type": "ReactNode",
        "required": false,
        "description": "自定义 empty 文案。与 renderOptionList 搭配使用时，emptyText 设置为 false 后将忽略该功能，如需渲染空内容可在 renderOptionList 中处理",
        "version": "3.6.0"
      },
      {
        "name": "highlight",
        "type": "boolean",
        "required": false,
        "description": "开启搜索关键字高亮功能",
        "version": "3.7.0"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Basic usage of cascader",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基础级联选择器的用法\n * en - Basic\n *    -- Basic usage of cascader\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Support custom rendering results through `renderResult`",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 通过`renderResult`支持自定义渲染结果\n * en -\n *    -- Support custom rendering results through `renderResult`\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const renderResult: CascaderProps['renderResult'] = (node) => {\n    return node.value.toLocaleUpperCase();\n  };\n\n  return (\n    <div>\n      <Cascader\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderResult={renderResult}\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Cancel the default tag split style through `hideTag`, and customize the rendering to achieve a rich display effect",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 通过`hideTag`取消默认的标签分割样式，配合`renderResult`自定义渲染实现丰富的展示效果\n * en -\n *    -- Cancel the default tag split style through `hideTag`, and customize the rendering to achieve a rich display effect\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const renderResult: CascaderProps['renderResult'] = (node) => {\n    return node.value;\n  };\n\n  return (\n    <div>\n      <Cascader\n        width={300}\n        hideTag\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        onChange={v=>console.log(v)}\n        renderResult={renderResult}\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Basic",
        "description": "开启 `multiple` 属性或者设置 `mode` 属性可以选择多个值",
        "scenario": "basic",
        "code": "/**\n * cn - 多选\n *    -- 开启 `multiple` 属性或者设置 `mode` 属性可以选择多个值\n *    -- 模式为 0 时，返回完全选中的节点，包含父节点\n *    -- 模式为 1 时，返回选中、半选中的节点\n *    -- 模式为 2 时，只返回叶子节点\n *    -- 模式为 3 时，只返回完全选中的父节点\n *    -- 模式为 4 时，所选即所得，没有上下级关系\n * en - Basic\n *    --\n */\nimport React, { useState } from 'react';\nimport { Cascader, Radio, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst radio = [\n  {\n    mode: 'full',\n    value: 0,\n  },\n  {\n    mode: 'half',\n    value: 1,\n  },\n  {\n    mode: 'child only',\n    value: 2,\n  },\n  {\n    mode: 'shallow',\n    value: 3,\n  },\n  {\n    mode: 'freedom',\n    value: 4,\n  },\n];\n\nexport default () => {\n  const [value, setValue] = useState<CascaderProps['value']>([]);\n  const [mode, setMode] = useState<0 | 1 | 2 | 3 | 4>(0);\n\n  const handleModeChange = (v: any) => {\n    setMode(v.value);\n    setValue([]);\n  };\n\n  const handleChange: CascaderProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <Radio.Group\n        size='small'\n        keygen='value'\n        prediction={(item, v) => item === v.value}\n        value={mode}\n        onChange={handleModeChange}\n        renderItem={(item) => `模式 ${item.value}`}\n        data={radio}\n        style={{ marginBottom: 24 }}\n      />\n\n      <div style={{ display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          <Cascader\n            clearable\n            multiple\n            singleRemove\n            mode={mode}\n            width={300}\n            placeholder='Please select city'\n            data={data}\n            keygen='value'\n            value={value}\n            onChange={handleChange}\n            renderItem={(n) => `${n?.value}`}\n          />\n        </div>\n        <pre\n          style={{\n            flex: 1,\n            margin: 10,\n            background: '#1d1d1d',\n            color: '#94d5fc',\n            borderRadius: 4,\n            padding: 10,\n          }}\n        >\n          <div style={{ marginBottom: 10 }}>\n            <code style={{ color: '#5D8E4E' }}>\n              <span>/</span>\n              <span>/</span> DataItem[]\n            </code>\n          </div>\n          {value && value.length > 0 && <code>{JSON.stringify(value, null, 2)}</code>}\n          {!value || (value.length === 0 && <code style={{ color: '#757575' }}>no data</code>)}\n        </pre>\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Custom dropdown panel",
        "description": "Use the `renderOptionList` property to customize the dropdown panel, and you can customize the implementation of the select all function",
        "scenario": "basic",
        "code": "/**\n * cn - 全选\n *    -- 使用 `renderOptionList` 属性自定义下拉面板，可以自定义实现全选功能\n * en - Custom dropdown panel\n *    -- Use the `renderOptionList` property to customize the dropdown panel, and you can customize the implementation of the select all function\n */\nimport React from 'react';\nimport { Cascader, Checkbox } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const [full, setFull] = React.useState<'indeterminate' | boolean | undefined>();\n  const [checked, setChecked] = React.useState<string[]>([]);\n  const rootIds = data.map((d) => d.value);\n\n  React.useEffect(() => {\n    setFull(\n      rootIds.every((id) => checked.includes(id))\n        ? true\n        : checked.length > 0\n        ? 'indeterminate'\n        : false,\n    );\n  }, [checked]);\n\n  React.useEffect(() => {\n    if (full === true) {\n      setChecked(rootIds);\n    } else if (!full) {\n      setChecked([]);\n    }\n  }, [full]);\n\n  return (\n    <Cascader\n      width={300}\n      mode={3}\n      clearable\n      multiple\n      value={checked}\n      onChange={(v) => {\n        setChecked(v);\n      }}\n      placeholder='Please select city'\n      data={data}\n      keygen='value'\n      renderItem={(n) => `${n?.value}`}\n      renderOptionList={(list) => (\n        <div>\n          <div\n            style={{\n              padding: '5px 12px',\n              borderBottom:\n                '1px solid var(--soui-cascader-list-border-color,var(--soui-neutral-border-1,#E8EBF0))',\n            }}\n          >\n            <Checkbox checked={full} onChange={setFull} style={{ display: 'flex' }}>\n              全选\n            </Checkbox>\n          </div>\n          {list}\n        </div>\n      )}\n    />\n  );\n};\n"
      },
      {
        "title": "Compressed",
        "description": "Set the `compressed` property, when the option is too long, the option will be merged",
        "scenario": "basic",
        "code": "/**\n * cn - 合并选项\n *    -- 设置`compressed`属性，当选项超长的时候会合并选项\n * en - Compressed\n *    -- Set the `compressed` property, when the option is too long, the option will be merged\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        clearable\n        multiple\n        defaultValue={['jiangning', 'yuhuatai', 'nanjing', 'jiangsu', 'feidong', 'hefei', 'anhui']}\n        mode={0}\n        compressed\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Compressed no-repeat",
        "description": "When the value of the `compressed` property is 'no-repeat', the repeated content in the merged options will not appear in the result box",
        "scenario": "basic",
        "code": "/**\n * cn - 合并选项去重\n *    -- 当`compressed`属性值为 \"no-repeat\" 时，合并的选项中不会出现结果框中的重复内容\n * en - Compressed no-repeat\n *    -- When the value of the `compressed` property is 'no-repeat', the repeated content in the merged options will not appear in the result box\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        clearable\n        multiple\n        mode={0}\n        defaultValue={['jiangning', 'yuhuatai', 'nanjing', 'jiangsu', 'feidong', 'hefei', 'anhui']}\n        compressed='no-repeat'\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Only merge options",
        "description": "Set the `compressed` property to `hide-popover` to merge the selected results, only display the number of merged options, and no longer display the merged options in the pop-up layer",
        "scenario": "basic",
        "code": "/**\n * cn - 隐藏合并选项\n *    -- 使用 `compressed` 属性并设置值为 \"hide-popover\" 可以合并选中结果，仅展示合并后的选项数量，不再弹出层中展示合并的选项\n *    -- 建议数据量较大的情况下开启该功能，配合固定数值的 `compressedBound` 属性可降额外的低性能开销\n * en - Only merge options\n *    -- Set the `compressed` property to `hide-popover` to merge the selected results, only display the number of merged options, and no longer display the merged options in the pop-up layer\n *    -- It is recommended to enable this function when the data volume is large\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        clearable\n        multiple\n        mode={0}\n        defaultValue={['jiangning', 'yuhuatai', 'nanjing', 'jiangsu', 'feidong', 'hefei', 'anhui']}\n        compressed='hide-popover'\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Custom rendering of compressed content",
        "description": "Support custom rendering of compressed content by configuring `renderCompressed`, and customize optimized rendering for large data",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义渲染合并内容\n *    -- 通过配置 `renderCompressed` 支持自定义折叠内容渲染，大体量数据可自定义优化渲染\n *    -- `renderCompressed` 参数为一个对象，包含 `data` 和 `onRemove` 两个属性，`data` 为折叠内容数据，`onRemove` 为删除事件\n *    -- 该示例演示使用Tabel组件的虚拟列表特性渲染大体量的结果\n * en - Custom rendering of compressed content\n *    -- Support custom rendering of compressed content by configuring `renderCompressed`, and customize optimized rendering for large data\n *    -- The `renderCompressed` parameter is an object containing two properties, `data` and `onRemove`, `data` is the compressed content data, and `onRemove` is the delete event\n *    -- This example demonstrates using the virtual list feature of the Table component to render large amounts of results\n */\nimport React, { useState } from 'react';\nimport { Cascader, Popover, Table, Link, TYPE } from 'shineout';\nimport { createNestedArray } from '../../tree/__example__/utils';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    item: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      padding: '5px 8px',\n      '&:hover': {\n        borderRadius: 2,\n        backgroundColor: 'var(---Neutral-fill-2-, #F4F5F8)',\n      },\n    },\n    table: {\n      borderRadius: 4,\n      overflow: 'hidden',\n      '& td': {\n        padding: '0 8px',\n        border: 'none !important',\n      },\n      '& tr:first-child td': {\n        paddingTop: '8px',\n      },\n      '& tr:last-child td': {\n        paddingBottom: '8px',\n      },\n      '& [data-soui-role=\"scroll\"]': {\n        scrollbarColor: '#c0c0c0 transparent',\n      },\n    },\n  },\n  { name: 'cascader-multiple-custom' },\n);\n\nconst d = createNestedArray([100, 100, 1]);\n\ninterface TableRowData {\n  id: string;\n  children: never[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype CascaderProps = TYPE.Cascader.Props<TableRowData, string[]>;\n\nexport default () => {\n  const [value, setValue] = useState<string[]>();\n\n  const classNames = useStyles();\n\n  const handleChange: CascaderProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  const renderCompressed: CascaderProps['renderCompressed'] = (options) => {\n    const { data, onRemove } = options;\n\n    const columns: TableColumnItem[] = [\n      {\n        render: (item) => (\n          <div className={classNames.item}>\n            <span>node-{item.id}</span>\n            <Link type='primary' onClick={() => onRemove(item)}>\n              删除\n            </Link>\n          </div>\n        ),\n      },\n    ];\n\n    return (\n      <span\n        style={{\n          fontSize: 12,\n          color: '#fff',\n          margin: '2px 0',\n          borderRadius: 4,\n          padding: '0 4px',\n          background: 'var(--soui-brand-6)',\n        }}\n      >\n        +{value ? value.length : ''}\n        <Popover position='bottom'>\n          <Table\n            data={data}\n            keygen='id'\n            virtual\n            columns={columns}\n            hideHeader\n            width={200}\n            hover={false}\n            style={{ maxHeight: 160 }}\n            className={classNames.table}\n          />\n        </Popover>\n      </span>\n    );\n  };\n\n  const renderItem: CascaderProps['renderItem'] = (item) => {\n    return (\n      <div style={{ overflow: 'hidden', width: 90, textOverflow: 'ellipsis' }}>node-{item?.id}</div>\n    );\n  };\n\n  return (\n    <div>\n      <Cascader\n        mode={2}\n        value={value}\n        onChange={handleChange}\n        width={300}\n        clearable\n        compressed\n        virtual\n        placeholder='Please select node'\n        data={d}\n        keygen='id'\n        renderResult='id'\n        renderItem={renderItem}\n        renderCompressed={renderCompressed}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "compressedBound",
        "description": "Set the `compressedBound` property, when the number of selected nodes is greater than this value, the option display will be merged",
        "scenario": "basic",
        "code": "/**\n * cn - 指定合并选项的数量\n *    -- 设置 `compressedBound` 属性，当选中的节点数量大于该值时，则会合并选项展示\n *    -- 该示例设置了 `compressedBound` 为 2，当选中的节点数量大于 2 时，选项展示会合并\n *    -- 建议在表单、表格场景中开启该属性，以减少额外的性能开销\n * en - compressedBound\n *    -- Set the `compressedBound` property, when the number of selected nodes is greater than this value, the option display will be merged\n *    -- This example sets `compressedBound` to 2, when the number of selected nodes is greater than 2, the option display will be merged\n *    -- It is recommended to enable this property in form and table scenarios to reduce additional performance overhead\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        clearable\n        multiple\n        defaultValue={['jiangning', 'yuhuatai', 'nanjing', 'jiangsu', 'feidong', 'hefei', 'anhui']}\n        mode={0}\n        compressed\n        compressedBound={2}\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Allow delete options",
        "description": "Set the `singleRemove` property, support delete single result.",
        "scenario": "basic",
        "code": "/**\n * cn - 允许删除选项\n *    -- 设置 `singleRemove` 属性，支持单个结果的删除\n * en - Allow delete options\n *    -- Set the `singleRemove` property, support delete single result.\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        clearable\n        multiple\n        singleRemove\n        defaultValue={['jiangning', 'yuhuatai', 'nanjing', 'jiangsu', 'feidong', 'hefei', 'anhui']}\n        mode={4}\n        compressed\n        compressedBound={2}\n        disabled={item => item.value === 'jiangning'}\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Trigger",
        "description": "Set `expandTrigger` property to change the trigger event of expanding next level, default is click",
        "scenario": "basic",
        "code": "/**\n * cn - 移入展开\n *    -- 更改`expandTrigger`属性可以设置鼠标移入节点时展开下一层级，默认为点击展开\n * en - Trigger\n *    -- Set `expandTrigger` property to change the trigger event of expanding next level, default is click\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n          {\n            value: 'feixi',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        width={300}\n        expandTrigger='hover'\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "finalDismiss",
        "description": "Set the `finalDismiss` property to close the panel when the last level node is clicked",
        "scenario": "basic",
        "code": "/**\n * cn - 点击叶子节点关闭面板\n *    -- 设置`finalDismiss`属性，点击最后一级节点时关闭面板\n * en - finalDismiss\n *    -- Set the `finalDismiss` property to close the panel when the last level node is clicked\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        width={300}\n        finalDismiss\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Disabled",
        "description": "Set the `disabled` property to disable the component. When `disabled` is a function, support disabling a single option",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用/禁用选项\n *    -- 通过设置`disabled`属性可以禁用组件。`disabled` 为函数时，支持禁用单个选项\n * en - Disabled\n *    -- Set the `disabled` property to disable the component. When `disabled` is a function, support disabling a single option\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const handleDisabled: CascaderProps['disabled'] = (item) => {\n    return item.value === 'jiangsu';\n  };\n\n  const renderItem: CascaderProps['renderItem'] = (n) => `${n.value}`;\n\n  return (\n    <div style={{ display: 'flex', flexWrap: 'wrap', gap: 32, width: 632}}>\n      <Cascader\n        width={300}\n        disabled\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={renderItem}\n      />\n      <Cascader\n        clearable\n        width={300}\n        disabled={handleDisabled}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={renderItem}\n      />\n      <Cascader\n        width={300}\n        disabled\n        mode={0}\n        onChange={(v) => console.log(v)}\n        defaultValue={['jiangsu', 'nanjing']}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={renderItem}\n      />\n      <Cascader\n        clearable\n        mode={0}\n        onChange={(v) => console.log(v)}\n        width={300}\n        disabled={handleDisabled}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- For performance reasons, the disabled function will only be called once when the component is initialized by default",
        "description": "If `disabled` is a function and depends on external state, you can set it to an object to use the configuration mode to ensure the accuracy of the disabled result calculation",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 出于性能考虑，默认情况下 disabled 只会在初始化时调用一次\n *    -- 如果 disabled 为函数且内部依赖外部状态，可以将其设置为一个对象来使用配置模式，以确保禁用结果计算的准确性\n *    -- 配置模式包含 `disabled` 函数 和 `isRealtime` 属性\n *    -- 当 `isRealtime` 为 true 时，每次状态更新都会调用 disabled 函数重新计算禁用结果\n *    -- 注意，配置模式下 disabled 函数会在每次状态更新时调用，可能会带来额外的性能开销，建议配合虚拟列表使用\n * en -\n *    -- For performance reasons, the disabled function will only be called once when the component is initialized by default\n *    -- If `disabled` is a function and depends on external state, you can set it to an object to use the configuration mode to ensure the accuracy of the disabled result calculation\n *    -- The configuration mode includes the `disabled` function and the `isRealtime` attribute\n *    -- When `isRealtime` is true, the disabled function will be called to recalculate the disabled result every time the state is updated\n *    -- Note that the disabled function under the configuration mode will be called every time the state is updated, which may bring additional performance overhead, it is recommended to use it with virtual list\n */\nimport React, { useState } from 'react';\nimport { Cascader, Switch, Form, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const [checked, setChecked] = useState(false);\n\n  const handleDisabledStatus: CascaderProps['disabled'] = (item) => {\n    return checked ? item.value === 'jiangsu' : false;\n  };\n\n  const renderItem: CascaderProps['renderItem'] = (n) => `${n.value}`;\n\n  return (\n    <Form labelWidth={60} labelAlign='left'>\n      <Form.Item label=\"开启禁用\">\n        <Switch value={checked} onChange={setChecked} style={{ marginRight: 12 }} />\n      </Form.Item>\n      <Form.Item label=\"选择选项\">\n        <Cascader\n          clearable\n          width={246}\n          height={100}\n          adjust={false}\n          onChange={(v) => console.log(v)}\n          disabled={{\n            disabled: handleDisabledStatus,\n            isRealtime: true,\n          }}\n          placeholder='Please select city'\n          data={data}\n          keygen='value'\n          renderItem={renderItem}\n        />\n      </Form.Item>\n    </Form>\n  );\n};\n"
      },
      {
        "title": "Loader",
        "description": "Set `loader` property to enable dynamic loading. When the node has no children, the `loader` function will be called",
        "scenario": "basic",
        "code": "/**\n * cn - 动态加载\n *    -- 配置`loader`开启动态加载功能，当点击的节点没有子节点时，会调用`loader`函数\n *    -- 注意，该功能仅支持`mode`为 3 或 4 模式\n * en - Loader\n *    -- Set `loader` property to enable dynamic loading. When the node has no children, the `loader` function will be called\n *    -- Note that this feature only supports mode 3 or 4\n */\nimport React, { useState } from 'react';\nimport { produce } from 'immer';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value?: string;\n  id?: string;\n  children?: DataItem[];\n}\n\nconst initData = ['0', '1', '2', '3', '4', '5', '6', '7', '8'].map((i) => ({ id: i }));\nconst createRange = () => Array.from({ length: Math.round(Math.random() * 4) }, (_, i) => i);\n\nexport default () => {\n  const [_data, setData] = useState<DataItem[]>(initData);\n  const [value, setValue] = useState<string[]>([]);\n\n  const loader: CascaderProps['loader'] = (key) => {\n    const path = key.toString().split(',');\n    setTimeout(() => {\n      setData(prevState => {\n        const producer = produce((draft) => {\n          let { data } = draft;\n          path.forEach((pid, i) => {\n            data = draft.find((d: { id: string }) => d.id === pid);\n            if (i < path.length - 1) draft = data.children;\n          });\n          data.children = [...createRange().map((i) => ({ id: `${data.id}-${i}` }))];\n        });\n        const nextState = producer(prevState);\n        return nextState;\n      });\n    }, 500);\n  };\n\n  const handleChange: CascaderProps['onChange'] = (v) => setValue(v);\n  const renderItem: CascaderProps['renderItem'] = (node) => `node ${node.id}`;\n  const keyGenerator: CascaderProps['keygen'] = (node, parentKey) =>\n    `${String(parentKey)},${node.id}`.replace(/^,/, '');\n\n  return (\n    <div>\n      <Cascader\n        mode={3}\n        width={300}\n        placeholder='Please select city'\n        data={_data}\n        loader={loader}\n        value={value}\n        onChange={handleChange}\n        keygen={keyGenerator}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Filter data (local)",
        "description": "Set the `onFilter` property and return the content as a function, the local data will be filtered according to the returned filter function",
        "scenario": "basic",
        "code": "/**\n * cn - 过滤数据（本地）\n *    -- 设置`onFilter`属性且返回内容为函数时，会根据返回的过滤函数对本地数据进行过滤\n * en - Filter data (local)\n *    -- Set the `onFilter` property and return the content as a function, the local data will be filtered according to the returned filter function\n */\nimport React from 'react';\nimport { Cascader, Form, Switch, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'gulou',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const handleFilter: CascaderProps['onFilter'] = (text) => (d) => d.value.indexOf(text) >= 0;\n\n  const renderItem: CascaderProps['renderItem'] = (n) => `${n.value}`;\n  const [highlight, setHighlight] = React.useState(true);\n\n  return (\n    <div>\n      <Form>\n        <Form.Item label='高亮关键字' labelWidth={72}>\n          <Switch value={highlight} onChange={setHighlight} />\n        </Form.Item>\n      </Form>\n      <div style={{ display: 'flex', gap: 32 }}>\n        <Cascader\n          width={300}\n          placeholder='Please select city'\n          data={data}\n          keygen='value'\n          onFilter={handleFilter}\n          renderItem={renderItem}\n          highlight={highlight}\n        />\n\n        <Cascader\n          mode={3}\n          width={300}\n          placeholder='Please select city'\n          data={data}\n          keygen='value'\n          onFilter={handleFilter}\n          renderItem={renderItem}\n          highlight={highlight}\n        />\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Wide match",
        "description": "After opening `wideMatch`, all possible matching items will be filtered out",
        "scenario": "basic",
        "code": "/**\n * cn - 宽泛过滤\n *    -- 打开`wideMatch`后，将筛选出所有可能的匹配项目\n * en - Wide match\n *    -- After opening `wideMatch`, all possible matching items will be filtered out\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'gulou',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const handleFilter: CascaderProps['onFilter'] = (text: string) => (d: DataItem) =>\n    d.value.indexOf(text) >= 0;\n\n  const renderItem: CascaderProps['renderItem'] = (n) => `${n.value}`;\n\n  return (\n    <div style={{ display: 'flex', gap: 32 }}>\n      <Cascader\n        wideMatch\n        width={300}\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        onFilter={handleFilter}\n        renderItem={renderItem}\n        highlight\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "inner title",
        "description": "use innerTitle to display the inner title",
        "scenario": "basic",
        "code": "/**\n /**\n * cn - 内嵌标题\n *    -- 使用 innerTitle 展示内嵌标题\n * en - inner title\n *    -- use innerTitle to display the inner title\n */\nimport React from 'react';\nimport { Cascader, Gap } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <Gap style={{ flexDirection: 'column', gap: 24 }}>\n      <Cascader\n        innerTitle='Inner Title'\n        width={300}\n        placeholder='Please select city'\n        clearable\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n        size=\"small\"\n      />\n      <Cascader\n        innerTitle='Inner Title'\n        width={300}\n        placeholder='Please select city'\n        clearable\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n      <Cascader\n        innerTitle='Inner Title'\n        width={300}\n        placeholder='Please select city'\n        clearable\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n        size=\"large\"\n      />\n    </Gap>\n  );\n};\n"
      },
      {
        "title": "renderUnmatched",
        "description": "The unmatched value can be rendered through the `renderUnmatched` property",
        "scenario": "basic",
        "code": "/**\n * cn - 渲染未匹配值\n *    -- 通过`renderUnmatched`属性可以渲染未匹配的值\n * en - renderUnmatched\n *    -- The unmatched value can be rendered through the `renderUnmatched` property\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const renderUnmatched: CascaderProps['renderUnmatched'] = (text) => {\n    return `Unmatched: ${text}`;\n  };\n\n  const renderItem: CascaderProps['renderItem'] = (n) => `${n.value}`;\n\n  return (\n    <div>\n      <Cascader\n        width={300}\n        unmatch\n        defaultValue={['shanghai']}\n        placeholder='Please select city'\n        data={data}\n        renderUnmatched={renderUnmatched}\n        keygen='value'\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Can only choose the last level",
        "description": "Set the final property",
        "scenario": "basic",
        "code": "/**\n * cn - 只能选末级\n *    -- 设置 final 属性\n * en - Can only choose the last level\n *   -- Set the final property\n */\n\nimport React from 'react'\nimport { Cascader, Form } from 'shineout'\n\nconst data = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n]\n\nconst App: React.FC = () => (\n  <div>\n    <Form.Item label=\"Single\">\n      <Cascader\n        onFilter={text => d => d.value.indexOf(text) >= 0}\n        final\n        finalDismiss\n        data={data}\n        keygen=\"value\"\n        renderItem={n => `${n.value}`}\n      />\n    </Form.Item>\n    <Form.Item label=\"multiple\">\n      <Cascader\n        mode={2}\n        final\n        onFilter={text => d => d.value.indexOf(text) >= 0}\n        data={data}\n        keygen=\"value\"\n        renderItem={n => `${n.value}`}\n      />\n    </Form.Item>\n  </div>\n)\n\nexport default App\n"
      },
      {
        "title": "Big data performance",
        "description": "Set the virtual property to enable virtual scrolling",
        "scenario": "basic",
        "code": "/**\n * cn - 大数据性能\n *    -- 设置 virtual 属性，开启虚拟滚动\n * en - Big data performance\n *   -- Set the virtual property to enable virtual scrolling\n */\n\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\nfunction generateBigTreeData(level: number, count: number) {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    const children: any[] = level > 0 ? generateBigTreeData(level - 1, count) : [];\n    data.push({ value: `${level}-${i}`, children });\n  }\n  return data;\n}\n\nconst bigData = generateBigTreeData(2, 50);\n\nconst App: React.FC = () => (\n  <Cascader\n    keygen='value'\n    data={bigData}\n    virtual\n    renderItem={(n) => `${n.value}`}\n    onFilter={(text) => (d) => d.value.indexOf(text) >= 0}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "tip",
        "description": "test tip",
        "scenario": "basic",
        "code": "/**\n * cn - tip\n *    -- test tip\n * en - tip\n *    -- test tip\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      {/* <Cascader\n        tip='test tip'\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n      <Cascader\n        status='error'\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n      <Cascader\n        tip='test tip'\n        error=\"error\"\n        popover\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      /> */}\n    </div>\n  );\n};\n"
      },
      {
        "title": "Big data performance",
        "description": "Set the virtual property to enable virtual scrolling",
        "scenario": "basic",
        "code": "/**\n * cn - virtual-compressed\n *    -- 设置 virtual 属性，开启虚拟滚动\n * en - Big data performance\n *   -- Set the virtual property to enable virtual scrolling\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\nimport bigBizData from './big-biz-data';\n\n\n// const bigData = generateBigTreeData(2, 50);\n\nconst App: React.FC = () => (\n  <Cascader\n    keygen='category_id'\n    data={bigBizData}\n    virtual\n    expandTrigger='hover'\n    mode={0}\n    compressed\n    clearable\n    // compressedBound={200}\n    // compressed=\"hide-popover\"\n    // renderResult={() => null}\n    renderItem={(n) => {\n      // if(n.category_name === '加大码'){\n\n      //   return 'long long text 加大码long long text long long text 加大码long long textlong long text 加大码long long textlong long text 加大码long long text long long text 加大码long long textlong long text 加大码long long textlong long text 加大码long long text long long text 加大码long long textlong long text 加大码long long text'\n      // }\n\n        return `${n.category_name}`\n    }}\n    onFilter={(text) => (d) => d.category_name.indexOf(text) >= 0}\n  />\n);\n\nexport default App;"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 63,
      "requiredProps": 2,
      "propsWithWhen": 0,
      "examplesCount": 24
    },
    "subComponentApis": {}
  },
  "Checkbox": {
    "name": "Checkbox",
    "description": "在一组数据中，用户可通过复选框选择一个或多个数据",
    "category": "other",
    "importPath": "import { Checkbox } from 'shineout'",
    "props": [
      {
        "name": "onChange",
        "type": "((value: T , checked: boolean, raw: T) => void)",
        "required": false,
        "description": "值改变回调函数"
      },
      {
        "name": "checked",
        "type": "boolean | \"indeterminate\" | ((d: T) => boolean | \"indeterminate\")",
        "required": false,
        "description": "checked 传入时为受控组件"
      },
      {
        "name": "defaultChecked",
        "type": "boolean | \"indeterminate\"",
        "required": false,
        "description": "默认选中状态"
      },
      {
        "name": "onClick",
        "type": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void)",
        "required": false,
        "description": "勾选框点击回调"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "inputRef",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "获取input dom"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "内容"
      },
      {
        "name": "htmlValue",
        "type": "any",
        "required": false,
        "defaultValue": "true",
        "description": "选中后返回的值"
      },
      {
        "name": "onRawChange",
        "type": "((value: T , checked: boolean, raw: T) => void)",
        "required": false,
        "description": "值改变回调函数"
      },
      {
        "name": "value",
        "type": "any",
        "required": false,
        "description": "如果 checked 未设置，checked 状态为 value === htmlValue"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认值和 value 类型相同"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Basic Checkbox",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基本的 Checkbox\n * en - Base\n *    -- Basic Checkbox\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => <Checkbox>Checkbox</Checkbox>;\n\nexport default App;\n"
      },
      {
        "title": "Base",
        "description": "Set the size property to change the size of the component. There are three built-in sizes: small, default, and large",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性改变组件的尺寸大小, 内置三种尺寸：small、default、large\n * en - Base\n *    -- Set the size property to change the size of the component. There are three built-in sizes: small, default, and large\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', alignItems: 'center' }}>\n    <Checkbox size={'small'}>Checkbox</Checkbox>\n    <Checkbox>Checkbox</Checkbox>\n    <Checkbox size={'large'}>Checkbox</Checkbox>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Checked",
        "description": "The checked has three values: true(checked), false(not checked), 'indeterminate'(half-checked)",
        "scenario": "basic",
        "code": "/**\n * cn - 状态\n *    -- checked 有三个值，选中(true)、未选中(false)、半选中('indeterminate')，checked 设置时为受控组件（此示例没有处理 onChange 事件）\n * en - Checked\n *    -- The checked has three values: true(checked), false(not checked), 'indeterminate'(half-checked)\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <div style={{ marginBottom: 12, lineHeight: 0 }}>\n      <Checkbox checked={false}>not checked</Checkbox>\n      <Checkbox checked>checked</Checkbox>\n      <Checkbox checked='indeterminate'>indeterminate</Checkbox>\n    </div>\n\n    <div style={{ lineHeight: 0 }}>\n      <Checkbox checked={false} disabled>\n        not checked\n      </Checkbox>\n      <Checkbox checked disabled>\n        checked\n      </Checkbox>\n      <Checkbox checked='indeterminate' disabled>\n        indeterminate\n      </Checkbox>\n    </div>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Check all",
        "description": "Set checked = 'indeterminate' to achieve half-check effect",
        "scenario": "basic",
        "code": "/**\n * cn - 全选/半选\n *    -- 通过设置 checked = 'indeterminate' 属性，可以实现半选效果\n * en - Check all\n *    -- Set checked = 'indeterminate' to achieve half-check effect\n */\nimport React, { useState } from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = ['Option1', 'Option2', 'Option3'];\nconst getChecked = (value: string[], num: number) => {\n  if (value.length === num) return true;\n  if (value.length === 0) return false;\n  return 'indeterminate';\n};\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<string[]>([]);\n  return (\n    <div>\n      <Checkbox\n        checked={getChecked(value, data.length)}\n        onChange={(v) => {\n          if (v) {\n            setValue(data);\n          } else {\n            setValue([]);\n          }\n        }}\n      >\n        {getChecked(value, data.length) === true ? 'UnCheckAll' : 'CheckAll'}\n      </Checkbox>\n      <Checkbox.Group\n        style={{ marginTop: 12 }}\n        data={data}\n        keygen\n        value={value}\n        onChange={setValue}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Value",
        "description": "When the htmlValue is set, the checkbox return the htmlValue (checked) and undefined (not checked)",
        "scenario": "basic",
        "code": "/**\n * cn - 选中值\n *    -- 未设置htmlValue的状态下，checkbox选中时返回true，如果设置 htmlValue，返回 htmlValue。未选中状态都是返回 undefined\n * en - Value\n *    -- When the htmlValue is set, the checkbox return the htmlValue (checked) and undefined (not checked)\n *    -- When the htmlValue is not set, the checkbox selected return true (checked) and undefined (not checked)\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <Checkbox htmlValue='ok' onChange={console.log}>\n    {'value is \"ok\"'}\n  </Checkbox>\n);\n\nexport default App;\n"
      },
      {
        "title": "Group",
        "description": "A series of checkboxes group by Checkbox.Group",
        "scenario": "basic",
        "code": "/**\n * cn - 一组复选框\n *    -- 一组复选框可以放在 Checkbox.Group 中\n * en - Group\n *    -- A series of checkboxes group by Checkbox.Group\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = [\n  { id: 1, color: 'red' },\n  { id: 2, color: 'cyan' },\n  { id: 3, color: 'blue' },\n  { id: 4, color: 'green' },\n  { id: 5, color: 'yellow' },\n  { id: 6, color: 'orange' },\n  { id: 7, color: 'violet' },\n];\n\nconst App: React.FC = () => (\n  <Checkbox.Group keygen='id' defaultValue={[3, 5]}>\n    {data.map((d) => (\n      <Checkbox key={d.id} htmlValue={d.id}>\n        {d.color}\n      </Checkbox>\n    ))}\n  </Checkbox.Group>\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- Render a group of checkboxes from data",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 可以直接通过数据来渲染一组 Checkbox\n * en -\n *    -- Render a group of checkboxes from data\n */\nimport React from 'react';\nimport { Checkbox, TYPE } from 'shineout';\n\ntype CheckboxGroupProps = TYPE.Checkbox.GroupProps<string, string[]>;\ntype CheckboxGroupRenderItem = CheckboxGroupProps['renderItem'];\n\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst renderItem: CheckboxGroupRenderItem = (color) => {\n  const style = { borderBottom: `solid 1px ${color}` };\n  return <span style={style}>{color}</span>;\n};\n\nconst App: React.FC = () => (\n  <Checkbox.Group\n    keygen={(c) => c}\n    data={data}\n    defaultValue={['blue', 'cyan']}\n    renderItem={renderItem}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Layout",
        "description": "The default layout is horizontal, and the block property can be set to vertical",
        "scenario": "basic",
        "code": "/**\n * cn - 布局\n *    -- 默认是水平布局，设置 block 属性可以改为垂直布局\n * en - Layout\n *    -- The default layout is horizontal, and the block property can be set to vertical\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => (\n  <>\n    <Checkbox.Group keygen={(c) => c} data={data} defaultValue={['blue', 'cyan']} />\n    <Checkbox.Group\n      keygen={(c) => c}\n      data={data}\n      defaultValue={['blue', 'cyan']}\n      block\n      style={{ marginTop: 24, display: 'inline-block' }}\n    />\n  </>\n);\n\nexport default App;\n"
      },
      {
        "title": "Group disabled",
        "description": "Set the disabled property of Checkbox.Group to true to disable all options",
        "scenario": "basic",
        "code": "/**\n * cn - 复选框组禁用\n *    -- 设置 Checkbox.Group 的 disabled 为 true，禁用全部选项\n * en - Group disabled\n *    -- Set the disabled property of Checkbox.Group to true to disable all options\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => (\n  <>\n    <Checkbox.Group disabled keygen={(c) => c} data={data} defaultValue={['blue', 'cyan']} />\n  </>\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- When the disabled property is a function, the conditional disable is implemented according to the function result",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- disabled 为函数时，根据函数结果实现有条件禁用\n * en -\n *    -- When the disabled property is a function, the conditional disable is implemented according to the function result\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => (\n  <>\n    <Checkbox.Group\n      disabled={(d) => d === 'yellow'}\n      keygen={(c) => c}\n      data={data}\n      defaultValue={['blue', 'cyan']}\n    />\n  </>\n);\n\nexport default App;\n"
      },
      {
        "title": "OnClick",
        "description": "Checkbox click callback",
        "scenario": "basic",
        "code": "/**\n * cn - 点击回调\n *    -- 点击选择框后的回调\n * en - OnClick\n *    -- Checkbox click callback\n */\nimport React, { useState } from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => {\n  const [total, setTotal] = useState(0);\n\n  return (\n    <div>\n      <Checkbox onClick={() => setTotal(total + 1)}>\n        Click Me\n        {` ${total} Times!`}\n      </Checkbox>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "separator",
        "description": "Set the separator by separator property",
        "scenario": "basic",
        "code": "/**\n * cn - separator\n *    -- 通过 separator 属性设置分隔符\n * en - separator\n *    -- Set the separator by separator property\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = [\n  { id: '1', color: 'red' },\n  { id: '2', color: 'cyan' },\n  { id: '3', color: 'blue' },\n  { id: '4', color: 'green' },\n  { id: '5', color: 'yellow' },\n  { id: '6', color: 'orange' },\n  { id: '7', color: 'violet' },\n];\n\nconst App: React.FC = () => (\n  <Checkbox.Group separator={','} keygen='id' defaultValue={'3,5'}>\n    {data.map((d) => (\n      <Checkbox key={d.id} htmlValue={d.id}>\n        {d.color}\n      </Checkbox>\n    ))}\n  </Checkbox.Group>\n);\n\nexport default App;\n"
      },
      {
        "title": "Inputable",
        "description": "Set the inputable property to true can show the input box and the return value is the value of the input box.",
        "scenario": "basic",
        "code": "/**\n * cn - 带输入（deprecated）\n *    -- 设置 inputable 属性可以显示输入框，返回值为输入框内容\n * en - Inputable\n *    -- Set the inputable property to true can show the input box and the return value is the value of the input box.\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <Checkbox inputable onChange={console.log}>\n    more...\n  </Checkbox>\n);\n\nexport default App;\n"
      },
      {
        "title": "Group OnChange",
        "description": "The onChange of the Checkbox wrapped by Checkbox.Group can still be triggered",
        "scenario": "basic",
        "code": "/**\n * cn - Group OnChange\n *    -- 被Checkbox.Group包裹的Checkbox的onChange依然能触发\n * en - Group OnChange\n *    -- The onChange of the Checkbox wrapped by Checkbox.Group can still be triggered\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => {\n  const [myState, setMyState] = React.useState();\n\n  console.log('myState: >>', myState);\n  const handleChange = (value, checked, raw) => {\n    console.log('value, checked, raw: >>', value, checked, raw)\n    setMyState(value)\n  }\n  return (\n    <Checkbox.Group keygen>\n      <Checkbox\n        value={myState}\n        onChange={handleChange}\n        htmlValue=\"htmlValue\"\n      >\n        {myState ? 'Checked' : 'Unchecked'}\n      </Checkbox>\n    </Checkbox.Group>\n  );\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 20,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 14
    },
    "subComponentApis": {}
  },
  "Collapse": {
    "name": "Collapse",
    "description": "对内容进行分组和归类，将次要信息隐藏",
    "category": "other",
    "importPath": "import { Collapse } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "expandIcon",
        "type": "ReactNode",
        "required": false,
        "description": "展开图标"
      },
      {
        "name": "triggerRegion",
        "type": "\"icon\" | \"header\" | \"disabled\"",
        "required": false,
        "description": "触发展开折叠的区域"
      },
      {
        "name": "active",
        "type": "string | string[]",
        "required": false,
        "description": "当前展开的面板,受控"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示边框"
      },
      {
        "name": "expandIconPosition",
        "type": "\"left\" | \"right\"",
        "required": false,
        "defaultValue": "\\\"left\\\"",
        "description": "折叠图标位置"
      },
      {
        "name": "extraPosition",
        "type": "\"left\" | \"right\"",
        "required": false,
        "defaultValue": "\\\"right\\\"",
        "description": "扩展内容位置"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "折叠面板内的内容"
      },
      {
        "name": "animation",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启折叠动画",
        "version": "3.6.0"
      },
      {
        "name": "defaultActive",
        "type": "string | string[]",
        "required": false,
        "description": "默认展开的面板"
      },
      {
        "name": "accordion",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启手风琴模式"
      },
      {
        "name": "onChange",
        "type": "((active: string, actives: string[], e: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "展开面板改变时触发回调"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Basic collapse, you can customize the content of the panel",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基础折叠面板，可自定义面板内容\n * en - Basic\n *    -- Basic collapse, you can customize the content of the panel\n */\nimport React from 'react';\nimport { Collapse } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Collapse defaultActive={['1', '3']} style={{ maxWidth: 1180 }}>\n        <Collapse.Item title='This is panel header 1' keygen='0'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item title='This is panel header 2' keygen='1'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 3' keygen='2' disabled>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 4' keygen='3' disabled>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n"
      },
      {
        "title": "accordion",
        "description": "Accordion mode, only one panel can be expanded at a time",
        "scenario": "basic",
        "code": "/**\n * cn - 手风琴模式\n *    -- 手风琴模式，每次只能展开一个面板\n * en - accordion\n *    -- Accordion mode, only one panel can be expanded at a time\n */\nimport React from 'react';\nimport { Collapse } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Collapse accordion style={{ maxWidth: 1180 }}>\n        <Collapse.Item title='This is panel header 1' keygen='0'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item title='This is panel header 2' keygen='1'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 3' keygen='2'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 4' keygen='3'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Nested panels",
        "description": "Nested panels",
        "scenario": "basic",
        "code": "/**\n * cn - 嵌套面板\n *    -- 嵌套面板\n * en - Nested panels\n *    -- Nested panels\n */\nimport React from 'react';\nimport { Collapse } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Collapse style={{ maxWidth: 1180 }} defaultActive={['0']}>\n        <Collapse.Item title='This is panel header 1' keygen='0'>\n          <Collapse defaultActive={['1']}>\n            <Collapse.Item title='This is panel nest header 2' keygen='1'>\n              Joy in living comes from having fine emotions, trusting them, giving them the freedom\n              of a bird in the open. Joy in living can never be assumed as a pose, or put on from\n              the outside as a mask. People who have this joy do not need to talk about it; they\n              radiate it. They just live out their joy and let it splash its sunlight and glow into\n              other lives as naturally as bird sings.\n            </Collapse.Item>\n\n            <Collapse.Item title='This is panel nest header 3' keygen='2'>\n              Joy in living comes from having fine emotions, trusting them, giving them the freedom\n              of a bird in the open. Joy in living can never be assumed as a pose, or put on from\n              the outside as a mask. People who have this joy do not need to talk about it; they\n              radiate it. They just live out their joy and let it splash its sunlight and glow into\n              other lives as naturally as bird sings.\n            </Collapse.Item>\n          </Collapse>\n        </Collapse.Item>\n        <Collapse.Item title='This is panel header 2' keygen='3'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 3' keygen='4'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 4' keygen='5'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Simple panel",
        "description": "Simple mode without border",
        "scenario": "basic",
        "code": "/**\n * cn - 简洁面板\n *    -- 无边框的简洁模式\n * en - Simple panel\n *    -- Simple mode without border\n */\nimport React from 'react';\nimport { Collapse } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Collapse defaultActive={['0']} style={{ maxWidth: 1180 }} border={false}>\n        <Collapse.Item title='This is panel header 1' keygen='0'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item title='This is panel header 2' keygen='1'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item title='This is panel header 3' keygen='2'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Customize",
        "description": "You can customize the title background color, content background color, collapse icon, etc",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义面板样式\n *    -- 可自定义标题背景色、内容背景色、折叠图标等\n * en - Customize\n *    -- You can customize the title background color, content background color, collapse icon, etc\n */\nimport React from 'react';\nimport { Collapse } from 'shineout';\n\nexport default () => {\n  const arrowIcon = (\n    <svg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'>\n      <path\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M10.6957 5.75207L16.2694 11.3386C16.6589 11.7289 16.6589 12.3609 16.2694 12.7512L10.7576 18.2751C10.3675 18.6661 9.73435 18.6668 9.3434 18.2767C9.15675 18.0904 9.05121 17.838 9.04974 17.5744L8.98776 6.46395C8.98467 5.91168 9.42988 5.46147 9.98216 5.45839C10.2497 5.4569 10.5067 5.56268 10.6957 5.75207Z'\n        fill='#666C7C'\n      />\n    </svg>\n  );\n\n  return (\n    <div>\n      <Collapse defaultActive={['1']} style={{ maxWidth: 1180 }} expandIcon={arrowIcon}>\n        <Collapse.Item\n          title='This is panel header 1'\n          keygen='0'\n          style={{ background: '#F4F5F8' }}\n          contentStyle={{ background: '#FFFFFF' }}\n        >\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item\n          title='This is panel header 2'\n          keygen='1'\n          style={{ background: '#F4F5F8' }}\n          contentStyle={{ background: '#FFFFFF' }}\n        >\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item\n          title='This is panel header 3'\n          keygen='2'\n          disabled\n          style={{ background: '#F4F5F8' }}\n          contentStyle={{ background: '#FFFFFF' }}\n        >\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Extra",
        "description": "Customize the extra content of each panel",
        "scenario": "basic",
        "code": "/**\n * cn - 额外操作\n *    -- 自定义渲染每个面板的扩容内容\n * en - Extra\n *    -- Customize the extra content of each panel\n */\nimport React from 'react';\nimport { Collapse, Checkbox, Button } from 'shineout';\n\nexport default () => {\n  const moreIcon = (\n    <svg viewBox=\"0 0 24 24\" width=\"16px\" height=\"16px\">\n      <path fill=\"#666C7C\" d=\"M14.002 4C14.002 5.10457 13.1065 6 12.002 6C10.8974 6 10.002 5.10457 10.002 4C10.002 2.89543 10.8974 2 12.002 2C13.1065 2 14.002 2.89543 14.002 4ZM14.0017 12.0903C14.0017 13.1949 13.1063 14.0903 12.0017 14.0903C10.8971 14.0903 10.0017 13.1949 10.0017 12.0903C10.0017 10.9858 10.8971 10.0903 12.0017 10.0903C13.1063 10.0903 14.0017 10.9858 14.0017 12.0903ZM14.0017 20C14.0017 21.1046 13.1063 22 12.0017 22C10.8971 22 10.0017 21.1046 10.0017 20C10.0017 18.8954 10.8971 18 12.0017 18C13.1063 18 14.0017 18.8954 14.0017 20Z\"></path>\n    </svg>\n  )\n  return (\n    <div>\n      <Collapse defaultActive={['1']} style={{ maxWidth: 1180 }}>\n        <Collapse.Item title='This is panel header 1' keygen='0' extra={moreIcon}>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item\n          title='This is panel header 2'\n          keygen='1'\n          extra={<Checkbox style={{ margin: 0 }}>checkbox</Checkbox>}\n        >\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item title='This is panel header 3' keygen='2' extra={<Button type='primary'>Button</Button>}>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Icon position",
        "description": "You can set whether to display the expand icon and the position of the icon",
        "scenario": "basic",
        "code": "/**\n * cn - 展开图标位置\n *    -- 可设置是否显示展开图标以及图标展示的位置\n * en - Icon position\n *    -- You can set whether to display the expand icon and the position of the icon\n */\nimport React from 'react';\nimport { Collapse, Radio } from 'shineout';\n\nexport default () => {\n  type PositionType = 'left' | 'right';\n  type RegionType = 'header' | 'icon' | 'disabled';\n\n  const iconPosition: (PositionType | 'none')[] = ['left', 'right', 'none'];\n  const regions: RegionType[] = ['header', 'icon', 'disabled'];\n  const [position, setPosition] = React.useState('left');\n  const [region, setRegion] = React.useState<RegionType>('header');\n\n  const rowStyle = { display: 'flex', marginBottom: 16, alignItems: 'center' };\n\n  return (\n    <div>\n      <div style={rowStyle}>\n        <div style={{ width: 80 }}>Icon:</div>\n        <Radio.Group\n          keygen\n          data={iconPosition}\n          value={position}\n          onChange={(d) => setPosition(d)}\n        />\n      </div>\n      <div style={rowStyle}>\n        <div style={{ width: 80 }}>Hotspot:</div>\n        <Radio.Group\n          keygen\n          data={regions}\n          value={region}\n          onChange={(d) => setRegion(d)}\n        />\n      </div>\n      \n      <Collapse\n        style={{ maxWidth: 1180 }}\n        triggerRegion={region}\n        expandIconPosition={(position !== 'none' && position) as PositionType}\n      >\n        <Collapse.Item\n          title='This is panel header 1'\n          keygen='0'\n          showExpandIcon={position !== 'none'}\n        >\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item\n          title='This is panel header 2'\n          keygen='1'\n          showExpandIcon={position !== 'none'}\n        >\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item\n          title='This is panel header 3'\n          keygen='2'\n          showExpandIcon={position !== 'none'}\n        >\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 13,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 7
    },
    "subComponentApis": {}
  },
  "DatePicker": {
    "name": "DatePicker",
    "description": "选择日期。支持年、月、季度、周、日类型，支持范围选择等",
    "category": "other",
    "importPath": "import { DatePicker } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "innerTitle",
        "type": "ReactNode",
        "required": false,
        "description": "内嵌标题"
      },
      {
        "name": "placeTitle",
        "type": "ReactNode",
        "required": false,
        "description": "占位标题，需要配合 innerTitle 一起使用"
      },
      {
        "name": "absolute",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1000",
        "description": "选项列表 z-index 值, 需要配合 absolute"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "额外渲染的节点"
      },
      {
        "name": "disabled",
        "type": "boolean | ((date: Date, type?: \"start\" | \"end\" , value0?: Date , value1?: Date ) => boolean) | (boolean | ((date: Date) => boolean))[]",
        "required": false,
        "defaultValue": "false",
        "description": "如果 disabled 为 true，禁用全部选项，如果 disabled 为函数，根据函数反回结果禁用选项"
      },
      {
        "name": "disabledTime",
        "type": "string | ((time: string, type?: \"start\" | \"end\" , value0?: Date , value1?: Date ) => boolean)",
        "required": false,
        "description": "禁用指定 Time。"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "控制浮层显隐"
      },
      {
        "name": "onCollapse",
        "type": "((collapse: boolean) => void)",
        "required": false,
        "description": "下拉列表展开/收起回调"
      },
      {
        "name": "align",
        "type": "\"left\" | \"right\" | \"center\"",
        "required": false,
        "defaultValue": "\\\"center\\\"",
        "description": "值水平排布方式"
      },
      {
        "name": "timeZone",
        "type": "string",
        "required": false,
        "description": "设置默认时区,格式为/^([+-]\\\\d{2})$/ 支持 \\\"-12\\\" 到 \\\"+13\\\""
      },
      {
        "name": "position",
        "type": "\"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"",
        "required": false,
        "description": "弹出框位置"
      },
      {
        "name": "type",
        "type": "\"date\" | \"time\" | \"datetime\" | \"month\" | \"week\" | \"quarter\" | \"year\"",
        "required": false,
        "defaultValue": "\\\"date\\\"",
        "description": "时间类型"
      },
      {
        "name": "format",
        "type": "string",
        "required": false,
        "description": "不同type对应的默认值。\\\"date\\\": \\\"YYYY-MM-DD\\\"; \\\"time\\\": \\\"HH:mm:ss\\\"; \\\"week\\\": \\\"GGGG WW\\\"; \\\"month\\\": \\\"YYYY-MM\\\"; \\\"quarter\\\": \\\"YYYY-\\\\[Q]Q\\\";  \\\"year\\\": \\\"YYYY\\\"; \\\"datetime\\\": \\\"YYYY-MM-DD HH:mm:ss\\\""
      },
      {
        "name": "formatResult",
        "type": "string | ((date?: Date ) => string)",
        "required": false,
        "defaultValue": "props.format",
        "description": "对选中时间进行格式化"
      },
      {
        "name": "range",
        "type": "number | boolean",
        "required": false,
        "description": "范围跨度，单位 秒，为 true 时表示不限制选择范围"
      },
      {
        "name": "value",
        "type": "Value",
        "required": false,
        "description": "值为 string 时，需要和 format 属性匹配。非 string 会格式化为 string。range 属性为 true 时，值为长度为2的数组"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认值  和 value 类型相同"
      },
      {
        "name": "onChange",
        "type": "((value: Value extends any[] ? string[] : string) => void)",
        "required": false,
        "description": "值改变回调函数"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示清除数据图标"
      },
      {
        "name": "clearWithUndefined",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "清空值时抛出 undefined"
      },
      {
        "name": "clearToUndefined",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "点击清除按钮后数据变为 undefined",
        "version": "3.4.0"
      },
      {
        "name": "allowSingle",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否允许单选, 仅在 range 模式下有效"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示边框"
      },
      {
        "name": "defaultRangeMonth",
        "type": "(Date | number | string )[]",
        "required": false,
        "description": "使用 defaultPickerValue 代替"
      },
      {
        "name": "defaultPickerValue",
        "type": "Date | number | string | (Date | number | string )[]",
        "required": false,
        "description": "面板默认时间，在未选择日期时生效"
      },
      {
        "name": "placeholder",
        "type": "string | string[]",
        "required": false,
        "description": "占位文字。range 属性不为空时，为长度为2的数组"
      },
      {
        "name": "defaultTime",
        "type": "DateTimeType | DateTimeType[]",
        "required": false,
        "description": "选择日期时默认的时间, 格式为: \\\"HH:mm:ss\\\""
      },
      {
        "name": "min",
        "type": "Date | number | string",
        "required": false,
        "description": "可选最小值"
      },
      {
        "name": "max",
        "type": "Date | number | string",
        "required": false,
        "description": "可选最大值"
      },
      {
        "name": "hourStep",
        "type": "number",
        "required": false,
        "description": "小时选项步长"
      },
      {
        "name": "minuteStep",
        "type": "number",
        "required": false,
        "description": "分钟选项步长"
      },
      {
        "name": "secondStep",
        "type": "number",
        "required": false,
        "description": "秒选项步长"
      },
      {
        "name": "quickSelect",
        "type": "{name: string, value: Value}[]",
        "required": false,
        "description": "快速选择, 仅在 range 模式下有效, name: 文字提示, value: 时间范围, immediate: 选择后是否立刻关闭面板",
        "version": "3.4.4 新增 immediate 配置项"
      },
      {
        "name": "showSelNow",
        "type": "boolean",
        "required": false,
        "description": "是否展示今天或者此刻按钮"
      },
      {
        "name": "inputable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "可输入"
      },
      {
        "name": "onPickerChange",
        "type": "((value: DateTimeType | DateTimeType[], quickSelectItem: void | { name: ReactNode, immediate?: boolean , value: DateTimeType | DateTimeType[] | (() => DateTimeType | DateTimeType[]) } , areaType: \"year\" | \"month\" | \"week\" | \"day\" | \"time\" | \"quick\" | \"quarter\") => void)",
        "required": false,
        "description": "值改变回调，有别于 onChange, onPickerChange会在每项值改变的时候执行"
      },
      {
        "name": "onBlur",
        "type": "((e: FocusEvent<HTMLInputElement, Element>, index?: number ) => void)",
        "required": false,
        "description": "blur 事件回调"
      },
      {
        "name": "onFocus",
        "type": "((e: FocusEvent<HTMLInputElement, Element>) => void)",
        "required": false,
        "description": "focus 事件回调"
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否只展示下边框"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "自定义宽度"
      },
      {
        "name": "adjust",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启自动调整面板位置功能。当面板被窗口遮挡时，自动调整位置"
      },
      {
        "name": "needConfirm",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启手动确认按钮，开启后只有点击确认按钮才会提交选择的值。",
        "version": "3.4.0"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "The basic usage",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的用法\n * en - Base\n *    -- The basic usage\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => <DatePicker showSelNow />\n\nexport default App;\n"
      },
      {
        "title": "Datetime Mode",
        "description": "Set type to be datetime to select date and time",
        "scenario": "basic",
        "code": "/**\n * cn - 选择日期时间\n *    -- 设置 type 为 datetime，选择日期 + 时间\n * en - Datetime Mode\n *    -- Set type to be datetime to select date and time\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => <DatePicker type='datetime' />;\n\nexport default App;\n"
      },
      {
        "title": "Size",
        "description": "There are three built-in size: small、default、large",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 内置了三种尺寸，small、default、large\n * en - Size\n *    -- There are three built-in size: small、default、large\n */\nimport React from 'react';\nimport { DatePicker, TYPE, Radio } from 'shineout';\n\ntype DatePickerProps = TYPE.DatePicker.Props;\ntype DatePickerSize = DatePickerProps['size'];\n\nconst Size: DatePickerSize[] = ['small', 'default', 'large'];\n\nconst App: React.FC = () => {\n  const [size, setSize] = React.useState<DatePickerSize>('default');\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n      <Radio.Group button={'outline'} data={Size} value={size} onChange={setSize} keygen />\n      <DatePicker size={size} type='date' showSelNow />\n      <DatePicker size={size} type='datetime' showSelNow />\n      <DatePicker size={size} type='date' range showSelNow />\n      <DatePicker size={size} type='datetime' range showSelNow />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Week Mode",
        "description": "Set type to be week to select week",
        "scenario": "basic",
        "code": "/**\n * cn - 选择星期\n *    -- 设置 type 为 week，选择星期\n * en - Week Mode\n *    -- Set type to be week to select week\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => <DatePicker type='week' />;\n\nexport default App;\n"
      },
      {
        "title": "Month Mode",
        "description": "Set type to be month to select month",
        "scenario": "basic",
        "code": "/**\n * cn - 选择月\n *    -- 设置 type 为 month，选择月\n * en - Month Mode\n *    -- Set type to be month to select month\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => <DatePicker type='month' />;\n\nexport default App;\n"
      },
      {
        "title": "Quarter Mode",
        "description": "Set type to be quarter to select month",
        "scenario": "basic",
        "code": "/**\n * cn - 选择季度\n *    -- 设置 type 为 quarter，选择季度\n * en - Quarter Mode\n *    -- Set type to be quarter to select month\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => <DatePicker type='quarter' />;\n\nexport default App;\n"
      },
      {
        "title": "Year Mode",
        "description": "Set type to be year to select year",
        "scenario": "basic",
        "code": "/**\n * cn - 选择年\n *    -- 设置 type 为 year，选择年\n * en - Year Mode\n *    -- Set type to be year to select year\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => <DatePicker type='year' />;\n\nexport default App;\n"
      },
      {
        "title": "Time Mode",
        "description": "Set type to be time to select time and automatically load the corresponding selection column according to the format property",
        "scenario": "basic",
        "code": "/**\n * cn - 选择时间\n *    -- 设置 type 为 time，选择时间，根据 format 自动加载相应的选择列\n * en - Time Mode\n *    -- Set type to be time to select time and automatically load the corresponding selection column according to the format property\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst now = Date.now();\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n    <DatePicker type='time' defaultValue={now} showSelNow />\n    <DatePicker type='time' format='HH:mm' defaultValue={now} />\n    <DatePicker type='time' format='hh:mm A' defaultValue={now} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Step",
        "description": "Set step of TimePicker",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 步进设置\n * en - Step\n *    -- Set step of TimePicker\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst step: number = 2;\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', gap: '24px' }}>\n    <DatePicker placeholder='Hour Step' type='time' hourStep={step} />\n    <DatePicker placeholder='Minute Step' type='time' minuteStep={step} />\n    <DatePicker placeholder='Second Step' type='time' secondStep={step} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Range",
        "description": "Set the range property to select range, the input value and return value is an array of length 2",
        "scenario": "basic",
        "code": "/**\n * cn - 范围选择\n *    -- 设置 range 属性可以选择范围，输入和返回的 value 为长度为 2 的数组\n * en - Range\n *    --Set the range property to select range, the input value and return value is an array of length 2\n */\nimport React from 'react';\nimport { DatePicker, Radio, TYPE } from 'shineout';\n\ntype DateType = TYPE.DatePicker.Props['type'];\nconst types: DateType[] = ['date', 'week', 'month', 'quarter', 'year', 'time', 'datetime'];\n\nconst App: React.FC = () => {\n  const [type, setType] = React.useState<DateType>('date');\n  return (\n    <div>\n      <Radio.Group\n        button={'outline'}\n        data={types}\n        value={type}\n        onChange={setType}\n        keygen\n        style={{ marginBottom: 24 }}\n      />\n      <br />\n      <DatePicker type={type} range defaultTime={['00:00:00', '23:59:59']} />\n    </div>\n  );\n};\nexport default App;\n"
      },
      {
        "title": "Quick select",
        "description": "can configure some options for quick selection. The date can be Date, timestamp, or string. The string needs to be in the same format as the format",
        "scenario": "basic",
        "code": "/**\n * cn - 快速选择\n *    -- 可以配置一些快速选择的选项, 日期可以是 Date, 时间戳, 或者字符串,字符串需要和所格式填写的 format 一致\n *    -- 其中配置项 `name` 为选项名称 `value` 为选项值 `immediate` 设置为 true 后将会在点击后立即关闭弹窗并触发 onChange\n *    -- 注意，快速选择的选项如果为 new Date 等动态值，选中后的激活交互会失效。如需维持激活状态，需要使用固定值\n *    -- 配置项 `immediate` 在开启 `needConfirm` 后不生效\n * en - Quick select\n *    -- can configure some options for quick selection. The date can be Date, timestamp, or string. The string needs to be in the same format as the format\n *    -- Note that if the quick selection option is a dynamic value such as new Date, the activation interaction after selection will fail. If you need to maintain the activation state, you need to use a fixed value\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst QuickSelectData = [\n  { name: 'Today', value: () => Date.now() },\n  {\n    name: 'A week later',\n    value: () => {\n      const now = Date.now();\n      return now + 7 * 24 * 60 * 60 * 1000;\n    },\n  },\n  {\n    name: 'A month later',\n    value: () => {\n      const now = Date.now();\n      const date = new Date(now) ;\n      const year = date.getFullYear();\n      const nextMonth = date.getMonth() + 1;\n      const day = date.getDate();\n      return new Date(year, nextMonth, day).getTime();\n    },\n  },\n];\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n    <DatePicker placeholder='Quick Date' quickSelect={QuickSelectData} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Select confirm",
        "description": "Select confirm",
        "scenario": "basic",
        "code": "/**\n * cn - 确认选择\n *    -- 设置`needConfirm`属性后开启手动确认按钮。默认会在选择值或者失去焦点时提交。\n * en - Select confirm\n *    -- Select confirm\n */\nimport React from 'react';\nimport { Checkbox, DatePicker, Radio, TYPE } from 'shineout';\n\ntype DateType = TYPE.DatePicker.Props['type'];\nconst types: DateType[] = ['date', 'week', 'month', 'quarter', 'year', 'time', 'datetime'];\n\nconst App: React.FC = () => {\n  const [dateValue, setDateValue] = React.useState<Date | Date[]>();\n  const [type, setType] = React.useState<DateType>('date');\n  const [isRange, setIsRange] = React.useState(true);\n  const [isConfirm, setIsConfirm] = React.useState(true);\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', gap: 24 }}>\n        <Radio.Group keygen button={'outline'} data={types} value={type} onChange={setType} />\n        <Checkbox value={isRange} onChange={(v) => setIsRange(!!v)} style={{ margin: 0 }}>\n          范围选择\n        </Checkbox>\n        <Checkbox value={isConfirm} onChange={(v) => setIsConfirm(!!v)} style={{ margin: 0 }}>\n          启用确认\n        </Checkbox>\n      </div>\n      <br />\n      <DatePicker\n        type={type}\n        defaultTime={['00:00:00', '23:59:59']}\n        range={isRange}\n        showSelNow\n        value={dateValue}\n        onChange={(v) => {\n          console.log('外部的onChange: ', v);\n          setDateValue(v);\n        }}\n        clearable\n        needConfirm={isConfirm}\n      />\n    </div>\n  );\n};\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "Disabled date picker",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用\n *    -- 日期选择框禁用状态\n * en - Disabled\n *    -- Disabled date picker\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst Now = Date.now();\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n    <DatePicker disabled={true} defaultValue={Now} width={240} />\n    <DatePicker range disabled={true} defaultValue={['2017-05-10', '2017-05-20']} width={240} />\n    <DatePicker range disabled={[false, true]} defaultValue={['2017-05-10', '2017-05-20']} width={240} />\n    <DatePicker range disabled={[true, false]} defaultValue={['2017-05-10', '2017-05-20']} width={240} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Disabled date",
        "description": "When `disabled` is a function, you can disable some date according to the return value",
        "scenario": "basic",
        "code": "/**\n * cn - 不可选取的时间\n *    -- 当 `disabled` 为函数时，可以根据返回值禁用某些时间\n * en - Disabled date\n *    -- When `disabled` is a function, you can disable some date according to the return value\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst Now = Date.now();\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', gap: '24px' }}>\n    <DatePicker\n      type='datetime'\n      inputable\n      defaultValue={Now}\n      disabled={(d) => {\n        return d.getDay() === 0 || d.getDay() === 6;\n      }}\n    />\n\n    <DatePicker\n      type='time'\n      defaultValue='14:30:30'\n      disabled={(d) => {\n        if (d.getHours() > 15) return true;\n        return false;\n      }}\n    />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- The disabledTime attribute supports separate disable time",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- disabledTime 属性支持单独禁用时间。\n * en -\n *    -- The disabledTime attribute supports separate disable time\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst Now = Date.now();\n\nconst App: React.FC = () => (\n  <div>\n    <DatePicker\n      type='datetime'\n      defaultValue={Now}\n      defaultTime='10:00:00'\n      disabledTime={(time) => time === '12:00:00'}\n    />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- Disable both special date and special time",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 同时禁用日期和时间\n * en -\n *    -- Disable both special date and special time\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <DatePicker\n      inputable\n      type='datetime'\n      defaultValue={'2023-10-12 12:00:00'}\n      style={{ marginInlineEnd: 12 }}\n      disabled={(d) => {\n        return d.getDay() === 0 || d.getDay() === 6;\n      }}\n      disabledTime={'11:00:00'}\n    />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Inputable",
        "description": "Set `inputable` to make date inputable",
        "scenario": "basic",
        "code": "/**\n * cn - 可输入\n *    -- 设置 `inputable` 使日期可输入\n * en - Inputable\n *    -- Set `inputable` to make date inputable\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n    <DatePicker inputable type=\"datetime\" />\n    <DatePicker type={'datetime'} inputable range absolute />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Absolute",
        "description": "If the parent container of the pop-up layer is occluded, you can set the absolute property to make the pop-up options rendered in a separate layer. (not recommended if not necessary)",
        "scenario": "basic",
        "code": "/**\n * cn - 绝对定位\n *    -- 如果选项弹出层的父容器被遮挡，可以设置 absolute 属性使弹出选项在单独层中渲染。（非必要情况下不建议）\n * en - Absolute\n *    -- If the parent container of the pop-up layer is occluded, you can set the absolute property to make the pop-up options rendered in a separate layer. (not recommended if not necessary)\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst Now = Date.now();\n\nconst App: React.FC = () => (\n  <div\n    style={{\n      padding: 10,\n      overflow: 'hidden',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '24px',\n    }}\n  >\n    <DatePicker\n      absolute\n      format='x'\n      type='datetime'\n      defaultValue={new Date()}\n      formatResult='YYYY-MM-DD HH:mm:ss'\n      width={240}\n    />\n    <DatePicker absolute inputable range defaultValue={['2018-05-25', '2018-06-05']} width={240} />\n    <DatePicker absolute type='time' defaultValue={Now} width={240} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "inner title",
        "description": "-- use innerTitle to display the inner title",
        "scenario": "basic",
        "code": "/**\n * cn - 内嵌标题\n *    -- 使用 innerTitle 展示内嵌标题\n * en - inner title\n *    -- -- use innerTitle to display the inner title\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n    <DatePicker size=\"small\" type='date' innerTitle='Select date' clearable showSelNow width={240} />\n    <DatePicker type='date' innerTitle='Select date' clearable showSelNow width={240} />\n    <DatePicker size=\"large\" type='date' innerTitle='Select date' clearable showSelNow width={240} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Position",
        "description": "Set `Position` can control the different position of DatePicker",
        "scenario": "basic",
        "code": "/**\n * cn - 弹出框位置\n *    -- 通过设置 `position` 指定弹出面板的位置。默认为自动\n * en - Position\n *    -- Set `Position` can control the different position of DatePicker\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst style = { width: 160 };\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', gap: 24, flexFlow: 'row wrap' }}>\n    <DatePicker style={style} type='date' placeholder='top-left' position='top-left' />\n    <DatePicker style={style} type='date' placeholder='top-right' position='top-right' />\n    <DatePicker style={style} type='date' placeholder='bottom-left' position='bottom-left' />\n    <DatePicker style={style} type='date' placeholder='bottom-right' position='bottom-right' />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "timeZone",
        "description": "set timeZone",
        "scenario": "basic",
        "code": "/**\n * cn - 时区\n *    -- 设置 timeZone\n * en - timeZone\n *    -- set timeZone\n */\nimport React, { useState } from 'react';\nimport { DatePicker, Select } from 'shineout';\n\nconst offsetList = new Array(26).fill(undefined).map((_, index) => {\n  const num = index - 12;\n  const abs = Math.abs(num);\n  const str = abs < 10 ? `0${abs}` : `${abs}`;\n  return `${num < 0 ? '-' : '+'}${str}`;\n});\n\nconst App: React.FC = () => {\n  const [tz, setTz] = useState('+08');\n  return (\n    <div>\n      <DatePicker\n        format='X'\n        timeZone={tz}\n        type='datetime'\n        defaultValue={new Date()}\n        placeholder='Select datetime'\n        onChange={(d) => console.log(d)}\n        formatResult='YYYY-MM-DD HH:mm:ss'\n      />\n      <Select\n        keygen\n        renderItem={(d) => d}\n        width={90}\n        value={tz}\n        data={offsetList}\n        onChange={(v) => setTz(v)}\n        style={{ marginInlineStart: 12 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Clearable",
        "description": "Could be clearable",
        "scenario": "basic",
        "code": "/**\n * cn - 可清空\n *    -- 允许清空内容\n * en - Clearable\n *    -- Could be clearable\n */\nimport React from 'react'\nimport { DatePicker } from 'shineout'\n\nconst App: React.FC = () => (\n  <div>\n    <DatePicker\n      clearable\n      defaultValue=\"2022-02-22\"\n      onChange={v => {\n        console.log(v)\n      }}\n      type=\"date\"\n      placeholder=\"Select date\"\n    />\n  </div>\n)\nexport default App\n"
      },
      {
        "title": "*    -- onChange get undefined while clear value",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 在清空值时抛出抛出 undefined\n * en -\n *    -- onChange get undefined while clear value\n */\nimport React, { useState } from 'react';\nimport { DatePicker, Input, TYPE } from 'shineout';\n\ntype DatePickerValue = TYPE.DatePicker.Value;\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<DatePickerValue>('2022-02-22');\n  return (\n    <div>\n      <DatePicker\n        clearable\n        type='date'\n        value={value}\n        clearWithUndefined\n        onChange={setValue}\n        style={{ marginBottom: 24 }}\n      />\n      <Input.Group style={{ width: 240 }} disabled>\n        <b>Value</b>\n        <Input value={String(value)} />\n      </Input.Group>\n    </div>\n  );\n};\nexport default App;\n"
      },
      {
        "title": "DefaultPickerValue",
        "description": "default date of panel，work under has no value",
        "scenario": "basic",
        "code": "/**\n * cn - 面板默认时间\n *    -- 打开面板后的默认时间，仅在未选择日期时生效\n * en - DefaultPickerValue\n *    -- default date of panel，work under has no value\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n    <DatePicker defaultPickerValue='2022-09' type='date' width={240} />\n\n    <DatePicker range type='date' defaultPickerValue={['2022-11', '2022-12']} width={240} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "allow single",
        "description": "can set range select only select single",
        "scenario": "basic",
        "code": "/**\n * cn - 允许单选\n *    -- 可以设置范围选择的时候只选择一侧.\n * en - allow single\n *    -- can set range select only select single\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => (\n  <DatePicker range allowSingle type='datetime' onChange={(d) => console.log(d)} />\n);\n\nexport default App;\n"
      },
      {
        "title": "Format",
        "description": "The format attribute defines the format of the return value",
        "scenario": "form",
        "code": "/**\n * cn - 格式化\n *    -- 传入值可为 日期对象，时间戳，字符串，通过format 属性可以定义返回值的格式.\n *    -- 支持通过 formatResult 属性单独格式化值展示格式.\n *    -- 注: 我们使用dayjs格式化\n * en - Format\n *    -- The format attribute defines the format of the return value\n *    -- support formatResult attribute to format the display format separately\n *    -- tip: we use dayjs format\n */\nimport React, { useState } from 'react';\nimport { DatePicker, Input, TYPE } from 'shineout';\n\ntype DatePickerProps = TYPE.DatePicker.Props;\ntype DatePickerValue = TYPE.DatePicker.Value;\ntype DatePickerFormat = DatePickerProps['format'];\n\ntype InputProps = TYPE.Input.Props;\ntype InputOnChange = InputProps['onChange'];\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<DatePickerValue>(new Date());\n  const [format, setFormat] = useState<DatePickerFormat>('YYYY-M-D HH:mm');\n  const [formatResult, setFormatResult] = useState<DatePickerFormat>('YY/MM/DD');\n  const [formatResultValue, setFormatResultValue] = useState<DatePickerValue>(new Date());\n\n  const handleFormatChange: InputOnChange = (v) => setFormat(v);\n\n  const handleFormatResultChange: InputOnChange = (v) => setFormatResult(v);\n\n  return (\n    <div>\n      <DatePicker\n        value={value}\n        format={format}\n        type='datetime'\n        placeholder='format date'\n        style={{ marginBottom: 24 }}\n        onChange={setValue}\n      />\n\n      <Input.Group width={240} style={{ marginBottom: 32 }}>\n        <Input style={{ flex: 1 }} value='format' disabled />\n        <Input\n          style={{ flex: 3 }}\n          placeholder='格式化'\n          value={format}\n          onChange={handleFormatChange}\n        />\n      </Input.Group>\n\n      <DatePicker\n        type='datetime'\n        format='YYYY-MM-DD HH:mm:ss'\n        placeholder='format date'\n        value={formatResultValue}\n        formatResult={formatResult}\n        onChange={setFormatResultValue}\n        style={{ marginBottom: 24 }}\n      />\n\n      <Input.Group width={240} style={{ marginBottom: 24 }} disabled>\n        <Input style={{ flex: 1 }} value='value' />\n        <Input style={{ flex: 3 }} placeholder='值' value={String(formatResultValue)} />\n      </Input.Group>\n\n      <Input.Group width={240}>\n        <Input style={{ flex: 3 }} value='formatResult' disabled />\n        <Input\n          style={{ flex: 4 }}\n          placeholder='展示格式化'\n          value={formatResult}\n          onChange={handleFormatResultChange}\n        />\n      </Input.Group>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "min max date",
        "description": "The basic usage",
        "scenario": "basic",
        "code": "/**\n * cn - 最大最小时间\n *    -- 可以通过设置 min/max 去设置一个选择时间的最大最小值. 推荐在单选且datetime 类型下使用\n * en - min max date\n *    -- The basic usage\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst Now = Date.now();\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n    <DatePicker type='datetime' min={Now} placeholder='Select min datetime' />\n\n    <DatePicker\n      min={Now}\n      type='datetime'\n      max={Now + 4 * 86400000}\n      placeholder='Select min/max datetime'\n    />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "controlled",
        "description": "value onChange",
        "scenario": "basic",
        "code": "/**\n * cn - 完全受控\n *    -- value onChange\n * en - controlled\n *    -- value onChange\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App = () => {\n  const [v, setV] = React.useState('');\n  return (\n    <DatePicker\n      type='date'\n      placeholder='Select date'\n      value={v}\n      onChange={(d: string) => {\n        console.log(d);\n        setV(d);\n      }}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "timepicker range max",
        "description": "timepicker max 和 range 一起使用导致禁用逻辑错误",
        "scenario": "basic",
        "code": "/**\n * cn - timepicker range max\n *    -- timepicker max 和 range 一起使用导致禁用逻辑错误\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst date = new Date('2022/02/24 23:59:59');\n\nconst App = () => (\n  <div>\n    <DatePicker\n      type='datetime'\n      defaultValue={['2022-02-17 00:00:00', '2022-02-24 00:00:00']}\n      range={7 * 24 * 3600}\n      style={{ marginTop: '12px' }}\n      placeholder='Select datetime'\n      max={date}\n    />\n  </div>\n);\nexport default App;\n"
      },
      {
        "title": "Dropdown list controlled by open property",
        "description": "The dropdown list of Datepicker controlled by open property",
        "scenario": "basic",
        "code": "/**\n * cn - 控制弹层（受控）\n *    -- DatePicker 通过 open 控制弹层的显示和隐藏。请注意，将面板设置成常开时，建议同时设置 position 属性，否则面板易遮挡其他内容。\n * en -  Dropdown list controlled by open property\n *    -- The dropdown list of Datepicker controlled by open property\n */\nimport React, { useState } from 'react';\nimport { DatePicker, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const [open, setOpen] = useState(false);\n  const handleClose = (close: boolean) => {\n    setOpen(close);\n  };\n  return (\n    <div style={{ display: 'flex' }}>\n      <Button id='control' onClick={() => setOpen(true)}>\n        Open elastic layer\n      </Button>\n      <DatePicker open={open} onCollapse={handleClose} type='date' placeholder='Select date' />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "focus blur 事件",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn - focus blur 事件\n */\n\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => (\n  <DatePicker\n    showSelNow\n    inputable\n    range\n    absolute\n    type={'date'}\n    onFocus={() => {\n      console.log('focus');\n    }}\n    onBlur={() => {\n      console.log('blur');\n    }}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Border style",
        "description": "Set the status property to change the border style",
        "scenario": "basic",
        "code": "/**\n * cn - 边框样式\n *    -- 设置 status 属性可以改变边框样式\n * en - Border style\n *    -- Set the status property to change the border style\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', gap: '24px' }}>\n    <DatePicker status='error' showSelNow onChange={(v) => console.log(v)} />\n    <DatePicker tip='i am a tip' onChange={(v) => console.log(v)} />\n    <DatePicker\n      tip='i am a tip'\n      error='something wrong'\n      popover\n      showSelNow\n      onChange={(v) => console.log(v)}\n    />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Remote Multi-language",
        "description": "Test getting multi-language data from remote",
        "scenario": "basic",
        "code": "/**\n * cn - 远程多语言\n *    -- 测试从远程获取多语言数据\n * en - Remote Multi-language\n *    -- Test getting multi-language data from remote\n */\nimport React, { useEffect } from 'react';\nimport { Radio, DatePicker, setLocale } from 'shineout';\n\nfunction  transData(data) {\n  // 拍平数据\n  if (!data || typeof data !== 'object') {\n    return data\n  }\n  const keys = Object.keys(data)\n  const lans = Object.keys(data[keys[0]]).filter(name => name!== 'nid')\n  const result = lans.reduce((result, lan)=> {\n    result[lan] = {}\n    return result\n  }, {})\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const myRe = /(^[^\\.^\\[]+)|(\\.([^\\.^\\[]+))|\\[([\\d]+?)\\]/g\n    let myArray;\n    let temp = {...result}\n    const path = lans.reduce((r, lan)=>{r[lan] = []; return r}, {})\n    while ((myArray = myRe.exec(key)) !== null) {\n      const  msg = myArray[0]\n      const isArr = msg[0] === '['\n      const name = msg.replace(/\\.|\\[|\\]/g, '')\n      const isLast = myRe.lastIndex === key.length\n      lans.forEach((lan)=>{\n        const before = path[lan].reduce((vv, kk) => {\n          if (!vv[kk]) {\n            vv[kk]= isArr ? [] : {}\n          }\n          return vv[kk]\n        }, temp[lan])\n        if (isLast) {\n          before[name] = data[key][lan]\n        } else {\n          path[lan].push(name)\n        }\n      })\n    }\n  }\n  return result\n}\n\nfunction handleWeek(data) {\n  if (!data) return\n  const lans = Object.keys(data)\n  lans.forEach((lan)=>{\n    const locale = data[lan]\n    locale.startOfWeek = Number(locale.startOfWeek)\n    const {long, narrow, short} = locale.weekdayValues\n    locale.weekdayValues.long = long.slice(locale.startOfWeek).concat(long.slice(0, locale.startOfWeek))\n    locale.weekdayValues.narrow = narrow.slice(locale.startOfWeek).concat(narrow.slice(0, locale.startOfWeek))\n    locale.weekdayValues.short = short.slice(locale.startOfWeek).concat(short.slice(0, locale.startOfWeek))\n  })\n\n}\ninterface getLocaleType{\n  (lan: string, config?: {version?: string, timeout?: number, project?: 'shineout' | 'shineout-mobile' | 'shineout-next'}) : Promise<unknown>\n}\nlet getLocale:getLocaleType\ngetLocale = function (lan: string, {version = 'latest', timeout= 5000, project = 'shineout'} = {}): Promise<unknown> {\n  return new Promise((resolve, reject) => {\n    let timer\n    if (!lan) {reject(new Error('语言必传'))}\n    if (window.XMLHttpRequest)\n    {\n      const xmlhttp: XMLHttpRequest = new window.XMLHttpRequest();\n      const nid = {\n        'shineout': 117,\n        'shineout-next': 117,\n        'shineout-mobile': 125\n      }[project] || 117\n\n      const url = 'https://assets.dotfashion.cn/webassets/babel_tower_snap/frontend/production/'+ nid + '/' + version +'/'+ lan +'.json'\n      xmlhttp.open(\"get\", url, true)\n      xmlhttp.onreadystatechange = function() {\n        if (xmlhttp.readyState==4 && xmlhttp.status==200)\n        {\n          if (timer) {clearTimeout(timer)}\n          const data  = JSON.parse(this.responseText);\n          if (data && data.code === 0) {\n            const ret = transData(data.data)\n            // shineout-next 不需要处理周数据\n            if (nid === 117 && project === 'shineout') {\n              handleWeek(ret)\n            }\n            resolve(ret[lan])\n          } else {\n            reject(new Error('获取数据异常'))\n          }\n        }\n      }\n      xmlhttp.onerror = function () {\n        reject(new Error('获取数据失败'))\n      }\n       timer = setTimeout(()=>{\n          xmlhttp.abort()\n          reject(new Error('请求数据超时 10s'))\n      }, timeout)\n      xmlhttp.send();\n    } else {\n      reject(new Error('浏览器版本过低无法加载语言包'))\n    }\n  })\n}\n\n\nconst App: React.FC = () => {\n  const [lang, setLang] = React.useState('CN')\n\n  useEffect(()=>{\n    getLocale(lang, {project: 'shineout-next'}).then((res)=>{\n      console.log('remote locale: >>', res)\n      setLocale(res)\n    })\n  }, [lang])\n\n\n  return <div>\n    <Radio.Group keygen data={['CN', 'US']} value={lang} onChange={(v) => setLang(v)}>\n\n    </Radio.Group>\n    <DatePicker showSelNow range onChange={(v) => console.log(v)} />\n  </div>\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 55,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 33
    }
  },
  "Descriptions": {
    "name": "Descriptions",
    "description": "一般用于详情页的信息展示",
    "category": "other",
    "importPath": "import { Descriptions } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示边框"
      },
      {
        "name": "extra",
        "type": "ReactNode",
        "required": false,
        "description": "扩展内容"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "描述标题"
      },
      {
        "name": "layout",
        "type": "\"horizontal\" | \"vertical\" | \"inlineHorizontal\" | \"inlineVertical\"",
        "required": false,
        "defaultValue": "\\\"inlineHorizontal\\\"",
        "description": "排列方式"
      },
      {
        "name": "colon",
        "type": "ReactNode",
        "required": false,
        "description": "标签后面的内容"
      },
      {
        "name": "tableLayout",
        "type": "\"auto\" | \"fixed\"",
        "required": false,
        "defaultValue": "\\\"auto\\\"",
        "description": "表格样式的layout-fixed,当设置为fixed时,宽度会被均分"
      },
      {
        "name": "items",
        "type": "ItemType[]",
        "required": false,
        "description": "描述项数组,描述项对象结构见下"
      },
      {
        "name": "labelStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "标签样式"
      },
      {
        "name": "valueStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "值样式"
      },
      {
        "name": "column",
        "type": "number | { xs?: number ; sm?: number ; md?: number ; lg?: number ; xl?: number ; xxl?: number ; xxxl?: number ; }",
        "required": false,
        "defaultValue": "3",
        "description": "每行放置的列的数量，一个数据为一列，可配置为数字或对象，当配置为对象格式时，支持响应式排列"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Basic usage of Descriptions",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 描述列表的基本样式\n * en - Basic\n *    -- Basic usage of Descriptions\n */\nimport React from 'react';\nimport { Descriptions } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n];\n\nexport default () => {\n  return (\n    <div style={{ marginBottom: '-12px' }}>\n      <Descriptions\n        items={data}\n        title='User Info'\n        colon={' :'}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "One Colums",
        "description": "One colums style of Descriptions",
        "scenario": "basic",
        "code": "/**\n * cn - 单列样式\n *    -- 单列的描述列表样式\n * en - One Colums\n *    -- One colums style of Descriptions\n */\nimport React from 'react';\nimport { Descriptions } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n];\n\nexport default () => {\n  return (\n    <>\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        column={1}\n        style={{ marginBottom: '12px' }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        column={1}\n        labelStyle={{ textAlign: 'end' }}\n      />\n    </>\n  );\n};\n"
      },
      {
        "title": "Label text alignment",
        "description": "The label text can be set to left-aligned, right-aligned, and can also be set to vertical style arrangement",
        "scenario": "basic",
        "code": "/**\n * cn - 标签文本对齐\n *    -- 标签文本可以设置左对齐、右对齐，也可以设置垂直的样式排列\n * en - Label text alignment\n *    -- The label text can be set to left-aligned, right-aligned, and can also be set to vertical style arrangement\n */\nimport React from 'react';\nimport { Descriptions } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n];\n\nexport default () => {\n  return (\n    <div style={{ marginBottom: '-12px' }}>\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        colon={<span style={{ paddingInlineStart: '4px' }}>:</span>}\n        style={{ marginBottom: '12px' }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        colon={<span style={{ paddingInlineStart: '4px' }}>:</span>}\n        labelStyle={{ textAlign: 'end' }}\n        style={{ marginBottom: '12px' }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='vertical'\n        colon={<span style={{ paddingInlineStart: '4px' }}>:</span>}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Show With Border",
        "description": "List with border and background color",
        "scenario": "basic",
        "code": "/**\n * cn - 带边框展示\n *    -- 带边框和背景颜色的列表\n * en - Show With Border\n *    -- List with border and background color\n */\nimport React from 'react';\nimport { Descriptions } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building,Zhichun Road,Beijing',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        border\n        tableLayout='fixed'\n        style={{ marginBottom: 24 }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        border\n        tableLayout='fixed'\n        labelStyle={{ textAlign: 'end' }}\n        style={{ marginBottom: 24 }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='vertical'\n        border\n        tableLayout='fixed'\n        column={4}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Arrangement",
        "description": "You can set the same width by tableLayout='fixed', and set different arrangement by layout, set border to show border",
        "scenario": "basic",
        "code": "/**\n * cn - 不同排列模式\n *    -- 可以通过tableLayout='fixed'设置等宽，通过layout设置不同的排列方式，设置border是否显示边框\n * en - Arrangement\n *    -- You can set the same width by tableLayout='fixed', and set different arrangement by layout, set border to show border\n */\nimport React from 'react';\nimport { Descriptions, Radio } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n];\n\ntype layoutType = 'horizontal' | 'vertical' | 'inlineHorizontal' | 'inlineVertical';\nconst layouts: layoutType[] = ['horizontal', 'vertical', 'inlineHorizontal', 'inlineVertical'];\n\ntype tableLayoutType = 'fixed' | 'auto';\nconst tableLayouts: tableLayoutType[] = ['auto', 'fixed'];\n\ninterface borderType {\n  label: string;\n  value: boolean;\n}\nconst borders: borderType[] = [\n  { label: 'no border', value: false },\n  { label: 'border', value: true },\n];\n\nexport default () => {\n  const [layout, setLayout] = React.useState<layoutType>('horizontal');\n  const [tableLayout, setTableLayout] = React.useState<tableLayoutType>('auto');\n  const [border, setBorder] = React.useState<boolean>(false);\n  return (\n    <div style={{ marginBottom: '-12px' }}>\n      <Radio.Group\n        data={layouts}\n        value={layout}\n        onChange={setLayout}\n        keygen\n        style={{ marginBottom: 24 }}\n      />\n      <Radio.Group\n        data={tableLayouts}\n        value={tableLayout}\n        onChange={setTableLayout}\n        keygen\n        style={{ marginBottom: 24 }}\n      />\n      <Radio.Group\n        data={borders}\n        format={'value'}\n        renderItem={'label'}\n        value={border}\n        onChange={setBorder}\n        keygen={'label'}\n        style={{ marginBottom: 24 }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        colon={<span style={{ paddingInlineStart: '4px' }}>:</span>}\n        layout={layout}\n        tableLayout={tableLayout}\n        border={border}\n        labelStyle={{\n          marginBottom: layout === 'inlineVertical' ? '2px' : '',\n          paddingBottom: layout === 'vertical' && !border ? '2px' : '',\n        }}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Different Size",
        "description": "Show Descriptions of different sizes",
        "scenario": "basic",
        "code": "/**\n * cn - 不同尺寸\n *    -- 展示不同尺寸下的描述列表\n * en - Different Size\n *    -- Show Descriptions of different sizes\n */\nimport React from 'react';\nimport { Descriptions, Radio } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building,Zhichun Road,Beijing',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n];\n\ntype SizeType = 'small' | 'default' | 'large' | undefined;\nconst Size: SizeType[] = ['small', 'default', 'large'];\n\nexport default () => {\n  const [size, setSize] = React.useState<SizeType>('default');\n  return (\n    <div>\n      <Radio.Group\n        data={Size}\n        value={size}\n        onChange={setSize}\n        keygen\n        style={{ marginBottom: 24 }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        colon={<span style={{ paddingLeft: '4px' }}>:</span>}\n        style={{ marginBottom: '12px' }}\n        size={size}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        labelStyle={{ textAlign: 'end' }}\n        size={size}\n        border\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Responsive",
        "description": "Responsive arrangement",
        "scenario": "basic",
        "code": "/**\n * cn - 响应式排列\n *    -- 支持响应式排列\n * en - Responsive\n *    -- Responsive arrangement\n */\nimport React from 'react';\nimport { Descriptions } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building,Zhichun Road,Beijing',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Descriptions\n        items={data}\n        title='User Info'\n        border\n        layout='horizontal'\n        labelStyle={{ textAlign: 'end' }}\n        column={{\n          xs: 1,\n          sm: 2,\n          md: 2,\n          lg: 2,\n          xl: 3,\n          xxl: 4,\n        }}\n      />\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 13,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 7
    },
    "subComponentApis": {}
  },
  "Divider": {
    "name": "Divider",
    "description": "分割线是一个呈线状的轻量化组件，起到分割、组织、细化的作用，用于有逻辑的组织元素内容和页面结构",
    "category": "layout",
    "importPath": "import { Divider } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "分割线中文字内容"
      },
      {
        "name": "mode",
        "type": "\"horizontal\" | \"vertical\"",
        "required": false,
        "defaultValue": "\\\"horizontal\\\"",
        "description": "分割线排布模式"
      },
      {
        "name": "orientation",
        "type": "\"center\" | \"left\" | \"right\"",
        "required": false,
        "defaultValue": "\\\"center\\\"",
        "description": "水平分割线的文字排布位置"
      },
      {
        "name": "type",
        "type": "\"solid\" | \"dashed\"",
        "required": false,
        "defaultValue": "\\\"solid\\\"",
        "description": "线段类型"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Divider is horizontal by default. You can add text within Divider",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    --默认为水平分割线\n * en - Base\n *    --Divider is horizontal by default. You can add text within Divider\n */\nimport React from 'react';\nimport { Divider } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ fontSize: 12 }}>\n    <p>A design is a plan or specification for the construction of an object.</p>\n    <Divider />\n    <p>A design is a plan or specification for the construction of an object.</p>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Dashed",
        "description": "Use type=\"dashed\" make it dashed",
        "scenario": "basic",
        "code": "/**\n * cn - 虚线分割\n *    --使用 `type`=\"dashed\" 设置为虚线分割线\n * en - Dashed\n *    --Use type=\"dashed\" make it dashed\n */\nimport React from 'react';\nimport { Divider } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ fontSize: 12 }}>\n    <p>A design is a plan or specification for the construction of an object.</p>\n    <Divider type='dashed' />\n    <p>A design is a plan or specification for the construction of an object.</p>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Divider with title",
        "description": "Divider with inner title, set orientation=\"left/right\" to align it",
        "scenario": "basic",
        "code": "/**\n * cn - 带文字的分割线\n *    -- 分割线中带有文字，可以用 orientation 指定文字位置\n * en - Divider with title\n *    --Divider with inner title, set orientation=\"left/right\" to align it\n */\nimport React from 'react';\nimport { Divider } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ fontSize: 12 }}>\n    <p>A design is a plan or specification for the construction of an object.</p>\n    <Divider>Center</Divider>\n    <p>A design is a plan or specification for the construction of an object.</p>\n    <Divider orientation={'left'}>Left</Divider>\n    <p>A design is a plan or specification for the construction of an object.</p>\n    <Divider orientation={'right'}>Right</Divider>\n    <p>A design is a plan or specification for the construction of an object.</p>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Vertical",
        "description": "Use type=\"vertical\" make it vertical",
        "scenario": "basic",
        "code": "/**\n * cn - 垂直分割线\n *    -- 使用 mode=\"vertical\" 设置为行内的垂直分割线\n * en - Vertical\n *    --Use type=\"vertical\" make it vertical\n */\nimport React from 'react';\nimport { Divider } from 'shineout';\n\nconst inlineStyle = {\n  display: 'inline-block',\n  lineHeight: '22px',\n  fontSize: 14,\n};\n\nconst App: React.FC = () => (\n  <>\n    <span style={inlineStyle}>Item 1</span>\n    <Divider mode='vertical'>H</Divider>\n    <span style={inlineStyle}>Item 2</span>\n    <Divider mode='vertical' />\n    <span style={inlineStyle}>Item 3</span>\n  </>\n);\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 6,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 4
    }
  },
  "Drawer": {
    "name": "Drawer",
    "description": "屏幕边缘滑出的浮层面板, 通常位于页面的侧栏或顶部菜单中，用于存储和显示交互的相关信息和菜单选项",
    "category": "feedback",
    "importPath": "import { Drawer } from 'shineout'",
    "props": [
      {
        "name": "position",
        "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
        "required": false,
        "defaultValue": "\\\"right\\\"",
        "description": "Pop-up position"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "defaultValue": "auto",
        "description": "the width of the Drawer"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "defaultValue": "auto",
        "description": "the height of the Drawer"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "hideMask",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否隐藏遮罩"
      },
      {
        "name": "forceMask",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否强制设置遮罩透明度（多层Modal中，除第一层外的其他弹出层遮罩透明度会被调整为0.01）"
      },
      {
        "name": "top",
        "type": "string | number",
        "required": false,
        "defaultValue": "10vh",
        "description": "弹框距离顶部距离"
      },
      {
        "name": "fullScreen",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否全屏展示"
      },
      {
        "name": "bodyStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "扩展弹出层 body 的样式"
      },
      {
        "name": "footer",
        "type": "ReactNode",
        "required": false,
        "description": "底部内容"
      },
      {
        "name": "maskCloseAble",
        "type": "boolean | null",
        "required": false,
        "defaultValue": "true",
        "description": "点击遮罩层是否关闭对话框, 设置为 null 右上角关闭图标会保留"
      },
      {
        "name": "padding",
        "type": "string | number",
        "required": false,
        "description": "内容内边距"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "弹出层的标题"
      },
      {
        "name": "visible",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1050",
        "description": "弹出层 z-index 值，注意：如果嵌套 Select 组件，并且 Select 组件含有 absolute 字段，需要修改 Select 的 z-index 的值"
      },
      {
        "name": "rootClassName",
        "type": "string",
        "required": false,
        "description": "弹出层的根元素类名, 为遮罩层的父元素"
      },
      {
        "name": "container",
        "type": "(() => HTMLElement | null) | HTMLElement | null",
        "required": false,
        "defaultValue": "document.body",
        "description": "渲染的目标节点"
      },
      {
        "name": "maskBackground",
        "type": "string",
        "required": false,
        "description": "遮罩背景色，设置后透明度将失效"
      },
      {
        "name": "onClose",
        "type": "(() => void)",
        "required": false,
        "description": "弹出层关闭回调"
      },
      {
        "name": "destroy",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "关闭时是否销毁元素"
      },
      {
        "name": "hideClose",
        "type": "boolean",
        "required": false,
        "description": "是否隐藏关闭按钮"
      },
      {
        "name": "type",
        "type": "\"success\" | \"info\" | \"warning\" | \"error\"",
        "required": false,
        "description": "弹出层 title 显示状态 icon，drawer模式下需配合title使用"
      },
      {
        "name": "zoom",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启 zoom 动画效果"
      },
      {
        "name": "esc",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否支持 esc 键关闭"
      },
      {
        "name": "events",
        "type": "object",
        "required": false,
        "defaultValue": "{}",
        "description": "外层元素所接受的事件列表，可用于在 createPortal 场景中阻止冒泡"
      },
      {
        "name": "resizable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可调整大小"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "弹出层内容"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "The basic usage for component",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的组件用法\n *    -- Drawer 会在 document.body 中创建一个新的层显示弹出内容\n *    -- 关闭 Drawer 时默认没有对组件进行销毁, 只是隐藏, 组件的状态会被保留。 如果不需要保留组件之前的状态, 可以设置 destroy 属性\n * en - Base\n *    -- The basic usage for component\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerVisible = DrawerProps['visible'];\ntype DrawerOnClose = DrawerProps['onClose'];\n\nconst App: React.FC = () => {\n  const [content, setContent] = useState(1);\n  const [visible, setVisible] = useState<DrawerVisible>(false);\n\n  const handleCancel: DrawerOnClose = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked cancel');\n  };\n\n  const handleOk = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked ok!');\n  };\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  return (\n    <div>\n      <Button onClick={show} mode=\"outline\">click me</Button>\n      <Drawer\n        width={400}\n        visible={visible}\n        title='Drawer Title'\n        onClose={handleCancel}\n        footer={[\n          <Button key='cancel' onClick={handleCancel} mode='outline'>\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleOk}>\n            Ok\n          </Button>,\n        ]}\n      >\n        {`you are visited ${content}`}\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Position",
        "description": "Set position property to specify the pop-up position",
        "scenario": "basic",
        "code": "/**\n * cn - 位置\n *    -- 通过 position 可设置 Drawer 弹出的位置, 现支持 top、right、bottom 和 left 四个位置配置\n * en - Position\n *    -- Set position property to specify the pop-up position\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Form, Input, Radio, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerPosition = DrawerProps['position'];\n\nconst positionList: DrawerPosition[] = ['right', 'top', 'bottom', 'left'];\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [position, setPosition] = useState<DrawerPosition>('right');\n\n  const toggle = (v: boolean) => {\n    setVisible(v);\n  };\n\n  const footer = () => (\n    <div>\n      <Button mode='outline' onClick={() => toggle(false)}>\n        Cancel\n      </Button>\n      <Drawer.Submit>Submit</Drawer.Submit>\n    </div>\n  );\n  return (\n    <div>\n      <Radio.Group\n        keygen\n        value={position}\n        data={positionList}\n        onChange={(p) => setPosition(p)}\n        style={{ marginBottom: 24 }}\n      />\n\n      <Button onClick={() => toggle(true)} mode=\"outline\">click me</Button>\n\n      <Drawer\n        title='Form'\n        key={position}\n        footer={footer()}\n        visible={visible}\n        position={position}\n        onClose={() => toggle(false)}\n      >\n        <Form\n          labelWidth={100}\n          labelAlign='right'\n          style={{ width: 500 }}\n          onSubmit={() => toggle(false)}\n        >\n          <Form.Item required label='Email'>\n            <Input name='email' />\n          </Form.Item>\n\n          <Form.Item required label='Password'>\n            <Input name='password' type='password' />\n          </Form.Item>\n        </Form>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Target",
        "description": "set container to render target node",
        "scenario": "basic",
        "code": "/**\n * cn - 指定目标\n *    -- 使用 container 来指定 Drawer 渲染的目标节点\n * en - Target\n *    -- set container to render target node\n */\nimport React, { useState } from 'react';\nimport { Button, Drawer, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerContainer = DrawerProps['container'];\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [wrapper, setWrapper] = useState<DrawerContainer>();\n\n  const handleDismiss = () => {\n    setVisible(false);\n  };\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  return (\n    <div ref={(ref) => setWrapper(ref!)}>\n      <Button onClick={show} mode=\"outline\">click me</Button>\n      <Drawer\n        width={400}\n        visible={visible}\n        container={wrapper}\n        title='Drawer Title'\n        onClose={handleDismiss}\n        footer={[\n          <Button key='cancel' onClick={handleDismiss} mode='outline'>\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleDismiss}>\n            Ok\n          </Button>,\n        ]}\n      >\n        Drawer mount after Button\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Form",
        "description": "The internal form of Drawer can use Drawer.Submit to trigger submit",
        "scenario": "form",
        "code": "/**\n * cn - 表单\n *    -- Drawer 支持 Form 表单，并且支持 Form 的所有特性，表单提交可以使用 Drawer.Submit 来代替 Button[type=submit]\n * en - Form\n *    --The internal form of Drawer can use Drawer.Submit to trigger submit\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Form, Input, Message, TYPE } from 'shineout';\n\ninterface FormValue {\n  email?: string;\n  password?: string;\n}\n\ntype FormProps = TYPE.Form.Props<FormValue>;\ntype FormRules = FormProps['rules'];\n\nconst rules: FormRules = {\n  email: [\n    { required: true, message: 'Please enter your email.' },\n    { type: 'email', message: 'Please enter a valid email.' },\n  ],\n  password: [\n    { required: true, message: 'Please enter password.' },\n    { min: 7, message: 'Password must be at least {min} characters.' },\n    { regExp: /[a-z]+/i, message: 'Password at least has one letter.' },\n    (value: string, _formData: any, callback: any) => {\n      if (/\\d+/.test(value)) callback(true);\n      else callback(new Error('Password at least has one numeral.'));\n    },\n  ],\n};\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const handleClose = () => {\n    setVisible(false);\n  };\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  const handleSubmit = (data: FormValue) => {\n    setVisible(false);\n    Message.success(JSON.stringify(data));\n  };\n\n  const renderFooter = () => (\n    <div>\n      <Button onClick={handleClose} mode='outline'>Cancel</Button>\n      <Drawer.Submit>Submit</Drawer.Submit>\n    </div>\n  );\n\n  return (\n    <div>\n      <Button onClick={show} mode=\"outline\">Drawer Form</Button>\n\n      <Drawer\n        visible={visible}\n        width={456}\n        title='Form'\n        onClose={handleClose}\n        footer={renderFooter()}\n      >\n        <Form\n          labelWidth={85}\n          rules={rules}\n          labelAlign='right'\n          onSubmit={handleSubmit}\n        >\n          <Form.Item required label='Email'>\n            <Input name='email' />\n          </Form.Item>\n\n          <Form.Item required label='Password'>\n            <Input name='password' type='password' />\n          </Form.Item>\n        </Form>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Close",
        "description": "By default, clicking on the blank page outside the Modal box will closes the Modal box",
        "scenario": "basic",
        "code": "/**\n * cn - 点击空白关闭\n *    -- 默认点击对话框外部空白页面会关闭对话框\n *    -- 设置 maskCloseAble 属性为 false，禁用点击空白关闭，同时右上角的关闭图标也会隐藏\n *    -- 设置 maskCloseAble 属性为 null，禁用点击空白关闭，右上角的关闭图标会保留\n * en - Close\n *    -- By default, clicking on the blank page outside the Modal box will closes the Modal box\n *    -- Set maskCloseAble to false to disable the function that click mask to close and the close icon in the upper right corner will be hidden at the same time\n *    -- Set maskCloseAbel to null to disable the function that click mask to close and the close icon in the upper right corner will be preserved\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Radio } from 'shineout';\n\nconst list: { title: string; value: boolean | null }[] = [\n  {\n    title: 'false',\n    value: false,\n  },\n  {\n    title: 'true',\n    value: true,\n  },\n  {\n    title: 'null',\n    value: null,\n  },\n];\n\nconst App: React.FC = () => {\n  const [selected, setSelected] = useState(list[0]);\n  const [visible, setVisible] = useState(false);\n\n  const footer = () => (\n    <Button mode='outline' onClick={() => setVisible(false)}>\n      Close\n    </Button>\n  );\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 24 }}>\n        <Radio.Group\n          data={list}\n          keygen='title'\n          value={selected}\n          renderItem='title'\n          onChange={(c) => setSelected(c)}\n          prediction={(v, d) => v.title === d.title}\n          style={{ marginInlineEnd: 20 }}\n        />\n      </div>\n\n      <Button onClick={() => setVisible(true)} mode=\"outline\">Open</Button>\n\n      <Drawer\n        width={400}\n        visible={visible}\n        footer={footer()}\n        title='Modal Title'\n        maskCloseAble={selected.value}\n        onClose={() => setVisible(false)}\n      >\n        The prop maskCloseAble is &nbsp;\n        {selected.title}\n        .\n        <br />\n        You must click the button to close the Modal.\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Full Screen",
        "description": "Use the fullScreen property to display the Drawer in full screen",
        "scenario": "basic",
        "code": "/**\n * cn - 全屏\n *    -- 使用 fullScreen 属性来使抽屉全屏展示\n * en - Full Screen\n *    -- Use the fullScreen property to display the Drawer in full screen\n */\nimport React, { useState, useCallback } from 'react';\n\nimport {\n  Form,\n  Drawer,\n  Button,\n  Input,\n  Upload,\n  Radio,\n  Checkbox,\n  DatePicker,\n  Rate,\n  Textarea,\n} from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst Content = () => {\n  return (\n    <div>\n      <Form\n        defaultValue={{ name: 'zhangsan', email: 'zhangsan@qq.com', score: 3 }}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='Name'>\n          <Input name={'name'} placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Password'>\n          <Input name={'password'} placeholder='please input password' clearable />\n        </Form.Item>\n        <Form.Item label='Email'>\n          <Input name={'email'} clearable placeholder='please input email' />\n        </Form.Item>\n        <Form.Item label='Gendar'>\n          <Radio.Group name='gendar' data={['male', 'female']} keygen />\n        </Form.Item>\n        <Form.Item label='Course'>\n          <Checkbox.Group name='course' data={['chinese', 'maths', 'english', 'physics']} keygen />\n        </Form.Item>\n        <Form.Item label='Enrollment date'>\n          <DatePicker name='date' placeholder={'please select date'} clearable showSelNow />\n        </Form.Item>\n        <Form.Item label='Score'>\n          <StarRate name='score'></StarRate>\n        </Form.Item>\n        <Form.Item label='upload avatar'>\n          <Upload.Image\n            action='/api/upload'\n            accept='image/*'\n            name='file'\n            htmlName='file'\n            recoverAble\n            leftHandler\n            removeConfirm='Are you sure to delete it ?'\n            limit={3}\n            onSuccess={(_res, filem, data) => {\n              return data;\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='Address'>\n          <Textarea name='address' />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const cancel = useCallback(() => {\n    setVisible(false);\n  }, [visible]);\n\n  const footer = () => (\n    <Button type='primary' onClick={cancel}>\n      OK\n    </Button>\n  );\n\n  return (\n    <div>\n      <Drawer title='Profile' fullScreen visible={visible} onClose={cancel} footer={footer()}>\n        <Content></Content>\n      </Drawer>\n      <Button onClick={() => setVisible(true)} mode=\"outline\">Full Screen</Button>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Icon",
        "description": "use type display type icon",
        "scenario": "basic",
        "code": "/**\n * cn - 附带图标\n *    -- 使用 type 属性来指定标题附带的图标，需配合title使用\n * en - Icon\n *    -- use type display type icon\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Radio, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerType = DrawerProps['type'];\n\nconst typeList: DrawerType[] = ['info', 'success', 'warning', 'error'];\n\nconst App: React.FC = () => {\n  const [type, setType] = useState<DrawerType>('success');\n  const [visible, setVisible] = useState(false);\n\n  const handleOk = () => {\n    setVisible(false);\n    console.log('clicked ok!');\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    console.log('clicked cancel');\n  };\n\n  const show = () => setVisible(true);\n\n  const footer = () => [\n    <Button key='cancel' onClick={handleCancel} mode=\"outline\">\n      Cancel\n    </Button>,\n\n    <Button key='ok' type={type === 'error' ? 'danger' : 'primary'} onClick={handleOk}>\n      Ok\n    </Button>,\n  ];\n\n  return (\n    <div>\n      <Radio.Group\n        style={{ marginBottom: 24 }}\n        data={typeList}\n        value={type}\n        keygen\n        onChange={setType}\n      />\n\n      <Button onClick={show} mode='outline' >\n        click me\n      </Button>\n\n      <Drawer\n        type={type}\n        width={500}\n        visible={visible}\n        footer={footer()}\n        onClose={handleCancel}\n        title={`Drawer Title with ${type} Icon`}\n      >\n        <span>Drawer type: </span>\n        <b>{type}</b>\n      </Drawer>\n    </div>\n  );\n};\nexport default App;\n"
      },
      {
        "title": "hide mask",
        "description": "use hideMask property to hide mask",
        "scenario": "basic",
        "code": "/**\n * cn - 隐藏遮罩\n *    -- 使用 hideMask 属性来隐藏遮罩\n * en - hide mask\n *    -- use hideMask property to hide mask\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const [content, setContent] = useState(1);\n  const [visible, setVisible] = useState<boolean>(false);\n\n  const handleCancel = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked cancel');\n  };\n\n  const handleOk = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked ok!');\n  };\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  return (\n    <div>\n      <Button onClick={show} mode=\"outline\">click me</Button>\n      <Drawer\n        width={400}\n        hideMask\n        visible={visible}\n        title='Drawer Title'\n        onClose={handleCancel}\n        footer={[\n          <Button key='cancel' onClick={handleCancel} mode='outline' >\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleOk}>\n            Ok\n          </Button>,\n        ]}\n      >\n        {`you are visited ${content}`}\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Resizable",
        "description": "Set resizable to resize Drawer freely",
        "scenario": "basic",
        "code": "/**\n * cn - 可伸缩\n *    -- 设置 resizable 来自由调整 Drawer 大小\n * en - Resizable\n *    -- Set resizable to resize Drawer freely\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Form, Input, Radio, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerPosition = DrawerProps['position'];\n\nconst positionList: DrawerPosition[] = ['right', 'top', 'bottom', 'left'];\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [position, setPosition] = useState<DrawerPosition>('right');\n\n  const toggle = (v: boolean) => {\n    setVisible(v);\n  };\n\n  const footer = () => (\n    <div>\n      <Button mode='outline' onClick={() => toggle(false)}>\n        Cancel\n      </Button>\n      <Drawer.Submit>Submit</Drawer.Submit>\n    </div>\n  );\n  return (\n    <div>\n      <Radio.Group\n        keygen\n        value={position}\n        data={positionList}\n        onChange={(p) => setPosition(p)}\n        style={{ marginBottom: 24 }}\n      />\n\n      <Button onClick={() => toggle(true)} mode=\"outline\">click me</Button>\n\n      <Drawer\n        title='Form'\n        key={position}\n        resizable\n        footer={footer()}\n        visible={visible}\n        position={position}\n        onClose={() => toggle(false)}\n      >\n        <Form\n          labelWidth={100}\n          labelAlign='right'\n          style={{ width: 500 }}\n          onSubmit={() => toggle(false)}\n        >\n          <Form.Item required label='Email'>\n            <Input name='email' />\n          </Form.Item>\n\n          <Form.Item required label='Password'>\n            <Input name='password' type='password' />\n          </Form.Item>\n        </Form>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [
      "Submit"
    ],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 28,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 9
    }
  },
  "Dropdown": {
    "name": "Dropdown",
    "description": "通常用于展示用户可供选择的选项，在操作选项较多时，可以将这些选项收纳起来",
    "category": "navigation",
    "importPath": "import { Dropdown } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "absolute",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
      },
      {
        "name": "type",
        "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "按钮类型"
      },
      {
        "name": "mode",
        "type": "\"text\" | \"outline\" | \"dashed\"",
        "required": false,
        "description": "按钮风格"
      },
      {
        "name": "shape",
        "type": "\"circle\" | \"round\" | \"square\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "设置按钮形状"
      },
      {
        "name": "onClick",
        "type": "((data: any) => void)",
        "required": false,
        "description": "点击事件。参数为渲染的数据,注: 如果数据内设置了onClick，会忽略此方法，调用data.onClick"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "禁用"
      },
      {
        "name": "placeholder",
        "type": "ReactNode",
        "required": false,
        "description": "按钮显示内容"
      },
      {
        "name": "adjust",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启自动调整面板位置功能。当面板被窗口遮挡时，自动调整位置"
      },
      {
        "name": "columns",
        "type": "number",
        "required": false,
        "description": "页面多元素展示,此属性需要依赖width属性,请合理的设置列数和宽度"
      },
      {
        "name": "animation",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启动画"
      },
      {
        "name": "data",
        "type": "object[]",
        "required": true,
        "defaultValue": "[]",
        "description": "下拉数据 详见 DropdownData"
      },
      {
        "name": "trigger",
        "type": "\"click\" | \"hover\"",
        "required": false,
        "defaultValue": "\\\"click\\\"",
        "description": "触发方式"
      },
      {
        "name": "width",
        "type": "number",
        "required": false,
        "description": "弹出选项层的宽度"
      },
      {
        "name": "position",
        "type": "| \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"left\" | \"right\" | \"top\" | \"bottom\" | \"auto\"",
        "required": false,
        "defaultValue": "\\\"bottom-left\\\"",
        "description": "弹出的方向和位置"
      },
      {
        "name": "renderItem",
        "type": "string | ((data: any) => ReactNode)",
        "required": false,
        "description": "设置显示的内容,如果是字符串,则为对应的值。如果是函数,则返回值为显示的内容,参数为当条数据"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "控制浮层显隐"
      },
      {
        "name": "onCollapse",
        "type": "((collapse: boolean) => void)",
        "required": false,
        "description": "下拉列表展开/收起回调"
      },
      {
        "name": "hideArrow",
        "type": "boolean",
        "required": false,
        "description": "隐藏箭头"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "description": "面板的 zIndex 值，默认为 1051",
        "version": "3.4.0"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Dropdown is rendered through data and supports json formatted data and React components",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- Dropdown 通过数据来渲染，支持 json 格式数据、React 组件\n * en - Base\n *   -- Dropdown is rendered through data and supports json formatted data and React components\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\nconst data: DropdownItem[] = [\n  {\n    content: 'Submenu',\n    children: [\n      {\n        content: 'Link to Google',\n        target: '_blank',\n        url: 'https://google.com',\n      },\n      {\n        content: <div style={{cursor: 'not-allowed'}}>Disabled</div>,\n        disabled: true,\n        children: [\n          { content: 'Child 1' },\n          { content: 'Child 2' },\n        ],\n      },\n    ],\n  },\n  <a key={'link'} href='/'>\n    Home\n  </a>,\n  {\n    content: 'Message',\n    onClick: () => {\n      console.info('Some message.');\n    },\n  },\n];\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Dropdown placeholder='Click me' data={data} onClick={console.log} />\n      <Dropdown placeholder='Click me' data={data} disabled />\n    </>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Trigger",
        "description": "By default, Dropdown toggled clicking, setting trigger=\"hover\" can toggled by mouse move in",
        "scenario": "basic",
        "code": "/**\n * cn - 触发方式\n *    -- Dropdown 默认通过点击触发下拉行为，设置 trigger=\"hover\" 属性可以改为移入触发\n * en - Trigger\n *    -- By default, Dropdown toggled clicking, setting trigger=\"hover\" can toggled by mouse move in\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\n\nconst menu: DropdownItem[] = [\n  { content: 'America' },\n  { content: 'Germany' },\n  { content: 'United Kingdom' },\n  { content: 'France' },\n  { content: 'Russia' },\n];\n\nconst App: React.FC = () => (\n  <>\n    <Dropdown trigger='click' placeholder='Click me' data={menu} />\n    <Dropdown trigger='hover' placeholder='Hover me' data={menu} />\n  </>\n);\n\nexport default App;\n"
      },
      {
        "title": "Position",
        "description": "Set position property can control the direction and position of the drop-down menu",
        "scenario": "basic",
        "code": "/**\n * cn - 弹出位置\n *    -- 设置 position 属性可以控制下拉菜单弹出的方向和位置\n * en - Position\n *    -- Set position property can control the direction and position of the drop-down menu\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\n\nconst menu: DropdownItem[] = [\n  {\n    content: 'First',\n    children: [\n      {\n        content: 'link1',\n      },\n      {\n        content: 'link2',\n      },\n    ],\n  },\n  {\n    content: 'Second',\n    children: [\n      {\n        content: 'link3',\n      },\n      {\n        content: 'link4',\n        children: [\n          {\n            content: 'link5',\n          },\n          {\n            content: 'link6',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App: React.FC = () => (\n  <div style={{ display: 'inline-flex', flexDirection: 'column', gap: 12 }}>\n    <div style={{ display: 'flex', justifyContent: 'center', gap: 12, padding: '0 120px' }}>\n      <Dropdown placeholder='Bottom left' position='bottom-left' data={menu} />\n      <Dropdown placeholder='Bottom' position='bottom' data={menu} />\n      <Dropdown placeholder='Bottom right' position='bottom-right' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <Dropdown placeholder='Right Top' position='right-top' data={menu} />\n      <Dropdown placeholder='Left Top' position='left-top' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <Dropdown placeholder='Right' position='right' data={menu} />\n      <Dropdown placeholder='Left' position='left' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <Dropdown placeholder='Right Bottom' position='right-bottom' data={menu} />\n      <Dropdown placeholder='Left Bottom' position='left-bottom' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'center', gap: 12 }}>\n      <Dropdown placeholder='Top Left' position='top-left' data={menu} />\n      <Dropdown placeholder='Top' position='top' data={menu} />\n      <Dropdown placeholder='Top right' position='top-right' data={menu} />\n    </div>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Button",
        "description": "Same as Button, support type text outline",
        "scenario": "basic",
        "code": "/**\n * cn - 按钮下拉\n *    -- 和 Button 属性相同, 支持 type text outline\n * en - Button\n *    -- Same as Button, support type text outline\n */\nimport React from 'react';\nimport { Dropdown } from 'shineout';\n\nconst menu: {\n  id: string;\n  content: string;\n}[] = [];\n\nfor (let i = 1; i <= 3; i++) {\n  menu.push({\n    id: `${i}`,\n    content: `item${i}`,\n  });\n}\n\nconst columnStyle: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'flex-start',\n  gap: 24,\n};\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', gap: 24 }}>\n    <div style={columnStyle}>\n      <Dropdown data={menu} type={'primary'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'secondary'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'danger'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'warning'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'success'} placeholder={'Default'} />\n    </div>\n    <div style={columnStyle}>\n      <Dropdown data={menu} type={'primary'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'secondary'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'danger'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'warning'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'success'} placeholder={'Outline'} outline />\n    </div>\n    <div style={columnStyle}>\n      <Dropdown data={menu} type={'primary'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'secondary'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'danger'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'warning'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'success'} placeholder={'Text'} text />\n    </div>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Multi-level",
        "description": "Dropdown with multiple levels of menu, set the children property in data",
        "scenario": "basic",
        "code": "/**\n * cn - 多级菜单\n *    -- 带有多个下钻层级菜单的下拉框, 在 data 中设置 children 属性即可\n * en - Multi-level\n *   -- Dropdown with multiple levels of menu, set the children property in data\n */\nimport React from 'react';\nimport { Dropdown } from 'shineout';\n\nconst menu = new Array(5).fill(null).map((_, index) => ({\n  id: `${index}`,\n  content: `item${index}`,\n  children: new Array(5).fill(null).map((_, i) => ({\n    id: `${index}-${i}`,\n    content: `item${index}-${i}`,\n  })),\n}));\n\nconst App: React.FC = () => <Dropdown data={menu} placeholder={'Click me'} />;\n\nexport default App;\n"
      },
      {
        "title": "Group",
        "description": "Add a group to the menu by setting group in the data item",
        "scenario": "basic",
        "code": "/**\n * cn - 分组菜单\n *    -- 通过在数据项配置 group 可以在菜单中添加分组\n * en - Group\n *   -- Add a group to the menu by setting group in the data item\n */\nimport React from 'react';\nimport { Dropdown } from 'shineout';\n\nconst menu = new Array(4).fill(null).map((_, index) => ({\n  id: `${index}`,\n  content: `item${index}`,\n  group: index % 2 === 0 ? `group${index / 2}` : undefined,\n}));\n\nconst App: React.FC = () => <Dropdown data={menu} placeholder={'Group Menu'} absolute />;\n\nexport default App;\n"
      },
      {
        "title": "Divider",
        "description": "Add a divider to the menu by setting divider:true in the data item",
        "scenario": "basic",
        "code": "/**\n * cn - 带分割线下拉菜单\n *    -- 通过在数据项配置 divider:true 可以在菜单中添加分割线\n * en - Divider\n *    -- Add a divider to the menu by setting divider:true in the data item\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\n\nconst menu: DropdownItem[] = [\n  {\n    content: 'First',\n  },\n  {\n    content: 'Second',\n  },\n  {\n    content: 'Third',\n    divider: true,\n  },\n  {\n    content: 'Fourth',\n  },\n];\n\nconst App: React.FC = () => (\n  <Dropdown data={menu} placeholder={'Dividing Line'} position='bottom-left' />\n);\n\nexport default App;\n"
      },
      {
        "title": "Multiple columns",
        "description": "Set columns property can make the option multi-column tiled",
        "scenario": "basic",
        "code": "/**\n * cn - 多列平铺下拉菜单\n *    -- 设置 columns 属性可以让选项多列平铺\n * en - Multiple columns\n *    -- Set columns property can make the option multi-column tiled\n */\nimport React from 'react';\nimport { Dropdown } from 'shineout';\n\nconst menu = new Array(30).fill(null).map((_, index) => ({\n  id: `${index}`,\n  content: <div style={{textAlign: 'left'}}>{`item${index}`}</div>,\n}));\n\nconst App: React.FC = () => (\n  <Dropdown placeholder='Tiling Menu' width={500} columns={5} data={menu} />\n);\n\nexport default App;\n"
      },
      {
        "title": "Dropdown with icon",
        "description": "Content can pass ReactNode to render complex content",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义渲染\n *    -- content 可以传 ReactNode 来渲染复杂的内容，包括图标\n * en - Dropdown with icon\n *    -- Content can pass ReactNode to render complex content\n */\nimport React from 'react';\nimport { Dropdown } from 'shineout';\nimport FontAwesome from './Icon';\n\nconst menu = new Array(5).fill(null).map((_, index) => ({\n  id: `${index}`,\n  content: (\n    <div style={{ display: 'flex', alignItems: 'center' }}>\n      <FontAwesome name={'user-o'} style={{color: '#666C7C', width: 14}} /> <span style={{ marginInlineStart: 8 }}>{`item${index}`}</span>\n    </div>\n  ),\n}));\n\nconst App: React.FC = () => <Dropdown placeholder='Icon Menu' data={menu} />;\n\nexport default App;\n"
      },
      {
        "title": "Size",
        "description": "Set the size of the dropdown menu through size",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 通过 size 设置下拉菜单的尺寸\n * en - Size\n *    -- Set the size of the dropdown menu through size\n */\nimport React from 'react';\nimport { Dropdown } from 'shineout';\n\nconst menu = new Array(4).fill(null).map((_, index) => ({\n  id: `${index}`,\n  content: `item${index}`,\n}));\n\nconst marginStyle = { marginInlineEnd: 24 };\nconst App: React.FC = () => (\n  <div>\n    {['small', 'default', 'large'].map((size: any) => (\n      <Dropdown\n        outline\n        type={'primary'}\n        key={size}\n        data={menu}\n        placeholder='Dropdown'\n        size={size}\n        style={marginStyle}\n      />\n    ))}\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Group",
        "description": "Dropdown can be combined with Button used in Button.Group",
        "scenario": "basic",
        "code": "/**\n * cn - 组合下拉\n *    -- 在 Button.Group 中组合使用，通常用于隐藏一组按钮中不太常用的选项\n * en - Group\n *    -- Dropdown can be combined with Button used in Button.Group\n */\nimport React from 'react';\nimport { Button, Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\n\nconst menu: DropdownItem[] = [\n  {\n    content: 'First',\n  },\n  {\n    content: 'Second',\n    target: '_blank',\n    url: 'http://www.google.com',\n  },\n];\n\nconst App: React.FC = () => (\n  <>\n    <Button.Group mode={'outline'} type={'secondary'} style={{ marginInlineEnd: 24 }}>\n      <Button>Option</Button>\n      <Button>Option</Button>\n      <Dropdown\n        data={menu}\n        position='bottom-right'\n        onClick={(data: any) => console.info(`The Dropdown clicked ${data.content}.`)}\n      />\n    </Button.Group>\n    <Button.Group type={'secondary'}>\n      <Button>Option</Button>\n      <Button>Option</Button>\n      <Dropdown\n        data={menu}\n        position='bottom-right'\n        onClick={(data: any) => console.info(`The Dropdown clicked ${data.content}.`)}\n      />\n    </Button.Group>\n  </>\n);\n\nexport default App;\n"
      },
      {
        "title": "Absolute",
        "description": "If the parent container of the pop-up layer is occluded, you can set the absolute property to make the pop-up options rendered in a separate layer",
        "scenario": "basic",
        "code": "/**\n * cn - 绝对定位\n *    -- 如果选项弹出层的父容器被遮挡，可以设置 absolute 属性使弹出选项在单独层中渲染\n * en - Absolute\n *    -- If the parent container of the pop-up layer is occluded, you can set the absolute property to make the pop-up options rendered in a separate layer\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\n\nconst data: DropdownItem[] = [\n  {\n    content:\n      'SubMenu',\n    children: [\n      {\n        content: 'Link to Google',\n        target: '_blank',\n        url: 'https://google.com',\n      },\n      {\n        content: <div style={{cursor: 'not-allowed'}}>Disabled</div>,\n        disabled: true,\n      },\n    ],\n  },\n  <a href='/' key={'home'}>\n    Home\n  </a>,\n  {\n    content: 'Message',\n    onClick: () => {\n      console.info('Some message.');\n    },\n  },\n];\n\nconst App: React.FC = () => (\n  <div style={{ background: '#eee', padding: 20, borderRadius: 4, overflow: 'hidden' }}>\n    <Dropdown\n      mode=\"outline\"\n      type={'primary'}\n      absolute\n      placeholder='Absolute'\n      data={data}\n    />\n\n    <Dropdown\n      outline\n      type={'primary'}\n      placeholder='Default'\n      data={data}\n      style={{ marginInlineStart: 24 }}\n    />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Controlled",
        "description": "Component controlled by open property",
        "scenario": "basic",
        "code": "/**\n * cn - 控制弹层（受控）\n *    -- Dropdown 通过 open 控制弹层的显示和隐藏\n * en - Controlled\n *    -- Component controlled by open property\n */\nimport React, { useState } from 'react';\nimport { Button, Dropdown } from 'shineout';\n\nconst menu = new Array(4).fill(null).map((_, index) => ({\n  id: `${index}`,\n  content: `item${index}`,\n}));\n\nconst App: React.FC = () => {\n  const [show, setShow] = useState(false);\n\n  const handleCollapse = (collapsed: boolean) => {\n    setShow(collapsed);\n    console.log('控制弹层（受控）:', collapsed);\n  };\n  return (\n    <div style={{ height: 150 }}>\n      <Button onClick={() => setShow(true)} style={{ marginInlineEnd: 24 }}>\n        Open elastic layer\n      </Button>\n      <Dropdown onCollapse={handleCollapse} open={show} placeholder='Dropdown' data={menu} />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "no-placeholder",
        "description": "no-placeholder",
        "scenario": "basic",
        "code": "/**\n * cn - no-placeholder\n *    -- no-placeholder\n * en - no-placeholder\n *   -- no-placeholder\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\nconst moreIcon = <svg viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" style={{display: 'block'}}>\n<path d=\"M4.00195 10C5.10652 10 6.00195 10.8954 6.00195 12C6.00195 13.1046 5.10652 14 4.00195 14C2.89738 14 2.00195 13.1046 2.00195 12C2.00195 10.8954 2.89738 10 4.00195 10ZM12.002 10C13.1065 10 14.002 10.8954 14.002 12C14.002 13.1046 13.1065 14 12.002 14C10.8974 14 10.002 13.1046 10.002 12C10.002 10.8954 10.8974 10 12.002 10ZM20.002 10C21.1065 10 22.002 10.8954 22.002 12C22.002 13.1046 21.1065 14 20.002 14C18.8974 14 18.002 13.1046 18.002 12C18.002 10.8954 18.8974 10 20.002 10Z\"></path>\n</svg>\n\ntype DropdownItem = TYPE.Dropdown.Item;\nconst data: DropdownItem[] = [\n  {\n    content: 'Submenu',\n    children: [\n      {\n        content: 'Link to Google',\n        target: '_blank',\n        url: 'https://google.com',\n      },\n      {\n        content: 'Disabled',\n        disabled: true,\n      },\n    ],\n  },\n  <a key={'link'} href='/'>\n    Home\n  </a>,\n  {\n    content: 'Message',\n    onClick: () => {\n      console.info('Some message.');\n    },\n  },\n];\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Dropdown data={data} placeholder=\"Default\" />\n      <Dropdown data={data} placeholder={moreIcon} buttonShape=\"circle\" hideArrow />\n    </>\n  );\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 22,
      "requiredProps": 1,
      "propsWithWhen": 0,
      "examplesCount": 14
    },
    "subComponentApis": {}
  },
  "Empty": {
    "name": "Empty",
    "description": "空状态时的展示占位图",
    "category": "other",
    "importPath": "import { Empty } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "imgSrc",
        "type": "string",
        "required": false,
        "description": "空状态图片地址,优先级高于icon"
      },
      {
        "name": "icon",
        "type": "ReactNode",
        "required": false,
        "description": "空状态图标"
      },
      {
        "name": "description",
        "type": "ReactNode",
        "required": false,
        "description": "描述,若为false则不显示描述"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "The basic usage of Empty",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 空状态组件的基础用法\n * en - Basic\n *    -- The basic usage of Empty\n */\nimport React from 'react';\nimport { Empty } from 'shineout';\n\nexport default () => {\n  return <Empty></Empty>;\n};\n"
      },
      {
        "title": "Custom icon and description",
        "description": "Set the `icon` and `description` property to customize the icon and description",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义图标和文案\n *    -- 设置`icon`和`description`属性可以自定义图标和文案\n * en - Custom icon and description\n *    -- Set the `icon` and `description` property to customize the icon and description\n */\nimport React from 'react';\nimport { Empty } from 'shineout';\nimport { customIcon } from './static/icon';\n\nexport default () => {\n  return <Empty icon={customIcon} description='No network'></Empty>;\n};\n"
      },
      {
        "title": "Custom image",
        "description": "Set the `imgSrc` parameter to the Url of the image",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义图片\n *    -- 设置`imgSrc`参数传入图片的Url\n * en - Custom image\n *    -- Set the `imgSrc` parameter to the Url of the image\n */\nimport React from 'react';\nimport { Empty, Button } from 'shineout';\n\nexport default () => {\n  const renderDescription = () => {\n    return <Button type='primary'>Refresh</Button>;\n  };\n  return (\n    <Empty\n      imgSrc='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n      description={renderDescription()}\n    ></Empty>\n  );\n};\n"
      },
      {
        "title": "Status",
        "description": "The recommended status type of Empty",
        "scenario": "basic",
        "code": "/**\n * cn - 推荐状态\n *    -- 推荐空状态的类型\n * en - Status\n *    -- The recommended status type of Empty\n */\nimport React from 'react';\nimport { Message } from 'shineout';\nimport {\n  noData,\n  noResult,\n  noAuth,\n  noInternet,\n  web404,\n  error,\n  noDataColorful,\n  noResultColorful,\n  noAuthColorful,\n  noInternetColorful,\n  web404Colorful,\n  errorColorful,\n} from './static/icon';\n\nexport default () => {\n  const handleCopy = (id: string) => {\n    const icon = document.getElementById(id)!.innerHTML;\n    navigator?.clipboard?.writeText(icon);\n    Message.success('svg copied successfully', 1, {\n      hideClose: true,\n    });\n  };\n\n  const renderIcon = (icon: React.ReactNode, id: string, name: string) => {\n    return (\n      <div style={{ width: 100, cursor: 'pointer' }} onClick={() => handleCopy(id)}>\n        <div id={id}>{icon}</div>\n        <div\n          style={{\n            fontSize: 14,\n            color: '#999DA8',\n            lineHeight: '20px',\n            textAlign: 'center',\n            marginTop: 8,\n          }}\n        >\n          {name}\n        </div>\n      </div>\n    );\n  };\n  return (\n    <div>\n      <div\n        style={{\n          marginBottom: 32,\n          display: 'flex',\n          gap: 32,\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n        }}\n      >\n        {renderIcon(noData, 'noData', 'No data')}\n        {renderIcon(noResult, 'noResult', 'Search results are empty')}\n        {renderIcon(noAuth, 'noAuth', 'No permission yet')}\n        {renderIcon(noInternet, 'noInternet', 'No network')}\n        {renderIcon(web404, 'web404', '404')}\n        {renderIcon(error, 'error', 'Failed to load')}\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          gap: 32,\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n        }}\n      >\n        {renderIcon(noDataColorful, 'noDataColorful', 'No data')}\n        {renderIcon(noResultColorful, 'noResultColorful', 'Search results are empty')}\n        {renderIcon(noAuthColorful, 'noAuthColorful', 'No permission yet')}\n        {renderIcon(noInternetColorful, 'noInternetColorful', 'No network')}\n        {renderIcon(web404Colorful, 'web404Colorful', '404')}\n        {renderIcon(errorColorful, 'errorColorful', 'Failed to load')}\n      </div>\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 5,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 4
    }
  },
  "Form": {
    "name": "Form",
    "description": "用以收集、校验和提交数据，一般由输入框、单选框、复选框、选择器等控件组成",
    "category": "other",
    "importPath": "import { Form } from 'shineout'",
    "props": [
      {
        "name": "value",
        "type": "object",
        "required": false,
        "description": "设置后表单变为受控组件，需要配合 onChange 使用。适用于需要外部管理表单状态的场景，如跨组件共享表单数据、实时同步表单数据到状态管理器等"
      },
      {
        "name": "onChange",
        "type": "((value: T) => void)",
        "required": false,
        "description": "在受控模式下必须设置此函数来更新外部状态。每当表单内任意字段值改变时都会触发，参数为整个表单的最新数据"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "Form 内容"
      },
      {
        "name": "labelWidth",
        "type": "string | number",
        "required": false,
        "defaultValue": "140px",
        "description": "标签宽度，labelAlign 为 \\\"top\\\" 时无效。统一设置表单项标签的宽度。可以是具体像素值（如 \\\"140px\\\"）或百分比（如 \\\"30%\\\"）。当标签顶部对齐时此配置无效。用于保持表单整齐的视觉效果，确保所有表单项的输入区域左对齐"
      },
      {
        "name": "labelAlign",
        "type": "\"left\" | \"right\" | \"top\"",
        "required": false,
        "description": "默认为空，跟随主题样式。标签的对齐方式。\\\"left\\\" 左对齐，\\\"right\\\" 右对齐，\\\"top\\\" 顶部对齐。不同的对齐方式适用于不同的表单布局需求：\\\"right\\\" 适合传统表单布局，\\\"top\\\" 适合移动端或紧凑布局，\\\"left\\\" 适合特殊设计需求"
      },
      {
        "name": "labelVerticalAlign",
        "type": "\"top\" | \"bottom\" | \"middle\"",
        "required": false,
        "defaultValue": "\\\"top\\\"",
        "description": "默认顶部对齐。标签的垂直对齐方式。当标签和输入框在同一行时（labelAlign 为 \\\"left\\\" 或 \\\"right\\\"），控制标签相对于输入框的垂直位置。\\\"top\\\" 与输入框顶部对齐，\\\"middle\\\" 居中对齐，\\\"bottom\\\" 与输入框底部对齐"
      },
      {
        "name": "keepErrorHeight",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "单行错误提示不撑开页面高度。保持错误提示高度固定，避免错误信息出现/消失时页面抖动。开启后会预留错误信息的显示空间，确保表单高度稳定。适用于对布局稳定性要求较高的场景，如表单项较多的长表单。注意：当 keepErrorBelow 为 true 时，此配置会失效"
      },
      {
        "name": "keepErrorBelow",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否保持错误信息在提示信息下方。控制错误信息的显示位置。开启后错误信息始终显示在表单项的 tip 属性下方，保持布局的一致性。关闭时错误信息可能会覆盖 tip 信息。适用于同时需要显示提示信息和错误信息的场景。注意：开启后会使 keepErrorHeight 失效",
        "version": "3.7.0"
      },
      {
        "name": "inline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否水平布局。将表单项横向排列，适用于简单的单行表单或筛选表单。开启后表单项会在同一行显示，自动换行。通常用于搜索条件、筛选器等需要节省垂直空间的场景"
      },
      {
        "name": "colon",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "false",
        "description": "统一控制所有表单项标签后是否显示冒号。可以是布尔值（true 显示默认冒号 \\\":\\\"）或自定义的 ReactNode（如 \\\"：\\\"、\\\"->\\\"等）。Form.Item 上的 colon 属性优先级更高，可以覆盖此全局设置",
        "version": "3.6.0"
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": "表单的唯一标识名称。设置后会作为所有表单字段 id 的前缀，确保多个表单共存时 id 不冲突。同时启用 formRef.scrollToField 方法，可以通过字段名称快速定位到指定字段",
        "version": "3.5.3"
      },
      {
        "name": "defaultValue",
        "type": "T",
        "required": false,
        "description": "非受控模式下的表单初始值。仅在组件首次渲染时生效，后续修改不会影响表单内部数据。适用于表单数据由组件内部管理的场景，如新建表单、独立表单等"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "设置为 true 时，表单内所有组件的 reserveAble 都为 true : 卸载后不自动删除数据。控制表单项卸载时是否保留数据。适用于标签页切换、条件渲染等场景，避免用户填写的数据丢失。开启后即使表单项被隐藏或卸载，其数据仍会保留在表单中。可在 Form.Field 组件或支持的表单组件（如 Input、Select、DatePicker 等）上单独设置覆盖此全局配置",
        "version": "3.5.0"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "表单级别的校验规则配置。支持嵌套对象的规则定义，可以为表单的任意字段设置校验规则。规则对象的 key 对应表单字段路径（如 \\\"name\\\"、\\\"user.email\\\"、\\\"list[0].id\\\"），value 为该字段的校验规则数组（FormItemRule）。这些规则会与 Form.Field 组件上设置的 rules 属性合并，Form 级别的规则会先执行。规则类型请参考 Rule 组件文档"
      },
      {
        "name": "onError",
        "type": "((error: Error) => void)",
        "required": false,
        "description": "校验规则触发时的错误回调函数。当任意字段校验失败时调用，参数为错误对象。可用于统一处理校验错误，如记录日志、显示全局通知、上报错误等"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用，为 true 时，表单内所有元素 disabled 都为 true。全局控制表单的禁用状态。适用于查看详情、提交中等需要临时禁用整个表单的场景。表单内所有受控组件（如 Input、Select、DatePicker 等）都会继承此属性"
      },
      {
        "name": "onReset",
        "type": "(() => void)",
        "required": false,
        "description": "表单重置时的回调函数。在表单被重置为初始值（defaultValue 或空值）后触发。可用于执行额外的重置逻辑，如清除关联状态、重置相关组件等。配合 Form.Reset 按钮或 formRef.reset() 方法使用"
      },
      {
        "name": "onSubmit",
        "type": "((value: T) => void)",
        "required": false,
        "description": "表单提交时的回调函数。只有当所有字段校验通过后才会调用，参数为完整的表单数据。通常用于处理表单数据的提交逻辑，如发送请求到服务器。可配合 Form.Submit 按钮或 formRef.submit() 方法触发"
      },
      {
        "name": "size",
        "type": "\"default\" | \"small\" | \"large\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "表单元素的尺寸。统一设置表单内所有组件的尺寸。支持 \\\"small\\\"、\\\"default\\\"、\\\"large\\\" 三种规格，影响输入框高度、字体大小等。表单内的受控组件会继承此属性，也可以在具体组件上单独覆盖"
      },
      {
        "name": "initValidate",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "当表单 value 发生变化时，是否自动触发校验。开启后可以在数据变化时实时显示校验结果，适用于需要即时反馈的场景。注意：仅在受控模式下有效"
      },
      {
        "name": "scrollToError",
        "type": "number | boolean",
        "required": false,
        "defaultValue": "false",
        "description": "校验失败时是否滚动到第一个校验失败组件，该值为数字时，表示相对于顶部的偏移量"
      },
      {
        "name": "removeUndefined",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "提交表单时是否自动移除值为 undefined 的字段。开启后可以避免提交无意义的空值，保持数据整洁。特别适用于与后端 API 对接时，避免传递不必要的 undefined 值"
      },
      {
        "name": "throttle",
        "type": "number",
        "required": false,
        "defaultValue": "1000",
        "description": "防止用户频繁点击提交按钮的节流时间。在此时间内重复点击提交将被忽略，有效避免重复提交问题。适用于网络请求较慢或处理时间较长的场景"
      },
      {
        "name": "scrollParent",
        "type": "(() => HTMLElement | null)",
        "required": false,
        "description": "指定滚动容器元素。当表单不在 document.body 直接滚动时（如在弹窗、抽屉中），需要指定实际的滚动容器以确保正确滚动到错误位置。返回 null 时使用默认滚动行为"
      },
      {
        "name": "formRef",
        "type": "((form: FormRef<V>) => void) | { current?: FormRef<V> ; }",
        "required": false,
        "description": "获取表单实例的引用。支持函数回调和 ref 对象两种方式。通过 formRef 可以调用表单的各种方法，如手动触发校验（validate、validateFields）、提交（submit）、重置（reset）、获取/设置值（getValue、set）等。FormRef<V> 中的泛型 V 表示表单数据的类型"
      },
      {
        "name": "setForm",
        "type": "((form: FormRef<V>) => void)",
        "required": false,
        "description": "在使用 Form.useForm() hooks 时，用于设置表单引用的回调函数。通常不需要手动设置，Form 组件会自动处理。但在某些特殊场景（如跨组件通信）可能需要使用"
      }
    ],
    "examples": [
      {
        "title": "Basic usage",
        "description": "The form has built-in two-way binding mechanism, which automatically issues and collects data based on the name attribute of the form element",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 表单内置了类似双向绑定的机制，根据表单元素的 name 属性自动下发、收集数据\n * en - Basic usage\n *    -- The form has built-in two-way binding mechanism, which automatically issues and collects data based on the name attribute of the form element\n */\n\nimport { Form, Input, Upload, Radio, Checkbox, DatePicker, Rate, Textarea } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nexport default () => {\n  return (\n    <div>\n      <Form\n        defaultValue={{ name: 'zhangsan', email: 'zhangsan@qq.com', score: 3 }}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='Name'>\n          <Input name={'name'} placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Password'>\n          <Input name={'password'} placeholder='please input password' clearable />\n        </Form.Item>\n        <Form.Item label='Email'>\n          <Input name={'email'} clearable placeholder='please input email' />\n        </Form.Item>\n        <Form.Item label='Gendar'>\n          <Radio.Group name='gendar' data={['male', 'female']} keygen />\n        </Form.Item>\n        <Form.Item label='Course'>\n          <Checkbox.Group name='course' data={['chinese', 'maths', 'english', 'physics']} keygen />\n        </Form.Item>\n        <Form.Item label='Enrollment date'>\n          <DatePicker name='date' placeholder={'please select date'} clearable showSelNow />\n        </Form.Item>\n        <Form.Item label='Score'>\n          <StarRate name='score'></StarRate>\n        </Form.Item>\n        <Form.Item label='upload avatar'>\n          <Upload.Image\n            action='/api/upload'\n            accept='image/*'\n            name='file'\n            htmlName='file'\n            recoverAble\n            leftHandler\n            removeConfirm='Are you sure to delete it ?'\n            limit={3}\n            onSuccess={(_res, filem, data) => {\n              return data;\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='Name'>\n          <Input placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Address'>\n          <Textarea name='address' placeholder='please enter' />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Form Methods",
        "description": "You can use formRef to get some methods of the form, including validation, clear validation, submission, etc",
        "scenario": "basic",
        "code": "/**\n * cn - 表单方法\n *    -- 可以通过 formRef 去获得表单的一些方法集, 包含校验, 清空校验, 提交等\n * en - Form Methods\n *    -- You can use formRef to get some methods of the form, including validation, clear validation, submission, etc\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Form, Input, TYPE, Button, Select, Rate, DatePicker } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\ntype ValueType = {\n  name?: string;\n};\ntype FormRef = TYPE.Form.Ref<any>;\n\nconst App: React.FC = () => {\n  const form = useRef<FormRef>();\n  const [value, setValue] = useState<ValueType>({});\n\n  useEffect(() => {}, []);\n\n  return (\n    <Form\n      value={value}\n      formRef={(formRef) => {\n        form.current = formRef;\n      }}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px 12px', marginBottom: 12 }}>\n        <div><Button mode=\"outline\" onClick={() => form.current?.reset()}>Reset</Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.submit()}>Submit</Button></div>\n        <div><Button mode=\"outline\"\n          onClick={() =>\n            form.current?.validate()\n            .then((values) => {\n              console.log('validate success', values);\n              // TODO: 校验成功处理逻辑\n            })\n            .catch((errorInfo) => {\n              console.log('validate failed errorInfo: >>', errorInfo)\n              // TODO: 校验失败处理逻辑\n            })\n          }\n        >\n          Validate\n        </Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.clearValidate()}>Clear validate</Button></div>\n        <div><Button mode=\"outline\" onClick={() => console.log(form.current?.getValue())}>Get value</Button></div>\n        <div><Button mode=\"outline\" onClick={() => {\n          form.current?.set({\n            name: 'Tom',\n            password: '123456',\n            holiday: {\n              startDate: '2024-10-01',\n              endDate: '2024-10-07',\n            },\n            hobby: ['Football', 'Movie']\n          })\n        }}>Set value</Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.submit(false)}>Submit without validate</Button></div>\n      </div>\n\n      <Form.Item label='Name' required>\n        <Input name='name' rules={[{ required: true, message: 'name is required' }]} clearable />\n      </Form.Item>\n\n      <Form.Item label='Rate' required>\n        <StarRate name=\"rate\" allowHalf defaultValue={3.5} />\n      </Form.Item>\n\n      <Form.Item label='Password' required>\n        <Input.Password\n          clearable\n          name='password'\n          rules={[{ required: true, message: 'password is required' }]}\n        />\n      </Form.Item>\n\n      <Form.Item label='Holiday'>\n        <Form.FieldSet name='holiday'>\n          <DatePicker range name={['startDate', 'endDate']} />\n        </Form.FieldSet>\n      </Form.Item>\n      <Form.Item label='Hobby'>\n        <Select multiple keygen data={['Football', 'Movie', 'Barbecue']} name='hobby'></Select>\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "*    --",
        "description": "通过 labelWidth 和 labelAlign 改变标签宽度和水平对齐方式",
        "scenario": "basic",
        "code": "/**\n * cn - 标签对齐方式\n *    -- 通过 labelWidth 和 labelAlign 改变标签宽度和水平对齐方式\n * en -\n *    --\n */\n\nimport { useState } from 'react';\nimport { Form, Input, TYPE, Radio } from 'shineout';\n\ntype FormProps = TYPE.Form.Props<any>;\n\nconst alignArr: FormProps['labelAlign'][] = ['left', 'top', 'right'];\nexport default () => {\n  const [align, setAlign] = useState<FormProps['labelAlign']>('right');\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Radio.Group value={align} data={alignArr} keygen onChange={setAlign} />\n      </div>\n      <Form labelWidth={65} labelAlign={align} style={{ maxWidth: 500 }}>\n        <Form.Item label='Email'>\n          <Input name='email' clearable />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' clearable />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: align === 'top' ? -10 : 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- When the label text has a line break, you can use labelVerticalAlign to control the vertical alignment",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 当 label 文字存在换行时，可使用 labelVerticalAlign 来控制垂直方向对齐方式\n * en -\n *    -- When the label text has a line break, you can use labelVerticalAlign to control the vertical alignment\n */\n\nimport { useState } from 'react';\nimport { Form, Input, TYPE, Radio, Textarea } from 'shineout';\n\ntype FormProps = TYPE.Form.Props<any>;\n\nconst alignArr: FormProps['labelVerticalAlign'][] = ['bottom', 'top', 'middle'];\n\nexport default () => {\n  const [align, setAlign] = useState<FormProps['labelVerticalAlign']>('top');\n  return (\n    <>\n      <div style={{ marginBottom: 24 }}>\n        <Radio.Group value={align} data={alignArr} keygen onChange={setAlign} />\n      </div>\n      <Form labelWidth={65} labelVerticalAlign={align} style={{ maxWidth: 500 }}>\n        <Form.Item label='Your Email'>\n          <Input name='email' clearable />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' clearable />\n        </Form.Item>\n        <Form.Item label='Your Address'>\n          <Textarea name='address' />\n        </Form.Item>\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n"
      },
      {
        "title": "Label colon",
        "description": "Set the colon property of Form to enable the colon display of all labels.",
        "scenario": "basic",
        "code": "/**\n * cn - 标签冒号\n *    -- 设置 `Form` 的 `colon` 属性，开启所有label的冒号显示。\n *    -- 也可单独设置 `Form.Item` 的 `colon` 属性，优先级高于 `Form` 的 `colon` 属性。\n *    -- `colon` 的格式也可以是自定义的ReactNode。\n * en - Label colon\n *    -- Set the colon property of Form to enable the colon display of all labels.\n *    -- You can also set the colon property of FormItem separately, which has higher priority than the colon property of Form.\n *    -- The format of `colon` can also be a custom ReactNode.\n */\n\nimport { useState } from 'react';\nimport { Form, Input, Switch, Textarea } from 'shineout';\n\nexport default () => {\n  const [colonVisible, setColonVisible] = useState(true);\n  return (\n    <Form labelWidth={120} style={{ maxWidth: 500 }} colon={colonVisible}>\n      <Form.Item label='Show Colon'>\n        <Switch value={colonVisible} onChange={setColonVisible} content={['ON', 'OFF']} />\n      </Form.Item>\n      <Form.Item label='Your Email'>\n        <Input name='email' clearable />\n      </Form.Item>\n      <Form.Item label='Password'>\n        <Input name='password' type='password' clearable />\n      </Form.Item>\n      <Form.Item label='Your Address'>\n        <Textarea name='address' />\n      </Form.Item>\n    </Form>\n  );\n};\n"
      },
      {
        "title": "Inline",
        "description": "Set the inline property to true to make the Form horizontal",
        "scenario": "basic",
        "code": "/**\n * cn - 水平布局\n *    -- 设置 inline 属性使 Form 变为水平布局\n * en - Inline\n *    -- Set the inline property to true to make the Form horizontal\n */\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <Form inline>\n    <Form.Item label='Email' labelWidth={65}>\n      <Input name='email' placeholder='Email' clearable />\n    </Form.Item>\n\n    <Form.Item label='Password' labelWidth={65}>\n      <Input name='password' placeholder='Password' type='password' clearable />\n    </Form.Item>\n\n    <Form.Submit>Submit</Form.Submit>\n  </Form>\n);\n\nexport default App;\n"
      },
      {
        "title": "Tips",
        "description": "Set the tip property on Form.Item, the prompt text is displayed below the component",
        "scenario": "basic",
        "code": "/**\n * cn - 提示信息\n *    -- 在 Form.Item 上设置提示文案时，提示文案始终显示在组件下方\n * en - Tips\n *    -- Set the tip property on Form.Item, the prompt text is displayed below the component\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rules = Rule();\nconst App: React.FC = () => (\n  <Form style={{ maxWidth: 500 }}>\n    <Form.Item label='Email' tip='Email or nickname or phonenumber' required keepErrorBelow>\n      <Input name='email' clearable rules={[rules.required('Please input your email')]} />\n    </Form.Item>\n\n    <Form.Item\n      label='Password'\n      tip='Use at least one letter, one numeral, and seven characters.'\n      style={{ marginBottom: 0 }}\n      required\n      keepErrorBelow\n    >\n      <Input\n        name='password'\n        type='password'\n        clearable\n        rules={[rules.required('Please input your password')]}\n      />\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- Set the `tooltip` property of `label`, display the prompt icon and corresponding information",
        "description": "`label.tooltip` configuration is the same as the `Tooltip` component",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- `label` 为对象格式时，支持设置`label.tooltip`属性，显示提示图标和相应tip信息\n *    -- `label.tooltip` 的配置同 `Tooltip` 组件\n * en -\n *    -- Set the `tooltip` property of `label`, display the prompt icon and corresponding information\n *    -- `label.tooltip` configuration is the same as the `Tooltip` component\n */\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\nconst MyIcon = () => (\n  <svg viewBox='0 0 24 24' focusable=\"false\" fill=\"currentColor\" aria-hidden=\"true\">\n    <path\n      d='M12.002 1C18.0771 1 23.002 5.92487 23.002 12C23.002 18.0751 18.0771 23 12.002 23C5.92682 23 1.00195 18.0751 1.00195 12C1.00195 5.92487 5.92682 1 12.002 1ZM12.002 3C7.03139 3 3.00195 7.02943 3.00195 12C3.00195 16.9706 7.03139 21 12.002 21C16.9725 21 21.002 16.9706 21.002 12C21.002 7.02943 16.9725 3 12.002 3ZM12.002 9C12.5542 9 13.002 9.44771 13.002 10V18C13.002 18.5523 12.5542 19 12.002 19C11.4497 19 11.002 18.5523 11.002 18V10C11.002 9.44771 11.4497 9 12.002 9ZM12.002 6C12.5542 6 13.002 6.44772 13.002 7C13.002 7.55228 12.5542 8 12.002 8C11.4497 8 11.002 7.55228 11.002 7C11.002 6.44772 11.4497 6 12.002 6Z'\n    />\n  </svg>\n);\n\nconst App: React.FC = () => (\n  <Form style={{ maxWidth: 500 }}>\n    <Form.Item\n      required\n      label={{\n        content: 'Email',\n        tooltip: \"Email or nickname or phonenumber\",\n      }}\n    >\n      <Input name='email' clearable />\n    </Form.Item>\n    <Form.Item\n      required\n      label={{\n        content: 'Password',\n        tooltip: {\n          tip: \"Use at least one letter, one numeral, and seven characters.\",\n          type: 'warning',\n          icon: <MyIcon />,\n        },\n      }}\n    >\n      <Input name='password' type='password' clearable />\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
      },
      {
        "title": "validate",
        "description": "Use the built-in rules through the Rule object. See Rule for details",
        "scenario": "basic",
        "code": "/**\n * cn - 基础校验\n *    -- 通过 Rule 对象，可以使用内置的规则。规则详见 Rule\n * en - validate\n *    -- Use the built-in rules through the Rule object. See Rule for details\n */\n\nimport React, { useState, useCallback } from 'react';\nimport { Form, Input, Checkbox, Rule, Button, TYPE, DatePicker, Select } from 'shineout';\n\ninterface Value {\n  age?: string;\n  tel?: string;\n  name?: string;\n  IPv4?: string;\n  email?: string;\n  password?: string;\n  colors?: string[];\n}\ntype FormProps = TYPE.Form.Props<Value>;\ntype FormValue = FormProps['value'];\ntype FormRef = TYPE.Form.Ref<any>;\ntype RuleFunc = TYPE.Rule.ValidFunc;\n\nconst password = {\n  func: (value: string, _formData: any, _cb: any, props: { message: string; title: string }) =>\n    new Promise((resolve, reject) => {\n      console.log('password', props);\n      if (!/\\d+/.test(value) || !/[a-z]+/i.test(value)) {\n        reject(new Error(props.message.replace('{title}', props.title)));\n      } else {\n        resolve(true);\n      }\n    }),\n};\n\nconst isExist: RuleFunc = (value, _, callback) => {\n  if (value.indexOf('so') >= 0) callback(new Error(`\"${value}\" is existed.`));\n  else callback(true);\n};\n\nconst rules = Rule(\n  // validate function package\n  {\n    password,\n    isExist,\n  },\n  // language package\n  {\n    password: {\n      message: '{title} at least has one numeral and one letter',\n    },\n  },\n);\n\nconst App: React.FC = () => {\n  const [ref, setRef] = useState<FormRef>();\n  const [value, setValue] = useState<FormValue>(undefined);\n\n  const validFields = useCallback(() => {\n    if (ref && ref.validateFields) {\n      ref.validateFields(['email', 'name']);\n    }\n  }, [ref]);\n\n  console.log('form value: >>', value)\n  return (\n    <Form\n      value={value}\n      scrollToError={200}\n      scrollParent={() => document.getElementById('layout')}\n      onChange={setValue}\n      formRef={(f) => setRef(f)}\n      style={{ maxWidth: 500 }}\n      onSubmit={(d) => console.log(d)}\n    >\n      <Form.Item required label='Email'>\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required, rules.isExist]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20), rules.password]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Age' tip='between 18 and 60'>\n        <Input\n          name='age'\n          title='Age'\n          style={{ width: 100 }}\n          type='integer'\n          clearable\n          rules={[rules.required, rules.integer, rules.range(18, 60)]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Birthday'>\n        <DatePicker\n          name='birthday'\n          range\n          rules={[rules.required]}\n          clearable\n          clearToUndefined\n        />\n      </Form.Item>\n\n      <Form.Item required label='Hobby'>\n        <Select\n          keygen\n          multiple\n          clearable\n          name='hobby'\n          rules={[rules.required]}\n          data={['football', 'basketball', 'tennis', 'swimming', 'running']}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Tel'>\n        <Input\n          name='tel'\n          title='Tel'\n          rules={[rules.required, rules.regExp('^[\\\\d\\\\s ().-]+$')]}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item required label='IPv4'>\n        <Input name='IPv4' title='IP' rules={[rules.required, rules.ipv4]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Favorite Colors' tip='select your favorite colors'>\n        <Checkbox.Group\n          name='colors'\n          keygen={(d) => d}\n          data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']}\n          defaultValue={[]}\n          renderItem={(d) => <div style={{ width: 40 }}>{d}</div>}\n          style={{\n            display: 'flex',\n            gap: 12,\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n          }}\n          rules={[rules.required('At least select one favorite color'), rules.min(2), rules.max(3)]}\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button>Sumbit</Form.Button>\n        <Form.Reset>Reset</Form.Reset>\n        <Button onClick={validFields} mode=\"outline\">Validate Some Field</Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Bind validate",
        "description": "Use the `bind` property for bind validate",
        "scenario": "basic",
        "code": "/**\n * cn - 联动校验\n *    -- 使用 `bind` 属性进行联动校验\n * en - Bind validate\n *    -- Use the `bind` property for bind validate\n */\nimport { Form, Input } from 'shineout';\nimport React from 'react';\n\nexport default () => {\n  const [v, setV] = React.useState({});\n  return (\n    <div>\n      <Form\n        value={v}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          setV(v);\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='password'>\n          <Input.Password\n            bind={['repeat']}\n            rules={[\n              (value, _, callback, _prop) => {\n                if (!value) {\n                  callback(new Error('password is required'));\n                }\n                if (value && value.length > 10) {\n                  callback(new Error('password length must less than 10'));\n                }\n                callback(true);\n              },\n            ]}\n            name={'password'}\n            clearable\n            placeholder='please input password'\n          />\n        </Form.Item>\n        <Form.Item label='repeat'>\n          <Input.Password\n            name={'repeat'}\n            rules={[\n              (value, formValue, callback, _prop) => {\n                if (!value) {\n                  callback(new Error('repeat is required'));\n                }\n                if (value && value !== formValue.password) {\n                  callback(new Error('Two inputs are inconsistent'));\n                }\n                callback(true);\n              },\n            ]}\n            clearable\n            placeholder='please input password again'\n          />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Back-end validation",
        "description": "By setting an `error` on the Form, the back-end validation data is presented. After the form value is changed, the corresponding back-end validation data is cleared",
        "scenario": "basic",
        "code": "/**\n * cn - 服务端校验\n *    -- 通过给 Form 设置 `error`，实现后端校验数据展示\n *    -- 在表单值被改变后，对应后端校验数据会被清空\n *    -- 前端校验优先级大于后端校验\n * en - Back-end validation\n *    -- By setting an `error` on the Form, the back-end validation data is presented. After the form value is changed, the corresponding back-end validation data is cleared\n *    -- front-end validation priority is greater than back-end validation\n */\nimport React, { useState } from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rules = Rule();\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<{ [key: string]: string }>({});\n\n  const handleSubmit = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setError({ email: 'The email has been registered' });\n    }, 1000);\n  };\n\n  return (\n    <Form disabled={loading} error={error} style={{ maxWidth: 500 }} onSubmit={handleSubmit}>\n      <Form.Item required label='Email'>\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20)]}\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button loading={loading}>Sumbit</Form.Button>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "validate style",
        "description": "Use `keepErrorHeight` so that a single-line error prompt will not stretch the page height",
        "scenario": "basic",
        "code": "/**\n * cn - 校验样式\n *    -- 使用 `keepErrorHeight` 使得单行错误提示不会撑开页面高度\n * en - validate style\n *    -- Use `keepErrorHeight` so that a single-line error prompt will not stretch the page height\n */\n\nimport React, { useState } from 'react';\nimport { Form, Input, Checkbox, Rule, TYPE } from 'shineout';\n\ninterface Value {\n  age?: string;\n  tel?: string;\n  name?: string;\n  IPv4?: string;\n  email?: string;\n  password?: string;\n  colors?: string[];\n}\ntype FormProps = TYPE.Form.Props<Value>;\ntype FormValue = FormProps['value'];\ntype RuleFunc = TYPE.Rule.ValidFunc;\n\nconst password = {\n  func: (value: string, _formData: any, _cb: any, props: { message: string; title: string }) =>\n    new Promise((resolve, reject) => {\n      console.log('password', props);\n      if (!/\\d+/.test(value) || !/[a-z]+/i.test(value)) {\n        reject(new Error(props.message.replace('{title}', props.title)));\n      } else {\n        resolve(true);\n      }\n    }),\n};\n\nconst isExist: RuleFunc = (value, _, callback) => {\n  if (value.indexOf('so') >= 0) callback(new Error(`\"${value}\" is existed.`));\n  else callback(true);\n};\n\nconst rules = Rule(\n  // validate function package\n  {\n    password,\n    isExist,\n  },\n  // language package\n  {\n    password: {\n      message: '{title} at least has one numeral and one letter',\n    },\n  },\n);\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<FormValue>(undefined);\n\n  return (\n    <Form\n      value={value}\n      scrollParent={() => document.getElementById('layout')}\n      onChange={setValue}\n      style={{ maxWidth: 500 }}\n      onSubmit={(d) => console.log(d)}\n      keepErrorHeight\n    >\n      <Form.Item required label='Email' tip=\"88888\">\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required, rules.isExist]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20), rules.password]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Age' tip='between 18 and 60'>\n        <Input\n          name='age'\n          title='Age'\n          style={{ width: 100 }}\n          type='integer'\n          clearable\n          rules={[rules.required, rules.integer, rules.range(18, 60)]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Tel'>\n        <Input\n          name='tel'\n          title='Tel'\n          rules={[rules.required, rules.regExp('^[\\\\d\\\\s ().-]+$')]}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item required label='IPv4'>\n        <Input name='IPv4' title='IP' rules={[rules.required, rules.ipv4]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Favorite Colors' tip='select your favorite colors'>\n        <Checkbox.Group\n          name='colors'\n          keygen={(d) => d}\n          data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']}\n          defaultValue={[]}\n          renderItem={(d) => <div style={{ width: 40 }}>{d}</div>}\n          rules={[rules.required('At least select one favorite color'), rules.min(2), rules.max(3)]}\n          style={{\n            display: 'flex',\n            gap: 12,\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n          }}\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button>Sumbit</Form.Button>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Form Methods",
        "description": "Set the `name` property of `Form` to use the `scrollToField` method of `formRef` to scroll to the specified field",
        "scenario": "basic",
        "code": "/**\n * cn - 滚动到字段\n *    -- 设置 `Form` 的 `name` 属性后，可以通过 `formRef` 的 `scrollToField` 方法滚动到指定字段\n *    -- `formRef` 的 `validateFieldsWithValue` 方法可以获取所有字段的校验信息\n * en - Form Methods\n *    -- Set the `name` property of `Form` to use the `scrollToField` method of `formRef` to scroll to the specified field\n *    -- The `validateFieldsWithValue` method of `formRef` can get the validation information of all fields\n */\nimport React, { useState } from 'react';\nimport { Form, Input, Button, Tabs, Grid, Select, Message } from 'shineout';\n\ntype ChildArrayType = {\n  brandName: string;\n  configs: {\n    bussName: string;\n    mockId: string;\n    slotId: string;\n  }[];\n  childConfig: {\n    live: string;\n    brand: string;\n    partner: string;\n  };\n};\n\ntype ValueType = {\n  public: {\n    config1: {\n      field1: string;\n      field2: string;\n      field3: string;\n      field4: string;\n    };\n    config2: {\n      field1: string;\n      field2: string;\n      field3: string;\n      field4: string;\n    };\n  };\n  child: ChildArrayType[];\n};\n\nconst panelStyle = {\n  padding: 12,\n  height: 200,\n  overflow: 'auto',\n  border: '1px solid #f0f0f0',\n  borderTop: 'none',\n};\n\nconst defaultFormValue = {\n  public: {\n    config1: {\n      field1: '1',\n      field2: '2',\n      field3: '3',\n      field4: '4',\n    },\n    config2: {\n      field1: '5',\n      field2: '6',\n      field3: '7',\n      field4: '8',\n    },\n  },\n  child: [\n    {\n      brandName: 'github',\n      configs: [\n        { bussName: '1', mockId: '1', slotId: '1' },\n        { bussName: '2', mockId: '2', slotId: '2' },\n        { bussName: '3', mockId: '3', slotId: '3' },\n      ],\n      childConfig: {\n        live: '1',\n        brand: '1',\n        partner: '1',\n      },\n    },\n    {\n      brandName: 'gitlab',\n      configs: [\n        { bussName: '4', mockId: '4', slotId: '4' },\n        { bussName: '5', mockId: '5', slotId: '5' },\n        { bussName: '6', mockId: '6', slotId: '6' },\n      ],\n      childConfig: {\n        live: '2',\n        brand: '2',\n        partner: '',\n      },\n    },\n  ],\n};\n\nconst App: React.FC = () => {\n  const [activeParentTab, setActiveParentTab] = useState('public-panel');\n  const [activeChildTab, setActiveChildTab] = useState('child-panel-0');\n\n  const [formValue, setFormValue] = useState<ValueType>(defaultFormValue);\n  const [form, setForm] = Form.useForm<ValueType>();\n\n  const [field1, setField1] = useState<string | undefined>();\n  const [field2, setField2] = useState<string | undefined>();\n\n  const myCustomScrollToField = (fieldName: string) => {\n      // 示例这里根据字段名判断模拟交互，开发者以实际情况处理\n      if (fieldName.startsWith('public')) {\n        setActiveParentTab('public-panel');\n      } else {\n        // 切换至child-panel\n        setActiveParentTab('child-panel');\n\n        const index = fieldName.match(/\\d+/)?.[0];\n        // 切换至对应的child-panel-index\n        setActiveChildTab(`child-panel-${index}`);\n      }\n\n      setTimeout(() => {\n        form.scrollToField(fieldName);\n      });\n  };\n\n  const handleMySubmit = () => {\n    form\n      .validateFieldsWithValue()\n      .then((v) => {\n        Message.success('submit success');\n\n        console.log('submit success:>>', JSON.stringify(v, null, 2));\n        form.submit();\n      })\n      .catch((errorInfo) => {\n        Message.error('submit failed');\n\n        console.log('submit failed:>>', errorInfo);\n        if (errorInfo.errorFields.length > 0) {\n          const firstErrorFieldName = errorInfo.errorFields[0].name as string;\n          console.log('firstErrorFieldName: >>', firstErrorFieldName);\n\n          // 滚动到错误字段\n          myCustomScrollToField(firstErrorFieldName);\n        }\n      });\n  };\n\n  return (\n    <Form<ValueType>\n      value={formValue}\n      setForm={setForm}\n      onChange={setFormValue}\n      onSubmit={() => console.log('submit:>>', JSON.stringify(formValue, null, 2))}\n      labelWidth={200}\n      name='my-form'\n      reserveAble\n      scrollToError\n    >\n      <Tabs\n        active={activeParentTab}\n        onChange={(tab) => setActiveParentTab(tab as string)}\n        lazy={false}\n      >\n        <Tabs.Panel id='public-panel' tab='Public Config' style={panelStyle}>\n          <Form.FieldSet name='public'>\n            <Form.FieldSet name='config1'>\n              <Form.Item label='public.config1.field1' required>\n                <Input\n                  name='field1'\n                  rules={[{ required: true, message: 'public.config1.field1 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config1.field2' required>\n                <Input\n                  name='field2'\n                  rules={[{ required: true, message: 'public.config1.field2 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config1.field3' required>\n                <Input\n                  name='field3'\n                  rules={[{ required: true, message: 'public.config1.field3 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config1.field4' required>\n                <Input\n                  name='field4'\n                  rules={[{ required: true, message: 'public.config1.field4 is required' }]}\n                />\n              </Form.Item>\n            </Form.FieldSet>\n            <Form.FieldSet name='config2'>\n              <Form.Item label='public.config2.field1' required>\n                <Input\n                  name='field1'\n                  rules={[{ required: true, message: 'public.config2.field1 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config2.field2' required>\n                <Input\n                  name='field2'\n                  rules={[{ required: true, message: 'public.config2.field2 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config2.field3' required>\n                <Input\n                  name='field3'\n                  rules={[{ required: true, message: 'public.config2.field3 is required' }]}\n                />\n              </Form.Item>\n              <Form.Item label='public.config2.field4' required>\n                <Input\n                  name='field4'\n                  rules={[{ required: true, message: 'public.config2.field4 is required' }]}\n                />\n              </Form.Item>\n            </Form.FieldSet>\n            <Form.FieldSet name='config3' defaultValue={['1', '2']}>\n              {({ value, onChange, index }) => (\n                <Form.Item label={`public.config3[${index}]`} required>\n                  <Input value={value} onChange={(v) => onChange(v as string)} rules={[{ required: true, message: `public.config3[${index}] is required` }]} />\n                </Form.Item>\n              )}\n            </Form.FieldSet>\n            <Form.Item label='public.config4' required>\n              <Form.Field name='config4' defaultValue={'4'} rules={[{ required: true, message: 'public.config4 is required' }]}>\n                <Input />\n              </Form.Field>\n            </Form.Item>\n          </Form.FieldSet>\n        </Tabs.Panel>\n        <Tabs.Panel id='child-panel' tab='Child Config' style={panelStyle}>\n          <Tabs\n            active={activeChildTab}\n            onChange={(tab) => setActiveChildTab(tab as string)}\n            position='left-top'\n            shape='card'\n            lazy={false}\n            allowNonPanel\n          >\n            <Form.FieldSet name='child'>\n              {({ index }) => {\n                return (\n                  <Tabs.Panel\n                    id={`child-panel-${index}`}\n                    tab={`child-panel-${index}`}\n                    style={{ padding: 12 }}\n                  >\n                    <Form.Item label={`child[${index}].brandName`} required>\n                      <Input\n                        name={'brandName'}\n                        rules={[{ required: true, message: 'brandName is required' }]}\n                      />\n                    </Form.Item>\n                    <Form.FieldSet name='configs'>\n                      {({index: nestIndex}) => (\n                        <Grid>\n                          <Grid width={1 / 3}>\n                            <Form.Item label={`child[${index}].configs[${nestIndex}].bussName`} required>\n                              <Input\n                                name={'bussName'}\n                                rules={[{ required: true, message: 'bussName is required' }]}\n                              />\n                            </Form.Item>\n                          </Grid>\n                          <Grid width={1 / 3}>\n                            <Form.Item label={`child[${index}].configs[${nestIndex}].mockId`} required>\n                              <Input\n                                name={'mockId'}\n                                rules={[{ required: true, message: 'mockId is required' }]}\n                              />\n                            </Form.Item>\n                          </Grid>\n                          <Grid width={1 / 3}>\n                            <Form.Item label={`child[${index}].configs[${nestIndex}].slotId`} required>\n                              <Input\n                                name={'slotId'}\n                                rules={[{ required: true, message: 'slotId is required' }]}\n                              />\n                            </Form.Item>\n                          </Grid>\n                        </Grid>\n                      )}\n                    </Form.FieldSet>\n                    <Form.FieldSet name='childConfig'>\n                      <Form.Item label={`child[${index}].childConfig.live`} required>\n                        <Input\n                          name={'live'}\n                          rules={[{ required: true, message: 'live is required' }]}\n                        />\n                      </Form.Item>\n                      <Form.Item label={`child[${index}].childConfig.brand`} required>\n                        <Select\n                          keygen\n                          name='brand'\n                          data={[1, 2, 3]}\n                          rules={[{ required: true, message: 'brand is required' }]}\n                        />\n                      </Form.Item>\n                      <Form.Item label={`child[${index}].childConfig.partner`} required>\n                        <Input\n                          name={'partner'}\n                          rules={[{ required: true, message: 'partner is required' }]}\n                        />\n                      </Form.Item>\n                    </Form.FieldSet>\n                  </Tabs.Panel>\n                );\n              }}\n            </Form.FieldSet>\n          </Tabs>\n        </Tabs.Panel>\n      </Tabs>\n\n      <Grid style={{ marginTop: 12 }}>\n        <Grid width={2 / 3} style={{ display: 'inline-flex', gap: 12 }}>\n          <div>\n            <p style={{ marginBottom: 8 }}>方法1: form.validateFieldsWithValue</p>\n            <Input.Group style={{ overflow: 'hidden' }}>\n              <Input placeholder='Field Name' value={field1} onChange={setField1} />\n              <Button\n                type=\"primary\"\n                style={{ borderRadius: 0 }}\n                onClick={() => {\n                  form\n                    .validateFieldsWithValue(field1)\n                    .then((values) => {\n                      Message.success(`${field1} validate success`);\n                      console.log('validate success values: >>', values);\n                    })\n                    .catch((errorInfo) => {\n                      Message.error('validate failed');\n                      console.log('validate failed errorInfo: >>', errorInfo);\n                    });\n                }}\n              >\n                Validate\n              </Button>\n            </Input.Group>\n          </div>\n\n          <div>\n            <p style={{ marginBottom: 8 }}>方法2: form.scrollToField</p>\n            <Input.Group style={{ overflow: 'hidden' }}>\n              <Input placeholder='Field Name' value={field2} onChange={setField2} />\n              <Button\n                type=\"primary\"\n                style={{ borderRadius: 0 }}\n                onClick={() => {\n                  if (field2) {\n                    myCustomScrollToField(field2);\n                  }\n                }}\n              >\n                Scroll\n              </Button>\n            </Input.Group>\n          </div>\n        </Grid>\n\n        <Grid width={1 / 3} style={{ textAlign: 'right' }}>\n          <p style={{ marginBottom: 8 }}>&nbsp;</p>\n          <Form.Reset>Reset</Form.Reset>\n          <Button type='primary' onClick={handleMySubmit}>\n            My Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </Form>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "Use the disabled property to make the Form support to disable component",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用\n *    -- 使用 disabled 属性使表单内支持 disabled 属性的组件禁用，通常用在表单数据加载或提交时\n * en - Disabled\n *    -- Use the disabled property to make the Form support to disable component\n */\nimport React from 'react';\nimport { Form, Input, Textarea } from 'shineout';\n\nconst App: React.FC = () => (\n  <Form disabled>\n    <Form.Item label='Email'>\n      <Input name='email' clearable />\n    </Form.Item>\n    <Form.Item label='Email2'>\n      <Input clearable />\n    </Form.Item>\n\n    <Form.Item label='Password'>\n      <Input name='password' type='password' clearable />\n    </Form.Item>\n\n    <Form.Item label='Name'>\n      <Input.Group style={{ width: 300 }} disabled>\n        <Input name='firstName' placeholder='First Name' clearable />\n        -\n        <Input name='lastName' placeholder='Last Name' clearable />\n      </Input.Group>\n    </Form.Item>\n\n    <Form.Item label='Age'>\n      <Input.Number\n        style={{ width: 100 }}\n        name='age'\n        type='number'\n        digits={0}\n        defaultValue='0'\n        clearable\n      />\n    </Form.Item>\n    <Form.Item label='address'>\n      <Textarea rows={2} name='address' defaultValue='xxx' />\n    </Form.Item>\n    <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n      <Form.Submit loading>Submit</Form.Submit>\n      <Form.Reset>Reset</Form.Reset>\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
      },
      {
        "title": "Field",
        "description": "Components that support value property and onChange property can be put in a Form.Field",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义表单组件\n *    -- 非shineout组件也支持放在 Form.Field 中使用，只要组件接收 value 和 onChange 属性即可\n *    -- `Form.Field`的children 为 ReactElement时，必须支持 value 和 onChange 属性\n *    -- `Form.Field`的children 为 Function 时，返回一个或一组 ReactElement，在函数内部自行处理 value 和 onChange\n * en - Field\n *    -- Components that support value property and onChange property can be put in a Form.Field\n *    -- When the children property is a ReactElement, the value and onChange property must be provided\n *    -- When the children property is a function, return one or one group of ReactElement\n */\nimport React from 'react';\nimport { Form, Rule } from 'shineout';\n\nfunction Input(props: any) {\n  const { value = '', status, onChange } = props;\n  const style = { border: `solid 1px ${status === 'error' ? 'red' : '#ccc'}`, outline: 'none' };\n  return (\n    <input\n      {...props}\n      style={style}\n      value={value}\n      onChange={(e) => {\n        onChange(e.target.value);\n      }}\n    />\n  );\n}\nconst rule = Rule();\nconst App: React.FC = () => (\n  <Form style={{ maxWidth: 500 }} onSubmit={(d) => console.log(d)}>\n    <Form.Item required label='Email'>\n      <Form.Field\n        name='email'\n        defaultValue='test@email.com'\n        rules={[rule.required('不能为空'), rule.email('格式不正确')]}\n      >\n        {({ value, onChange, status }) => (\n          <Input value={value || ''} status={status} onChange={onChange} type='text' />\n        )}\n      </Form.Field>\n    </Form.Item>\n\n    <Form.Item label='Password' tip='Use at least one letter, one numeral, and seven characters.'>\n      <Form.Field\n        name='password'\n        rules={[\n          rule.required,\n          rule.min(7, '不能小于7个字符'),\n          rule.regExp(/^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$/, '格式不正确'),\n        ]}\n      >\n        <Input type='password' />\n      </Form.Field>\n    </Form.Item>\n\n    <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n      <Form.Submit>Submit</Form.Submit>\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
      },
      {
        "title": "FieldSet (Object)",
        "description": "Form.FieldSet handles fields of object type",
        "scenario": "basic",
        "code": "/**\n * cn - FieldSet (Object)\n *    -- Form.FieldSet 可以处理对象类型的字段\n * en - FieldSet (Object)\n *    -- Form.FieldSet handles fields of object type\n */\nimport React, { useState } from 'react';\nimport { Form, Input } from 'shineout';\n\ninterface Value {\n  account?: {\n    name?: {\n      firstName: string;\n      lastName: string;\n    };\n    age?: number;\n  };\n}\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({\n    account: {\n      name: {\n        firstName: 'James',\n        lastName: 'Potter',\n      },\n      age: 20,\n    },\n  });\n\n  const handleChange = (v: Value) => {\n    setValue(v);\n  };\n\n  return (\n    <Form\n      value={value}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <Form.FieldSet name='account'>\n        <Form.Item label='Name'>\n          <Form.FieldSet name='name'>\n            <Input.Group style={{ width: 300 }}>\n              <Input name='firstName' placeholder='First Name' clearable />\n              -\n              <Input name='lastName' placeholder='Last Name' clearable />\n            </Input.Group>\n          </Form.FieldSet>\n        </Form.Item>\n        <Form.Item label='Age'>\n          <Input\n            name='age'\n            digits={0}\n            title='age'\n            type='number'\n            defaultValue='18'\n            style={{ width: 100 }}\n            clearable\n          />\n        </Form.Item>\n      </Form.FieldSet>\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "FieldSet (Loop)",
        "description": "When FieldSet's children is a function, takes the value (type is array) from the form by the name property, and generate a set of subcomponents",
        "scenario": "basic",
        "code": "/**\n * cn - FieldSet (Loop)\n *    -- FieldSet children 为函数时，根据 name 从 Form 中获取 value （类型为 array），遍历这个 value 生成一组子组件\n * en - FieldSet (Loop)\n *    -- When FieldSet's children is a function, takes the value (type is array) from the form by the name property, and generate a set of subcomponents\n */\nimport React, { useState } from 'react';\nimport { Form, Input, Rule, Button } from 'shineout';\n\ninterface FriendsItem {\n  name?: string;\n  age?: string;\n}\ninterface Value {\n  name?: string;\n  age?: string;\n  friends?: FriendsItem[];\n}\n\nconst rules = Rule();\n\nexport const add = (\n  <svg viewBox=\"0 0 24 24\" width=\"16px\" height=\"16px\">\n   <path fill='#197AFA' d=\"M12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1ZM12 7C11.4477 7 11 7.44772 11 8V11H8C7.48716 11 7.06449 11.386 7.00673 11.8834L7 12C7 12.5523 7.44772 13 8 13H11V16C11 16.5128 11.386 16.9355 11.8834 16.9933L12 17C12.5523 17 13 16.5523 13 16V13H16C16.5128 13 16.9355 12.614 16.9933 12.1166L17 12C17 11.4477 16.5523 11 16 11H13V8C13 7.48716 12.614 7.06449 12.1166 7.00673L12 7Z\"></path>\n  </svg>\n);\n\nexport const cancel = (\n  <svg viewBox=\"0 0 24 24\" width=\"16px\" height=\"16px\">\n    <path fill='#EB4242' d=\"M12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1ZM17 12C17 12.5523 16.5523 13 16 13H8C7.44772 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11H16C16.5523 11 17 11.4477 17 12Z\"></path>\n  </svg>\n);\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({});\n\n  const handleChange = (v: Value) => {\n    setValue(v);\n  };\n\n  return (\n    <Form\n      value={value}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <Form.Item label='Name'>\n        <Input name='name' defaultValue='Harry Potter' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='Friends'>\n        <Form.FieldSet\n          name='friends'\n          empty={(insert) => {\n            return (\n              <Button type=\"primary\" mode=\"outline\" onClick={() => insert({ name: '' })}>\n                +\n                Add new friends\n              </Button>\n            );\n          }}\n          defaultValue={[{ name: 'Hermione Granger', age: '16' }, {}]}\n        >\n          {({ onAppend, onRemove }) => (\n            <Form.Item style={{ marginBottom: 12 }}>\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <Input\n                  name='name'\n                  placeholder='Name'\n                  title='Friend name'\n                  rules={[rules.required('Name is required')]}\n                  style={{ width: 180, marginInlineEnd: 8 }}\n                  clearable\n                />\n                <Input\n                  name='age'\n                  type='number'\n                  placeholder='Age'\n                  rules={[rules.required('Age is required')]}\n                  title='Friend age'\n                  style={{ width: 60 }}\n                  clearable\n                />\n                <a\n                  style={{ margin: '0 12px', lineHeight: 1, cursor: 'pointer' }}\n                  onClick={() => onAppend({ name: '', age: '16' })}\n                >\n                  {add}\n                </a>\n                <a style={{ lineHeight: 1, cursor: 'pointer' }} onClick={onRemove}>\n                  {cancel}\n                </a>\n              </div>\n            </Form.Item>\n          )}\n        </Form.FieldSet>\n      </Form.Item>\n      <Form.Item label='' style={{ marginTop: 20, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Array name",
        "description": "When the data is an array type, the name can pass in a corresponding array to process the single data in the array",
        "scenario": "basic",
        "code": "/**\n * cn - 数组 name\n *    -- 数据为数组类型的组件，name 可以传入一个相应的数组，来分别处理数组内的单个数据\n * en - Array name\n *    -- When the data is an array type, the name can pass in a corresponding array to process the single data in the array\n */\nimport React, { useState } from 'react';\nimport { produce } from 'immer';\nimport { Form, DatePicker, Input, Modal, Rule, TYPE } from 'shineout';\n\ntype Value = string[];\ntype FormProps = TYPE.Form.Props<Value>;\n\nconst NameInput = (props: FormProps) => {\n  const { value, onChange } = props;\n\n  const handleLastName = (v: string | undefined) => {\n    const newValue = produce(props.value, (draft: any[]) => {\n      draft[1] = v;\n    });\n    onChange!(newValue!);\n  };\n  const handleFirstName = (v: string | undefined) => {\n    const newValue = produce(props.value, (draft: any[]) => {\n      draft[0] = v;\n    });\n    onChange!(newValue!);\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center' }}>\n      <Input value={value![0]} width={120} onChange={handleFirstName} clearable />\n      <span style={{ margin: '0 4px' }}>-</span>\n      <Input value={value![1]} width={120} onChange={handleLastName} clearable />\n    </div>\n  );\n};\n\nconst rule = Rule();\n\nconst App: React.FC = () => {\n  const [initValue] = useState({\n    firstName: 'Harry',\n    lastName: 'Potter',\n    date: {\n      startDate: Date.now(),\n      endDate: Date.now() + 86400 * 5000,\n    },\n  });\n\n  return (\n    <Form\n      value={initValue}\n      onSubmit={(data) => {\n        Modal.info({ title: 'Form Data', content: <pre>{JSON.stringify(data, null, 2)}</pre> });\n      }}\n    >\n      <Form.Item label='Name'>\n        <Form.Field name={['firstName', 'lastName']}>\n          <NameInput />\n        </Form.Field>\n      </Form.Item>\n\n      <Form.Item label='Date'>\n        <DatePicker\n          range\n          rules={[rule.required]}\n          name={['date.startDate', 'date.endDate']}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Flow",
        "description": "For performance reasons, internal data of the Form is isolated and changing one component does not trigger another component to change",
        "scenario": "basic",
        "code": "/**\n * cn - 联动\n *    -- 在通常情况下，Form 不通过 value 和 onChange 方式处理数据，只是在 submit 的时候获取数据提交\n *    -- 这种情况下，需要联动时，可以使用 Flow 组件来实现。如果设置了 names 属性，只监听 names 包含的字段变化，如果没有设置，会监听 Form 内所有数据的变化\n * en - Flow\n *    -- For performance reasons, internal data of the Form is isolated and changing one component does not trigger another component to change\n *    -- If one component depends on another component's value, place it in the Flow component\n */\nimport React from 'react';\nimport { Form, Input, Checkbox, DatePicker, Rule } from 'shineout';\n\nconst rule = Rule();\n\nconst App: React.FC = () => (\n  <Form onSubmit={(d) => console.log(d)}>\n    <Form.Item label='First Name'>\n      <Input name='firstName' delay={0} defaultValue='Harry' clearable />\n    </Form.Item>\n\n    <Form.Item label='Last Name'>\n      <Input name='lastName' delay={0} defaultValue='Potter' clearable />\n    </Form.Item>\n\n    <Form.Item label='Full Name'>\n      <Form.Flow names={['firstName', 'lastName']}>\n        {(datum) => {\n          console.log('======================')\n          console.log('flow-1 rendered: >>')\n          console.log('======================')\n          return (\n            <div style={{ lineHeight: '32px' }}>{`${datum?.get('firstName')}-${datum?.get(\n              'lastName',\n            )}`}</div>\n          )\n        }}\n      </Form.Flow>\n    </Form.Item>\n\n    <Form.Item label='Password'>\n      <Input name='password' type='password' clearable />\n    </Form.Item>\n\n    <Form.Item label=''>\n      <Checkbox defaultValue name='showAge'>\n        Show age\n      </Checkbox>\n      <Checkbox name='showColors'>Show colors</Checkbox>\n      <Form.Flow names={[]}>\n        {(datum) => (\n          <Checkbox\n            name='dateRange'\n            beforeChange={() => datum?.set({ startDate: undefined, endDate: undefined })}\n          >\n            Date range\n          </Checkbox>\n        )}\n      </Form.Flow>\n    </Form.Item>\n\n    <Form.Flow names={['showAge']}>\n      {(datum) =>\n        datum?.get('showAge') && (\n          <Form.Item required label='Age' tip='between 18 and 60'>\n            <Input\n              name='age'\n              digits={0}\n              title='age'\n              type='number'\n              defaultValue='18'\n              style={{ width: 100 }}\n              clearable\n              rules={[rule.range(18, 60)]}\n            />\n          </Form.Item>\n        )\n      }\n    </Form.Flow>\n\n    <Form.Flow>\n      {(datum) =>\n        datum?.get('showColors') && (\n          <Form.Item required label='Favorite Colors'>\n            <Checkbox.Group\n              keygen={(c) => c}\n              name='colors'\n              data={['red', 'yellow', 'green', 'blue', 'pink']}\n            />\n          </Form.Item>\n        )\n      }\n    </Form.Flow>\n\n    <Form.Item label='Date' tip=''>\n      <Form.Flow names={['dateRange']}>\n        {(datum) =>\n          datum?.get('dateRange') === true ? (\n            <DatePicker key='r' range name={['startDate', 'endDate']} type='date' />\n          ) : (\n            <DatePicker key='s' name='startDate' type='date' />\n          )\n        }\n      </Form.Flow>\n    </Form.Item>\n\n    <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n      <Form.Button>Sumbit</Form.Button>\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
      },
      {
        "title": "Flow",
        "description": "For performance reasons, internal data of the Form is isolated and changing one component does not trigger another component to change",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- Form 通过 value 和 onChange 方式处理数据后，依然想要只监听 names 包含的字段变化\n *    -- 这种情况下，设置Form.Flow的 watch 属性为 true\n * en - Flow\n *    -- For performance reasons, internal data of the Form is isolated and changing one component does not trigger another component to change\n *    -- If one component depends on another component's value, place it in the Flow component\n */\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState({});\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <Form value={value} onChange={setValue} onSubmit={(d) => console.log(d)}>\n      <Form.Item label='First Name'>\n        <Input name='firstName' delay={0} defaultValue='Harry' clearable />\n      </Form.Item>\n\n      <Form.Item label='Last Name'>\n        <Input name='lastName' delay={0} defaultValue='Potter' clearable />\n      </Form.Item>\n\n      <Form.Flow names={['firstName']} strict>\n        {\n          (datum) => {\n            // setCount(count + 1);\n            console.log('======================')\n            console.log('flow-2-rendered: >>')\n            console.log('======================')\n            return (\n              <Form.Item label='联动渲染'>\n                <div style={{ lineHeight: '32px' }}>{`${datum?.get('firstName')}-${datum?.get('lastName')}`} {count}</div>\n              </Form.Item>\n            );\n          }\n        }\n      </Form.Flow>\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Button>Sumbit</Form.Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nexport default App;\n"
      },
      {
        "title": "Hooks",
        "description": "When using `Form.useForm` outside the Form component, you need to pass the `setForm` method to the Form component. When using it in a child component of the Form component, you don't need to pass it",
        "scenario": "basic",
        "code": "/**\n * cn - Hooks\n *    -- 在Form组件外使用`Form.useForm`时，需要将`setForm`方法传给Form组件，在Form组件内的子组件内使用时无需传递\n * en - Hooks\n *    -- When using `Form.useForm` outside the Form component, you need to pass the `setForm` method to the Form component. When using it in a child component of the Form component, you don't need to pass it\n */\n\nimport React, { useState } from 'react';\nimport { Form, Input, Checkbox, Rule, Button, TYPE, Grid, Alert } from 'shineout';\n\ninterface Value {\n  age?: string;\n  tel?: string;\n  name?: string;\n  IPv4?: string;\n  email?: string;\n  password?: string;\n  colors?: string[];\n}\ntype FormProps = TYPE.Form.Props<Value>;\ntype FormValue = FormProps['value'];\ntype RuleFunc = TYPE.Rule.ValidFunc;\n\nconst password = {\n  func: (value: string, _formData: any, _cb: any, props: { message: string; title: string }) =>\n    new Promise((resolve, reject) => {\n      console.log('password', props);\n      if (!/\\d+/.test(value) || !/[a-z]+/i.test(value)) {\n        reject(new Error(props.message.replace('{title}', props.title)));\n      } else {\n        resolve(true);\n      }\n    }),\n};\n\nconst isExist: RuleFunc = (value, _, callback) => {\n  if (value.indexOf('so') >= 0) callback(new Error(`\"${value}\" is existed.`));\n  else callback(true);\n};\n\nconst rules = Rule(\n  // validate function package\n  {\n    password,\n    isExist,\n  },\n  // language package\n  {\n    password: {\n      message: '{title} at least has one numeral and one letter',\n    },\n  },\n);\n\nconst Sub: React.FC = () => {\n  const form = Form.useFormInstance();\n\n  const validateForm = () => {\n    console.log('form in child: >>', form)\n    form.validateFields(['password', 'age']);\n  }\n\n  return (\n    <div>\n      <Button type=\"warning\" onClick={validateForm}>use hook in children</Button>\n    </div>\n  );\n}\n\nconst FormComp: React.FC = () => {\n  const [value, setValue] = useState<FormValue>(undefined);\n\n  const [form, setForm] = Form.useForm<FormValue>();\n\n  const validateForm = () => {\n    console.log('form in parent: >>', form)\n    form.validateFields(['email', 'name']);\n  }\n\n  return (\n    <Form\n      setForm={setForm}\n      value={value}\n      onChange={setValue}\n      onSubmit={(d) => console.log(d)}\n    >\n      <Form.Item required label='Email'>\n        <Input name='email' title='Email' rules={[rules.required, rules.email]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Name'>\n        <Input name='name' title='Name' rules={[rules.required, rules.isExist]} clearable />\n      </Form.Item>\n\n      <Form.Item\n        required\n        label='Password'\n        tip='At least one letter, one numeral, and 6 - 20 characters.'\n      >\n        <Input\n          name='password'\n          title='Password'\n          type='password'\n          clearable\n          rules={[rules.required, rules.range(6, 20), rules.password]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Age' tip='between 18 and 60'>\n        <Input\n          name='age'\n          title='Age'\n          style={{ width: 100 }}\n          type='integer'\n          clearable\n          rules={[rules.required, rules.integer, rules.range(18, 60)]}\n        />\n      </Form.Item>\n\n      <Form.Item required label='Tel'>\n        <Input\n          name='tel'\n          title='Tel'\n          rules={[rules.required, rules.regExp('^[\\\\d\\\\s ().-]+$')]}\n          clearable\n        />\n      </Form.Item>\n\n      <Form.Item required label='IPv4'>\n        <Input name='IPv4' title='IP' rules={[rules.required, rules.ipv4]} clearable />\n      </Form.Item>\n\n      <Form.Item required label='Favorite Colors' tip='select your favorite colors'>\n        <Checkbox.Group\n          name='colors'\n          keygen={(d) => d}\n          data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']}\n          defaultValue={[]}\n          renderItem={(d) => <div style={{ width: 40 }}>{d}</div>}\n          style={{\n            display: 'flex',\n            gap: 12,\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n          }}\n          rules={[rules.required('At least select one favorite color'), rules.min(2), rules.max(3)]}\n        />\n      </Form.Item>\n\n      <Form.Item label=''>\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\n          <Sub></Sub>\n          <Button onClick={validateForm} type=\"danger\">use hook in parent</Button>\n        </div>\n        <div style={{marginTop: 32}}>\n          <Form.Button>Sumbit</Form.Button>\n          <Form.Reset>Reset</Form.Reset>\n        </div>\n      </Form.Item>\n    </Form>\n  );\n};\n\nconst App = () => (\n  <Grid gutter={36} style={{padding: 36}}>\n    <Grid>\n      <Alert type=\"info\" style={{ marginBottom: 12 }}>\n        表单1\n      </Alert>\n      <FormComp />\n    </Grid>\n    <Grid>\n      <Alert type=\"info\" style={{ marginBottom: 12 }}>\n        表单2\n      </Alert>\n      <FormComp />\n    </Grid>\n  </Grid>\n)\n\nexport default App;\n"
      },
      {
        "title": "Table usage",
        "description": "Form usage in table",
        "scenario": "basic",
        "code": "/**\n * cn - 表格中使用\n *    --  表单嵌套在表格中使用的场景\n * en - Table usage\n *    -- Form usage in table\n */\n\nimport { useState } from 'react';\nimport { Button, Form, Input, Table, TYPE, Rule, Link, Modal } from 'shineout';\nimport { ItemWithRequired} from './014-table-2';\n\ninterface TableRowData {\n  id?: number;\n  name?: string;\n  age?: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst rules = Rule();\n\nexport default () => {\n  const [formDatas, setFormDatas] = useState<TableRowData[]>([\n    { id: 1, name: 'Tom1', age: '18' },\n    { id: 2, name: 'Tom2', age: '28' },\n  ]);\n\n  const columns: TableColumnItem[] = [\n    { title: 'ID', width: 100, render: (d) => <div style={{ lineHeight: '32px' }}>{d.id}</div> },\n    {\n      title: <ItemWithRequired>Name</ItemWithRequired>,\n      width: 200,\n      render: (d) => {\n        return (\n          <ItemWithRequired>\n            <Form.Item style={{marginBottom: 0}}>\n              <Input\n                rules={[rules.required]}\n                value={d.name}\n                onChange={(v) => {\n                  setFormDatas(\n                    formDatas.map((item) => (item.id === d.id ? { ...item, name: v } : item)),\n                  );\n                }}\n              />\n            </Form.Item>\n          </ItemWithRequired>\n        );\n      },\n    },\n    {\n      title: 'Age',\n      width: 200,\n      render: (d) => {\n        return (\n          <Form.Item style={{marginBottom: 0}}>\n            <Input\n              rules={[rules.required]}\n              value={d.age}\n              onChange={(v) => {\n                setFormDatas(\n                  formDatas.map((item) => (item.id === d.id ? { ...item, age: v } : item)),\n                );\n              }}\n            />\n          </Form.Item>\n        );\n      },\n    },\n    {\n      title: 'Operation',\n      width: 100,\n      render: (d) => {\n        return (\n          <Link\n            type='danger'\n            onClick={() => {\n              setFormDatas(formDatas.filter((item) => item.id !== d.id));\n            }}\n            style={{ lineHeight: '32px' }}\n          >\n            Delete\n          </Link>\n        );\n      },\n    },\n  ];\n\n  return (\n    <Form value={formDatas} onChange={setFormDatas} onSubmit={() => console.log('submit:>>', JSON.stringify(formDatas, null, 2))}>\n      <div style={{ marginBottom: 12 }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            setFormDatas([\n              ...formDatas,\n              {\n                id: formDatas.length + 1,\n                name: `Tom${formDatas.length + 1}`,\n                age: `${(formDatas.length + 1) * 10 + 8}`,\n              },\n            ]);\n          }}\n        >\n          Add\n        </Button>\n\n        <Form.Submit onClick={() => {\n          Modal.info({\n            title: 'Form Data in Table',\n            content: <pre>{JSON.stringify(formDatas, null, 2)}</pre>,\n          })\n        }}>Submit</Form.Submit>\n      </div>\n\n      <Table data={formDatas} columns={columns} keygen='id' />\n    </Form>\n  );\n};\n"
      },
      {
        "title": "*    -- Form item use name to bind field",
        "description": "The `value` of Form needs to be an object, the value of the object is an array, and each item of the array is an object",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- Form的表单项使用 name 绑定字段用法\n *    -- Form的`value`需要是一个对象，对象的属性值是数组，数组的每一项是一个对象\n * en -\n *    -- Form item use name to bind field\n *    -- The `value` of Form needs to be an object, the value of the object is an array, and each item of the array is an object\n */\n\nimport { useState } from 'react';\nimport { Button, Form, Input, Table, TYPE, Rule, Link, Modal } from 'shineout';\n\nexport function ItemWithRequired(props: { children: React.ReactNode }) {\n  return (\n    <div style={{position: 'relative'}}>\n      <span style={{ color: '#EB4242', position: 'absolute', top: 0, left: -2, transform: 'translate(-100%, 0)' }}>*</span>\n      {props.children}\n    </div>\n  )\n}\ninterface TableRowData {\n  id?: number;\n  name?: string;\n  age?: string;\n}\n\ninterface FormTableValues {\n  values: TableRowData[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst rules = Rule();\n\nexport default () => {\n  const [formDatas, setFormDatas] = useState<FormTableValues>({\n    values:[\n      { id: 1, name: 'Tom1', age: '18' },\n      { id: 2, name: 'Tom2', age: '28' },\n    ]\n  });\n\n  const columns: TableColumnItem[] = [\n    { title: 'ID', width: 100, render: (d) => <div style={{ lineHeight: '32px' }}>{d.id}</div> },\n    {\n      title: <ItemWithRequired>Name</ItemWithRequired>,\n      width: 200,\n      render: (d, index) => {\n        return (\n          <ItemWithRequired>\n            <Form.Item style={{marginBottom: 0}}>\n              <Input\n                rules={[rules.required]}\n                name={`values[${index}].name`}\n              />\n            </Form.Item>\n          </ItemWithRequired>\n        );\n      },\n    },\n    {\n      title: 'Age',\n      width: 200,\n      render: (d, index) => {\n        return (\n          <Form.Item style={{marginBottom: 0}}>\n            <Input\n              rules={[rules.required]}\n              name={`values[${index}].age`}\n            />\n          </Form.Item>\n        );\n      },\n    },\n    {\n      title: 'Operation',\n      width: 100,\n      render: (d, index) => {\n        return (\n          <Link\n            type='danger'\n            onClick={() => {\n              setFormDatas({\n                values: formDatas.values.filter((item, idx) => idx !== index),\n              });\n            }}\n            style={{ lineHeight: '32px' }}\n          >\n            Delete\n          </Link>\n        );\n      },\n    },\n  ];\n\n  return (\n    <Form value={formDatas} onChange={setFormDatas} onSubmit={() => console.log('submit:>>', JSON.stringify(formDatas, null, 2))}>\n      <div style={{ marginBottom: 12 }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            setFormDatas({\n              values: [\n                ...formDatas.values,\n                {\n                  id: formDatas.values.length + 1,\n                  name: `Tom${formDatas.values.length + 1}`,\n                  age: `${(formDatas.values.length + 1) * 10 + 8}`,\n                },\n              ]\n            });\n          }}\n        >\n          Add\n        </Button>\n\n        <Form.Submit onClick={() => {\n          Modal.info({\n            title: 'Form Data in Table',\n            content: <pre>{JSON.stringify(formDatas, null, 2)}</pre>,\n          })\n        }}>Submit</Form.Submit>\n      </div>\n\n      <Table data={formDatas.values} columns={columns} keygen='id' />\n    </Form>\n  );\n};\n"
      },
      {
        "title": "initValidate",
        "description": "* en - initValidate",
        "scenario": "basic",
        "code": "/**\n * cn - initValidate\n *    --\n * en - initValidate\n *    --\n */\nimport { Form, Input, Button } from 'shineout';\nimport React from 'react';\n\nexport default () => {\n  const [v, setV] = React.useState({});\n  return (\n    <div>\n      <Form\n        initValidate\n        value={v}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          setV(v);\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='name'>\n          <Input\n            rules={[\n              { required: true, message: 'name is required' },\n              { max: 10, message: 'name length must less than 10' },\n            ]}\n            name={'name'}\n            clearable\n            placeholder='please input name'\n          />\n        </Form.Item>\n        <Form.Item label='email'>\n          <Input\n            name={'email'}\n            rules={[{ required: true, message: 'email is required' }]}\n            clearable\n            placeholder='please input email'\n          />\n        </Form.Item>\n\n        <Form.Item label=''>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n          <Button\n            onClick={() => {\n              setV({ name: 'aelsssssllonnnnggggggg' });\n            }}\n          >\n            Automatically verify modified fields after changing values\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
      },
      {
        "title": "size",
        "description": "The size of the form element",
        "scenario": "basic",
        "code": "/**\n * cn - size\n *    -- 表单元素的尺寸\n * en - size\n *    -- The size of the form element\n */\nimport React from 'react';\nimport { Form, Input, Radio, Textarea, TYPE } from 'shineout';\n\ntype RadioSize = TYPE.Radio.GroupProps<any, any>['size'];\n\nconst App: React.FC = () => {\n  const [size, setSize] = React.useState<RadioSize>('default');\n  return (\n    <>\n      <Radio.Group data={['default', 'small', 'large']} keygen value={size} onChange={setSize} />\n      <Form disabled size={size}>\n        <Form.Item label='Email'>\n          <Input name='email' />\n        </Form.Item>\n        <Form.Item label='Email2'>\n          <Input />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' />\n        </Form.Item>\n\n        <Form.Item label='Name'>\n          <Input.Group style={{ width: 300 }} disabled>\n            <Input name='firstName' placeholder='First Name' />\n            -\n            <Input name='lastName' placeholder='Last Name' />\n          </Input.Group>\n        </Form.Item>\n\n        <Form.Item label='Age'>\n          <Input.Number\n            style={{ width: 100 }}\n            name='age'\n            type='number'\n            digits={0}\n            defaultValue='0'\n          />\n        </Form.Item>\n        <Form.Item label='address'>\n          <Textarea rows={2} name='address' defaultValue='xxx' />\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Test Form",
        "description": "Test Form",
        "scenario": "basic",
        "code": "/**\n * cn - 调试用基础 Form\n *    -- 调试用的，在这个例子基础上随便改吧\n * en - Test Form\n *    -- Test Form\n */\nimport { Form, Input } from 'shineout';\n\nexport default () => {\n  return (\n    <Form onSubmit={(v) => console.log(v)}>\n      <Input name='name' trim></Input>\n\n      <Form.Submit>Submit</Form.Submit>\n      <Form.Reset>Reset</Form.Reset>\n    </Form>\n  );\n};\n"
      },
      {
        "title": "FieldSet (Loop)",
        "description": "* en - FieldSet (Loop)",
        "scenario": "basic",
        "code": "/**\n * cn - 绑定重复name\n *    --\n * en - FieldSet (Loop)\n */\nimport React, { useState } from 'react';\nimport { Button, DatePicker, Form, Input, Rule } from 'shineout';\n\n\ninterface Value {\n  id?: string;\n  case?: {\n    attachments: {\n      name: string;\n    }[];\n  };\n}\n\n\nconst ArrayDisplayComponent = ({ value }: {value: {name: string}[]}) => {\n  return value ? value.map((d, index) => <p key={index}>{d.name}</p>) : null;\n}\n\nconst ArrayHandleComponent = ({ value, onChange }: any) => {\n  console.log('ArrayHandleComponent value: >>', value)\n\n  const addItem = () => {\n    onChange([...(value || []), { name: `new item${value?.length || 0}` }])\n  }\n\n  const  removeItem = () => {\n    if(!value) return\n    onChange(value.slice(0, value.length - 1))\n  }\n\n  return <Button.Group>\n    <Button onClick={addItem}>添加条目</Button>\n    <Button onClick={removeItem}>删除条目</Button>\n  </Button.Group>\n}\n\nconst rule = Rule()\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({case: {attachments: [{name: 'item1'}, {name: 'item2'}]}});\n\n  const handleChange = (v: Value) => {\n    setValue(v);\n  };\n\n  return (\n    <Form\n      value={value}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <Form.Item>\n        <Input name=\"id\" rules={[rule.required()]} placeholder='有校验的字段' />\n      </Form.Item>\n      <Form.Item>\n        <Input name=\"name\" placeholder='无校验的字段' />\n      </Form.Item>\n      <Form.Item>\n        <DatePicker name={['start', 'end']} range rules={[rule.required()]} placeholder='name是数组的' />\n      </Form.Item>\n      <Form.Field name=\"case.attachments\" rules={[rule.required()]}>\n        {/* @ts-ignore */}\n        <ArrayDisplayComponent />\n      </Form.Field>\n      <Form.Field name=\"case.attachments\" rules={[rule.required()]}>\n        {/* @ts-ignore */}\n        <ArrayHandleComponent />\n      </Form.Field>\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Form Nested",
        "description": "Form nested",
        "scenario": "basic",
        "code": "/**\n * cn - Form nested\n *    -- 表单嵌套\n * en - Form Nested\n *    -- Form nested\n */\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\ntype ValueType = any;\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Form<ValueType>\n        labelWidth={100}\n        name=\"form1\"\n        onSubmit={(v) => console.log('parent form submit:>>', JSON.stringify(v, null, 2))}\n        onChange={(v) => {\n          console.log('parent form onChange:>>', JSON.stringify(v, null, 2));\n        }}\n        onReset={() => {\n          console.log('form1 reset');\n        }}\n      >\n        <Form.Item label='parent-input1'>\n          <Input name='parent-input1' />\n        </Form.Item>\n\n        <Form.Item label='parent-input2'>\n          <Input name='parent-input2' />\n        </Form.Item>\n\n        <Form\n          name='child-form'\n          onSubmit={(v) => console.log('child form submit:>>', JSON.stringify(v, null, 2))}\n          onReset={() => {\n            console.log('form2 reset');\n          }}\n          onChange={(v) => {\n            console.log('child form onChange:>>', JSON.stringify(v, null, 2));\n          }}\n          style={{ padding: 12, margin: 12, background: '#f0f0f0' }}\n        >\n          <Form.Item label='child-input1'>\n            <Input name='child-input1' />\n          </Form.Item>\n\n          <Form.Item labelAlign='right' label=''>\n            <Form.Submit>Child Form Submit</Form.Submit>\n            <Form.Reset type='warning'>Child Form Reset</Form.Reset>\n          </Form.Item>\n        </Form>\n\n        <Form.Item labelAlign='right' label=''>\n          <Form.Submit>Parent Form Submit</Form.Submit>\n          <Form.Reset type='warning'>Parent Form Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n\n      {/* <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          console.log('form1');\n        }}\n        onReset={() => {\n          console.log('form1 reset');\n        }}\n      >\n        <input type='text' name='test1' />\n\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            console.log('form1');\n          }}\n          onReset={(e) => {\n            e.preventDefault();\n            console.log('form2 reset');\n          }}\n        >\n          <input type='text' name='test2' />\n          <button type='submit'>submit2</button>\n          <button type='reset'>reset2</button>\n        </form>\n\n        <button type='submit'>submit1</button>\n        <button type='reset'>reset1</button>\n      </form> */}\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Test Form",
        "description": "Test Form",
        "scenario": "basic",
        "code": "/**\n * cn - 测试FieldSet销毁\n *    -- 调试用的，在这个例子基础上随便改吧\n * en - Test Form\n *    -- Test Form\n */\nimport { useEffect, useRef } from 'react';\nimport { Button, Form, Input } from 'shineout';\n\nconst CustomInput = (props) => {\n  useEffect(() => {\n    return () => {\n      console.count('destroy');\n    };\n  }, []);\n  return <Input {...props} />;\n};\n\n\nconst AA = () => {\n  const formRef = useRef();\n\n  return (\n    <>\n      <Button onClick={() => formRef.current.set({ list: [{ a: 1 }] })}>set form value</Button>\n      <Form\n        formRef={(ref) => {\n          formRef.current = ref;\n        }}\n      >\n        <Form.FieldSet name='list'>\n          {({}) => (\n            <Form.Field name='a'>\n              <CustomInput />\n            </Form.Field>\n          )}\n        </Form.FieldSet>\n      </Form>\n    </>\n  );\n};\n\nexport default AA;\n"
      },
      {
        "title": "FieldSet set",
        "description": "Use formRef.set to modify the value of FieldSet",
        "scenario": "basic",
        "code": "/**\n * cn - FieldSet set\n *    -- 使用formRef.set修改FieldSet的值\n * en - FieldSet set\n *    -- Use formRef.set to modify the value of FieldSet\n */\nimport React, { useState } from 'react';\nimport { Button, Form, Input, Rule } from 'shineout';\n\ninterface FriendsItem {\n  name?: string;\n  age?: string;\n}\ninterface Value {\n  name?: string;\n  age?: string;\n  friends?: FriendsItem[];\n}\n\nconst rules = Rule();\n\nconst add = (\n  <svg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <g clipPath='url(#clip0_2710_88158)'>\n      <path\n        d='M8.00008 0.666626C12.0502 0.666626 15.3334 3.94987 15.3334 7.99996C15.3334 12.05 12.0502 15.3333 8.00008 15.3333C3.94999 15.3333 0.666748 12.05 0.666748 7.99996C0.666748 3.94987 3.94999 0.666626 8.00008 0.666626ZM8.00008 4.66663C7.63189 4.66663 7.33341 4.9651 7.33341 5.33329V7.33329H5.33341C4.99152 7.33329 4.70974 7.59065 4.67123 7.92221L4.66675 7.99996C4.66675 8.36815 4.96522 8.66663 5.33341 8.66663H7.33341V10.6666C7.33341 11.0085 7.59077 11.2903 7.92233 11.3288L8.00008 11.3333C8.36827 11.3333 8.66675 11.0348 8.66675 10.6666V8.66663H10.6667C11.0086 8.66663 11.2904 8.40927 11.3289 8.07771L11.3334 7.99996C11.3334 7.63177 11.0349 7.33329 10.6667 7.33329H8.66675V5.33329C8.66675 4.9914 8.40939 4.70962 8.07783 4.67111L8.00008 4.66663Z'\n        fill='#197AFA'\n      />\n    </g>\n    <defs>\n      <clipPath id='clip0_2710_88158'>\n        <rect width='16' height='16' fill='white' />\n      </clipPath>\n    </defs>\n  </svg>\n);\n\nconst cancel = (\n  <svg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <g clipPath='url(#clip0_2710_88189)'>\n      <path\n        d='M8.00008 0.666626C3.94999 0.666626 0.666748 3.94987 0.666748 7.99996C0.666748 12.05 3.94999 15.3333 8.00008 15.3333C12.0502 15.3333 15.3334 12.05 15.3334 7.99996C15.3334 3.94987 12.0502 0.666626 8.00008 0.666626ZM11.3334 7.99996C11.3334 8.36815 11.0349 8.66663 10.6667 8.66663H5.33341C4.96522 8.66663 4.66675 8.36815 4.66675 7.99996C4.66675 7.63177 4.96522 7.33329 5.33341 7.33329H10.6667C11.0349 7.33329 11.3334 7.63177 11.3334 7.99996Z'\n        fill='#EB4242'\n      />\n    </g>\n    <defs>\n      <clipPath id='clip0_2710_88189'>\n        <rect width='16' height='16' fill='white' />\n      </clipPath>\n    </defs>\n  </svg>\n);\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({});\n  const [form, setForm] = Form.useForm();\n\n  const handleChange = (v: Value) => {\n    console.log('======================')\n    console.log('handleFormChange: >>', v)\n    console.log('======================')\n    setValue(v);\n  };\n\n  const setFriends = () => {\n    form.set({\n      friends: [{name: '123', age: '456'}]\n    })\n  }\n\n  const getValues = () => {\n    console.log('getvalues friends: >>', JSON.stringify(form.getValue('friends'), null, 2))\n    console.log('getvalues all: >>', JSON.stringify(form.getValue(), null, 2))\n  }\n\n  // console.log('======================')\n  // console.log('formValue: >>', value)\n  // console.log('======================')\n  return (\n    <Form\n      value={value}\n      setForm={setForm}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <Button onClick={setFriends}>set friends</Button>\n      <Button onClick={getValues}>get values</Button>\n      <Form.Item label='Name'>\n        <Input name='name' defaultValue='Harry Potter' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age' defaultValue='20' clearable />\n      </Form.Item>\n      {/* <Form.FieldSet name='abc'> */}\n      <Form.Item label='Friends'>\n        <Form.FieldSet\n          name='friends'\n          empty={(insert) => {\n            return (\n              <button type={'button'} onClick={() => insert({ name: '' })}>\n                Add new friends\n              </button>\n            );\n          }}\n          defaultValue={[{ name: 'Hermione Granger', age: '16' }]}\n        >\n          {({ onAppend, onRemove }) => (\n            <Form.Item style={{ marginBottom: 12 }}>\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <Input\n                  name='name'\n                  placeholder='Name'\n                  title='Friend name'\n                  rules={[rules.required('Name is required')]}\n                  style={{ width: 180, marginInlineEnd: 8 }}\n                  clearable\n                />\n                <Input\n                  name='age'\n                  type='number'\n                  placeholder='Age'\n                  rules={[rules.required('Age is required')]}\n                  title='Friend age'\n                  style={{ width: 60 }}\n                  clearable\n                />\n                <a\n                  style={{ margin: '0 12px', lineHeight: 1, cursor: 'pointer' }}\n                  onClick={() => onAppend({ name: '', age: '16' })}\n                >\n                  {add}\n                </a>\n                <a style={{ lineHeight: 1, cursor: 'pointer' }} onClick={onRemove}>\n                  {cancel}\n                </a>\n              </div>\n            </Form.Item>\n          )}\n        </Form.FieldSet>\n      </Form.Item>\n      {/* </Form.FieldSet> */}\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Test Form",
        "description": "Test Form",
        "scenario": "basic",
        "code": "/**\n * cn - form onchange\n *    -- 调试用的，在这个例子基础上随便改吧\n * en - Test Form\n *    -- Test Form\n */\nimport { Form, Input, DatePicker, Select } from 'shineout';\nimport { useState } from 'react';\n\nexport default () => {\n  const data = [1, 2];\n  const [formValue, setFormValue] = useState<Record<string, any>>({});\n\n  return (\n    <div>\n      <Form\n        value={formValue}\n        onChange={(vv) => {\n          console.log(111, vv);\n          setFormValue(vv);\n        }}\n      >\n        <Form.Item label='时间类型'>\n          <Select\n            name='timeType'\n            clearable\n            data={data}\n            keygen\n            onChange={(v) => {\n              const tempValue = {\n                ...formValue,\n                effectiveTimeEnd: '',\n                timeType: v,\n              };\n              // 为红色则name赋值\n              if (v === 1) {\n                console.log(222);\n                tempValue.effectiveTimeEnd = '2099-12-31 23:59:00';\n              }\n              console.log(333, tempValue);\n              setFormValue(tempValue);\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='生效时间'>\n          {formValue.timeType === 1 ? (\n            <Input.Group style={{ width: '100%' }}>\n              <DatePicker\n                type='datetime'\n                format='YYYY-MM-DD HH:mm'\n                defaultTime='00:00:00'\n                name='effectiveTimeBegin'\n                placeholder={'开始时间'}\n              />\n              <div style={{ display: 'flex', alignItems: 'center', padding: '0 8px' }}>~</div>\n              <div style={{ padding: '5px 8px' }}>{formValue.effectiveTimeEnd?.slice(0, 16)}</div>\n            </Input.Group>\n          ) : (\n            <DatePicker\n              type='datetime'\n              range\n              name={['effectiveTimeBegin', 'effectiveTimeEnd']}\n              reserveAble\n              defaultTime={['00:00:00', '23:59:00']}\n              placeholder={['开始时间', '结束时间']}\n              format='YYYY-MM-DD HH:mm'\n            />\n          )}\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Test Form",
        "description": "Test Form",
        "scenario": "basic",
        "code": "/**\n * cn - Form嵌套提交\n *    -- 调试用的，在这个例子基础上随便改吧\n * en - Test Form\n *    -- Test Form\n */\nimport React from 'react';\nimport { Form, Input, Switch, Button, Modal } from 'shineout';\n\nexport default () => {\n  const [parentForm, setParentForm] = React.useState({\n    parent1: '1',\n    parent2: '2',\n    showChild: true,\n  });\n  const [childForm, setChildForm] = React.useState({ child1: '1' });\n\n  const [modalVisible, setModalVisible] = React.useState(false);\n\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setModalVisible(true);\n        }}\n      >\n        打开Modal\n      </Button>\n      <Modal\n        title='嵌套Form提交'\n        visible={modalVisible}\n        footer={\n          <>\n            <Modal.Submit type='primary' data-apmclick='mindmap-用例列表的用例抽屉提交'>\n              保存\n            </Modal.Submit>\n            <Button\n              onClick={() => {\n                setModalVisible(false);\n              }}\n            >\n              取消\n            </Button>\n          </>\n        }\n      >\n        <Form\n          value={parentForm}\n          onChange={setParentForm}\n          onSubmit={(v) => console.log('parent form submit:>>', v)}\n        >\n          <h4>parent form:</h4>\n          <Input name='parent1' />\n          <Input name='parent2' />\n          <Switch name='showChild' />\n\n          {parentForm.showChild && (\n            <Form value={childForm} onChange={setChildForm}>\n              <h4>child form:</h4>\n              <Input name='child1' trim />\n            </Form>\n          )}\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n"
      },
      {
        "title": "scrollToError",
        "description": "Set the scrollToError property, when an error occurs inside the table, automatically scroll to the error row",
        "scenario": "basic",
        "code": "/**\n * cn - scrollToError\n *    -- 设置 scrollToError 属性，当表格内部发生错误时，自动滚动到错误行\n * en - scrollToError\n *    -- Set the scrollToError property, when an error occurs inside the table, automatically scroll to the error row\n */\nimport React, { useState } from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\ninterface FriendsItem {\n  name?: string;\n  age?: string;\n}\ninterface Value {\n  name?: string;\n  age?: string;\n  friends?: FriendsItem[];\n}\n\nconst rules = Rule();\n\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<Value>({});\n\n  const handleChange = (v: Value) => {\n    setValue(v);\n  };\n\n  return (\n    <div style={{ height: '300px', overflow: 'scroll'}} id=\"scrollContainer\">\n    <Form\n      value={value}\n      labelWidth={60}\n      onChange={handleChange}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n      scrollParent={() => document.getElementById('scrollContainer')}\n      scrollToError\n    >\n      <Form.Submit>Submit</Form.Submit>\n      <Form.Item label='Name'>\n        <Input name='name' defaultValue='Harry Potter' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age1' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age2' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age3' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age4' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age5' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age6' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age7' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age8' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age9' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age10' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age11' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age12' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age13' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age14' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age'>\n        <Input type='number' name='age15' defaultValue='20' clearable />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input name='age16' clearable rules={[rules.required()]} />\n      </Form.Item>\n      <Form.Item label='' style={{ marginTop: 20, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n    </div>\n\n  );\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [
      {
        "name": "Item",
        "description": "表单项组件，用于包装表单控件并提供标签、错误提示等功能。每个表单控件都应该被 Form.Item 包裹，以便正确显示标签和校验信息",
        "whenCn": "需要为表单控件添加标签、错误提示、必填标记等界面元素时使用。这是最常用的表单布局组件，适合包装 Input、Select、DatePicker 等表单控件",
        "whenEn": "Use when you need to add UI elements like labels, error messages, and required marks to form controls. This is the most commonly used form layout component, suitable for wrapping Input, Select, DatePicker and other form controls"
      },
      {
        "name": "Field",
        "description": "表单字段组件，用于创建自定义的表单控件。提供了表单数据绑定、校验等功能，适用于封装复杂的自定义表单组件",
        "whenCn": "需要创建自定义表单控件或封装复杂的表单逻辑时使用。适合将非标准表单组件（如自定义的颜色选择器、代码编辑器等）接入表单系统",
        "whenEn": "Use when you need to create custom form controls or encapsulate complex form logic. Suitable for integrating non-standard form components (like custom color pickers, code editors, etc.) into the form system"
      },
      {
        "name": "FieldSet",
        "description": "表单字段集组件，用于管理一组相关的表单字段。适用于处理对象或数组类型的表单数据，如动态表单列表、嵌套对象等复杂场景",
        "whenCn": "需要处理动态表单列表、嵌套对象或数组数据时使用。典型场景包括：动态添加/删除表单项、编辑用户列表、管理多个地址信息等",
        "whenEn": "Use when you need to handle dynamic form lists, nested objects or array data. Typical scenarios include: dynamically adding/removing form items, editing user lists, managing multiple address information, etc."
      },
      {
        "name": "Flow",
        "description": "表单流程组件，用于监听表单数据变化并执行相应的副作用。适用于实现表单联动、条件渲染等场景",
        "whenCn": "需要实现表单联动、条件渲染或监听表单数据变化时使用。例如：根据选择的国家显示不同的省份列表、根据用户类型显示不同的表单字段等",
        "whenEn": "Use when you need to implement form linkage, conditional rendering or listen to form data changes. For example: showing different province lists based on selected country, displaying different form fields based on user type, etc."
      },
      {
        "name": "Button",
        "description": "表单按钮组件，htmlType=\\\"button\\\"。防止用户在表单输入框中按回车键时意外提交表单。用户必须显式点击按钮才能提交表单。内部调用 formFunc.submit() 以更好地控制提交逻辑",
        "whenCn": "需要防止回车键意外提交表单，或需要在提交前执行自定义逻辑（如确认对话框）时使用。适合复杂表单或需要额外验证步骤的场景",
        "whenEn": "Use when you need to prevent accidental form submission via Enter key, or need to execute custom logic before submission (like confirmation dialogs). Suitable for complex forms or scenarios requiring additional validation steps"
      },
      {
        "name": "Submit",
        "description": "表单提交按钮组件，htmlType=\\\"submit\\\"。使用浏览器原生提交行为。当用户在任何表单输入框中按回车键时，会自动触发此按钮。适用于希望支持回车提交的简单表单",
        "whenCn": "需要支持回车键快速提交表单时使用。适合登录表单、搜索表单等简单场景，用户体验更流畅",
        "whenEn": "Use when you need to support quick form submission via Enter key. Suitable for login forms, search forms and other simple scenarios for smoother user experience"
      },
      {
        "name": "Reset",
        "description": "表单重置按钮组件，htmlType=\\\"reset\\\"。点击时将所有表单字段重置为初始值。适用于需要让用户快速恢复初始状态的复杂表单",
        "whenCn": "需要提供重置表单功能时使用。适合复杂表单或编辑表单，让用户可以快速恢复到初始状态或默认值",
        "whenEn": "Use when you need to provide form reset functionality. Suitable for complex forms or edit forms, allowing users to quickly restore to initial state or default values"
      }
    ],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 28,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 33
    },
    "subComponentApis": {
      "Item": {
        "whenCn": "需要为表单控件添加标签、错误提示、必填标记等界面元素时使用。这是最常用的表单布局组件，适合包装 Input、Select、DatePicker 等表单控件",
        "whenEn": "Use when you need to add UI elements like labels, error messages, and required marks to form controls. This is the most commonly used form layout component, suitable for wrapping Input, Select, DatePicker and other form controls",
        "description": "表单项组件，用于包装表单控件并提供标签、错误提示等功能。每个表单控件都应该被 Form.Item 包裹，以便正确显示标签和校验信息",
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "label",
            "type": "ReactNode | LabelConfig",
            "required": false,
            "description": "未定义时，标签不会 render，也不会占位。如果无内容需要占位，使用空字符串 \\\"\\\"。"
          },
          {
            "name": "tip",
            "type": "ReactNode",
            "required": false,
            "description": "提示文案"
          },
          {
            "name": "required",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "必填标记，纯展示用，不会触发校验"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "表单元素"
          },
          {
            "name": "labelWidth",
            "type": "string | number",
            "required": false,
            "defaultValue": "140px",
            "description": "标签宽度，labelAlign 为 \\\"top\\\" 时无效。统一设置表单项标签的宽度。可以是具体像素值（如 \\\"140px\\\"）或百分比（如 \\\"30%\\\"）。当标签顶部对齐时此配置无效。用于保持表单整齐的视觉效果，确保所有表单项的输入区域左对齐"
          },
          {
            "name": "labelAlign",
            "type": "\"left\" | \"right\" | \"top\"",
            "required": false,
            "description": "默认为空，跟随主题样式。标签的对齐方式。\\\"left\\\" 左对齐，\\\"right\\\" 右对齐，\\\"top\\\" 顶部对齐。不同的对齐方式适用于不同的表单布局需求：\\\"right\\\" 适合传统表单布局，\\\"top\\\" 适合移动端或紧凑布局，\\\"left\\\" 适合特殊设计需求"
          },
          {
            "name": "labelVerticalAlign",
            "type": "\"top\" | \"bottom\" | \"middle\"",
            "required": false,
            "defaultValue": "\\\"top\\\"",
            "description": "默认顶部对齐。标签的垂直对齐方式。当标签和输入框在同一行时（labelAlign 为 \\\"left\\\" 或 \\\"right\\\"），控制标签相对于输入框的垂直位置。\\\"top\\\" 与输入框顶部对齐，\\\"middle\\\" 居中对齐，\\\"bottom\\\" 与输入框底部对齐"
          },
          {
            "name": "keepErrorHeight",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "单行错误提示不撑开页面高度。保持错误提示高度固定，避免错误信息出现/消失时页面抖动。开启后会预留错误信息的显示空间，确保表单高度稳定。适用于对布局稳定性要求较高的场景，如表单项较多的长表单。注意：当 keepErrorBelow 为 true 时，此配置会失效"
          },
          {
            "name": "keepErrorBelow",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "是否保持错误信息在提示信息下方。控制错误信息的显示位置。开启后错误信息始终显示在表单项的 tip 属性下方，保持布局的一致性。关闭时错误信息可能会覆盖 tip 信息。适用于同时需要显示提示信息和错误信息的场景。注意：开启后会使 keepErrorHeight 失效",
            "version": "3.7.0"
          },
          {
            "name": "inline",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "是否水平布局。将表单项横向排列，适用于简单的单行表单或筛选表单。开启后表单项会在同一行显示，自动换行。通常用于搜索条件、筛选器等需要节省垂直空间的场景"
          },
          {
            "name": "colon",
            "type": "ReactNode",
            "required": false,
            "defaultValue": "false",
            "description": "统一控制所有表单项标签后是否显示冒号。可以是布尔值（true 显示默认冒号 \\\":\\\"）或自定义的 ReactNode（如 \\\"：\\\"、\\\"->\\\"等）。Form.Item 上的 colon 属性优先级更高，可以覆盖此全局设置",
            "version": "3.6.0"
          }
        ]
      },
      "Field": {
        "whenCn": "需要创建自定义表单控件或封装复杂的表单逻辑时使用。适合将非标准表单组件（如自定义的颜色选择器、代码编辑器等）接入表单系统",
        "whenEn": "Use when you need to create custom form controls or encapsulate complex form logic. Suitable for integrating non-standard form components (like custom color pickers, code editors, etc.) into the form system",
        "description": "表单字段组件，用于创建自定义的表单控件。提供了表单数据绑定、校验等功能，适用于封装复杂的自定义表单组件",
        "props": [
          {
            "name": "name",
            "type": "string | string[]",
            "required": true,
            "description": "绑定到表单数据的字段名称。支持点表示法访问嵌套对象（如 \\\"user.name\\\"）或数组语法（如 [\\\"user\\\", \\\"name\\\"]）。用于标识和管理特定的表单字段数据"
          },
          {
            "name": "reserveAble",
            "type": "boolean",
            "required": false,
            "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
          },
          {
            "name": "defaultValue",
            "type": "T",
            "required": false,
            "description": "表单首次渲染时字段的初始值。仅在组件初始化时生效，后续更改不会更新。常用于为新记录设置初始状态或提供默认值"
          },
          {
            "name": "rules",
            "type": "RuleItem[]",
            "required": false,
            "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
          },
          {
            "name": "children",
            "type": "((opts: object) => ReactNode) | ReactNode",
            "required": true,
            "description": "要渲染的表单控件。可以是具有 value/onChange 属性的 React 元素，或渲染函数。使用渲染函数时，会接收包含以下属性的对象：value（当前字段值）、onChange（值变更处理器）、error（校验错误）、disabled（继承自表单）、status（字段状态）。适用于自定义组件、第三方控件或复杂输入场景"
          },
          {
            "name": "onError",
            "type": "((error?: Error ) => void)",
            "required": false,
            "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
          },
          {
            "name": "bind",
            "type": "string[]",
            "required": false,
            "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
          }
        ]
      },
      "FieldSet": {
        "whenCn": "需要处理动态表单列表、嵌套对象或数组数据时使用。典型场景包括：动态添加/删除表单项、编辑用户列表、管理多个地址信息等",
        "whenEn": "Use when you need to handle dynamic form lists, nested objects or array data. Typical scenarios include: dynamically adding/removing form items, editing user lists, managing multiple address information, etc.",
        "description": "表单字段集组件，用于管理一组相关的表单字段。适用于处理对象或数组类型的表单数据，如动态表单列表、嵌套对象等复杂场景",
        "props": [
          {
            "name": "name",
            "type": "string",
            "required": true,
            "description": "绑定到表单数据的字段集名称。用于标识和管理一组相关的表单字段或数组数据。支持点表示法访问嵌套对象（如 \\\"users\\\"、\\\"company.employees\\\"）"
          },
          {
            "name": "children",
            "type": "((opts: object) => ReactNode) |ReactNode",
            "required": true,
            "description": "在字段集内渲染的内容。支持两种模式：\\n\\n**对象模式**（React 元素）：用于管理嵌套对象字段。子字段名称会自动加上字段集名称前缀。适用于分组相关表单字段，如地址、联系信息或用户资料等部分。\\n\\n**数组模式**（渲染函数）：用于管理动态数组数据。函数接收包含以下属性的对象：\\n- `list`：该字段集的完整数组数据\\n- `value`：当前索引位置的数据项\\n- `index`：当前数据项在数组中的索引\\n- `error`：当前数据项的校验错误\\n- `onChange`：更新当前数据项\\n- `onInsert`：在当前位置之前插入新数据项\\n- `onAppend`：在当前位置之后插入新数据项\\n- `onRemove`：从数组中移除当前数据项\\n\\n适用于动态列表、可重复表单部分或可编辑表格。"
          },
          {
            "name": "empty",
            "type": "((insert: (val: any) => void) => ReactNode)",
            "required": false,
            "description": "数组为空时显示的内容。仅在数组模式下（children 为函数时）有效。渲染函数接收 `insert` 回调来添加第一个数据项。适用于显示“添加第一个项目”按钮、空状态提示或动态列表的引导信息"
          },
          {
            "name": "defaultValue",
            "type": "T",
            "required": false,
            "description": "默认值"
          },
          {
            "name": "reserveAble",
            "type": "boolean",
            "required": false,
            "description": "设置为 true 组件卸载后表单不自动删除数据"
          },
          {
            "name": "rules",
            "type": "RuleItem[]",
            "required": false,
            "description": "校验规则 详见 Rule"
          }
        ]
      },
      "Flow": {
        "whenCn": "需要实现表单联动、条件渲染或监听表单数据变化时使用。例如：根据选择的国家显示不同的省份列表、根据用户类型显示不同的表单字段等",
        "whenEn": "Use when you need to implement form linkage, conditional rendering or listen to form data changes. For example: showing different province lists based on selected country, displaying different form fields based on user type, etc.",
        "description": "表单流程组件，用于监听表单数据变化并执行相应的副作用。适用于实现表单联动、条件渲染等场景",
        "props": [
          {
            "name": "children",
            "type": "(datum: FormDatum) => ReactNode",
            "required": true,
            "description": "渲染函数，接收表单数据管理器（datum）并返回 React 节点。datum 对象提供了动态获取/设置表单值的方法。适用于创建表单字段依赖关系、基于表单状态的条件渲染，或执行需要访问多个表单值的操作"
          },
          {
            "name": "names",
            "type": "string[]",
            "required": false,
            "description": "要监听变化的字段名称数组。为空或未定义时，表单内任意值变化都会触发重新渲染。指定后，仅这些字段的变化会触发更新。支持嵌套路径如 \\\"user.name\\\" 或 \\\"items[0].price\\\"。通过限制不必要的重新渲染来优化性能"
          },
          {
            "name": "strict",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "设为 true 时，使用缓存机制防止重新渲染，除非监听的字段值真正发生变化。在严格模式下，只有指定的 names 字段值（而非仅引用）改变时才重新渲染子组件。适用于包含昂贵渲染操作的复杂表单的性能优化",
            "version": "3.6.0"
          }
        ]
      },
      "Button": {
        "whenCn": "需要防止回车键意外提交表单，或需要在提交前执行自定义逻辑（如确认对话框）时使用。适合复杂表单或需要额外验证步骤的场景",
        "whenEn": "Use when you need to prevent accidental form submission via Enter key, or need to execute custom logic before submission (like confirmation dialogs). Suitable for complex forms or scenarios requiring additional validation steps",
        "description": "表单按钮组件，htmlType=\\\"button\\\"。防止用户在表单输入框中按回车键时意外提交表单。用户必须显式点击按钮才能提交表单。内部调用 formFunc.submit() 以更好地控制提交逻辑",
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "按钮里面的内容, 可以是文字图标等"
          },
          {
            "name": "onClick",
            "type": "MouseEventHandler<Element>",
            "required": false,
            "description": "按钮点击回调"
          },
          {
            "name": "disabled",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "禁用"
          },
          {
            "name": "renderLoading",
            "type": "((buttonEl: ReactNode) => ReactElement)",
            "required": false,
            "description": "自定义loading"
          },
          {
            "name": "loading",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "loading 状态"
          },
          {
            "name": "mode",
            "type": "\"text\" | \"outline\" | \"dashed\"",
            "required": false,
            "description": "按钮风格"
          },
          {
            "name": "type",
            "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "按钮类型"
          },
          {
            "name": "size",
            "type": "\"default\" | \"small\" | \"large\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "按钮尺寸"
          },
          {
            "name": "space",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "仅有2个汉字的按钮，是否在2个汉字中间插入空格"
          },
          {
            "name": "href",
            "type": "string",
            "required": false,
            "description": "如果设置了 href 属性，将会用 <a> 代替 <button>"
          },
          {
            "name": "target",
            "type": "string",
            "required": false,
            "description": "当设置了 href 属性时，target 会被设置到 <a> 元素上"
          },
          {
            "name": "shape",
            "type": "\"circle\" | \"round\" | \"square\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "设置按钮形状"
          },
          {
            "name": "htmlType",
            "type": "\"button\" | \"submit\" | \"reset\"",
            "required": false,
            "defaultValue": "\\\"button\\\"",
            "description": "按钮原生type属性"
          }
        ]
      },
      "Submit": {
        "whenCn": "需要支持回车键快速提交表单时使用。适合登录表单、搜索表单等简单场景，用户体验更流畅",
        "whenEn": "Use when you need to support quick form submission via Enter key. Suitable for login forms, search forms and other simple scenarios for smoother user experience",
        "description": "表单提交按钮组件，htmlType=\\\"submit\\\"。使用浏览器原生提交行为。当用户在任何表单输入框中按回车键时，会自动触发此按钮。适用于希望支持回车提交的简单表单",
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "按钮里面的内容, 可以是文字图标等"
          },
          {
            "name": "onClick",
            "type": "MouseEventHandler<Element>",
            "required": false,
            "description": "按钮点击回调"
          },
          {
            "name": "disabled",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "禁用"
          },
          {
            "name": "renderLoading",
            "type": "((buttonEl: ReactNode) => ReactElement)",
            "required": false,
            "description": "自定义loading"
          },
          {
            "name": "loading",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "loading 状态"
          },
          {
            "name": "mode",
            "type": "\"text\" | \"outline\" | \"dashed\"",
            "required": false,
            "description": "按钮风格"
          },
          {
            "name": "type",
            "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "按钮类型"
          },
          {
            "name": "size",
            "type": "\"default\" | \"small\" | \"large\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "按钮尺寸"
          },
          {
            "name": "space",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "仅有2个汉字的按钮，是否在2个汉字中间插入空格"
          },
          {
            "name": "href",
            "type": "string",
            "required": false,
            "description": "如果设置了 href 属性，将会用 <a> 代替 <button>"
          },
          {
            "name": "target",
            "type": "string",
            "required": false,
            "description": "当设置了 href 属性时，target 会被设置到 <a> 元素上"
          },
          {
            "name": "shape",
            "type": "\"circle\" | \"round\" | \"square\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "设置按钮形状"
          },
          {
            "name": "htmlType",
            "type": "\"button\" | \"submit\" | \"reset\"",
            "required": false,
            "defaultValue": "\\\"button\\\"",
            "description": "按钮原生type属性"
          }
        ]
      },
      "Reset": {
        "whenCn": "需要提供重置表单功能时使用。适合复杂表单或编辑表单，让用户可以快速恢复到初始状态或默认值",
        "whenEn": "Use when you need to provide form reset functionality. Suitable for complex forms or edit forms, allowing users to quickly restore to initial state or default values",
        "description": "表单重置按钮组件，htmlType=\\\"reset\\\"。点击时将所有表单字段重置为初始值。适用于需要让用户快速恢复初始状态的复杂表单",
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "按钮里面的内容, 可以是文字图标等"
          },
          {
            "name": "onClick",
            "type": "MouseEventHandler<Element>",
            "required": false,
            "description": "按钮点击回调"
          },
          {
            "name": "disabled",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "禁用"
          },
          {
            "name": "renderLoading",
            "type": "((buttonEl: ReactNode) => ReactElement)",
            "required": false,
            "description": "自定义loading"
          },
          {
            "name": "loading",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "loading 状态"
          },
          {
            "name": "mode",
            "type": "\"text\" | \"outline\" | \"dashed\"",
            "required": false,
            "description": "按钮风格"
          },
          {
            "name": "type",
            "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "按钮类型"
          },
          {
            "name": "size",
            "type": "\"default\" | \"small\" | \"large\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "按钮尺寸"
          },
          {
            "name": "space",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "仅有2个汉字的按钮，是否在2个汉字中间插入空格"
          },
          {
            "name": "href",
            "type": "string",
            "required": false,
            "description": "如果设置了 href 属性，将会用 <a> 代替 <button>"
          },
          {
            "name": "target",
            "type": "string",
            "required": false,
            "description": "当设置了 href 属性时，target 会被设置到 <a> 元素上"
          },
          {
            "name": "shape",
            "type": "\"circle\" | \"round\" | \"square\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "设置按钮形状"
          },
          {
            "name": "htmlType",
            "type": "\"button\" | \"submit\" | \"reset\"",
            "required": false,
            "defaultValue": "\\\"button\\\"",
            "description": "按钮原生type属性"
          }
        ]
      }
    }
  },
  "Gap": {
    "name": "Gap",
    "description": "设置组件之间的间距",
    "category": "layout",
    "importPath": "import { Gap } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "column",
        "type": "string | number",
        "required": false,
        "defaultValue": "8",
        "description": "水平方向的列间距"
      },
      {
        "name": "row",
        "type": "string | number",
        "required": false,
        "defaultValue": "8",
        "description": "垂直方向的行间距"
      },
      {
        "name": "itemStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "子元素自定义样式"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Set horizontal and vertical spacing for child elements",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 为子元素设置水平和垂直间距\n * en - Base\n *    -- Set horizontal and vertical spacing for child elements\n */\nimport React from 'react';\nimport { Gap, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <Gap style={{ width: 400 }}>\n    {Array.from({ length: 10 }).map((_, i) => (\n      <Button key={i} type='primary'>\n        Button\n      </Button>\n    ))}\n  </Gap>\n);\n\nexport default App;\n"
      },
      {
        "title": "Custom",
        "description": "custom the vertical and horizontal spacing by row and column",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义间距\n *    -- 通过 row 和 column 分别来调整垂直和水平间距\n *    -- 推荐优先考虑4px、8px、12px、16px、24px的间距值\n * en - Custom\n *    -- custom the vertical and horizontal spacing by row and column\n *    -- It is recommended to consider the spacing values of 4px, 8px, 12px, 16px, 24px first\n */\nimport React, { useState } from 'react';\nimport { Gap, Button, Slider } from 'shineout';\n\nconst App: React.FC = () => {\n  const [row, setRow] = useState(8);\n  const [column, setColumn] = useState(8);\n  return (\n    <>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 16 }}>\n        <div style={{ width: 80 }}>column:</div>\n        <Slider\n          style={{ flex: 1 }}\n          scale={[0, 100]}\n          formatScale={false}\n          defaultValue={column}\n          onChange={setColumn}\n        />\n      </div>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 24 }}>\n        <div style={{ width: 80 }}>row:</div>\n        <Slider\n          style={{ flex: 1 }}\n          scale={[0, 100]}\n          formatScale={false}\n          defaultValue={row}\n          onChange={setRow}\n        />\n      </div>\n      <div style={{ width: 500, border: '1px solid #e8ebf0', borderRadius: '4px', padding: 10 }}>\n        <Gap row={row} column={column}>\n          {Array.from({ length: 10 }).map((_, i) => (\n            <Button key={i} type='primary'>\n              Button\n            </Button>\n          ))}\n        </Gap>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Vertical",
        "description": "Set flexDirection to change the direction",
        "scenario": "basic",
        "code": "/**\n * cn - 垂直方向\n *    -- 设置  flexDirection 样式来改变方向\n * en - Vertical\n *    -- Set flexDirection to change the direction\n */\nimport React from 'react';\nimport { Gap, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <Gap style={{ width: 400, flexDirection: 'column' }} row={10}>\n    {Array.from({ length: 4 }).map((_, i) => (\n      <Button key={i} type='primary'>\n        Button\n      </Button>\n    ))}\n  </Gap>\n);\n\nexport default App;\n"
      },
      {
        "title": "Align",
        "description": "Set align to change the alignment",
        "scenario": "basic",
        "code": "/**\n * cn - 对齐方式\n *    -- 通过 alignItem 设置对齐方式\n * en - Align\n *    -- Set align to change the alignment\n */\nimport React, { useState } from 'react';\nimport { Gap, Button, Radio } from 'shineout';\n\nconst App: React.FC = () => {\n  const [align, setAlign] = useState('flex-start');\n  return (\n    <>\n      <Radio.Group\n        value={align}\n        onChange={setAlign}\n        data={['flex-start', 'center', 'flex-end', 'baseline']}\n        keygen\n        defaultValue='flex-start'\n      />\n\n      <Gap\n        style={{\n          width: 160,\n          marginTop: 16,\n          border: '1px solid #e8ebf0',\n          borderRadius: '4px',\n          alignItems: align,\n          padding: 12,\n        }}\n        row={20}\n      >\n        <span>start</span>\n        <Button type='primary'>Button</Button>\n        <div\n          style={{\n            fontSize: 14,\n            background: '#f4f5f8',\n            height: 120,\n            lineHeight: '24px',\n            borderRadius: '4px',\n            padding: '12px',\n          }}\n        >\n          end\n        </div>\n      </Gap>\n    </>\n  );\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 6,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 4
    }
  },
  "Grid": {
    "name": "Grid",
    "description": "动态栅格体系，用于某些不适合使用 flex 的地方",
    "category": "layout",
    "importPath": "import { Grid } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "gutter",
        "type": "number",
        "required": false,
        "description": "栅格之间间距"
      },
      {
        "name": "offset",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "左偏移百分比，0 <= offset < 1"
      },
      {
        "name": "width",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "宽度百分比，0 < number <= 1"
      },
      {
        "name": "responsive",
        "type": "\"sm\" | \"md\" | \"lg\" | \"xl\"",
        "required": false,
        "defaultValue": "\\\"md\\\"",
        "description": "激活响应式的最小尺寸。sm: 568px; md: 768px; lg: 992px; xl: 1200px;\\n例如：设置为 sm 时，屏幕尺寸若低于568px，栅格系统的响应性将不会生效。"
      },
      {
        "name": "stretch",
        "type": "boolean",
        "required": false,
        "description": "是否撑满容器高度"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素"
      }
    ],
    "examples": [
      {
        "title": "Arbitrary",
        "description": "Grid system is dynamic generated and can be any number",
        "scenario": "basic",
        "code": "/**\n * cn - 任意等分\n *    -- Grid 的栅格体系是动态生成，可以实现任意等份\n * en - Arbitrary\n *    -- Grid system is dynamic generated and can be any number\n */\nimport React, { useState } from 'react';\nimport { Grid, Slider, TYPE } from 'shineout';\n\ntype SliderProps = TYPE.Slider.Props<number>;\ntype SliderOnChange = SliderProps['onChange'];\n\nconst gridStyle: React.CSSProperties = {\n  color: '#fff',\n  paddingInlineStart: 8,\n  background: '#197afa',\n  fontSize: 14,\n};\nconst style: React.CSSProperties = { background: '#e8ebf0', marginBottom: 4, lineHeight: '30px' };\n\nconst App: React.FC = () => {\n  const [count, setCount] = useState(5);\n\n  const handleCountChange: SliderOnChange = (v) => {\n    setCount(v);\n  };\n  return (\n    <div>\n      <Slider\n        step={0}\n        value={count}\n        formatValue={false}\n        onChange={handleCountChange}\n        scale={[1, 2, 3, 5, 8, 13, 21, 34, 55]}\n      />\n\n      <div style={{ height: 20 }} />\n\n      {Array.from({ length: count }).map((_n, i) => (\n        <div key={i} style={style}>\n          <Grid width={(i + 1) / count} style={gridStyle}>\n            {`${i + 1}/${count}`}\n          </Grid>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Offset",
        "description": "The offset property set the offset in the same way as the width",
        "scenario": "basic",
        "code": "/**\n * cn - 偏移\n *    -- offset 属性可以设置偏移，取值方式和宽度相同\n * en - Offset\n *    -- The offset property set the offset in the same way as the width\n */\nimport React from 'react';\nimport { Grid } from 'shineout';\n\nconst style: React.CSSProperties = {\n  background: '#e8ebf0',\n};\nconst gridStyle: React.CSSProperties = {\n  color: '#fff',\n  lineHeight: '60px',\n  textAlign: 'center',\n  background: '#197afa',\n  fontSize: 14,\n};\n\nconst App: React.FC = () => (\n  <div style={style}>\n    <Grid width={1 / 3} offset={1 / 3} style={gridStyle}>\n      With 1/3, Offset 1/3\n    </Grid>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Nested",
        "description": "Nested grids",
        "scenario": "basic",
        "code": "/**\n * cn - 嵌套\n *    -- 嵌套的栅格\n * en - Nested\n *    -- Nested grids\n */\nimport React from 'react';\nimport { Grid } from 'shineout';\n\nconst style: React.CSSProperties = {\n  color: '#fff',\n  lineHeight: '30px',\n  textAlign: 'center',\n  background: '#197afa',\n  fontSize: 14,\n};\n\nconst App: React.FC = () => (\n  <Grid style={{ textAlign: 'center' }}>\n    <Grid width={1 / 2} style={style}>\n      1/2\n    </Grid>\n\n    <Grid width={1 / 2} style={{ lineHeight: '30px' }}>\n      <div style={{ fontSize: 14 }}>1/2</div>\n      <div>\n        <Grid style={style} width={1 / 3}>\n          1/3\n        </Grid>\n        <Grid\n          style={{ ...style, background: '#6bb5ff', color: '#fff', fontSize: 14 }}\n          width={1 / 3}\n        >\n          1/3\n        </Grid>\n        <Grid style={style} width={1 / 3}>\n          1/3\n        </Grid>\n      </div>\n    </Grid>\n  </Grid>\n);\n\nexport default App;\n"
      },
      {
        "title": "Gutter",
        "description": "Set grid spacing through the gutter property",
        "scenario": "basic",
        "code": "/**\n * cn - 间距\n *    -- 通过 gutter 属性设置栅格间距\n * en - Gutter\n *    -- Set grid spacing through the gutter property\n */\nimport React from 'react';\nimport { Grid } from 'shineout';\n\nconst style: React.CSSProperties = {\n  background: '#e8ebf0',\n};\nconst gridStyle: React.CSSProperties = {\n  color: '#fff',\n  lineHeight: '30px',\n  textAlign: 'center',\n  background: '#197afa',\n  fontSize: 14,\n};\nconst gridStyle2: React.CSSProperties = {\n  color: '#fff',\n  lineHeight: '30px',\n  textAlign: 'center',\n  background: '#6bb5ff',\n  fontSize: 14,\n};\n\nconst App: React.FC = () => (\n  <div style={style}>\n    <Grid gutter={8}>\n      {Array.from({ length: 8 })\n        .map((_, i) => i + 1)\n        .map((i) => (\n          <Grid key={i} width={1 / 8}>\n            <div style={i % 2 === 0 ? gridStyle2 : gridStyle}>1/8</div>\n          </Grid>\n        ))}\n    </Grid>\n  </div>\n);\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 8,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 4
    }
  },
  "Image": {
    "name": "Image",
    "description": "用于图片展示及预览",
    "category": "other",
    "importPath": "import { Image } from 'shineout'",
    "props": [
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "onClick",
        "type": "MouseEventHandler<Element>",
        "required": false,
        "description": "点击图片的回调"
      },
      {
        "name": "onError",
        "type": "((e: Event, type: number) => void)",
        "required": false,
        "description": "src或alt 地址请求出错回调"
      },
      {
        "name": "placeholder",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "\\\"loading",
        "description": "图加载时的占位内容"
      },
      {
        "name": "title",
        "type": "string",
        "required": false,
        "description": "原生 title 属性"
      },
      {
        "name": "renderHoverMask",
        "type": "((options: { preview: () => void }) => ReactElement)",
        "required": false,
        "description": "自定义渲染 hover 时的遮罩层内容，options参数中有一个 preview 方法，调用 preview 方法可以预览图片",
        "version": "3.6.0"
      },
      {
        "name": "fit",
        "type": "\"fill\" | \"center\" | \"fit\" | \"stretch\"",
        "required": false,
        "defaultValue": "-",
        "description": "图片填充方式"
      },
      {
        "name": "container",
        "type": "string | HTMLElement",
        "required": false,
        "defaultValue": "-",
        "description": "懒加载容器"
      },
      {
        "name": "error",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "-",
        "description": "自定义错误内容"
      },
      {
        "name": "href",
        "type": "string",
        "required": false,
        "description": "原始图片地址"
      },
      {
        "name": "lazy",
        "type": "number | boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否延迟加载，如果为数字则表示懒加载偏移量"
      },
      {
        "name": "inViewOnly",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否仅在视图内加载",
        "version": "3.4.5"
      },
      {
        "name": "noImgDrag",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁止 img 元素原生 draggable 属性"
      },
      {
        "name": "shape",
        "type": "\"rounded\" | \"circle\" | \"thumbnail\"",
        "required": false,
        "defaultValue": "\\\"rounded\\\"",
        "description": "图片形状"
      },
      {
        "name": "target",
        "type": "\"_self\" | \"_blank\" | \"_modal\" | \"_download\"",
        "required": false,
        "defaultValue": "\\\"_modal\\\"",
        "description": "图片打开方式"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "defaultValue": "100%",
        "description": "图片宽度"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "defaultValue": "100%",
        "description": "图片高度"
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": "图片地址"
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": "备用地址，src无效时会应用"
      },
      {
        "name": "autoSSL",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否根据页面自动转换协议"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Base Image",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    --基础 Image 用法\n * en - Base\n *    --Base Image\n */\n\nimport React from 'react';\nimport { Image } from 'shineout';\n\nexport default () => {\n  return (\n    <div\n      style={{\n        gap: 8,\n        display: 'flex',\n      }}\n    >\n      <Image\n        fit='fill'\n        width={128}\n        height={128}\n        target='_modal'\n        src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n        href='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n      ></Image>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Status",
        "description": "Image has different status when loading",
        "scenario": "basic",
        "code": "/**\n * cn - 不同状态\n *    -- 图片在加载过程中，会有不同的状态。不同状态下的 Image 展现形式不同\n * en - Status\n *    -- Image has different status when loading\n */\n\nimport React from 'react';\nimport { Image, Button } from 'shineout';\n\nexport default () => {\n  const [key, setKey] = React.useState(0);\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setKey(key + 1);\n        }}\n        style={{marginBottom: 12}}\n      >\n        reload\n      </Button>\n      <div\n        key={key}\n        style={{\n          gap: 8,\n          display: 'flex',\n        }}\n      >\n        <Image\n          fit='fill'\n          width={128}\n          height={128}\n          target='_modal'\n          src={`https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png?v=${key}`}\n          href={`https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png?v=${key}`}\n        />\n        <Image fit='fill' width={128} height={128} src='error' />\n      </div>\n    </>\n  );\n};\n"
      },
      {
        "title": "*    -- Custom rendering of content in different states:",
        "description": "1. `error` is used to customize the content when loading fails",
        "scenario": "custom",
        "code": "/**\n * cn -\n *    -- 支持自定义渲染不同状态下的内容：\n *    -- 1、通过设置 `error` 属性自定义渲染加载失败时的内容\n *    -- 2、通过设置 `placeholder` 属性用于自定义渲染加载中时的占位符内容\n * en -\n *    -- Custom rendering of content in different states:\n *    -- 1. `error` is used to customize the content when loading fails\n *    -- 2. `placeholder` is used to customize the placeholder content when loading\n */\n\nimport React from 'react';\nimport { Image, Button } from 'shineout';\n\nexport default () => {\n  const [key, setKey] = React.useState(0);\n  const renderIcon = () => {\n    return (\n      <svg\n        width='16'\n        height='16'\n        viewBox='0 0 16 16'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          fillRule='evenodd'\n          clipRule='evenodd'\n          d='M6.67122 2C7.4076 2 8.00456 2.59695 8.00456 3.33333C8.00456 3.50839 7.97008 3.68173 7.90311 3.84347L7.42418 5L8.6665 6.91387L7.18965 9.80933L8.04044 12.2235C8.2852 12.918 7.92059 13.6794 7.22608 13.9242C7.08371 13.9744 6.93386 14 6.78291 14H1.99984C1.26346 14 0.666504 13.403 0.666504 12.6667V3.33333C0.666504 2.59695 1.26346 2 1.99984 2H6.67122ZM13.9998 2C14.7362 2 15.3332 2.59695 15.3332 3.33333V12.6667C15.3332 13.403 14.7362 14 13.9998 14H10.7806C10.2061 14 9.69625 13.6321 9.51521 13.0869L8.42684 9.80933L9.81843 6.66667L8.6665 5L9.10115 3.04409C9.23672 2.43404 9.7778 2 10.4027 2H13.9998ZM4.13693 9.53628L1.99984 11.664V12C1.99984 12.3682 2.29831 12.6667 2.6665 12.6667H5.84111C6.2093 12.6667 6.50778 12.3682 6.50778 12C6.50778 11.9245 6.49497 11.8496 6.46988 11.7784L5.86317 10.058L5.1383 9.48081C4.83888 9.24225 4.40817 9.26611 4.13693 9.53628ZM10.2945 8.88333L9.95912 9.64247C9.89202 9.79403 9.88378 9.96515 9.93601 10.1225L10.6292 12.2101C10.7197 12.4827 10.9747 12.6667 11.2619 12.6667H13.3332C13.7014 12.6667 13.9998 12.3682 13.9998 12V11.7053L10.2945 8.88333ZM13.3332 3.33333H10.9377C10.6251 3.33333 10.3545 3.55045 10.2868 3.85556L10.1579 4.43666C10.1177 4.61775 10.1548 4.8074 10.2602 4.96002L11.1278 6.21597C11.2597 6.40688 11.2829 6.65263 11.1889 6.86479L10.8145 7.70933L13.9998 10.1347V4C13.9998 3.63181 13.7014 3.33333 13.3332 3.33333ZM5.69471 3.33333H2.6665C2.29831 3.33333 1.99984 3.63181 1.99984 4V10.0933L4.13693 7.96532C4.40817 7.69516 4.83888 7.6713 5.1383 7.90986L6.03493 8.62424C6.0979 8.67442 6.16629 8.71346 6.23767 8.7416L6.95367 7.33688C7.06186 7.1247 7.04864 6.87093 6.919 6.67114L6.11482 5.43183C5.99536 5.24774 5.97415 5.01664 6.05812 4.81387L6.29761 4.23555C6.43549 3.90258 6.27735 3.52087 5.94438 3.38298C5.86522 3.3502 5.78038 3.33333 5.69471 3.33333ZM3.99984 4C4.73621 4 5.33317 4.59696 5.33317 5.33333C5.33317 6.0697 4.73621 6.66667 3.99984 6.66667C3.26347 6.66667 2.6665 6.0697 2.6665 5.33333C2.6665 4.59696 3.26347 4 3.99984 4ZM3.99984 5.14286C3.89463 5.14286 3.80936 5.22813 3.80936 5.33333C3.80936 5.43854 3.89463 5.52381 3.99984 5.52381C4.10504 5.52381 4.19031 5.43854 4.19031 5.33333C4.19031 5.22813 4.10504 5.14286 3.99984 5.14286Z'\n          fill='#B3B7C1'\n        />\n      </svg>\n    );\n  };\n  const renderError = () => {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexDirection: 'column',\n          fontSize: 12,\n          color: '#666C7C',\n        }}\n      >\n        <div>{renderIcon()}</div>\n        <div>Error</div>\n      </div>\n    );\n  };\n\n  const renderPlaceholder = () => {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 12,\n          color: '#666C7C',\n        }}\n      >\n        <div>疯狂加载中...</div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setKey(key + 1);\n        }}\n        style={{ marginBottom: 12 }}\n      >\n        reload\n      </Button>\n\n      <div\n        key={key}\n        style={{\n          gap: 8,\n          display: 'flex',\n        }}\n      >\n        <Image\n          fit='fill'\n          width={128}\n          height={128}\n          target='_modal'\n          placeholder={renderPlaceholder()}\n          src={`https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png?v=${key}`}\n        />\n        <Image fit='fill' width={128} height={128} src='error' error={renderError()} />\n      </div>\n    </>\n  );\n};\n"
      },
      {
        "title": "Shape",
        "description": "Image can be set to different shapes",
        "scenario": "basic",
        "code": "/**\n * cn - 图片形状\n *    -- Image 可以设置不同的形状\n *    -- 内置三种不同的形状：圆角模式 rounded、圆形模式 circle、带边框模式 thumbnail\n * en - Shape\n *    -- Image can be set to different shapes\n */\n\nimport React from 'react';\nimport { Image } from 'shineout';\n\nexport default () => {\n  return (\n    <div\n      style={{\n        gap: 8,\n        display: 'flex',\n      }}\n    >\n      <Image\n        shape='rounded'\n        fit='fill'\n        width={128}\n        height={128}\n        src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n      ></Image>\n      <Image\n        shape='circle'\n        fit='fill'\n        width={128}\n        height={128}\n        src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n      ></Image>\n      <Image\n        shape='thumbnail'\n        fit='fill'\n        width={128}\n        height={128}\n        src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n      ></Image>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Fit",
        "description": "Image has four different fill modes:",
        "scenario": "basic",
        "code": "/**\n * cn - 填充方式\n *    -- Image 四种不同的图片填充方式：\n *    -- fill 填充整个容器、center 居中、fit 原图、stretch 拉伸；默认推荐使用「填充」\n * en - Fit\n *    -- Image has four different fill modes:\n *    -- fill, center, fit, stretch ; fill is recommended by default\n */\n\nimport React from 'react';\nimport { Image } from 'shineout';\n\nexport default () => {\n  const fit = ['fill', 'center', 'fit', 'stretch'];\n\n  return (\n    <div\n      style={{\n        gap: 8,\n        display: 'flex',\n      }}\n    >\n      {fit.map((item, index) => {\n        return (\n          <div key={index} style={{ display: 'flex', flexDirection: 'column' }}>\n            <Image\n              fit={item as any}\n              width={128}\n              height={128}\n              src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n            ></Image>\n            <div style={{ textAlign: 'center', color: '#141737', fontSize: 12, marginTop: 5 }}>\n              {item}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"
      },
      {
        "title": "Target",
        "description": "Image has four open modes: _modal open preview through layer, _blank open preview through new window, _self open preview through current window, _download download image",
        "scenario": "basic",
        "code": "/**\n * cn - 打开方式\n *    -- Image 通过配置 `target` 属性实现四种打开方式：\n *    -- _modal 通过弹层打开预览、_blank 通过新窗口打开预览、_self 通过当前窗口打开预览、_download 下载图片\n * en - Target\n *    -- Image has four open modes: _modal open preview through layer, _blank open preview through new window, _self open preview through current window, _download download image\n */\n\nimport React from 'react';\nimport { Image } from 'shineout';\n\nexport default () => {\n  const images = [\n    {\n      src: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n      target: '_modal',\n    },\n    {\n      src: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n      target: '_blank',\n    },\n    {\n      src: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n      target: '_self',\n    },\n    {\n      src: 'static/image/s-01.png',\n      target: '_download',\n    },\n  ];\n  return (\n    <div\n      style={{\n        gap: 8,\n        display: 'flex',\n      }}\n    >\n      {images.map((item, index) => {\n        return (\n          <div key={index}>\n            <Image\n              fit='fill'\n              width={128}\n              height={128}\n              target={item.target as any}\n              src={item.src}\n              href={item.src}\n            ></Image>\n            <div style={{ fontSize: 12, textAlign: 'center' }}>{item.target}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"
      },
      {
        "title": "Group",
        "description": "Image supports a group of images.",
        "scenario": "basic",
        "code": "/**\n * cn - 图片组\n *    -- Image 支持一组图片的展示\n *    -- 通过设置 `pile` 属性折叠图片，通过设置 `showCount` 展示图片数量\n *    -- 注意，showCount 属性仅在 pile 属性为 true 时生效。开启 pile 属性后，图片组将默认开启 _modal 模式预览\n * en - Group\n *    -- Image supports a group of images.\n *    -- Set the `pile` property to fold the images, and set the `showCount` property to show the number of images\n *    -- Note that the showCount property only takes effect when the pile property is true. After the pile property is turned on, the image group will default to preview in _modal mode\n */\n\nimport React from 'react';\nimport { Image } from 'shineout';\n\nexport default () => {\n  const images = [\n    'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n    'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n    'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n    'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n    'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-05.png',\n  ];\n  return (\n    <div\n      style={{\n        gap: 16,\n        width: '100%',\n        display: 'flex',\n      }}\n    >\n      <Image.Group fit='fill' target='_modal' pile lazy>\n        {images.map((item, index) => {\n          return <Image key={index} width={128} height={128} src={item} href={item}></Image>;\n        })}\n      </Image.Group>\n\n      <Image.Group fit='fill' target='_modal' pile showCount lazy>\n        {images.map((item, index) => {\n          return <Image key={index} width={128} height={128} src={item} href={item}></Image>;\n        })}\n      </Image.Group>\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Image supports tiled display of a group of images",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- Image 支持平铺展示一组图片\n * en -\n *    -- Image supports tiled display of a group of images\n */\n\nimport React from 'react';\nimport { Image } from 'shineout';\n\nexport default () => {\n  const images = [\n    'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n    'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n    'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n    'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n    'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-05.png',\n  ];\n  return (\n    <div\n      style={{\n        gap: 8,\n        display: 'flex',\n      }}\n    >\n      <Image.Group fit='fill' target='_modal' style={{ fontSize: 0 }}>\n        {images.map((item, index) => {\n          return <Image key={index} width={128} height={128} src={item} href={item} style={{ marginBottom: 8 }}></Image>;\n        })}\n      </Image.Group>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Lazy",
        "description": "Image enables lazy loading mode by configuring the `lazy` property",
        "scenario": "basic",
        "code": "/**\n * cn - 懒加载\n *    -- Image 通过配置 `lazy` 属性开启懒加载模式\n * en - Lazy\n *    -- Image enables lazy loading mode by configuring the `lazy` property\n */\n\nimport React from 'react';\nimport { Image } from 'shineout';\n\nexport default () => {\n  const images = [\n    {\n      src: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n      target: '_modal',\n    },\n    {\n      src: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n      target: '_blank',\n    },\n    {\n      src: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n      target: '_self',\n    },\n    {\n      src: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n      target: '_download',\n    },\n  ];\n  return (\n    <div style={{ width: '100%' }}>\n      {images.map((item, index) => {\n        return <Image key={index} lazy fit='fill' width={'100%'} height={528} src={item.src}></Image>;\n      })}\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Set `container` to lazy load Image in the specified container",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 通过配置 `container` 对指定容器下的 Image 进行懒加载\n * en -\n *    -- Set `container` to lazy load Image in the specified container\n */\n\nimport React from 'react';\nimport { Image } from 'shineout';\n\nexport default () => {\n  const images = [\n    {\n      src: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n      target: '_modal',\n    },\n    {\n      src: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n      target: '_blank',\n    },\n    {\n      src: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n      target: '_self',\n    },\n    {\n      src: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n      target: '_download',\n    },\n  ];\n  return (\n    <div id='image-container' style={{ width: '100%', height: 300, overflow: 'auto' }}>\n      {images.map((item, index) => {\n        return (\n          <Image\n            key={index}\n            lazy\n            container='#image-container'\n            fit='fill'\n            width='100%'\n            height='100%'\n            src={item.src}\n          ></Image>\n        );\n      })}\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [
      {
        "name": "Group",
        "description": "",
        "whenCn": "",
        "whenEn": ""
      }
    ],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 21,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 10
    },
    "subComponentApis": {
      "Group": {
        "whenCn": "",
        "whenEn": "",
        "description": "",
        "props": [
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "showCount",
            "type": "boolean",
            "required": false,
            "description": "显示图片数量"
          },
          {
            "name": "target",
            "type": "\"_self\" | \"_blank\" | \"_modal\" | \"_download\"",
            "required": false,
            "defaultValue": "\\\"_modal\\\"",
            "description": "图片打开方式"
          },
          {
            "name": "shape",
            "type": "\"rounded\" | \"circle\" | \"thumbnail\"",
            "required": false,
            "defaultValue": "\\\"rounded\\\"",
            "description": "图片形状"
          },
          {
            "name": "lazy",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "是否延迟加载"
          },
          {
            "name": "pile",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "是否堆叠"
          },
          {
            "name": "fit",
            "type": "\"fill\" | \"center\" | \"fit\" | \"stretch\"",
            "required": false,
            "description": "图片填充方式"
          },
          {
            "name": "width",
            "type": "string | number",
            "required": false,
            "defaultValue": "100%",
            "description": "图片宽度"
          },
          {
            "name": "height",
            "type": "string | number",
            "required": false,
            "defaultValue": "100%",
            "description": "图片高度"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true,
            "description": "子元素"
          }
        ]
      }
    }
  },
  "Input": {
    "name": "Input",
    "description": "通常用于承载用户信息录入的文本框，常用于表单、对话框、表格等场景，在输入框基础样式上可以根据需求拓展出多种信息录入形式",
    "category": "other",
    "importPath": "import { Input } from 'shineout'",
    "props": [
      {
        "name": "value",
        "type": "string",
        "required": false,
        "description": "输入值"
      },
      {
        "name": "onChange",
        "type": "(value: string) => void",
        "required": false,
        "description": "值改变回调"
      },
      {
        "name": "defaultValue",
        "type": "string",
        "required": false,
        "description": "默认值"
      },
      {
        "name": "clearable",
        "type": "boolean | (() => void)",
        "required": false,
        "defaultValue": "false",
        "description": "可点击清空图标删除输入框内容，为函数式表示清空回调"
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "onBlur",
        "type": "FocusEventHandler<HTMLInputElement>",
        "required": false,
        "description": "失去焦点后的回调"
      },
      {
        "name": "onFocus",
        "type": "FocusEventHandler<HTMLInputElement>",
        "required": false,
        "description": "聚焦后的回调"
      },
      {
        "name": "onClick",
        "type": "MouseEventHandler<Element>",
        "required": false,
        "description": "点击回调"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "禁用组件"
      },
      {
        "name": "autoSelect",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否自动获得焦点"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "prefix",
        "type": "ReactNode",
        "required": false,
        "description": "前缀"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "宽度"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "clearIcon",
        "type": "ReactNode",
        "required": false,
        "description": "自定义清除图标"
      },
      {
        "name": "suffix",
        "type": "ReactNode",
        "required": false,
        "description": "后缀"
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "仅仅展示下边框"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示边框"
      },
      {
        "name": "onEnterPress",
        "type": "((value: string, e: KeyboardEvent<Element>) => void)",
        "required": false,
        "description": "回车键回调函数"
      },
      {
        "name": "trim",
        "type": "boolean",
        "required": false,
        "description": "是否去除前后空格"
      },
      {
        "name": "numType",
        "type": "\"non-negative\" | \"positive\"",
        "required": false,
        "description": "设置数字类型 支持 \\\"positive\\\" 和 \\\"non-negative\\\", 仅在 type = number 下生效"
      },
      {
        "name": "coin",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "以千位分隔符展示,仅当 type 为 number 时有效"
      },
      {
        "name": "integerLimit",
        "type": "number",
        "required": false,
        "description": "整数位数限制, 仅在 type = number 下生效"
      },
      {
        "name": "digits",
        "type": "number",
        "required": false,
        "description": "小数位数限制, 仅在 type = number 下生效"
      },
      {
        "name": "autoFix",
        "type": "boolean",
        "required": false,
        "description": "是否自动补全小数位数, 仅在 type = number 下生效"
      },
      {
        "name": "tip",
        "type": "ReactNode",
        "required": false,
        "description": "提示信息"
      },
      {
        "name": "forwardRef",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "获取input dom元素"
      },
      {
        "name": "innerTitle",
        "type": "ReactNode",
        "required": false,
        "description": "内嵌标题"
      },
      {
        "name": "placeTitle",
        "type": "ReactNode",
        "required": false,
        "description": "占位标题，需要配合 innerTitle 一起使用"
      },
      {
        "name": "htmlName",
        "type": "string",
        "required": false,
        "description": "原生 html 属性"
      },
      {
        "name": "clearToUndefined",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "点击清除按钮后数据变为 undefined"
      },
      {
        "name": "info",
        "type": "number | ((value: string | undefined) => string)",
        "required": false,
        "description": "提示信息"
      },
      {
        "name": "delay",
        "type": "number",
        "required": false,
        "description": "用户输入触发 onChange 和校验间隔时间，单位 毫秒"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Input usually needs to be used with other components, so the default width is 100% and the default display is block",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- Input 通常需要和其他的组件配合使用，所以默认的宽度是 100%，默认 display 为 block\n *    -- 如果设置了 style.width，默认 display 为 inline-flex\n * en - Base\n *    -- Input usually needs to be used with other components, so the default width is 100% and the default display is block\n *    -- If the style.width is set, the default display is inline-flex\n */\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => <Input width={300} placeholder='input something' clearable />;\n\nexport default App;\n"
      },
      {
        "title": "Size",
        "description": "Set the size property to change the size of the input box component. There are three built-in sizes available: small, default, and large",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸大小\n *    -- 设置 `size` 属性改变输入框组件的尺寸大小。内置三种尺寸：small、default、large\n * en - Size\n *    -- Set the size property to change the size of the input box component. There are three built-in sizes available: small, default, and large\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ width: '100%', display: 'flex', alignItems: 'center', gap: 24, flexWrap: 'wrap' }}>\n    <Input size='small' width={240} placeholder='small size' clearable />\n    <Input width={240} placeholder='default size' clearable />\n    <Input size='large' width={240} placeholder='large size' clearable />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Number",
        "description": "Set `type` to number, the input will be verified once when inputting, and non-numeric characters are not allowed to be entered",
        "scenario": "basic",
        "code": "/**\n * cn - 数字\n *    -- 设置 `type` 为 number，输入时会做一次校验，禁止输入非数字类型字符\n *    -- 设置 `digits` 限制小数位数\n *    -- 设置 `integerLimit` 限制整数位数\n *    -- 设置 `numType` 限制数字格式, 支持 'positive' 和 'non-negative'\n * en - Number\n *    -- Set `type` to number, the input will be verified once when inputting, and non-numeric characters are not allowed to be entered\n *    -- Set `digits` to limit the number of decimal places\n *    -- Set `integerLimit` to limit the number of integers\n *    -- Set `numType` to limit the number format, support 'positive' and 'non-negative'\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst style: React.CSSProperties = { marginBottom: 24 };\n\nconst App: React.FC = () => (\n  <div style={{ width: 300 }}>\n    <Input style={style} type='number' placeholder='digits undefined' clearable />\n    <Input style={style} digits={0} type='number' placeholder='digits 0' clearable />\n    <Input style={style} digits={1} type='number' placeholder='digits 1' clearable />\n    <Input style={style} digits={2} type='number' placeholder='digits 2' clearable />\n    <Input style={style} numType='non-negative' type='number' placeholder='non-negative' clearable />\n    <Input style={style} type='number' integerLimit={3} placeholder='integerLimit 3' clearable />\n    <Input\n      style={style}\n      autoFix\n      digits={3}\n      type='number'\n      placeholder='digits 3; autoFix'\n      clearable\n    />\n    <Input\n      style={style}\n      numType='positive'\n      integerLimit={3}\n      type='number'\n      placeholder='positive;integerLimit 3'\n      clearable\n    />\n    <Input.Number numType='positive' integerLimit={3} placeholder='positive; integerLimit 3' clearable />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- Input.Number component, can be assisted by mouse and up and down keys to input",
        "description": "Note that the value is a string type during input; it will be converted to a number type when blur",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- Input.Number 组件，可以通过鼠标和上下键辅助输入\n *    -- 需要注意在输入的过程中 value 是 string 类型；blur 时会转换为 number 类型\n * en -\n *    -- Input.Number component, can be assisted by mouse and up and down keys to input\n *    -- Note that the value is a string type during input; it will be converted to a number type when blur\n */\n\nimport React from 'react';\nimport { Input, Gap, Link, icons } from 'shineout';\n\nconst btnStyle: React.CSSProperties = {\n  cursor: 'pointer',\n  padding: '0 8px',\n  background: 'var(--soui-input-group-font-background-color,var(--soui-neutral-fill-2,#F4F5F8))',\n};\n\nconst leftBtnStyle: React.CSSProperties = {\n  ...btnStyle,\n  borderLeft: 'none',\n  borderRadius: '4px 0 0 4px',\n};\nconst rightBtnStyle: React.CSSProperties = {\n  ...btnStyle,\n  borderRight: 'none',\n  borderRadius: '0 4px 4px 0',\n};\n\nconst iconStyle: React.CSSProperties = {\n  width: 16,\n  height: 16,\n};\n\nconst App: React.FC = () => {\n  const [number, setNumber] = React.useState<string | undefined>();\n\n  const onMinus = () => {\n    setNumber((Number(number || 0) - 1).toString());\n  };\n\n  const onPlus = () => {\n    setNumber((Number(number || 0) + 1).toString());\n  };\n\n  return (\n    <Gap style={{ flexDirection: 'column', gap: 24 }}>\n      <Input.Group width={300}>\n        <Link onClick={onMinus} style={leftBtnStyle} type='secondary'>\n          <div style={iconStyle}>{icons.Minus}</div>\n        </Link>\n        <Input\n          type='number'\n          value={number}\n          onChange={(v) => setNumber(v)}\n          placeholder='please enter'\n        />\n        <Link onClick={onPlus} style={rightBtnStyle} type='secondary'>\n          <div style={iconStyle}>{icons.Add}</div>\n        </Link>\n      </Input.Group>\n\n      <Input.Number\n        width={300}\n        onChange={(v) => {\n          console.log('🚀outter Input.Number onChange', v);\n        }}\n        placeholder='please enter'\n      />\n    </Gap>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Front and rear tags",
        "description": "Use the built-in group component to add tags before and after",
        "scenario": "basic",
        "code": "/**\n * cn - 前后标签\n *    -- 利用内置的 group 组件可以在前后增加标签\n * en - Front and rear tags\n *    -- Use the built-in group component to add tags before and after\n */\n\nimport React from 'react';\nimport { Input, Select, DatePicker, Button } from 'shineout';\n\nconst style: React.CSSProperties = { width: 300, marginBottom: 24 };\n\nconst App: React.FC = () => (\n  <div>\n    <Input.Group style={style}>\n      <b>http://</b>\n      <Input placeholder='please enter' />\n    </Input.Group>\n    <Input.Group style={style}>\n      <Input placeholder='please enter' />\n      <b>.com</b>\n    </Input.Group>\n    <Input.Group style={style}>\n      <b>http://</b>\n      <Input placeholder='please enter' />\n      <b>.com</b>\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Input placeholder='please enter' />\n      <div style={{ lineHeight: '30px' }}>-</div>\n      <Input placeholder='please enter' />\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Select keygen data={['Option1', 'Option2']} style={{width: 100, flex: 'none'}} defaultValue='Option1' />\n      <Input placeholder='please enter' />\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Select keygen data={['Option1', 'Option2']} style={{width: 100, flex: 'none'}} defaultValue='Option1' />\n      <DatePicker placeholder='please select' />\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Select keygen data={['Option1', 'Option2']} style={{width: 100, flex: 'none'}} defaultValue='Option1' />\n      <Input placeholder='please enter' />\n      <Button type='primary'>Search</Button>\n    </Input.Group>\n\n    <h3 style={{ marginBottom: 12, fontSize: 16 }}>Other Size</h3>\n    <Input.Group style={style} size=\"small\">\n      <b>http://</b>\n      <Input placeholder='email' />\n      <b>.com</b>\n    </Input.Group>\n\n    <Input.Group style={style} size=\"large\">\n      <b>http://</b>\n      <Input placeholder='email' />\n      <b>.com</b>\n    </Input.Group>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Group separate",
        "description": "The components combined together have independent borders",
        "scenario": "basic",
        "code": "/**\n * cn - 独立边框\n *    -- 设置 `separate` 属性开启：组合到一起的组件有独立的边框\n * en - Group separate\n *    -- The components combined together have independent borders\n */\n\nimport React from 'react';\nimport { Input, Select, DatePicker, Button, icons } from 'shineout';\n\nconst style: React.CSSProperties = { width: 300, marginBottom: 24 };\n\nconst App: React.FC = () => (\n  <div>\n    <Input.Group separate style={style}>\n      <Select keygen data={['Option1', 'Option2']} width={100} defaultValue=\"Option1\" />\n      <Input placeholder='please enter' suffix={<div style={{width: 14}}>{icons.Search}</div>} />\n    </Input.Group>\n\n    <Input.Group separate style={style}>\n      <Select keygen data={['Option1', 'Option2']} width={100} defaultValue='Option1' />\n      <Input placeholder='please enter' />\n    </Input.Group>\n\n    <Input.Group separate style={style}>\n      <Select keygen data={['Option1', 'Option2']} width={100} defaultValue='Option1' />\n      <DatePicker placeholder='please select' style={{ flex: 1 }} />\n    </Input.Group>\n\n    <Input.Group separate style={style}>\n      <Select keygen data={['Option1', 'Option2']} width={100} defaultValue='Option1' />\n      <Input placeholder='please enter' />\n      <Button type='primary'>Search</Button>\n    </Input.Group>\n  </div>\n\n);\n\nexport default App;\n"
      },
      {
        "title": "Prefix and suffix",
        "description": "Set `prefix` and `suffix` to add prefix and suffix to the input box",
        "scenario": "basic",
        "code": "/**\n * cn - 前后缀\n *    -- 通过指定 `prefix` 和 `suffix` 来在输入框内添加前缀和后缀\n * en - Prefix and suffix\n *    -- Set `prefix` and `suffix` to add prefix and suffix to the input box\n */\n\nimport React from 'react';\nimport { Input, icons } from 'shineout';\n\nfunction MyIcon(props: any){\n  const style={\n    width: 20,\n    height: 20,\n    display: 'flex',\n    alignItems: 'center',\n    margin: '0 auto',\n    color: 'var(--soui-input-icon-color,var(--soui-neutral-text-4,#666C7C))',\n    ...props.style\n  }\n    return <div style={style}>{props.children}</div>;\n}\n\n\nconst App: React.FC = () => (\n  <Input\n    placeholder='please enter'\n    width={300}\n    prefix={<MyIcon style={{ marginRight: 8 }}>{icons.Calendar}</MyIcon>}\n    suffix={<MyIcon style={{ marginLeft: 8 }}>{icons.Search}</MyIcon>}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Group validate",
        "description": "The `status` property of Input.Group can be used to display error status",
        "scenario": "basic",
        "code": "/**\n * cn - Group的校验\n *    -- 配置 `status` 属性可以展示错误状态\n *    -- 配置 `separate` 属性也有相应的校验效果\n *    -- 配置 `keepErrorHeight` 属性可以保持错误提示的高度\n * en - Group validate\n *    -- The `status` property of Input.Group can be used to display error status\n *    -- The `separate` property also has the corresponding verification effect\n *    -- The `keepErrorHeight` property can keep the height of the error prompt\n */\n\nimport React from 'react';\nimport { Input, Form, Button, Rule } from 'shineout';\nimport { add, cancel } from '../../form/__example__/011-fieldset-loop';\n\nconst rules = Rule();\n\nconst App: React.FC = () => (\n  <Form labelWidth='100' keepErrorHeight>\n    <Form.Item label='Home1' required>\n      <Form.Field name='url1' rules={[rules.required, rules.url('url is invalid')]}>\n        {({ value, error, onChange }) => (\n          <Input.Group style={{ width: 340 }} status={error ? 'error' : undefined}>\n            <b>http://</b>\n            <Input value={value} onChange={onChange} placeholder='i am not separate input group' />\n          </Input.Group>\n        )}\n      </Form.Field>\n    </Form.Item>\n\n    <Form.Item label='Home2' required>\n      <Input.Group style={{ width: 340 }} separate>\n        <Form.Field name='url2' rules={[rules.required]}>\n          <Input placeholder='i am separate input group' />\n        </Form.Field>\n        <b>.com</b>\n      </Input.Group>\n    </Form.Item>\n\n    <Form.Item label='Friends' required>\n      <Form.FieldSet\n        name='friends'\n        empty={(insert) => {\n          return (\n            <Button type='primary' mode='outline' onClick={() => insert({ name: '' })}>\n              + Add new friends\n            </Button>\n          );\n        }}\n        defaultValue={[{ name: 'Hermione Granger', age: '16' }, {}]}\n      >\n        {({ onAppend, onRemove }) => (\n          <div style={{ display: 'flex' }}>\n            <Form.Item>\n              <Input\n                name='name'\n                placeholder='Name'\n                title='Friend name'\n                rules={[rules.required('Name is required')]}\n                style={{ width: 180 }}\n                clearable\n              />\n            </Form.Item>\n            <div style={{ height: 32, lineHeight: '30px', padding: '0 4px' }}>-</div>\n            <Form.Item>\n              <Input\n                name='age'\n                type='number'\n                placeholder='Age'\n                rules={[rules.required('Age is required')]}\n                title='Friend age'\n                style={{ width: 90 }}\n                clearable\n              />\n            </Form.Item>\n            <div style={{ height: 32, display: 'flex', alignItems: 'center' }}>\n              <a\n                style={{ margin: '0 12px', lineHeight: 1, cursor: 'pointer' }}\n                onClick={() => onAppend({ name: '', age: '16' })}\n              >\n                {add}\n              </a>\n              <a style={{ lineHeight: 1, cursor: 'pointer' }} onClick={onRemove}>\n                {cancel}\n              </a>\n            </div>\n          </div>\n        )}\n      </Form.FieldSet>\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n"
      },
      {
        "title": "Tip",
        "description": "The tip set on the input pops up when focus",
        "scenario": "basic",
        "code": "/**\n * cn - 提示文字\n *    -- 在 input 上设置的 tip 在 focus 时弹出\n * en - Tip\n *    -- The tip set on the input pops up when focus\n */\n\nimport { Input } from 'shineout';\n\nexport default () => {\n  return <Input width={300} placeholder='input something' tip={'please input something here'} />;\n};\n"
      },
      {
        "title": "Validate",
        "description": "When the `rules` property is set, it will automatically verify the input data. When the `popover` property is set, it will pop up at the specified location",
        "scenario": "basic",
        "code": "/**\n * cn - 校验\n *    -- 设置了 `rules`，会自动校验输入数据，设置了 `popover` 会在指定位置弹出\n *    -- 如果没有设置 `popover`，不会弹出错误提示\n *    -- 有错误时，提示框不会隐藏\n * en - Validate\n *    -- When the `rules` property is set, it will automatically verify the input data. When the `popover` property is set, it will pop up at the specified location\n *    -- If the popover `property` is not set, no error message will pop up\n *    -- If input is invalid, the message will not be hidden\n */\n\nimport React from 'react';\nimport { Input, Rule } from 'shineout';\n\nconst rules = Rule();\n\nexport default function () {\n  return (\n    <Input\n      placeholder='email'\n      rules={[rules.required]}\n      tip='Please enter a valid Email address'\n      popover='top-left'\n      width={300}\n    />\n  );\n}\n"
      },
      {
        "title": "allow clear",
        "description": "Set the `clearable` property, the Input will display the clear button, click the clear button to clear the content",
        "scenario": "basic",
        "code": "/**\n * cn - 允许删除\n *    -- 设置 `clearable` 属性，Input 将显示删除按钮，点击删除按钮清空内容\n * en -  allow clear\n *    -- Set the `clearable` property, the Input will display the clear button, click the clear button to clear the content\n */\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => <Input width={300} clearable placeholder='input something' />;\n\nexport default App;\n"
      },
      {
        "title": "disabled",
        "description": "When the `disabled` attribute is enabled, the component will prevent input",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用\n *    -- 开启 `disabled` 属性后，组件将禁止输入\n * en - disabled\n *    -- When the `disabled` attribute is enabled, the component will prevent input\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst style: React.CSSProperties = { width: 300 };\n\nconst App: React.FC = () => (\n  <div>\n    <Input.Group disabled style={{ ...style, marginBottom: 24 }}>\n      <Input placeholder='first name' />\n      -\n      <Input placeholder='last name' />\n    </Input.Group>\n\n    <Input disabled style={style} placeholder='disabled input' />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Built-in password component",
        "description": "We use the built-in password component specifically for handling password-related scenarios",
        "scenario": "basic",
        "code": "/**\n * cn - 内置密码组件\n *    -- 使用内置 password 组件专门处理密码业务场景\n * en - Built-in password component\n *    -- We use the built-in password component specifically for handling password-related scenarios\n */\n\nimport React from 'react';\nimport { Form, Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <Form>\n    <Input.Password\n      width={300}\n      name={'password'}\n      defaultValue='12312312312321312321312'\n      placeholder='input password'\n      visibilityToggle\n      clearable\n    />\n  </Form>\n);\n\nexport default App;\n"
      },
      {
        "title": "inner title",
        "description": "use innerTitle to display the inner title",
        "scenario": "basic",
        "code": "/**\n /**\n * cn - 内嵌标题\n *    -- 使用 innerTitle 展示内嵌标题\n * en - inner title\n *    -- use innerTitle to display the inner title\n */\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ width: 300, display: 'flex', flexDirection: 'column', gap: 24 }}>\n    <Input innerTitle='Small title' clearable size={'small'} />\n    <Input innerTitle='Medium Title' clearable />\n    <Input innerTitle='Large Title' clearable size={'large'} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Bottom border",
        "description": "After enabling the `underline` attribute, the component will support the bottom border style and display only the border at the bottom",
        "scenario": "basic",
        "code": "/**\n * cn - 下边框\n *    -- 开启 `underline` 属性后，组件将支持下边框样式，仅展示下部的边框\n * en - Bottom border\n *    -- After enabling the `underline` attribute, the component will support the bottom border style and display only the border at the bottom\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => <Input width={300} underline clearable placeholder='Underline' />;\n\nexport default App;\n"
      },
      {
        "title": "Automatically select Input",
        "description": "After enabling the `autoSelect` attribute, when the Input component is focused, the content of the current Input component will be automatically selected",
        "scenario": "basic",
        "code": "/**\n * cn - 自动选中\n *    -- 开启 `autoSelect` 属性后，当 Input 组件聚焦时，将自动全选当前 Input 组件的内容\n * en - Automatically select Input\n *    -- After enabling the `autoSelect` attribute, when the Input component is focused, the content of the current Input component will be automatically selected\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <Input width={300} defaultValue={'hello world'} placeholder='input something' autoSelect />\n);\n\nexport default App;\n"
      },
      {
        "title": "Trim whitespace",
        "description": "After enabling the `trim` attribute, the Input component will remove the whitespace characters at both ends of the content after typing",
        "scenario": "basic",
        "code": "/**\n * cn - 清除空格\n *    -- 开启 `trim` 属性，Input 组件会在键入内容后去除内容两端的空格字符\n * en - Trim whitespace\n *    -- After enabling the `trim` attribute, the Input component will remove the whitespace characters at both ends of the content after typing\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => <Input width={300} placeholder='input something' trim />;\n\nexport default App;\n"
      },
      {
        "title": "Keyboard events",
        "description": "The Input component supports the `onKeyUp` (key up), `onKeyDown` (key down), and `onEnterPress` (enter key) events",
        "scenario": "basic",
        "code": "/**\n * cn - 键盘事件\n *    -- Input 组件支持 `onKeyUp`（键盘弹起）、`onKeyDown`（键盘按下）、`onEnterPress`（回车） 事件\n * en - Keyboard events\n *    -- The Input component supports the `onKeyUp` (key up), `onKeyDown` (key down), and `onEnterPress` (enter key) events\n */\n\nimport React, { useState } from 'react';\nimport { Input } from 'shineout';\n\nconst style: React.CSSProperties = { marginBottom: 24, width: 300 };\n\nconst App: React.FC = () => {\n  const [keyUp, setKeyUp] = useState<number>(0);\n  const [keyDown, setKeyDown] = useState<number>(0);\n  const [keyEnterPress, setKeyEnterPress] = useState<number>(0);\n\n  const onKeyUp = () => setKeyUp(keyUp + 1);\n  const onKeyDown = () => setKeyDown(keyDown + 1);\n  const onEnterPress = () => setKeyEnterPress(keyEnterPress + 1);\n\n  return (\n    <div>\n      <Input.Group style={style}>\n        <Input placeholder='onKeyUp' onKeyUp={onKeyUp} />\n        <b className='onKeyUp'>{`onKeyUp: ${keyUp} times`}</b>\n      </Input.Group>\n\n      <Input.Group style={style}>\n        <Input placeholder='onKeyDown' onKeyDown={onKeyDown} />\n        <b className='onKeyDown'>{`onKeyDown: ${keyDown} times`}</b>\n      </Input.Group>\n\n      <Input.Group style={style}>\n        <Input placeholder='onEnterPress' onEnterPress={onEnterPress} />\n        <b className='onEnterPress'>{`onEnterPress: ${keyEnterPress} times`}</b>\n      </Input.Group>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Input restriction",
        "description": "Set `min` (minimum value), `max` (maximum value), and `maxLength` (maximum length) to restrict the input content of the Input component",
        "scenario": "basic",
        "code": "/**\n * cn - 输入限制\n *    -- 通过设置 `min`（最小值）、 `max`（最大值）、 `maxLength`（最大长度）来限制 Input 组件的输入内容\n * en - Input restriction\n *    -- Set `min` (minimum value), `max` (maximum value), and `maxLength` (maximum length) to restrict the input content of the Input component\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst style: React.CSSProperties = { marginBottom: 24 };\n\nconst App: React.FC = () => {\n  return (\n    <div style={{ width: 300 }}>\n      <Input.Group style={style}>\n        <b className='min'>min</b>\n        <Input.Number placeholder='100' min={100} />\n      </Input.Group>\n\n      <Input.Group style={style}>\n        <b className='max'>max</b>\n        <Input.Number placeholder='200' max={200} />\n      </Input.Group>\n\n      <Input.Group style={style}>\n        <b className='maxLength'>maxLength</b>\n        <Input placeholder='5' maxLength={5} />\n      </Input.Group>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "clearToUndefined",
        "description": "* en - clearToUndefined",
        "scenario": "basic",
        "code": "/**\n * cn - clearToUndefined\n *    --\n * en - clearToUndefined\n *    --\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ width: 300, display: 'flex', flexDirection: 'column', gap: 24 }}>\n    <Input clearable placeholder='input' />\n    <Input\n      clearable\n      clearToUndefined\n      placeholder='input clearToUndefined'\n      onChange={console.log.bind(null, 'change')}\n    />\n    <Input.Number clearable placeholder='number' />\n    <Input.Number\n      clearable\n      allowNull\n      placeholder='number allowNull'\n      onChange={console.log.bind(null, 'change')}\n    />\n    <Input.Number\n      clearable\n      clearToUndefined\n      placeholder='number clearToUndefined'\n      onChange={console.log.bind(null, 'change')}\n    />\n\n    <Input.Password clearable placeholder='password' />\n    <Input.Password\n      clearable\n      clearToUndefined\n      placeholder='password clearToUndefined'\n      onChange={console.log.bind(null, 'change')}\n    />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Invalid number",
        "description": "When an invalid number is entered, Input.Number will not trigger the onChange event",
        "scenario": "basic",
        "code": "/**\n * cn - 非法number\n *    -- 输入非法的数字时，Input.Number 不会触发 onChange 事件\n * en - Invalid number\n *    -- When an invalid number is entered, Input.Number will not trigger the onChange event\n */\nimport React from 'react';\nimport { Button, Input } from 'shineout';\n\nexport default () => {\n  const [value, setValue] = React.useState();\n  const onIncrease = () => {\n    setValue((v) => {\n      const next = Number(v || 0) + 1;\n      return next;\n    });\n  }\n\n  const [defaultValue, setDefaultValue] = React.useState(1);\n  const onDefaultChange = () => {\n    setDefaultValue((v) => {\n      const next = Number(v || 0) + 1;\n      return next;\n    });\n  }\n  return (\n    <div style={{display: 'flex', gap: 12}}>\n      <Input.Number\n        width={300}\n        placeholder='input something'\n        defaultValue={defaultValue}\n        type=\"number\"\n        // value={value}\n        // onChange={v => {\n        //   console.log('======================')\n        //   console.log('outter onChange: >>', typeof v, v)\n        //   console.log('======================')\n        //   setValue(v);\n        // }}\n      />\n      <Button onClick={onIncrease}>increase value</Button>\n      <Button onClick={onDefaultChange}>change default value</Button>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Borderless mode",
        "description": "Set `border` false, the Input component will no longer display the border",
        "scenario": "basic",
        "code": "/**\n * cn - border\n *    -- 设置 `border` false ，Input 组件将不再显示边框\n * en - Borderless mode\n *    -- Set `border` false, the Input component will no longer display the border\n */\n\nimport { Input } from 'shineout';\n\nexport default () => {\n  return (\n    <Input\n      style={{ backgroundColor: '#eee' }}\n      width={300}\n      placeholder='input something'\n      border={false}\n    />\n  );\n};\n"
      },
      {
        "title": "ref",
        "description": "* en - ref",
        "scenario": "basic",
        "code": "/**\n * cn - ref\n *    --\n * en - ref\n *    --\n */\n\nimport { Input } from 'shineout';\n\nexport default () => {\n  return (\n    <Input\n      width={300}\n      placeholder='input something'\n      forwardRef={(e) => {\n        console.log('ref', e);\n      }}\n    />\n  );\n};\n"
      },
      {
        "title": "info",
        "description": "* en - info",
        "scenario": "basic",
        "code": "/**\n * cn - info\n *    --\n * en - info\n *    --\n */\n\nimport { Input } from 'shineout';\n\nexport default () => {\n  return <Input width={300} placeholder='input something' info={5} />;\n};\n"
      },
      {
        "title": "delay",
        "description": "delay=300",
        "scenario": "basic",
        "code": "/**\n * cn - delay\n *    -- delay=300\n */\nimport { useState } from 'react';\nimport { Input } from 'shineout';\n\nexport default () => {\n  const [v, setV] = useState('');\n  return (\n    <>\n      <span>{v}</span>\n      <Input\n        width={300}\n        value={v}\n        placeholder='input something'\n        delay={300}\n        onChange={(d) => {\n          console.log(d);\n          setV(d || '');\n        }}\n      />\n    </>\n  );\n};\n"
      },
      {
        "title": "shineout icons",
        "description": "shineout icons",
        "scenario": "basic",
        "code": "/**\n * cn - shineout icons\n *    -- shineout icons\n */\nimport React from 'react';\nimport { icons } from 'shineout';\nfunction MyIcon(props: any) {\n  const style = {\n    width: 20,\n    height: 20,\n    display: 'flex',\n    alignItems: 'center',\n    margin: '0 auto 4px',\n    color: 'var(--soui-input-icon-color,var(--soui-neutral-text-4,#666C7C))',\n    ...props.style,\n  };\n  return <div style={style}>{props.children}</div>;\n}\n\ntype IconType = keyof typeof icons;\n\nconst App: React.FC = () => (\n  <div>\n    {Object.keys(icons).map((key) => {\n      return (\n        <div\n          key={key}\n          style={{ display: 'inline-block', width: 160, height: 100, textAlign: 'center' }}\n        >\n          <MyIcon>{icons[key as IconType]}</MyIcon>\n          <div>{key}</div>\n        </div>\n      );\n    })}\n  </div>\n);\nexport default App;\n"
      }
    ],
    "subComponents": [
      {
        "name": "Group",
        "description": "",
        "whenCn": "",
        "whenEn": ""
      }
    ],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 42,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 26
    },
    "subComponentApis": {
      "Group": {
        "whenCn": "",
        "whenEn": "",
        "description": "",
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": ""
          },
          {
            "name": "status",
            "type": "\"error\"",
            "required": false,
            "description": "组件状态"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "size",
            "type": "\"small\" | \"large\" | \"default\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "不同尺寸"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "子元素"
          },
          {
            "name": "width",
            "type": "string | number",
            "required": false,
            "description": "宽度"
          },
          {
            "name": "disabled",
            "type": "boolean",
            "required": false,
            "description": "是否禁用 Input.Group 区域内容"
          },
          {
            "name": "onBlur",
            "type": "FocusEventHandler<HTMLInputElement>",
            "required": false,
            "description": "失去焦点后的回调"
          },
          {
            "name": "separate",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "是否分离边框",
            "version": "3.7.0"
          }
        ]
      }
    }
  },
  "Link": {
    "name": "Link",
    "description": "链接是具有导航属性的文本，点击后跳转到某个页面",
    "category": "general",
    "importPath": "import { Link } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "href",
        "type": "string",
        "required": false,
        "description": "链接地址"
      },
      {
        "name": "target",
        "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\"",
        "required": false,
        "description": "链接打开方式"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "是否禁用"
      },
      {
        "name": "underline",
        "type": "boolean | \"hover\"",
        "required": false,
        "description": "是否常驻显示下划线, 设置为 \\\"hover\\\" 时鼠标悬浮时显示下划线"
      },
      {
        "name": "type",
        "type": "\"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\"",
        "required": false,
        "defaultValue": "primary",
        "description": "链接类型"
      },
      {
        "name": "size",
        "type": "\"small\" | \"default\" | \"large\"",
        "required": false,
        "defaultValue": "default",
        "description": "链接图标大小"
      },
      {
        "name": "icon",
        "type": "ReactNode",
        "required": false,
        "description": "显示图标，设置为 true 时展示默认图标"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Basic usage of link",
        "scenario": "basic",
        "code": "/**\n* cn - 基本用法\n*    -- 链接的基本用法，设置 `href` 属性即可。\n* en - Basic\n*    -- Basic usage of link\n */\nimport React from 'react';\nimport { Link } from 'shineout';\n\nexport default () => <Link href=\"#\">Link</Link>;\n"
      },
      {
        "title": "Link type",
        "description": "Set the `type` property to change the style of the link, including primary, secondary, danger, warning, success.",
        "scenario": "basic",
        "code": "/**\n* cn - 链接状态\n*    -- 设置`type`属性可以改变链接的状态，包括 primary, secondary, danger, warning, success。\n* en - Link type\n*    -- Set the `type` property to change the style of the link, including primary, secondary, danger, warning, success.\n */\nimport React from 'react';\nimport { Gap, Link } from 'shineout';\n\nexport default () => {\n  return (\n    <Gap column={24}>\n      <Link href=\"#\" type=\"primary\">Link</Link>\n      <Link href=\"#\" type=\"secondary\">Link</Link>\n      <Link href=\"#\" type=\"danger\">Link</Link>\n      <Link href=\"#\" type=\"warning\">Link</Link>\n      <Link href=\"#\" type=\"success\">Link</Link>\n    </Gap>\n  );\n};\n"
      },
      {
        "title": "Disabled",
        "description": "Set the disabled property to disable the link.",
        "scenario": "basic",
        "code": "/**\n* cn - 禁用状态\n*    -- 设置 `disabled` 属性可以禁用链接。\n* en - Disabled\n*    -- Set the disabled property to disable the link.\n */\nimport React from 'react';\nimport { Gap, Link } from 'shineout';\n\nexport default () => {\n  return (\n    <Gap column={24}>\n      <Link href=\"#\" type=\"primary\" disabled>Link</Link>\n      <Link href=\"#\" type=\"secondary\" disabled>Link</Link>\n      <Link href=\"#\" type=\"danger\" disabled>Link</Link>\n      <Link href=\"#\" type=\"warning\" disabled>Link</Link>\n      <Link href=\"#\" type=\"success\" disabled onClick={() => {console.log('不触触发的log')}}>Link</Link>\n    </Gap>\n  );\n};\n"
      },
      {
        "title": "Link style",
        "description": "Link style includes two types, text link and underline link.",
        "scenario": "basic",
        "code": "/**\n* cn - 链接样式\n*    -- 链接样式包含三种，无下划线、常驻下划线、鼠标悬停显示下划线。\n* en - Link style\n*    -- Link style includes two types, text link and underline link.\n */\nimport React from 'react';\nimport { Gap, Link } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Gap column={24}>\n        <Link href=\"#\">Link</Link>\n        <Link href=\"#\" underline>Link</Link>\n        <Link href=\"#\" underline=\"hover\">Link</Link>\n      </Gap>\n\n      {/* <br />\n\n      <Gap column={36}>\n        <Link type=\"secondary\" href=\"#\">Link</Link>\n        <Link type=\"secondary\" href=\"#\" underline>Link</Link>\n        <Link type=\"secondary\" href=\"#\" underline=\"hover\">Link</Link>\n      </Gap>\n\n      <br />\n\n      <Gap column={36}>\n        <Link type=\"danger\" href=\"#\">Link</Link>\n        <Link type=\"danger\" href=\"#\" underline>Link</Link>\n        <Link type=\"danger\" href=\"#\" underline=\"hover\">Link</Link>\n      </Gap>\n\n      <br />\n\n      <Gap column={36}>\n        <Link type='warning' href=\"#\">Link</Link>\n        <Link type='warning' href=\"#\" underline>Link</Link>\n        <Link type='warning' href=\"#\" underline=\"hover\">Link</Link>\n      </Gap>\n\n      <br />\n\n      <Gap column={36}>\n        <Link type=\"success\" href=\"#\">Link</Link>\n        <Link type=\"success\" href=\"#\" underline>Link</Link>\n        <Link type=\"success\" href=\"#\" underline=\"hover\">Link</Link>\n      </Gap> */}\n    </div>\n  );\n};\n"
      },
      {
        "title": "Icon",
        "description": "Set the link with an icon by the Icon property. Set to true to display the default icon.",
        "scenario": "basic",
        "code": "/**\n* cn - 图标\n*    -- 通过 `Icon` 属性设置带图标的链接，设置为 true时候显示默认图标。\n* en - Icon\n*    -- Set the link with an icon by the Icon property. Set to true to display the default icon.\n */\nimport React from 'react';\nimport { Gap, Link } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  icon: {\n    color: 'var(--soui-link-primary-font-color,var(--soui-brand-6,#197AFA))',\n    '&:hover': {\n      color: 'var(--soui-link-primary-hover-font-color,var(--soui-brand-5,#429AFF))',\n    },\n    '& > svg': {\n      fill: 'currentColor',\n      width: '1em',\n      height: '1em',\n      verticalAlign: '-2px',\n    }\n  },\n},\n  { name: 'link-example-icon' },\n);\n\nconst customIcon = (\n  <svg viewBox=\"0 0 24 24\">\n    <path d=\"M3.52359 19.0799H20.483C20.7482 19.0799 21.0025 19.1853 21.19 19.3728C21.3775 19.5604 21.4828 19.8147 21.4828 20.0799C21.4828 20.3451 21.3775 20.5994 21.19 20.7869C21.0025 20.9745 20.7482 21.0798 20.483 21.0799H3.52359C3.39226 21.0799 3.2622 21.054 3.14086 21.0038C3.01952 20.9536 2.90926 20.8799 2.81638 20.787C2.72351 20.6942 2.64984 20.5839 2.59957 20.4626C2.54931 20.3413 2.52344 20.2112 2.52344 20.0799C2.52344 19.9485 2.54931 19.8185 2.59957 19.6972C2.64984 19.5758 2.72351 19.4656 2.81638 19.3727C2.90926 19.2799 3.01952 19.2062 3.14086 19.156C3.2622 19.1057 3.39226 19.0799 3.52359 19.0799ZM15.6007 8.67711L14.0274 7.22256L8.14408 13.3933L7.08039 15.3728L9.71839 14.8478L15.6007 8.67711ZM17.0097 7.26711L18.8077 5.47011L17.2344 4.01556L15.4364 5.81356L17.0097 7.26811V7.26711ZM18.6424 2.60656L20.2157 4.06111C20.9937 4.83911 20.9937 6.10111 20.2157 6.87911L11.1264 16.2568C10.8478 16.5354 10.4928 16.725 10.1064 16.8018L5.27639 17.7628C5.1961 17.7788 5.11309 17.7748 5.03472 17.7511C4.95635 17.7274 4.88503 17.6847 4.82709 17.6269C4.76914 17.569 4.72635 17.4978 4.70251 17.4195C4.67867 17.3411 4.6745 17.2581 4.69039 17.1778L6.19008 13.0053C6.26708 12.6183 6.45708 12.2633 6.73608 11.9853L15.8254 2.60756C16.199 2.23402 16.7056 2.02417 17.2339 2.02417C17.7622 2.02417 18.2689 2.23302 18.6424 2.60656Z\"></path>\n  </svg>\n)\n\n\n\nexport default () => {\n  const classes = useStyles();\n\n  const customIcon2 = (\n    <span className={classes.icon} style={{ marginLeft: 4 }}>\n      <svg viewBox=\"0 0 24 24\" width=\"1em\" height=\"1em\">\n        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M11.002 2C11.5542 2 12.002 2.44772 12.002 3C12.002 3.51284 11.6159 3.93551 11.1186 3.99327L11.002 4H5.00195L4.88533 4.00673C4.38799 4.06449 4.00195 4.48716 4.00195 5V19L4.00868 19.1166C4.06645 19.614 4.48912 20 5.00195 20H19.002C19.5542 20 20.002 19.5523 20.002 19V13C20.002 12.4477 20.4497 12 21.002 12C21.5148 12 21.9375 12.386 21.9952 12.8834L22.002 13V20C22.002 21.1046 21.1065 22 20.002 22H4.00195C2.89738 22 2.00195 21.1046 2.00195 20V4C2.00195 2.89543 2.89738 2 4.00195 2H11.002ZM21.002 2C21.5542 2 22.002 2.44772 22.002 3V9C22.002 9.55228 21.5542 10 21.002 10C20.4497 10 20.002 9.55228 20.002 9L20.0017 5.383L13.9579 11.4272C13.5673 11.8177 12.9342 11.8177 12.5436 11.4272C12.1531 11.0367 12.1531 10.4035 12.5436 10.013L18.5557 4H15.002C14.4497 4 14.002 3.55228 14.002 3C14.002 2.44772 14.4497 2 15.002 2H21.002Z\"></path>\n      </svg>\n    </span>\n  )\n  return (\n    <Gap column={24}>\n      <Link href=\"#\" icon>Link</Link>\n\n      <Link href=\"#\" icon={customIcon}>Link{customIcon2}</Link>\n    </Gap>\n  );\n};\n"
      },
      {
        "title": "Size",
        "description": "Link has three sizes: small, default, and large. The default size is recommended. You can choose the appropriate size according to different scenarios and business needs.",
        "scenario": "basic",
        "code": "/**\n* cn - 不同尺寸\n*    -- 链接分为小、中、大，三种尺寸，推荐及默认为尺寸「中」，可在不同场景及不同业务需求选择适合尺寸。\n* en - Size\n*    -- Link has three sizes: small, default, and large. The default size is recommended. You can choose the appropriate size according to different scenarios and business needs.\n */\nimport React from 'react';\nimport { Gap, Link } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Gap column={24}>\n        <Link size=\"small\" href=\"#\" type=\"primary\">Link</Link>\n        <Link size=\"small\" href=\"#\" type=\"secondary\">Link</Link>\n        <Link size=\"small\" href=\"#\" type=\"danger\">Link</Link>\n        <Link size=\"small\" href=\"#\" type=\"warning\">Link</Link>\n        <Link size=\"small\" href=\"#\" type=\"success\">Link</Link>\n      </Gap>\n\n      <br />\n\n      <Gap column={24}>\n        <Link href=\"#\" type=\"primary\">Link</Link>\n        <Link href=\"#\" type=\"secondary\">Link</Link>\n        <Link href=\"#\" type=\"danger\">Link</Link>\n        <Link href=\"#\" type=\"warning\">Link</Link>\n        <Link href=\"#\" type=\"success\">Link</Link>\n      </Gap>\n\n      <br />\n\n      <Gap column={24}>\n        <Link size=\"large\" href=\"#\" type=\"primary\">Link</Link>\n        <Link size=\"large\" href=\"#\" type=\"secondary\">Link</Link>\n        <Link size=\"large\" href=\"#\" type=\"danger\">Link</Link>\n        <Link size=\"large\" href=\"#\" type=\"warning\">Link</Link>\n        <Link size=\"large\" href=\"#\" type=\"success\">Link</Link>\n      </Gap>\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 9,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 6
    }
  },
  "List": {
    "name": "List",
    "description": "最基础的列表展示，可承载文字、列表、图片、段落",
    "category": "other",
    "importPath": "import { List } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "striped",
        "type": "boolean",
        "required": false,
        "description": "是否显示交错斑马底纹"
      },
      {
        "name": "pagination",
        "type": "PaginationProps",
        "required": false,
        "defaultValue": "PaginationProps",
        "description": "分页展示, 详见 Pagination"
      },
      {
        "name": "itemStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "列表容器样式"
      },
      {
        "name": "colNum",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "多列展示"
      },
      {
        "name": "data",
        "type": "any[]",
        "required": true,
        "description": "渲染数据"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number) | true",
        "required": true,
        "description": "生成每一项key的辅助方法\\n为 true 时，以数据项本身作为 key，相当于 (d => d)\\n为函数时，使用此函数返回值\\n为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((d: DataItem, index: number) => ReactNode)",
        "required": false,
        "description": "需要渲染成列表的数据"
      },
      {
        "name": "fixed",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否启用虚拟列表"
      },
      {
        "name": "height",
        "type": "number",
        "required": false,
        "description": "列表高度"
      },
      {
        "name": "bordered",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示边框"
      },
      {
        "name": "lineHeight",
        "type": "number",
        "required": false,
        "defaultValue": "32",
        "description": "列表项高度"
      },
      {
        "name": "rowsInView",
        "type": "number",
        "required": false,
        "defaultValue": "10",
        "description": "同时展示的列表项数量"
      },
      {
        "name": "empty",
        "type": "ReactNode",
        "required": false,
        "description": "无数据时展示的内容"
      },
      {
        "name": "scrollLoading",
        "type": "(() => void)",
        "required": false,
        "description": "滚动到底部时触发"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "尺寸"
      },
      {
        "name": "loading",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "false",
        "description": "加载中"
      },
      {
        "name": "loadingPosition",
        "type": "\"center\" | \"bottom\"",
        "required": false,
        "defaultValue": "\\\"center\\\"",
        "description": "loading 图标位置， 如果设置了fixed=true，则bottom位置无效",
        "version": "3.7.0"
      },
      {
        "name": "footer",
        "type": "ReactNode | (() => ReactNode)",
        "required": false,
        "description": "底部内容"
      },
      {
        "name": "rowClassName",
        "type": "string | ((rowData: DataItem, index: number) => string )",
        "required": false,
        "description": "自定义行 className"
      },
      {
        "name": "value",
        "type": "any[]",
        "required": false,
        "description": "当前选中值，格式和 onChange 返回值一致"
      },
      {
        "name": "onChange",
        "type": "((value: Value, data: DataItem, checked: boolean) => void)",
        "required": false,
        "description": "选择行。rowData 为选中的数据，rowIndex 为选中行号。如果需要数据需要格式化的处理，建议配置 format。"
      },
      {
        "name": "prediction",
        "type": "((value: Value extends (infer U)[] ? U : Value, data: DataItem) => boolean)",
        "required": false,
        "defaultValue": "(val, d) => val===format(d)",
        "description": "默认使用 format 函数执行的结果来比较是否匹配，在某些情况下（例如返回原始数据的对象，更新数据时，生成了一个值相同，非同一个对象的选项），需要借助 prediction 函数来判断是否匹配"
      },
      {
        "name": "disabled",
        "type": "((data: Item) => boolean) | boolean",
        "required": false,
        "defaultValue": "false",
        "description": "如果 disabled 为 true，禁用全部选项，如果 disabled 为函数，根据函数反回结果禁用选项"
      },
      {
        "name": "format",
        "type": "ObjectKey<DataItem> | ((data: DataItem) => Value extends (infer U)[] ? U : Value)",
        "required": false,
        "defaultValue": "d => d",
        "description": "格式化 value, 默认值，返回原始数据。 为 string 时，会作为 key 从原始数据中获取值，相当于 (d) => d\\\\[format]; 为函数时，以函数返回结果作为 value。"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Basic list display, can carry text, list, image, paragraph",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基础的列表展示，可承载文字、列表、图片、段落\n * en - Base\n *    -- Basic list display, can carry text, list, image, paragraph\n */\nimport React from 'react';\nimport { List } from 'shineout';\n\nconst data = [\n  'This is a long list of contents',\n  'This is a long list of contents',\n  'This is a long list of contents',\n  'This is a long list of contents',\n]\n\nconst App: React.FC = () => {\n  return <List keygen bordered data={data} />;\n};\n\nexport default App;\n"
      },
      {
        "title": "Size",
        "description": "Set size to `large` or `small` to change the size of button",
        "scenario": "basic",
        "code": "/**\n * cn - 不同尺寸\n *    -- 通过设置 size 为 `large` `small` 分别把按钮设为大、小尺寸。若不设置 size，则尺寸为中\n * en - Size\n *    -- Set size to `large` or `small` to change the size of button\n */\nimport React, { useState } from 'react';\nimport { List, Radio, TYPE } from 'shineout';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListData = ListProps['data'];\ntype ListRenderItem = ListProps['renderItem'];\n\nconst data: ListData = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst renderItem: ListRenderItem = (rowData) => (\n  <div>{`Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n);\n\nconst sizeList = ['small', 'default', 'large'];\nconst App: React.FC = () => {\n  const [size, setSize] = useState('default');\n\n  return (\n    <>\n      <Radio.Group\n        style={{ marginBottom: 24 }}\n        keygen\n        data={sizeList}\n        value={size}\n        onChange={setSize}\n      />\n      <List keygen='id' bordered data={data} renderItem={renderItem} size={size} />\n    </>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "custom border",
        "description": "Set bordered to false to close the default border",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义边框\n *    -- 设置 bordered 为 false 关闭默认边框\n * en - custom border\n *    -- Set bordered to false to close the default border\n */\nimport React from 'react';\nimport { List, TYPE } from 'shineout';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListData = ListProps['data'];\ntype ListRenderItem = ListProps['renderItem'];\n\nconst data: ListData = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst renderItem: ListRenderItem = (rowData) => (\n  <div>{`Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n);\n\nconst App: React.FC = () => {\n  return (\n    <div style={{ padding: '0 16px', border: '1px solid #E8EBF0' }}>\n      <List\n        itemStyle={{ paddingLeft: 0, paddingRight: 0 }}\n        keygen='id'\n        bordered={false}\n        data={data}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Big data list",
        "description": "Set the fixed property to enable the virtual list, which in this case loads 10,000 pieces of data",
        "scenario": "basic",
        "code": "/**\n * cn - 大数据列表\n *    -- 设置 fixed 属性来启用虚拟列表，本例加载了10000条数据\n *    -- 支持自动高度，默认跟随父元素高度\n *    -- lineHeight 用来设置列表项高度\n *    -- rowsInView 用来设置同时所展示的列表项数量，默认为10个\n * en - Big data list\n *    -- Set the fixed property to enable the virtual list, which in this case loads 10,000 pieces of data\n *    -- support automatic height, and follow the height of parent element by default\n *    -- lineheight is used to set the height of list items\n *    -- rowsinview is used to set the number of list items displayed on a page. The default is 10\n */\nimport React from 'react';\nimport { List, TYPE, Avatar} from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, any>;\ntype ListRenderItem = ListProps['renderItem'];\n\nconst names: ListItem[] = user.fetchSync(10000);\n\n// eslint-disable-next-line react/prop-types\nconst renderItem: ListRenderItem = ({ id, firstName }) => (\n  <div style={{ height: 30, display: 'flex', alignItems: 'center' }}>\n    <Avatar shape=\"circle\" icon={firstName.slice(0, 1)} style={{ marginRight: 8 }} />\n    <span style={{ flex: 1 }}>{firstName}</span>\n    <span>-{id}</span>\n  </div>\n);\n\nconst App: React.FC = () => (\n  <List\n    height={300}\n    lineHeight={54}\n    fixed\n    keygen='id'\n    bordered\n    colNum={2}\n    data={names}\n    renderItem={renderItem}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Pagination",
        "description": "Set the pagination property to show the pagination and if not set onChange property, the data is automatically paged",
        "scenario": "basic",
        "code": "/**\n * cn - 分页\n *    -- 前端分页的情况下, 设置 pagination 显示分页，没有设置 onChange 处理数据的情况下，会自动对数据进行分页\n *    -- pagination 的参数和 Pagination 组件一致\n * en - Pagination\n *   -- Set the pagination property to show the pagination and if not set onChange property, the data is automatically paged\n *    -- The parameters of pagination are consistent with the Pagination component\n */\nimport React, { useState, useEffect } from 'react';\nimport { List, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListRenderItem = ListProps['renderItem'];\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [current, setCurrent] = useState<number>(1);\n  const [data, setData] = useState<ListItem[]>([]);\n\n  const fetchData = (c: number) => {\n    setLoading(true);\n    user.fetch\n      .get('List', { current, pageSize: 10, sorter: {}, username: '' })\n      .then((_data: { data: any }) => {\n        setData(_data.data);\n        setLoading(false);\n        setCurrent(c);\n      });\n  };\n\n  useEffect(() => {\n    fetchData(1);\n  }, []);\n\n  const renderItem: ListRenderItem = (rowData) => (\n    <div>{`Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n  );\n\n  const handlePageChange = (index: number) => {\n    if (index > 10) return;\n    fetchData(index);\n  };\n\n  const pagination = {\n    current,\n    total: 100,\n    pageSize: 10,\n    align: 'right',\n    onChange: handlePageChange,\n  };\n\n  return (\n    <List\n      keygen='id'\n      format='id'\n      bordered\n      data={data}\n      loading={loading}\n      renderItem={renderItem}\n      pagination={pagination}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Select",
        "description": "Set the onChange property will automatically add a row with checkbox",
        "scenario": "basic",
        "code": "/**\n * cn - 选择行\n *    -- 设置 onChange 属性，会自动添加选择行\n * en - Select\n *    -- Set the onChange property will automatically add a row with checkbox\n */\nimport React, { useState, useEffect } from 'react';\nimport { List, Checkbox, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, number[]>;\ntype ListOnChange = ListProps['onChange'];\ntype ListRenderItem = ListProps['renderItem'];\n\ntype CheckboxProps = TYPE.Checkbox.Props<any>;\ntype CheckboxOnChange = CheckboxProps['onChange'];\n\nconst style: React.CSSProperties = {\n  padding: '12px 16px',\n  display: 'flex',\n  fontSize: 14,\n  lineHeight: '22px',\n  alignItems: 'center',\n  justifyContent: 'flex-start',\n  border: '1px solid transparent',\n};\n\nconst App: React.FC = () => {\n  const [current, setCurrent] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<ListItem[]>([]);\n  const [value, setValue] = useState<number[]>([1]);\n\n  const fetchData = (c: number) => {\n    setLoading(true);\n    user.fetch\n      .get('List', { current, pageSize: 10, sorter: {}, username: '' })\n      .then((_data: { data: ListItem[] }) => {\n        setData([...data, ..._data.data]);\n        setCurrent(c);\n        setLoading(false);\n      });\n  };\n\n  const getChecked = () => {\n    if (!value || value.length <= 0) return false;\n    if (value.length === data.length) return true;\n    return 'indeterminate';\n  };\n\n  const onChange: ListOnChange = (selectedValue, selectedDataItem, checked) => {\n    console.log('selectValue, selectedDataItem, checked: ', selectedValue, selectedDataItem, checked);\n    setValue(selectedValue);\n  };\n\n  const checkboxOnChange: CheckboxOnChange = (flag: boolean) => {\n    if (flag) {\n      setValue(data.map((v: ListItem) => v.id));\n      return;\n    }\n    setValue([]);\n  };\n\n  const renderItem: ListRenderItem = (rowData) => (\n    <div>{`From ${rowData.country}. Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n  );\n\n  useEffect(() => {\n    fetchData(1);\n  }, []);\n\n  return (\n    <div>\n      <div style={style}>\n        <Checkbox checked={getChecked()} onChange={checkboxOnChange} />\n        <div>{`Selected ${value.length}`}</div>\n      </div>\n      <List\n        format='id'\n        keygen='id'\n        bordered\n        data={data}\n        value={value}\n        loading={loading}\n        onChange={onChange}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Striped",
        "description": "Set `striped` to enable striped effect",
        "scenario": "basic",
        "code": "/**\n * cn - 斑马纹\n *    -- 设置 `striped` 开启斑马纹\n * en - Striped\n *    -- Set `striped` to enable striped effect\n */\n\nimport React from 'react';\nimport { List, TYPE } from 'shineout';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListData = ListProps['data'];\ntype ListRenderItem = ListProps['renderItem'];\n\nconst data: ListData = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst App: React.FC = () => {\n  const renderItem: ListRenderItem = (rowData) => (\n    <div>{`Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n  );\n\n  return <List keygen='id' striped bordered data={data} renderItem={renderItem} />;\n};\n\nexport default App;\n"
      },
      {
        "title": "Load more",
        "description": "Through use the footer attribute, you can load more functions",
        "scenario": "basic",
        "code": "/**\n * cn - 点击加载\n *    -- 通过使用 footer 属性，可实现加载更多功能\n * en - Load more\n *    -- Through use the footer attribute, you can load more functions\n */\nimport React, { useState, useEffect } from 'react';\nimport { List, Link, Button, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListRenderItem = ListProps['renderItem'];\n\nconst style: React.CSSProperties = {\n  padding: 16,\n  display: 'flex',\n  lineHeight: '22px',\n  alignItems: 'center',\n  justifyContent: 'center',\n};\n\nconst App: React.FC = () => {\n  const [current, setCurrent] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<ListItem[]>([]);\n\n  const fetchData = (c: number) => {\n    setLoading(true);\n    user.fetch\n      .get('List', { current: c, pageSize: 5, sorter: {}, username: '' })\n      .then((_data: { data: ListItem[] }) => {\n        setData([...data, ..._data.data]);\n        setCurrent(c);\n        setLoading(false);\n      });\n  };\n\n  const onClick = () => {\n    if (loading) return;\n\n    fetchData(current + 1);\n  };\n\n  const renderItem: ListRenderItem = (rowData) => (\n    <div style={{ display: 'flex', alignItems: 'center', width: '100%', fontSize: '14px' }}>\n      <svg\n        width='40'\n        height='40'\n        viewBox='0 0 40 40'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          d='M0 20C0 8.95431 8.95431 0 20 0C31.0457 0 40 8.95431 40 20C40 31.0457 31.0457 40 20 40C8.95431 40 0 31.0457 0 20Z'\n          fill='#E8EBF0'\n        />\n        <path\n          fillRule='evenodd'\n          clipRule='evenodd'\n          d='M19.8301 21.0204C22.46 21.0204 24.592 18.8884 24.592 16.2585C24.592 13.6286 22.46 11.4966 19.8301 11.4966C17.2002 11.4966 15.0682 13.6286 15.0682 16.2585C15.0682 18.8884 17.2002 21.0204 19.8301 21.0204ZM16.7628 22.7211C13.9482 22.7211 11.6665 25.0028 11.6665 27.8174C11.6665 28.1963 11.9737 28.5034 12.3525 28.5034H27.6471C28.026 28.5034 28.3332 28.1963 28.3332 27.8174C28.3332 25.0028 26.0515 22.7211 23.2369 22.7211H16.7628Z'\n          fill='#B3B7C1'\n        />\n      </svg>\n      <div style={{ flex: 1, minWidth: 0, margin: '0 12px' }}>\n        <div style={{ fontWeight: '500' }}>List Title</div>\n        <div>{rowData.position}</div>\n      </div>\n      <div style={{display: 'flex', gap: 12}}>\n        <Link type='primary'>\n          Preview\n        </Link>\n        <Link type='primary'>\n          Edit\n        </Link>\n        <Link type='primary'>\n          Delete\n        </Link>\n      </div>\n    </div>\n  );\n\n  const renderFooter = () => (\n    <div style={style}>\n      <Button loading={loading} onClick={onClick} type='primary' mode='text'>\n        load more\n      </Button>\n    </div>\n  );\n\n  useEffect(() => {\n    fetchData(1);\n  }, []);\n\n  return <List keygen='id' data={data} bordered renderItem={renderItem} footer={renderFooter} />;\n};\n\nexport default App;\n"
      },
      {
        "title": "scroll loading",
        "description": "Set the scrollLoad property, when the scroll to the bottom, it will automatically call to change the property",
        "scenario": "basic",
        "code": "/**\n * cn - 滚动加载\n *    -- 设置 scrollLoading 属性，当滚动到底部时，会自动调用该属性\n * en - scroll loading\n *    -- Set the scrollLoad property, when the scroll to the bottom, it will automatically call to change the property\n */\nimport React, { useState, useEffect } from 'react';\nimport { List, Link, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, number>;\ntype ListRenderItem = ListProps['renderItem'];\n\nconst style: React.CSSProperties = { maxHeight: 300 };\n\nconst App: React.FC = () => {\n  const [current, setCurrent] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<ListItem[]>([]);\n\n  const fetchData = (c: number) => {\n    setLoading(true);\n    user.fetch\n      .get('List', { current: c, pageSize: 10, sorter: {}, username: '' })\n      .then((_data: { data: ListItem[] }) => {\n        setData([...data, ..._data.data]);\n        setCurrent(c);\n        setLoading(false);\n      });\n  };\n\n  const scrollLoading = () => {\n    if (current >= 10) return;\n    fetchData(current + 1);\n  };\n\n  const renderItem: ListRenderItem = (rowData) => (\n    <div style={{ display: 'flex', alignItems: 'center', width: '100%', fontSize: '14px' }}>\n      <svg\n        width='40'\n        height='40'\n        viewBox='0 0 40 40'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          d='M0 20C0 8.95431 8.95431 0 20 0C31.0457 0 40 8.95431 40 20C40 31.0457 31.0457 40 20 40C8.95431 40 0 31.0457 0 20Z'\n          fill='#E8EBF0'\n        />\n        <path\n          fillRule='evenodd'\n          clipRule='evenodd'\n          d='M19.8301 21.0204C22.46 21.0204 24.592 18.8884 24.592 16.2585C24.592 13.6286 22.46 11.4966 19.8301 11.4966C17.2002 11.4966 15.0682 13.6286 15.0682 16.2585C15.0682 18.8884 17.2002 21.0204 19.8301 21.0204ZM16.7628 22.7211C13.9482 22.7211 11.6665 25.0028 11.6665 27.8174C11.6665 28.1963 11.9737 28.5034 12.3525 28.5034H27.6471C28.026 28.5034 28.3332 28.1963 28.3332 27.8174C28.3332 25.0028 26.0515 22.7211 23.2369 22.7211H16.7628Z'\n          fill='#B3B7C1'\n        />\n      </svg>\n      <div style={{ flex: 1, minWidth: 0, margin: '0 12px' }}>\n        <div style={{ fontWeight: '500' }}>List Title</div>\n        <div>{rowData.position}</div>\n      </div>\n      <div style={{display: 'flex', gap: 12}}>\n        <Link type='primary'>\n          Preview\n        </Link>\n        <Link type='primary'>\n          Edit\n        </Link>\n        <Link type='primary'>\n          Delete\n        </Link>\n      </div>\n    </div>\n  );\n\n  useEffect(() => {\n    fetchData(1);\n  }, []);\n\n  return (\n    <List\n      bordered\n      keygen='id'\n      format='id'\n      data={data}\n      style={style}\n      loading={loading}\n      renderItem={renderItem}\n      scrollLoading={scrollLoading}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "*    -- Setting the loadingPosition property to bottom allows the scroll loading icon to be displayed at the bottom",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 设置 loadingPosition 属性为 bottom，可以让滚动加载图标显示在底部\n * en -\n *    -- Setting the loadingPosition property to bottom allows the scroll loading icon to be displayed at the bottom\n */\nimport React, { useState, useEffect } from 'react';\nimport { List, Link, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, number>;\ntype ListRenderItem = ListProps['renderItem'];\n\nconst style: React.CSSProperties = { maxHeight: 300 };\n\nconst App: React.FC = () => {\n  const [current, setCurrent] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<ListItem[]>([]);\n\n  const fetchData = (c: number) => {\n    setLoading(true);\n    user.fetch\n      .get('List', { current: c, pageSize: 10, sorter: {}, username: '' })\n      .then((_data: { data: ListItem[] }) => {\n        setTimeout(() => {\n          setData(prev => [...prev, ..._data.data])\n          setCurrent(c);\n          setLoading(false);\n        }, 1000);\n      });\n  };\n\n  const scrollLoading = () => {\n    if (current >= 10) return;\n    fetchData(current + 1);\n  };\n\n  const renderItem: ListRenderItem = (rowData) => (\n    <div style={{ display: 'flex', alignItems: 'center', width: '100%', fontSize: '14px' }}>\n      <svg\n        width='40'\n        height='40'\n        viewBox='0 0 40 40'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          d='M0 20C0 8.95431 8.95431 0 20 0C31.0457 0 40 8.95431 40 20C40 31.0457 31.0457 40 20 40C8.95431 40 0 31.0457 0 20Z'\n          fill='#E8EBF0'\n        />\n        <path\n          fillRule='evenodd'\n          clipRule='evenodd'\n          d='M19.8301 21.0204C22.46 21.0204 24.592 18.8884 24.592 16.2585C24.592 13.6286 22.46 11.4966 19.8301 11.4966C17.2002 11.4966 15.0682 13.6286 15.0682 16.2585C15.0682 18.8884 17.2002 21.0204 19.8301 21.0204ZM16.7628 22.7211C13.9482 22.7211 11.6665 25.0028 11.6665 27.8174C11.6665 28.1963 11.9737 28.5034 12.3525 28.5034H27.6471C28.026 28.5034 28.3332 28.1963 28.3332 27.8174C28.3332 25.0028 26.0515 22.7211 23.2369 22.7211H16.7628Z'\n          fill='#B3B7C1'\n        />\n      </svg>\n      <div style={{ flex: 1, minWidth: 0, margin: '0 12px' }}>\n        <div style={{ fontWeight: '500' }}>List Title</div>\n        <div>{rowData.position}</div>\n      </div>\n      <div style={{display: 'flex', gap: 12}}>\n        <Link type='primary'>\n          Preview\n        </Link>\n        <Link type='primary'>\n          Edit\n        </Link>\n        <Link type='primary'>\n          Delete\n        </Link>\n      </div>\n    </div>\n  );\n\n  useEffect(() => {\n    fetchData(1);\n  }, []);\n\n  return (\n    <List\n      bordered\n      keygen='id'\n      format='id'\n      loading={loading}\n      loadingPosition=\"bottom\"\n      data={data}\n      style={style}\n      renderItem={renderItem}\n      scrollLoading={scrollLoading}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "List.BaseItem layout",
        "description": "Use List.BaseItem component to quickly layout",
        "scenario": "basic",
        "code": "/**\n * cn - List.BaseItem 布局(废弃)\n *    -- 使用 List.BaseItem 组件，可使用经典布局方式快速布局\n * en - List.BaseItem layout\n *    -- Use List.BaseItem component to quickly layout\n */\nimport React, { useState, useEffect } from 'react';\nimport { List, Button, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, number>;\ntype ListRenderItem = ListProps['renderItem'];\n\nconst { BaseItem } = List;\n\nconst image =\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-06.png';\n\nconst App: React.FC = () => {\n  const [current, setCurrent] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<ListItem[]>([]);\n\n  const fetchData = (c: number) => {\n    setLoading(true);\n    user.fetch\n      .get('List', { current: c, pageSize: 10, sorter: {}, username: '' })\n      .then((_data: { data: ListItem[] }) => {\n        setData([...data, ..._data.data]);\n        setCurrent(c);\n        setLoading(false);\n      });\n  };\n\n  const renderItem: ListRenderItem = (rowData) => (\n    <BaseItem\n      avatar={image}\n      content={`${rowData.firstName}-${rowData.lastName}: position: ${rowData.position}, country: ${rowData.country}, office: ${rowData.office}`}\n      desc={`From ${rowData.country}. Position in ${rowData.position}. Start datetime ${rowData.start}.`}\n      extra={[\n        <Button type='primary' mode='text' key='edit'>\n          edit\n        </Button>,\n        <Button type='primary' mode='text' key='more'>\n          more\n        </Button>,\n      ]}\n    />\n  );\n\n  useEffect(() => {\n    fetchData(current);\n  }, []);\n\n  return <List key='1' keygen='id' data={data} loading={loading} renderItem={renderItem} />;\n};\n\nexport default App;\n"
      },
      {
        "title": "colNum",
        "description": "set colNum",
        "scenario": "basic",
        "code": "/**\n * cn - 多列\n *    -- 设置 colNum\n * en - colNum\n *    -- set colNum\n */\nimport React from 'react';\nimport { List, TYPE, Button } from 'shineout';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListData = ListProps['data'];\ntype ListRenderItem = ListProps['renderItem'];\n\nconst data: ListData = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst App: React.FC = () => {\n  const renderItem: ListRenderItem = (rowData) => (\n    <div style={{ display: 'flex', alignItems: 'center', width: '100%', fontSize: '14px' }}>\n      <svg\n        width='40'\n        height='40'\n        viewBox='0 0 40 40'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          d='M0 20C0 8.95431 8.95431 0 20 0C31.0457 0 40 8.95431 40 20C40 31.0457 31.0457 40 20 40C8.95431 40 0 31.0457 0 20Z'\n          fill='#E8EBF0'\n        />\n        <path\n          fillRule='evenodd'\n          clipRule='evenodd'\n          d='M19.8301 21.0204C22.46 21.0204 24.592 18.8884 24.592 16.2585C24.592 13.6286 22.46 11.4966 19.8301 11.4966C17.2002 11.4966 15.0682 13.6286 15.0682 16.2585C15.0682 18.8884 17.2002 21.0204 19.8301 21.0204ZM16.7628 22.7211C13.9482 22.7211 11.6665 25.0028 11.6665 27.8174C11.6665 28.1963 11.9737 28.5034 12.3525 28.5034H27.6471C28.026 28.5034 28.3332 28.1963 28.3332 27.8174C28.3332 25.0028 26.0515 22.7211 23.2369 22.7211H16.7628Z'\n          fill='#B3B7C1'\n        />\n      </svg>\n      <div style={{ flex: 1, minWidth: 0, margin: '0 12px' }}>\n        <div style={{ fontWeight: 'bold' }}>List Title</div>\n        <div>{rowData.position}</div>\n      </div>\n      <div>\n        <Button type='primary' mode='text'>\n          Preview\n        </Button>\n        <Button type='primary' mode='text'>\n          Edit\n        </Button>\n        <Button type='primary' mode='text'>\n          Delete\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <List\n      keygen='id'\n      style={{ color: 'blue' }}\n      className='hello'\n      bordered\n      data={data}\n      renderItem={renderItem}\n      colNum={2}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "set disabled",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用\n *    -- 设置 disabled\n * en - Disabled\n *    -- set disabled\n */\nimport React, { useState, useEffect } from 'react';\nimport { List, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, number[]>;\ntype ListOnChange = ListProps['onChange'];\ntype ListRenderItem = ListProps['renderItem'];\n\nconst App: React.FC = () => {\n  const [current, setCurrent] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<ListItem[]>([]);\n  const [value, setValue] = useState<number[]>([1]);\n\n  const fetchData = (c: number) => {\n    setLoading(true);\n    user.fetch\n      .get('List', { current, pageSize: 5, sorter: {}, username: '' })\n      .then((_data: { data: ListItem[] }) => {\n        setData([...data, ..._data.data]);\n        setCurrent(c);\n        setLoading(false);\n      });\n  };\n\n  const onChange: ListOnChange = (selectedValue) => {\n    console.log('selectValue: ', selectedValue);\n    setValue(selectedValue);\n  };\n\n  const renderItem: ListRenderItem = (rowData) => (\n    <div>{`From ${rowData.country}. Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n  );\n\n  useEffect(() => {\n    fetchData(1);\n  }, []);\n\n  return (\n    <div>\n      <List\n        format='id'\n        keygen='id'\n        disabled\n        bordered\n        data={data}\n        value={value}\n        loading={loading}\n        onChange={onChange}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Empty",
        "description": "set empty",
        "scenario": "basic",
        "code": "/**\n * cn -  无数据文本\n *    -- set empty\n * en - Empty\n *    -- set empty\n */\nimport React from 'react';\nimport { List, TYPE, Button } from 'shineout';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListRenderItem = ListProps['renderItem'];\n\nconst App: React.FC = () => {\n  const renderItem: ListRenderItem = (rowData) => (\n    <div style={{ display: 'flex', alignItems: 'center', width: '100%', fontSize: '14px' }}>\n      <svg\n        width='40'\n        height='40'\n        viewBox='0 0 40 40'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          d='M0 20C0 8.95431 8.95431 0 20 0C31.0457 0 40 8.95431 40 20C40 31.0457 31.0457 40 20 40C8.95431 40 0 31.0457 0 20Z'\n          fill='#E8EBF0'\n        />\n        <path\n          fillRule='evenodd'\n          clipRule='evenodd'\n          d='M19.8301 21.0204C22.46 21.0204 24.592 18.8884 24.592 16.2585C24.592 13.6286 22.46 11.4966 19.8301 11.4966C17.2002 11.4966 15.0682 13.6286 15.0682 16.2585C15.0682 18.8884 17.2002 21.0204 19.8301 21.0204ZM16.7628 22.7211C13.9482 22.7211 11.6665 25.0028 11.6665 27.8174C11.6665 28.1963 11.9737 28.5034 12.3525 28.5034H27.6471C28.026 28.5034 28.3332 28.1963 28.3332 27.8174C28.3332 25.0028 26.0515 22.7211 23.2369 22.7211H16.7628Z'\n          fill='#B3B7C1'\n        />\n      </svg>\n      <div style={{ flex: 1, minWidth: 0, margin: '0 12px' }}>\n        <div style={{ fontWeight: 'bold' }}>List Title</div>\n        <div>{rowData.position}</div>\n      </div>\n      <div>\n        <Button type='primary' mode='text'>\n          Preview\n        </Button>\n        <Button type='primary' mode='text'>\n          Edit\n        </Button>\n        <Button type='primary' mode='text'>\n          Delete\n        </Button>\n      </div>\n    </div>\n  );\n\n  return <List keygen='id' bordered data={[]} empty={'no data'} renderItem={renderItem} />;\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 26,
      "requiredProps": 2,
      "propsWithWhen": 0,
      "examplesCount": 14
    }
  },
  "Menu": {
    "name": "Menu",
    "description": "用于承载网站的架构，并提供跳转的菜单列表",
    "category": "navigation",
    "importPath": "import { Menu } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "mode",
        "type": "\"inline\" | \"vertical\" | \"horizontal\" | \"vertical-auto\"",
        "required": false,
        "defaultValue": "\\\"inline\\\"",
        "description": "菜单样式"
      },
      {
        "name": "data",
        "type": "object[]",
        "required": false,
        "defaultValue": "[]",
        "description": "需要渲染成菜单的数据"
      },
      {
        "name": "theme",
        "type": "\"dark\" | \"light\"",
        "required": false,
        "description": "主题"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": "菜单高度"
      },
      {
        "name": "openKeys",
        "type": "(string | number)[]",
        "required": false,
        "defaultValue": "[]",
        "description": "展开的菜单(受控)"
      },
      {
        "name": "caretColor",
        "type": "string",
        "required": false,
        "description": "三角展开符颜色"
      },
      {
        "name": "frontCaret",
        "type": "boolean",
        "required": false,
        "description": "前置实心三角展开符"
      },
      {
        "name": "inlineIndent",
        "type": "number",
        "required": false,
        "defaultValue": "24",
        "description": "每一层缩进宽度"
      },
      {
        "name": "looseChildren",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "如果 children 有设置则菜单项可展开"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number) | true",
        "required": true,
        "defaultValue": "true",
        "description": "生成每一项key的辅助方法。为 true 时，以数据项本身作为key，相当于 (d => d)。为函数时，使用此函数返回值。为string时，使用这个string对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
      },
      {
        "name": "defaultOpenKeys",
        "type": "(string | number)[]",
        "required": false,
        "defaultValue": "[]",
        "description": "初始展开的菜单;如果需要设置此值,则需要设置keygen,此值为一个包含key的数组"
      },
      {
        "name": "parentSelectable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "父级菜单是否可选中"
      },
      {
        "name": "onClick",
        "type": "((data: DataItem) => void)",
        "required": false,
        "description": "子菜单点击事件,参数为当条数据"
      },
      {
        "name": "active",
        "type": "((data: DataItem) => boolean)",
        "required": false,
        "description": "验证是否激活,参数为对应的数据对象,返回true则代表该菜单激活"
      },
      {
        "name": "disabled",
        "type": "((data: DataItem) => boolean)",
        "required": false,
        "defaultValue": "d => d.disabled",
        "description": "是否禁用选项"
      },
      {
        "name": "frontCaretType",
        "type": "\"hollow\" | \"solid\"",
        "required": false,
        "defaultValue": "\\\"solid\\\"",
        "description": "前置三角展开符类型"
      },
      {
        "name": "onOpenChange",
        "type": "((keys: Key[]) => void)",
        "required": false,
        "description": "菜单展开/收起回调"
      },
      {
        "name": "linkKey",
        "type": "((d: DataItem) => string) | ObjectKey<DataItem>",
        "required": false,
        "description": "需要注入子菜单的链接键值"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((data: DataItem, index: number) => ReactNode)",
        "required": false,
        "defaultValue": "\\\"title\\\"",
        "description": "元素渲染方式,如果为字符串,则会以对应的值作为显示内容;如果为函数,则以函数返回的结果作为显示内容,函数参数为对应的数据对象"
      },
      {
        "name": "renderIcon",
        "type": "((data: DataItem) => ReactNode)",
        "required": false,
        "description": "渲染Icon"
      },
      {
        "name": "collapse",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否折叠"
      },
      {
        "name": "header",
        "type": "ReactNode",
        "required": false,
        "description": "头部内容， 仅在 mode为 \\\"inline\\\" 时生效"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Menu generates menu items through data",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- Menu 通过数据来生成菜单项\n * en - Base\n *    -- Menu generates menu items through data\n */\n\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n  {\n    id: '11',\n    title: 'This is a very very very very long menu title',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState('1');\n\n  const handleClick = (d: MenuItem) => setActive(d.id);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkActive: MenuActive = (d: MenuItem) => active === d.id;\n\n  return (\n    <div>\n      <Menu\n        keygen='id'\n        data={data}\n        inlineIndent={14}\n        active={checkActive}\n        onClick={handleClick}\n        style={{ width: 256, border: '1px solid #e8ebf0' }}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "link",
        "description": "Can render the corresponding link by setting linkKey",
        "scenario": "basic",
        "code": "/**\n * cn - 链接\n *    --  可以通过设置 linkKey 来渲染出对应的链接\n * en - link\n *    -- Can render the corresponding link by setting linkKey\n */\nimport React from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  link: string;\n  title: string;\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Google',\n    link: 'https://www.google.com',\n  },\n  {\n    id: '2',\n    title: 'Strackoverflow',\n    link: 'https://stackoverflow.com/',\n  },\n  {\n    id: '3',\n    title: 'Github',\n    link: 'https://github.com/',\n  },\n];\n\nconst App: React.FC = () => {\n  const renderItem: MenuRenderItem = (d: MenuItem) => <a href={d.link} target=\"_blank\" rel=\"noreferrer\">{d.title}</a>;\n\n  return (\n    <Menu\n      keygen='id'\n      linkKey='link'\n      data={data}\n      renderItem={renderItem}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      inlineIndent={14}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Parent Selectable",
        "description": "Setting the parentSelectable property can make the parent menu trigger the onClick of the Menu after clicking",
        "scenario": "basic",
        "code": "/**\n * cn - 父菜单可选中\n *    -- 设置 parentSelectable 使父级菜单支持单独选中 <br /> 此时父级菜单左侧区域用于选中，偏右侧区域用于展开和收起子菜单\n * en - Parent Selectable\n *    -- Setting the parentSelectable property can make the parent menu trigger the onClick of the Menu after clicking\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Parent 1',\n    children: [\n      {\n        id: '2',\n        title: 'Option 2',\n      },\n      {\n        id: '3',\n        title: 'Option 3',\n      },\n    ],\n  },\n  {\n    id: '4',\n    title: 'Parent 4',\n    children: [\n      {\n        id: '5',\n        title: 'Option 5',\n      },\n      {\n        id: '6',\n        title: 'Option 6',\n      },\n    ],\n  },\n  {\n    id: '7',\n    title: 'Option 7',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState('1');\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkActive: MenuActive = (d: MenuItem) => active === d.id;\n\n  const handleClick = (d: MenuItem) => {\n    setActive(d.id);\n  };\n\n  return (\n    <Menu\n      keygen='id'\n      inlineIndent={14}\n      data={data}\n      parentSelectable\n      active={checkActive}\n      onClick={handleClick}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      renderItem={renderItem}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "put the expander in front",
        "description": "use frontCaret to put the expander in front",
        "scenario": "basic",
        "code": "/**\n * cn - 前置展开符\n *    -- 使用 frontCaret 来前置展开符\n *    -- 使用 frontCaretType 来设置展开图标类型\n * en - put the expander in front\n *    -- use frontCaret to put the expander in front\n *    -- Use frontCaretType to set the Icon type\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState('1');\n\n  const handleClick = (d: MenuItem) => setActive(d.id);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkActive: MenuActive = (d: MenuItem) => active === d.id;\n\n  return (\n    <div style={{ display: 'flex', gap: 24 }}>\n      <Menu\n        keygen='id'\n        frontCaret\n        frontCaretType='solid'\n        data={data}\n        inlineIndent={14}\n        active={checkActive}\n        onClick={handleClick}\n        style={{ width: 256, border: '1px solid #e8ebf0' }}\n        renderItem={renderItem}\n      />\n      <Menu\n        keygen='id'\n        frontCaret\n        frontCaretType='hollow'\n        data={data}\n        inlineIndent={14}\n        active={checkActive}\n        onClick={handleClick}\n        style={{ width: 256, border: '1px solid #e8ebf0' }}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "Disable the option by the disabled property",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用菜单\n *    -- 通过 disabled 属性可以禁用选项\n * en - Disabled\n *    --Disable the option by the disabled property\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  disabled?: boolean;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuOnClick = MenuProps['onClick'];\ntype MenuDisabled = MenuProps['disabled'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n        disabled: true,\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n    disabled: true,\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState(['1']);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkDisabled: MenuDisabled = (d: MenuItem) => !!d.disabled;\n\n  const handleClick: MenuOnClick = (d: MenuItem) => setActive([d.id]);\n\n  const checkActive: MenuActive = (d: MenuItem) => active.includes(d.id);\n\n  return (\n    <Menu\n      data={data}\n      keygen='id'\n      mode='inline'\n      inlineIndent={14}\n      active={checkActive}\n      onClick={handleClick}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      renderItem={renderItem}\n      disabled={checkDisabled}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Controlled",
        "description": "Set active property to control the actived option",
        "scenario": "basic",
        "code": "/**\n * cn - 受控\n *    -- active 参数控制选中选项\n * en - Controlled\n *    -- Set active property to control the actived option\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuOnClick = MenuProps['onClick'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState(['1']);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const handleClick: MenuOnClick = (d: MenuItem) => setActive([d.id]);\n\n  const checkActive: MenuActive = (d: MenuItem) => active.includes(d.id);\n\n  return (\n    <Menu\n      data={data}\n      keygen='id'\n      mode='inline'\n      inlineIndent={14}\n      active={checkActive}\n      onClick={handleClick}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      defaultOpenKeys={['3']}\n      renderItem={renderItem}\n    />\n  );\n};\nexport default App;\n"
      },
      {
        "title": "RenderItem",
        "description": "Set the renderItem property to show format content",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义渲染\n *    -- 设置 renderItem 属性展现稍微复杂的内容\n * en - RenderItem\n *    -- Set the renderItem property to show format content\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ninterface IconList {\n  [x: number]: React.ReactNode;\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuOnClick = MenuProps['onClick'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst homeIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M12.0218 2.00024L12.0602 2.00181C12.0752 2.00272 12.0902 2.00396 12.1052 2.00555C12.1245 2.00759 12.1439 2.01021 12.1632 2.0134C12.1834 2.01674 12.2037 2.02076 12.224 2.02541C12.2448 2.0302 12.2653 2.03563 12.2858 2.04174C12.3283 2.05443 12.3704 2.07012 12.4115 2.08874L12.5207 2.14669L12.6238 2.21913L22.6089 10.2191C23.617 11.0268 22.4745 12.5198 21.4564 11.8501L21.3614 11.7809L20.8121 11.3406C20.7259 11.2715 20.6001 11.2854 20.531 11.3716C20.5025 11.4071 20.487 11.4512 20.487 11.4967L20.4874 20C20.4874 21.4529 19.5572 22.0052 18.6068 21.9933L18.4903 22H5.50965C4.47075 22 3.51262 21 3.51262 20L3.51228 11.4968C3.51228 11.3864 3.42273 11.2968 3.31227 11.2968C3.26677 11.2968 3.22262 11.3124 3.18713 11.3408L2.63862 11.7809C1.63051 12.5886 0.426888 11.1445 1.3028 10.2968L1.39108 10.2191L11.3762 2.21913L11.4793 2.14669C11.4818 2.14511 11.4844 2.14354 11.487 2.14199L11.3762 2.21913C11.4218 2.18266 11.4697 2.15074 11.5194 2.12338C11.5462 2.10862 11.5735 2.09517 11.6013 2.08305C11.6177 2.0759 11.6343 2.06919 11.651 2.06295C11.6756 2.05379 11.7003 2.04564 11.7253 2.03849C11.7402 2.03424 11.7551 2.03033 11.7702 2.02678C11.7978 2.02024 11.8258 2.01488 11.8539 2.01072C11.8674 2.00874 11.8807 2.00705 11.894 2.00563C11.9258 2.00224 11.9579 2.00037 11.99 2C12.0004 2 12.0111 2 12.0218 2.00024ZM11.6874 4.53046L5.69668 9.32987C5.57823 9.42477 5.5093 9.56833 5.5093 9.72011L5.50964 19.5C5.50966 19.7761 5.73352 20 6.00965 20H8.00484C8.28097 20 8.50482 19.7761 8.50487 19.5L8.5052 14C8.5052 13.4872 8.89066 13.0645 9.38726 13.0067L9.4893 13.0008C9.49891 13.0003 9.50852 13 9.51814 13H14.4963C15.0478 13 15.4948 13.4477 15.4948 14L15.4945 19.5C15.4944 19.7761 15.7183 20 15.9944 20C15.9944 20.0001 15.9944 20 15.9944 20L17.9903 20C18.2665 20 18.4903 19.7761 18.4903 19.5V9.72009C18.4903 9.56833 18.4214 9.42478 18.303 9.32988L12.3126 4.53047C12.1299 4.38408 11.8701 4.38408 11.6874 4.53046ZM12.4978 15H11.5022C10.9499 15 10.5022 15.4477 10.5022 16V19.5C10.5022 19.7761 10.7261 20 11.0022 20H12.9978C13.2739 20 13.4978 19.7761 13.4978 19.5V16C13.4978 15.4477 13.0501 15 12.4978 15Z'\n      fill='currentColor'\n    />\n  </svg>\n);\n\nconst tagIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M13.9994 2.00219L19.7686 2.24C20.7799 2.28169 21.6007 3.07247 21.68 4.08162L22.1572 10.1534C22.203 10.7366 21.9912 11.3106 21.5775 11.7243L11.6922 21.6097C10.9111 22.3907 9.64478 22.3907 8.86373 21.6097L2.58579 15.3317C1.80474 14.5507 1.80474 13.2844 2.58579 12.5033L12.5028 2.58628C12.8981 2.19097 13.4408 1.97916 13.9994 2.00219ZM13.917 4.00049L4.70711 13.2104C4.31658 13.6009 4.31658 14.2341 4.70711 14.6246L9.57084 19.4884C9.96136 19.8789 10.5945 19.8789 10.9851 19.4884L20.1633 10.3101L19.7209 4.68044C19.7011 4.42816 19.4959 4.23046 19.2431 4.22004L13.917 4.00049ZM15.3854 5.83727C16.7661 5.83727 17.8854 6.95655 17.8854 8.33727C17.8854 9.71798 16.7661 10.8373 15.3854 10.8373C14.0047 10.8373 12.8854 9.71798 12.8854 8.33727C12.8854 6.95655 14.0047 5.83727 15.3854 5.83727ZM15.3854 7.83727C15.1093 7.83727 14.8854 8.06112 14.8854 8.33727C14.8854 8.61341 15.1093 8.83727 15.3854 8.83727C15.6615 8.83727 15.8854 8.61341 15.8854 8.33727C15.8854 8.06112 15.6615 7.83727 15.3854 7.83727Z'\n      fill='currentColor'\n    />\n  </svg>\n);\n\nconst githubIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M12.0011 2.00049C6.47548 1.9982 2 6.5931 2 12.2644C2 16.7492 4.79969 20.5614 8.69869 21.9615C9.22377 22.0969 9.14334 21.7136 9.14334 21.452V19.6732C6.11127 20.0381 5.98838 17.9771 5.78505 17.6328C5.37392 16.9121 4.40197 16.7285 4.69244 16.3842C5.38286 16.0193 6.08669 16.4761 6.90225 17.7131C7.49212 18.6106 8.64283 18.4591 9.22601 18.3099C9.35337 17.7705 9.62596 17.2885 10.0013 16.9144C6.85979 16.3361 5.55044 14.3668 5.55044 12.0257C5.55044 10.8896 5.91465 9.84534 6.62965 9.00302C6.17384 7.61445 6.6721 6.42555 6.73914 6.24883C8.03731 6.12948 9.38688 7.20361 9.4919 7.28853C10.2292 7.08426 11.0716 6.97639 12.0145 6.97639C12.9619 6.97639 13.8065 7.08885 14.5506 7.29542C14.803 7.09803 16.0543 6.17538 17.2609 6.28784C17.3257 6.46457 17.8128 7.62592 17.3838 8.99613C18.1077 9.84075 18.4764 10.8942 18.4764 12.0326C18.4764 14.3783 17.1581 16.3498 14.0076 16.919C14.5327 17.4515 14.8589 18.1905 14.8589 19.0076V21.5897C14.8768 21.7962 14.8589 22.0005 15.1941 22.0005C19.1512 20.6303 22 16.7905 22 12.2667C22 6.5931 17.5223 2.00049 12.0011 2.00049Z'\n      fill='currentColor'\n    />\n  </svg>\n);\n\nconst flagIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M20.8307 1.01559C21.0306 0.979794 21.224 1.00728 21.3942 1.08123C21.4003 1.08519 21.4073 1.08828 21.4143 1.09145C21.5175 1.13795 21.611 1.20233 21.6919 1.2799C21.697 1.28477 21.7021 1.28976 21.7072 1.29482L21.7221 1.31005C21.7996 1.39091 21.864 1.48449 21.9114 1.58697C21.9137 1.59469 21.9168 1.60169 21.9198 1.60872C22.0144 1.8233 22.0335 2.07618 21.9439 2.33228L21.9631 2.27191C21.9593 2.2857 21.9551 2.29942 21.9507 2.31306L21.9439 2.33228L15.2939 21.3323C14.9947 22.1871 13.8041 22.2357 13.4362 21.4081L9.79203 13.2089L1.59389 9.56574C0.805676 9.21542 0.812201 8.11879 1.55305 7.75669L1.66968 7.70807L20.6697 1.05807C20.6764 1.05573 20.683 1.05347 20.6897 1.05128C20.7026 1.04688 20.7163 1.04273 20.7301 1.03888C20.7588 1.03075 20.7868 1.02405 20.8147 1.01859C20.8176 1.01863 20.8206 1.01807 20.8236 1.01753L20.8307 1.01559ZM18.608 5.808L11.742 12.674L14.239 18.2909L18.608 5.808ZM17.195 4.391L4.71003 8.76193L10.327 11.259L17.195 4.391Z'\n      fill='currentColor'\n    />\n  </svg>\n);\n\nconst Icons: IconList = {\n  6: tagIcon,\n  1: homeIcon,\n  3: flagIcon,\n  2: githubIcon,\n};\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState(['1']);\n\n  const renderItem: MenuRenderItem = (da) => {\n    return da.title;\n  };\n\n  const renderIcon: MenuProps['renderIcon'] = (da) => {\n    if (da.title.startsWith('Navigation')) {\n      return Icons[Number(da.id)];\n    }\n    return null;\n  };\n\n  const handleClick: MenuOnClick = (d: MenuItem) => setActive([d.id]);\n\n  const checkActive: MenuActive = (d: MenuItem) => active.includes(d.id);\n\n  return (\n    <Menu\n      data={data}\n      renderIcon={renderIcon}\n      keygen='id'\n      mode='inline'\n      inlineIndent={22}\n      active={checkActive}\n      onClick={handleClick}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      defaultOpenKeys={['3']}\n      renderItem={renderItem}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Click",
        "description": "If the data item set the onClick event, this event is called. Otherwise, the onClick event defined by Menu is called",
        "scenario": "basic",
        "code": "/**\n * cn - 点击事件\n *    -- 如果选项未设置单独的 onClick 事件，点击后会调用 Menu 定义的 onClick 事件\n * en - Click\n *    -- If the data item set the onClick event, this event is called. Otherwise, the onClick event defined by Menu is called\n */\nimport React, { useState } from 'react';\nimport { Menu, Message, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuOnClick = MenuProps['onClick'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState(['1']);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const handleClick: MenuOnClick = (d: MenuItem) => {\n    Message.info(`now select is ${d.title}`);\n    setActive([d.id]);\n  };\n\n  const checkActive: MenuActive = (d: MenuItem) => active.includes(d.id);\n\n  return (\n    <Menu\n      keygen='id'\n      data={data}\n      mode='inline'\n      inlineIndent={14}\n      active={checkActive}\n      onClick={handleClick}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      defaultOpenKeys={['3']}\n      renderItem={renderItem}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Horizontal",
        "description": "Set mode to \"horizontal\" to display it as horizontal layout (submenu pops up on the right)",
        "scenario": "basic",
        "code": "/**\n * cn - 水平布局\n *    -- 设置 mode 为 \"horizontal\"，显示为水平布局（子菜单在右侧弹出）\n * en - Horizontal\n *    -- Set mode to \"horizontal\" to display it as horizontal layout (submenu pops up on the right)\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, any>;\ntype MenuActive = MenuProps['active'];\ntype MenuOnClick = MenuProps['onClick'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState(['1']);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const handleClick: MenuOnClick = (d: MenuItem) => setActive([d.id]);\n\n  const checkActive: MenuActive = (d: MenuItem) => active.includes(d.id);\n\n  return (\n    <Menu\n      data={data}\n      keygen='id'\n      mode='horizontal'\n      inlineIndent={14}\n      active={checkActive}\n      onClick={handleClick}\n      renderItem={renderItem}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Vertical",
        "description": "Set mode to \"vertical\" to display it as vertical layout",
        "scenario": "basic",
        "code": "/**\n * cn - 垂直样式\n *    -- 设置 mode 为 \"vertical\"，显示为垂直布局\n *    -- 设置 mode 为 \"vertical-auto\" 可以自动选择弹出方向（上下）\n * en - Vertical\n *    -- Set mode to \"vertical\" to display it as vertical layout\n *    -- set 'vertical-auto' auto popup position\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  onClick?: boolean;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuOnClick = MenuProps['onClick'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    onClick: true,\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '21',\n    title: 'Navigation 21',\n  },\n  {\n    id: '22',\n    title: 'Navigation 22',\n  },\n  {\n    id: '23',\n    title: 'Navigation 23',\n  },\n  {\n    id: '24',\n    title: 'Navigation 24',\n  },\n  {\n    id: '25',\n    title: 'Navigation 25',\n  },\n  {\n    id: '26',\n    title: 'Navigation 26',\n  },\n  {\n    id: '27',\n    title: 'Navigation 27',\n  },\n  {\n    id: '28',\n    title: 'Navigation 28',\n  },\n  {\n    id: '29',\n    title: 'Navigation 29',\n  },\n  {\n    id: '30',\n    title: 'Navigation 30',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '31',\n    title: 'Navigation 31',\n  },\n  {\n    id: '32',\n    title: 'Navigation 32',\n  },\n  {\n    id: '33',\n    title: 'Navigation 33',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState(['1']);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const handleClick: MenuOnClick = (d: MenuItem) => setActive([d.id]);\n\n  const checkActive: MenuActive = (d: MenuItem) => active.includes(d.id);\n\n  return (\n    <Menu\n      data={data}\n      keygen='id'\n      mode='vertical-auto'\n      inlineIndent={14}\n      active={checkActive}\n      onClick={handleClick}\n      renderItem={renderItem}\n      style={{ width: 256, height: 300, border: '1px solid #e8ebf0' }}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Dark theme",
        "description": "The dark theme",
        "scenario": "basic",
        "code": "/**\n * cn - 暗系主题\n *    -- 内置了一个暗色的主题，通过 theme 使用\n * en - Dark theme\n *    -- The dark theme\n */\nimport React, { useState } from 'react';\nimport { Menu, Radio, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuOnClick = MenuProps['onClick'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n];\nconst modeArr = ['inline', 'vertical', 'horizontal'];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState(['1']);\n  const [mode, seMode] = useState<MenuProps['mode']>('inline');\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const handleClick: MenuOnClick = (d: MenuItem) => setActive([d.id]);\n\n  const checkActive: MenuActive = (d: MenuItem) => active.includes(d.id);\n\n  return (\n    <div>\n      <Radio.Group button={'outline'} size='small' style={{marginBlock: 12}} data={modeArr} keygen value={mode} onChange={seMode} />\n      <Menu\n        mode={mode}\n        key={mode}\n        data={data}\n        disabled={(d) => d.id === '2'}\n        keygen='id'\n        inlineIndent={14}\n        theme='dark'\n        active={checkActive}\n        onClick={handleClick}\n        style={mode === 'horizontal' ? {} : { width: 256 }}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Collapse",
        "description": "Set `collapse` to control the menu collapse",
        "scenario": "basic",
        "code": "/**\n * cn - 折叠菜单\n *    -- 通过设置 `collapse` 来控制菜单折叠\n * en - Collapse\n *    -- Set `collapse` to control the menu collapse\n */\n\nimport React, { useState } from 'react';\nimport { Menu, Button, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n  {\n    id: '11',\n    title: 'Navigation Five',\n  },\n];\n\nconst homeIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M12.0218 2.00024L12.0602 2.00181C12.0752 2.00272 12.0902 2.00396 12.1052 2.00555C12.1245 2.00759 12.1439 2.01021 12.1632 2.0134C12.1834 2.01674 12.2037 2.02076 12.224 2.02541C12.2448 2.0302 12.2653 2.03563 12.2858 2.04174C12.3283 2.05443 12.3704 2.07012 12.4115 2.08874L12.5207 2.14669L12.6238 2.21913L22.6089 10.2191C23.617 11.0268 22.4745 12.5198 21.4564 11.8501L21.3614 11.7809L20.8121 11.3406C20.7259 11.2715 20.6001 11.2854 20.531 11.3716C20.5025 11.4071 20.487 11.4512 20.487 11.4967L20.4874 20C20.4874 21.4529 19.5572 22.0052 18.6068 21.9933L18.4903 22H5.50965C4.47075 22 3.51262 21 3.51262 20L3.51228 11.4968C3.51228 11.3864 3.42273 11.2968 3.31227 11.2968C3.26677 11.2968 3.22262 11.3124 3.18713 11.3408L2.63862 11.7809C1.63051 12.5886 0.426888 11.1445 1.3028 10.2968L1.39108 10.2191L11.3762 2.21913L11.4793 2.14669C11.4818 2.14511 11.4844 2.14354 11.487 2.14199L11.3762 2.21913C11.4218 2.18266 11.4697 2.15074 11.5194 2.12338C11.5462 2.10862 11.5735 2.09517 11.6013 2.08305C11.6177 2.0759 11.6343 2.06919 11.651 2.06295C11.6756 2.05379 11.7003 2.04564 11.7253 2.03849C11.7402 2.03424 11.7551 2.03033 11.7702 2.02678C11.7978 2.02024 11.8258 2.01488 11.8539 2.01072C11.8674 2.00874 11.8807 2.00705 11.894 2.00563C11.9258 2.00224 11.9579 2.00037 11.99 2C12.0004 2 12.0111 2 12.0218 2.00024ZM11.6874 4.53046L5.69668 9.32987C5.57823 9.42477 5.5093 9.56833 5.5093 9.72011L5.50964 19.5C5.50966 19.7761 5.73352 20 6.00965 20H8.00484C8.28097 20 8.50482 19.7761 8.50487 19.5L8.5052 14C8.5052 13.4872 8.89066 13.0645 9.38726 13.0067L9.4893 13.0008C9.49891 13.0003 9.50852 13 9.51814 13H14.4963C15.0478 13 15.4948 13.4477 15.4948 14L15.4945 19.5C15.4944 19.7761 15.7183 20 15.9944 20C15.9944 20.0001 15.9944 20 15.9944 20L17.9903 20C18.2665 20 18.4903 19.7761 18.4903 19.5V9.72009C18.4903 9.56833 18.4214 9.42478 18.303 9.32988L12.3126 4.53047C12.1299 4.38408 11.8701 4.38408 11.6874 4.53046ZM12.4978 15H11.5022C10.9499 15 10.5022 15.4477 10.5022 16V19.5C10.5022 19.7761 10.7261 20 11.0022 20H12.9978C13.2739 20 13.4978 19.7761 13.4978 19.5V16C13.4978 15.4477 13.0501 15 12.4978 15Z'\n      fill='currentColor'\n    />\n  </svg>\n);\n\nconst tagIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M13.9994 2.00219L19.7686 2.24C20.7799 2.28169 21.6007 3.07247 21.68 4.08162L22.1572 10.1534C22.203 10.7366 21.9912 11.3106 21.5775 11.7243L11.6922 21.6097C10.9111 22.3907 9.64478 22.3907 8.86373 21.6097L2.58579 15.3317C1.80474 14.5507 1.80474 13.2844 2.58579 12.5033L12.5028 2.58628C12.8981 2.19097 13.4408 1.97916 13.9994 2.00219ZM13.917 4.00049L4.70711 13.2104C4.31658 13.6009 4.31658 14.2341 4.70711 14.6246L9.57084 19.4884C9.96136 19.8789 10.5945 19.8789 10.9851 19.4884L20.1633 10.3101L19.7209 4.68044C19.7011 4.42816 19.4959 4.23046 19.2431 4.22004L13.917 4.00049ZM15.3854 5.83727C16.7661 5.83727 17.8854 6.95655 17.8854 8.33727C17.8854 9.71798 16.7661 10.8373 15.3854 10.8373C14.0047 10.8373 12.8854 9.71798 12.8854 8.33727C12.8854 6.95655 14.0047 5.83727 15.3854 5.83727ZM15.3854 7.83727C15.1093 7.83727 14.8854 8.06112 14.8854 8.33727C14.8854 8.61341 15.1093 8.83727 15.3854 8.83727C15.6615 8.83727 15.8854 8.61341 15.8854 8.33727C15.8854 8.06112 15.6615 7.83727 15.3854 7.83727Z'\n      fill='currentColor'\n    />\n  </svg>\n);\n\nconst githubIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M12.0011 2.00049C6.47548 1.9982 2 6.5931 2 12.2644C2 16.7492 4.79969 20.5614 8.69869 21.9615C9.22377 22.0969 9.14334 21.7136 9.14334 21.452V19.6732C6.11127 20.0381 5.98838 17.9771 5.78505 17.6328C5.37392 16.9121 4.40197 16.7285 4.69244 16.3842C5.38286 16.0193 6.08669 16.4761 6.90225 17.7131C7.49212 18.6106 8.64283 18.4591 9.22601 18.3099C9.35337 17.7705 9.62596 17.2885 10.0013 16.9144C6.85979 16.3361 5.55044 14.3668 5.55044 12.0257C5.55044 10.8896 5.91465 9.84534 6.62965 9.00302C6.17384 7.61445 6.6721 6.42555 6.73914 6.24883C8.03731 6.12948 9.38688 7.20361 9.4919 7.28853C10.2292 7.08426 11.0716 6.97639 12.0145 6.97639C12.9619 6.97639 13.8065 7.08885 14.5506 7.29542C14.803 7.09803 16.0543 6.17538 17.2609 6.28784C17.3257 6.46457 17.8128 7.62592 17.3838 8.99613C18.1077 9.84075 18.4764 10.8942 18.4764 12.0326C18.4764 14.3783 17.1581 16.3498 14.0076 16.919C14.5327 17.4515 14.8589 18.1905 14.8589 19.0076V21.5897C14.8768 21.7962 14.8589 22.0005 15.1941 22.0005C19.1512 20.6303 22 16.7905 22 12.2667C22 6.5931 17.5223 2.00049 12.0011 2.00049Z'\n      fill='currentColor'\n    />\n  </svg>\n);\n\nconst flagIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M20.8307 1.01559C21.0306 0.979794 21.224 1.00728 21.3942 1.08123C21.4003 1.08519 21.4073 1.08828 21.4143 1.09145C21.5175 1.13795 21.611 1.20233 21.6919 1.2799C21.697 1.28477 21.7021 1.28976 21.7072 1.29482L21.7221 1.31005C21.7996 1.39091 21.864 1.48449 21.9114 1.58697C21.9137 1.59469 21.9168 1.60169 21.9198 1.60872C22.0144 1.8233 22.0335 2.07618 21.9439 2.33228L21.9631 2.27191C21.9593 2.2857 21.9551 2.29942 21.9507 2.31306L21.9439 2.33228L15.2939 21.3323C14.9947 22.1871 13.8041 22.2357 13.4362 21.4081L9.79203 13.2089L1.59389 9.56574C0.805676 9.21542 0.812201 8.11879 1.55305 7.75669L1.66968 7.70807L20.6697 1.05807C20.6764 1.05573 20.683 1.05347 20.6897 1.05128C20.7026 1.04688 20.7163 1.04273 20.7301 1.03888C20.7588 1.03075 20.7868 1.02405 20.8147 1.01859C20.8176 1.01863 20.8206 1.01807 20.8236 1.01753L20.8307 1.01559ZM18.608 5.808L11.742 12.674L14.239 18.2909L18.608 5.808ZM17.195 4.391L4.71003 8.76193L10.327 11.259L17.195 4.391Z'\n      fill='currentColor'\n    />\n  </svg>\n);\n\nconst IMenu = ({ theme }: { theme: MenuProps['theme'] }) => {\n  const [active, setActive] = useState('10');\n  const [collapse, setCollapse] = useState(false);\n\n  const handleClick = (d: MenuItem) => setActive(d.id);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => {\n    return d.title;\n  };\n\n  interface IconList {\n    [x: number]: React.ReactNode;\n  }\n  const Icons: IconList = {\n    6: tagIcon,\n    1: homeIcon,\n    3: flagIcon,\n    2: githubIcon,\n    11: tagIcon,\n  };\n\n  const renderIcon: MenuProps['renderIcon'] = (da) => {\n    if (da.title.startsWith('Navigation')) {\n      return Icons[Number(da.id)];\n    }\n    return null;\n  };\n\n  const checkActive: MenuActive = (d: MenuItem) => active === d.id;\n\n  return (\n    <div>\n      <div style={{ marginBottom: 12 }}>\n        <Button type='primary' onClick={() => setCollapse(!collapse)} style={{ height: 32 }}>\n          {collapse ? (\n            <svg\n              viewBox='64 64 896 896'\n              focusable='false'\n              data-icon='menu-unfold'\n              width='1em'\n              height='1em'\n              fill='currentColor'\n              aria-hidden='true'\n            >\n              <path d='M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-8 204c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zm504-486H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 632H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM142.4 642.1L298.7 519a8.84 8.84 0 000-13.9L142.4 381.9c-5.8-4.6-14.4-.5-14.4 6.9v246.3a8.9 8.9 0 0014.4 7z'></path>\n            </svg>\n          ) : (\n            <svg\n              viewBox='64 64 896 896'\n              focusable='false'\n              data-icon='menu-fold'\n              width='1em'\n              height='1em'\n              fill='currentColor'\n              aria-hidden='true'\n            >\n              <path d='M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-8 204c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zm504-486H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 632H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM115.4 518.9L271.7 642c5.8 4.6 14.4.5 14.4-6.9V388.9c0-7.4-8.5-11.5-14.4-6.9L115.4 505.1a8.74 8.74 0 000 13.8z'></path>\n            </svg>\n          )}\n        </Button>\n      </div>\n\n      <div style={{ border: '1px solid #ebebeb', float: 'left' }}>\n        <Menu\n          style={{ width: 200 }}\n          key={theme}\n          theme={theme}\n          keygen='id'\n          collapse={collapse}\n          data={data}\n          disabled={(d) => d.id === '1'}\n          inlineIndent={22}\n          active={checkActive}\n          onClick={handleClick}\n          renderItem={renderItem}\n          renderIcon={renderIcon}\n        />\n      </div>\n    </div>\n  );\n};\nconst App: React.FC = () => {\n  return (\n    <div style={{ display: 'flex', gap: 32 }}>\n      <IMenu theme='light' />\n      <IMenu theme='dark' />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Header",
        "description": "Set `header` to customize the header content.",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义顶部\n *    -- 通过设置 `header` 来自定义顶部内容\n * en - Header\n *    -- Set `header` to customize the header content.\n */\n\nimport React, { useState } from 'react';\nimport { Menu, Button, TYPE, Switch } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '2',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '2-1',\n        title: 'Option 1',\n      },\n      {\n        id: '2-2',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '3',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '3-1',\n        title: 'Option 1',\n        children: [\n          {\n            id: '3-1-1',\n            title: 'Option 1-1',\n          },\n          {\n            id: '3-1-2',\n            title: 'Option 1-2',\n          },\n        ],\n      },\n      {\n        id: '3-2',\n        title: 'Option 2',\n        children: [\n          {\n            id: '3-2-1',\n            title: 'Option 2-1',\n          },\n          {\n            id: '3-2-2',\n            title: 'Option 2-2',\n          },\n        ],\n      },\n      {\n        id: '3-3',\n        title: 'Option 2',\n        children: [\n          {\n            id: '3-3-1',\n            title: 'Option 2-1',\n          },\n          {\n            id: '3-3-2',\n            title: 'Option 2-2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '4',\n    title: 'Navigation Four',\n  },\n  {\n    id: '5',\n    title: 'Navigation Five',\n  },\n];\n\nconst homeIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M12.0218 2.00024L12.0602 2.00181C12.0752 2.00272 12.0902 2.00396 12.1052 2.00555C12.1245 2.00759 12.1439 2.01021 12.1632 2.0134C12.1834 2.01674 12.2037 2.02076 12.224 2.02541C12.2448 2.0302 12.2653 2.03563 12.2858 2.04174C12.3283 2.05443 12.3704 2.07012 12.4115 2.08874L12.5207 2.14669L12.6238 2.21913L22.6089 10.2191C23.617 11.0268 22.4745 12.5198 21.4564 11.8501L21.3614 11.7809L20.8121 11.3406C20.7259 11.2715 20.6001 11.2854 20.531 11.3716C20.5025 11.4071 20.487 11.4512 20.487 11.4967L20.4874 20C20.4874 21.4529 19.5572 22.0052 18.6068 21.9933L18.4903 22H5.50965C4.47075 22 3.51262 21 3.51262 20L3.51228 11.4968C3.51228 11.3864 3.42273 11.2968 3.31227 11.2968C3.26677 11.2968 3.22262 11.3124 3.18713 11.3408L2.63862 11.7809C1.63051 12.5886 0.426888 11.1445 1.3028 10.2968L1.39108 10.2191L11.3762 2.21913L11.4793 2.14669C11.4818 2.14511 11.4844 2.14354 11.487 2.14199L11.3762 2.21913C11.4218 2.18266 11.4697 2.15074 11.5194 2.12338C11.5462 2.10862 11.5735 2.09517 11.6013 2.08305C11.6177 2.0759 11.6343 2.06919 11.651 2.06295C11.6756 2.05379 11.7003 2.04564 11.7253 2.03849C11.7402 2.03424 11.7551 2.03033 11.7702 2.02678C11.7978 2.02024 11.8258 2.01488 11.8539 2.01072C11.8674 2.00874 11.8807 2.00705 11.894 2.00563C11.9258 2.00224 11.9579 2.00037 11.99 2C12.0004 2 12.0111 2 12.0218 2.00024ZM11.6874 4.53046L5.69668 9.32987C5.57823 9.42477 5.5093 9.56833 5.5093 9.72011L5.50964 19.5C5.50966 19.7761 5.73352 20 6.00965 20H8.00484C8.28097 20 8.50482 19.7761 8.50487 19.5L8.5052 14C8.5052 13.4872 8.89066 13.0645 9.38726 13.0067L9.4893 13.0008C9.49891 13.0003 9.50852 13 9.51814 13H14.4963C15.0478 13 15.4948 13.4477 15.4948 14L15.4945 19.5C15.4944 19.7761 15.7183 20 15.9944 20C15.9944 20.0001 15.9944 20 15.9944 20L17.9903 20C18.2665 20 18.4903 19.7761 18.4903 19.5V9.72009C18.4903 9.56833 18.4214 9.42478 18.303 9.32988L12.3126 4.53047C12.1299 4.38408 11.8701 4.38408 11.6874 4.53046ZM12.4978 15H11.5022C10.9499 15 10.5022 15.4477 10.5022 16V19.5C10.5022 19.7761 10.7261 20 11.0022 20H12.9978C13.2739 20 13.4978 19.7761 13.4978 19.5V16C13.4978 15.4477 13.0501 15 12.4978 15Z'\n      fill='currentColor'\n    />\n  </svg>\n);\n\nconst tagIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M13.9994 2.00219L19.7686 2.24C20.7799 2.28169 21.6007 3.07247 21.68 4.08162L22.1572 10.1534C22.203 10.7366 21.9912 11.3106 21.5775 11.7243L11.6922 21.6097C10.9111 22.3907 9.64478 22.3907 8.86373 21.6097L2.58579 15.3317C1.80474 14.5507 1.80474 13.2844 2.58579 12.5033L12.5028 2.58628C12.8981 2.19097 13.4408 1.97916 13.9994 2.00219ZM13.917 4.00049L4.70711 13.2104C4.31658 13.6009 4.31658 14.2341 4.70711 14.6246L9.57084 19.4884C9.96136 19.8789 10.5945 19.8789 10.9851 19.4884L20.1633 10.3101L19.7209 4.68044C19.7011 4.42816 19.4959 4.23046 19.2431 4.22004L13.917 4.00049ZM15.3854 5.83727C16.7661 5.83727 17.8854 6.95655 17.8854 8.33727C17.8854 9.71798 16.7661 10.8373 15.3854 10.8373C14.0047 10.8373 12.8854 9.71798 12.8854 8.33727C12.8854 6.95655 14.0047 5.83727 15.3854 5.83727ZM15.3854 7.83727C15.1093 7.83727 14.8854 8.06112 14.8854 8.33727C14.8854 8.61341 15.1093 8.83727 15.3854 8.83727C15.6615 8.83727 15.8854 8.61341 15.8854 8.33727C15.8854 8.06112 15.6615 7.83727 15.3854 7.83727Z'\n      fill='currentColor'\n    />\n  </svg>\n);\n\nconst githubIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M12.0011 2.00049C6.47548 1.9982 2 6.5931 2 12.2644C2 16.7492 4.79969 20.5614 8.69869 21.9615C9.22377 22.0969 9.14334 21.7136 9.14334 21.452V19.6732C6.11127 20.0381 5.98838 17.9771 5.78505 17.6328C5.37392 16.9121 4.40197 16.7285 4.69244 16.3842C5.38286 16.0193 6.08669 16.4761 6.90225 17.7131C7.49212 18.6106 8.64283 18.4591 9.22601 18.3099C9.35337 17.7705 9.62596 17.2885 10.0013 16.9144C6.85979 16.3361 5.55044 14.3668 5.55044 12.0257C5.55044 10.8896 5.91465 9.84534 6.62965 9.00302C6.17384 7.61445 6.6721 6.42555 6.73914 6.24883C8.03731 6.12948 9.38688 7.20361 9.4919 7.28853C10.2292 7.08426 11.0716 6.97639 12.0145 6.97639C12.9619 6.97639 13.8065 7.08885 14.5506 7.29542C14.803 7.09803 16.0543 6.17538 17.2609 6.28784C17.3257 6.46457 17.8128 7.62592 17.3838 8.99613C18.1077 9.84075 18.4764 10.8942 18.4764 12.0326C18.4764 14.3783 17.1581 16.3498 14.0076 16.919C14.5327 17.4515 14.8589 18.1905 14.8589 19.0076V21.5897C14.8768 21.7962 14.8589 22.0005 15.1941 22.0005C19.1512 20.6303 22 16.7905 22 12.2667C22 6.5931 17.5223 2.00049 12.0011 2.00049Z'\n      fill='currentColor'\n    />\n  </svg>\n);\n\nconst flagIcon = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M20.8307 1.01559C21.0306 0.979794 21.224 1.00728 21.3942 1.08123C21.4003 1.08519 21.4073 1.08828 21.4143 1.09145C21.5175 1.13795 21.611 1.20233 21.6919 1.2799C21.697 1.28477 21.7021 1.28976 21.7072 1.29482L21.7221 1.31005C21.7996 1.39091 21.864 1.48449 21.9114 1.58697C21.9137 1.59469 21.9168 1.60169 21.9198 1.60872C22.0144 1.8233 22.0335 2.07618 21.9439 2.33228L21.9631 2.27191C21.9593 2.2857 21.9551 2.29942 21.9507 2.31306L21.9439 2.33228L15.2939 21.3323C14.9947 22.1871 13.8041 22.2357 13.4362 21.4081L9.79203 13.2089L1.59389 9.56574C0.805676 9.21542 0.812201 8.11879 1.55305 7.75669L1.66968 7.70807L20.6697 1.05807C20.6764 1.05573 20.683 1.05347 20.6897 1.05128C20.7026 1.04688 20.7163 1.04273 20.7301 1.03888C20.7588 1.03075 20.7868 1.02405 20.8147 1.01859C20.8176 1.01863 20.8206 1.01807 20.8236 1.01753L20.8307 1.01559ZM18.608 5.808L11.742 12.674L14.239 18.2909L18.608 5.808ZM17.195 4.391L4.71003 8.76193L10.327 11.259L17.195 4.391Z'\n      fill='currentColor'\n    />\n  </svg>\n);\nconst IMenu = (props: { theme: MenuProps['theme'] }) => {\n  const { theme } = props;\n  const [active, setActive] = useState('10');\n  const [collapse, setCollapse] = useState(false);\n  const [dis, setDis] = useState(false);\n\n  const handleClick = (d: MenuItem) => setActive(d.id);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => {\n    return d.title;\n  };\n\n  interface IconList {\n    [x: number]: React.ReactNode;\n  }\n  const Icons: IconList = {\n    1: homeIcon,\n    2: flagIcon,\n    3: tagIcon,\n    4: githubIcon,\n    5: tagIcon,\n  };\n\n  const renderIcon: MenuProps['renderIcon'] = (da) => {\n    if (da.title.startsWith('Navigation')) {\n      return Icons[Number(da.id)];\n    }\n    return null;\n  };\n\n  const checkActive: MenuActive = (d: MenuItem) => active === d.id;\n\n  return (\n    <div>\n      <div style={{ marginBottom: 12 }}>\n        <Button\n          type='primary'\n          style={{ marginInlineEnd: 12, height: 32 }}\n          onClick={() => setCollapse(!collapse)}\n        >\n          {collapse ? (\n            <svg\n              viewBox='64 64 896 896'\n              focusable='false'\n              data-icon='menu-unfold'\n              width='1em'\n              height='1em'\n              fill='currentColor'\n              aria-hidden='true'\n            >\n              <path d='M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-8 204c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zm504-486H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 632H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM142.4 642.1L298.7 519a8.84 8.84 0 000-13.9L142.4 381.9c-5.8-4.6-14.4-.5-14.4 6.9v246.3a8.9 8.9 0 0014.4 7z'></path>\n            </svg>\n          ) : (\n            <svg\n              viewBox='64 64 896 896'\n              focusable='false'\n              data-icon='menu-fold'\n              width='1em'\n              height='1em'\n              fill='currentColor'\n              aria-hidden='true'\n            >\n              <path d='M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-8 204c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zm504-486H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 632H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM115.4 518.9L271.7 642c5.8 4.6 14.4.5 14.4-6.9V388.9c0-7.4-8.5-11.5-14.4-6.9L115.4 505.1a8.74 8.74 0 000 13.8z'></path>\n            </svg>\n          )}\n        </Button>\n        <Switch value={dis} onChange={setDis} content={['disabled', 'effect']} />\n      </div>\n      <div style={{ border: '1px solid #ebebeb', float: 'left' }}>\n        <Menu\n          key={theme}\n          header={\n            <>\n              <div\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <div\n                  style={{\n                    width: '28px',\n                    height: '28px',\n                    background: 'var(--soui-button-primary-background-color,var(--soui-brand-6,#197AFA))',\n                    borderRadius: '4px',\n                    textAlign: 'center',\n                    color: '#fff',\n                    lineHeight: '28px',\n                    fontWeight: '500',\n                    fontSize: '14',\n                    fontFamily: 'PingFang SC',\n                    flexShrink: 0,\n                  }}\n                >\n                  S\n                </div>\n                {collapse ? null : (\n                  <div style={{ marginInlineStart: '12px', fontSize: '16px', fontWeight: 500 }}>\n                    System Name\n                  </div>\n                )}\n              </div>\n              <div style={{ marginTop: 12 }}>\n                <Menu.Search\n                  onSearchClick={() => {\n                    if (collapse) setCollapse(false);\n                  }}\n                  disabled={dis}\n                  collapse={collapse}\n                  theme={theme}\n                  placeholder='请输入关键字'\n                  clearable\n                  style={{ marginBottom: '3px' }}\n                />\n              </div>\n            </>\n          }\n          theme={theme}\n          style={{ width: 200 }}\n          keygen='id'\n          collapse={collapse}\n          data={data}\n          disabled={(d) => d.id === '1'}\n          inlineIndent={22}\n          active={checkActive}\n          onClick={handleClick}\n          renderItem={renderItem}\n          renderIcon={renderIcon}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <div style={{ display: 'flex', gap: 24 }}>\n      <IMenu theme='light' />\n      <IMenu theme='dark' />\n    </div>\n  );\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 24,
      "requiredProps": 1,
      "propsWithWhen": 0,
      "examplesCount": 13
    }
  },
  "Message": {
    "name": "Message",
    "description": "用户进行操作后，系统对该操作行为内容作出的反馈",
    "category": "feedback",
    "importPath": "import { Message } from 'shineout'",
    "props": [
      {
        "name": "content",
        "type": "ReactNode",
        "required": true,
        "description": "消息内容"
      },
      {
        "name": "duration",
        "type": "number",
        "required": false,
        "defaultValue": "3",
        "description": "消息持续时间，单位秒；如果设置为 0，必须手动关闭"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Message has 6 static functions that are convenient to call anywhere, includes normal(with/without icon)、success、warn、error and close all messages",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- Message 封装了一组全局函数，方便在任意地方调用，包括常规（不带/带icon）、Success、Warn、Error和关闭所有消息提醒\n * en - Base\n *    -- Message has 6 static functions that are convenient to call anywhere, includes normal(with/without icon)、success、warn、error and close all messages\n */\nimport React from 'react';\nimport { Button, Message } from 'shineout';\n\nconst commonStyle = { margin: 0 };\nconst App: React.FC = () => (\n  <div style={{display: 'flex', flexWrap: 'wrap', gap: 24}}>\n    <Button\n      onClick={() => {\n        Message.show('Some message.');\n      }}\n    >\n      Show\n    </Button>\n    <Button\n      style={commonStyle}\n      onClick={() => {\n        Message.info('This is a message of info.');\n      }}\n      type='primary'\n    >\n      Info\n    </Button>\n    <Button\n      type='success'\n      style={commonStyle}\n      onClick={() => {\n        Message.success('This is a message of success.');\n      }}\n    >\n      Success\n    </Button>\n    <Button\n      style={commonStyle}\n      type='warning'\n      onClick={() => {\n        Message.warn('This is a message of warning.');\n      }}\n    >\n      Warn\n    </Button>\n    <Button\n      type='danger'\n      style={commonStyle}\n      onClick={() => {\n        Message.error('This is a message of error.');\n      }}\n    >\n      Error\n    </Button>\n\n    <Button\n      style={commonStyle}\n      onClick={() => {\n        Message.close();\n      }}\n    >\n      Close All\n    </Button>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Duration",
        "description": "Set duration property to control the duration of the message display. The default value is 3 seconds",
        "scenario": "basic",
        "code": "/**\n * cn - 显示时长\n *    -- 通过 duration 属性可以控制消息显示的时长，默认为3秒；当设定为 0s 时，则需要用户手动关闭 Message\n * en - Duration\n *    -- Set duration property to control the duration of the message display. The default value is 3 seconds\n *    -- When duration is set to 0, the message will not hide automatically\n */\nimport React from 'react';\nimport { Button, Message } from 'shineout';\n\nconst s10 = () => Message.info('This message will close after 10 seconds.', 10);\nconst s0 = () => Message.error('This message will not close utill click the close icon.', 0);\n\nconst commonStyle = { marginInlineStart: '24px' };\nconst App: React.FC = () => (\n  <div>\n    <Button onClick={s10}>Duration 10 s.</Button>\n    <Button onClick={s0} style={commonStyle}>\n      Manually close\n    </Button>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Notification",
        "description": "Set position property to specify the pop-up layer location, optional value: top, middle, top-left, top-right, bottom-left, bottom-right",
        "scenario": "basic",
        "code": "/**\n * cn - 弹出位置\n *    -- 设置 positoin 参数，修改显示位置，可以实现消息提醒展示位置，可选值：top, middle, top-left, top-right, bottom-left, bottom-right\n * en - Notification\n *    -- Set position property to specify the pop-up layer location, optional value: top, middle, top-left, top-right, bottom-left, bottom-right\n */\nimport React, { useState } from 'react';\nimport { Button, Message, Radio, TYPE } from 'shineout';\n\ntype MessageOptions = TYPE.Message.Options;\n\nconst App: React.FC = () => {\n  const [position, setPosition] = useState<MessageOptions['position']>('top-right');\n\n  const show = () => {\n    Message.info(<div style={{ width: 240 }}>some message.</div>, 3, {\n      position,\n      title: 'notify title',\n    });\n  };\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 24 }}>\n        <Radio.Group\n          keygen\n          value={position}\n          onChange={setPosition}\n          data={['top', 'middle', 'top-left', 'top-right', 'bottom-left', 'bottom-right']}\n        />\n      </div>\n      <Button onClick={show}>Show message.</Button>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Close",
        "description": "Set onClose to handle close event",
        "scenario": "basic",
        "code": "/**\n * cn - 关闭回调\n *    -- 通过第三个参数[options]的 onClose 属性处理消息关闭回调。以下用例将在 Message 关闭后弹出新的 Message\n * en - Close\n *    -- Set onClose to handle close event\n */\nimport React from 'react';\nimport { Button, Message } from 'shineout';\n\nconst App: React.FC = () => {\n  const close = () => {\n    Message.warn('Close this message will display another message.', 0, {\n      onClose: () => {\n        Message.info('You can close the message now.');\n      },\n    });\n  };\n\n  return <Button onClick={close}>Close callback</Button>;\n};\n\nexport default App;\n"
      },
      {
        "title": "Close",
        "description": "Message return close func async",
        "scenario": "basic",
        "code": "/**\n * cn - 手动关闭\n *    -- Message 会异步返回一个关闭函数，调用它来关闭当前 Messsage\n * en - Close\n *    -- Message return close func async\n */\nimport React from 'react';\nimport { Button, Message, Link } from 'shineout';\n\nconst App: React.FC = () => {\n  const msg = async () => {\n    const close = await Message.success(\n      <div>\n        I will always show until &nbsp;\n        <Link onClick={() => close()}>manually closed</Link>\n      </div>,\n      0,\n      {\n        title: 'Manual Close',\n      },\n    );\n  };\n\n  return <Button onClick={msg}>Manual Close</Button>;\n};\n\nexport default App;\n"
      },
      {
        "title": "Target",
        "description": "Set container to render target node",
        "scenario": "basic",
        "code": "/**\n * cn - 指定容器\n *    -- 使用 container 来指定 Message 渲染的目标节点\n * en - Target\n *    -- Set container to render target node\n */\nimport React, { useRef } from 'react';\nimport { Button, Message } from 'shineout';\n\nconst App: React.FC = () => {\n  const container = useRef<HTMLDivElement>(null);\n\n  return (\n    <div>\n      <div\n        ref={container}\n        id='container'\n        style={{\n          width: 100,\n          height: 100,\n          background: '#f4f5f8',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <Button\n          id='button'\n          onClick={() => {\n            Message.show('Some message.', 3, {\n              container: container.current || undefined,\n            });\n          }}\n        >\n          Show\n        </Button>\n      </div>\n    </div>\n  );\n};\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 2,
      "requiredProps": 1,
      "propsWithWhen": 0,
      "examplesCount": 6
    },
    "subComponentApis": {}
  },
  "Modal": {
    "name": "Modal",
    "description": "Modal 对话框是一种临时窗口，通常在不想跳转页面的前提下，使用 Modal 展示次要内容或者操作",
    "category": "feedback",
    "importPath": "import { Modal } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "hideMask",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否隐藏遮罩"
      },
      {
        "name": "forceMask",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否强制设置遮罩透明度（多层Modal中，除第一层外的其他弹出层遮罩透明度会被调整为0.01）"
      },
      {
        "name": "top",
        "type": "string | number",
        "required": false,
        "defaultValue": "10vh",
        "description": "弹框距离顶部距离"
      },
      {
        "name": "fullScreen",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否全屏展示"
      },
      {
        "name": "bodyStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "扩展弹出层 body 的样式"
      },
      {
        "name": "footer",
        "type": "ReactNode",
        "required": false,
        "description": "底部内容"
      },
      {
        "name": "maskCloseAble",
        "type": "boolean | null",
        "required": false,
        "defaultValue": "true",
        "description": "点击遮罩层是否关闭对话框, 设置为 null 右上角关闭图标会保留"
      },
      {
        "name": "padding",
        "type": "string | number",
        "required": false,
        "description": "内容内边距"
      },
      {
        "name": "position",
        "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
        "required": false,
        "description": "弹出位置"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "弹出层的标题"
      },
      {
        "name": "visible",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "defaultValue": "500",
        "description": "弹出层宽度 （设置 position 后无效）"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": "对话框高度 （设置 position 后无效）"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1050",
        "description": "弹出层 z-index 值，注意：如果嵌套 Select 组件，并且 Select 组件含有 absolute 字段，需要修改 Select 的 z-index 的值"
      },
      {
        "name": "rootClassName",
        "type": "string",
        "required": false,
        "description": "弹出层的根元素类名, 为遮罩层的父元素"
      },
      {
        "name": "container",
        "type": "(() => HTMLElement | null) | HTMLElement | null",
        "required": false,
        "defaultValue": "document.body",
        "description": "渲染的目标节点"
      },
      {
        "name": "moveable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可移动"
      },
      {
        "name": "maskBackground",
        "type": "string",
        "required": false,
        "description": "遮罩背景色，设置后透明度将失效"
      },
      {
        "name": "onClose",
        "type": "(() => void)",
        "required": false,
        "description": "弹出层关闭回调"
      },
      {
        "name": "destroy",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "关闭时是否销毁元素"
      },
      {
        "name": "hideClose",
        "type": "boolean",
        "required": false,
        "description": "是否隐藏关闭按钮"
      },
      {
        "name": "type",
        "type": "\"success\" | \"info\" | \"warning\" | \"error\"",
        "required": false,
        "description": "弹出层 title 显示状态 icon，drawer模式下需配合title使用"
      },
      {
        "name": "zoom",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启 zoom 动画效果"
      },
      {
        "name": "esc",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否支持 esc 键关闭"
      },
      {
        "name": "events",
        "type": "object",
        "required": false,
        "defaultValue": "{}",
        "description": "外层元素所接受的事件列表，可用于在 createPortal 场景中阻止冒泡"
      },
      {
        "name": "resizable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可调整大小"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "弹出层内容"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "The basic usage for component",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的组件用法\n *    -- Modal 会在 document.body 中创建一个新的层显示弹出内容\n *    -- 关闭 Modal 时默认没有对组件进行销毁, 只是隐藏, 组件的状态会被保留。 如果不需要保留组件之前的状态, 可以设置 destroy 属性\n * en - Base\n *    -- The basic usage for component\n */\nimport React, { useState } from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const [content, setContent] = useState(1);\n  const [visible, setVisible] = useState(false);\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  const handleOk = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked ok!');\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked cancel');\n  };\n\n  return (\n    <div>\n      <Button onClick={show} mode='outline'>\n        click me\n      </Button>\n      <Modal\n        width={400}\n        visible={visible}\n        title='Modal Title'\n        onClose={handleCancel}\n        footer={[\n          <Button key='cancel' mode='outline' onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleOk}>\n            Ok\n          </Button>,\n        ]}\n      >\n        {`you are visited ${content}`}\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Type",
        "description": "Modal has 4 built in style",
        "scenario": "basic",
        "code": "/**\n * cn - 类型\n *    -- Modal 内置了 4 个类型的样式：info（纯信息展示，不带有状态）、Success、Warn 和 Error，为了方便调用，设计为静态函数\n * en - Type\n *    -- Modal has 4 built in style\n */\nimport React from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const info = () => {\n    Modal.info({\n      title: 'This is a info message',\n      content: 'this is  some information that user must know',\n    });\n  };\n\n  const success = () => {\n    Modal.success({\n      title: 'This is a success message',\n      content: 'this is some information that user successful operation',\n    });\n  };\n\n  const warning = () => {\n    Modal.warn({\n      title: 'This is a warning message',\n      content: 'this is  some information that user must know',\n    });\n  };\n\n  const error = () => {\n    Modal.error({\n      title: 'This is a error message',\n      content: 'this is some information that user attended',\n    });\n  };\n\n  const show = () => {\n    Modal.show({\n      title: 'This is a message',\n      content: 'this is show information',\n    });\n  };\n\n  return (\n    <div style={{ display: 'flex', gap: '16px' }}>\n      <Button onClick={show} mode='outline'>\n        show\n      </Button>\n      <Button type='primary' onClick={info}>\n        info\n      </Button>\n      <Button type='danger' onClick={error}>\n        error\n      </Button>\n      <Button type='success' onClick={success}>\n        success\n      </Button>\n      <Button type='warning' onClick={warning}>\n        warning\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Confirm",
        "description": "The confirmation modal dialog",
        "scenario": "basic",
        "code": "/**\n * cn - 确认框\n *    -- 调用 confirm 函数可以快捷的显示确认框，便于用户操作；同时可以通过 text 配置 Modal 按钮文案，onOk 与 onClose 配置 Modal 确认和取消事件回调（当事件返回 Promise 时会等待 Promise resolve 后关闭 Modal）\n * en - Confirm\n *    -- The confirmation modal dialog\n */\nimport React from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const confirm = () => {\n    Modal.confirm({\n      title: 'This is a confirm message',\n      content: 'this is some information that user confirm',\n      onOk: () =>\n        new Promise((resolve) => {\n          console.log('yes i know');\n          setTimeout(() => resolve(true), 2000);\n        }),\n      text: { ok: 'Yes', cancel: 'No' },\n    });\n  };\n\n  return (\n    <div>\n      <Button onClick={confirm} mode='outline'>\n        confirm\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Default focus button",
        "description": "Setting autoFocusButton can focus on a button by default when you open it, and then press Enter to trigger the click event of the button, which is convenient for the user to perform keyboard operation. This property only takes effect in Modal methods",
        "scenario": "basic",
        "code": "/**\n * cn - 默认聚焦按钮\n *    -- 设置 autoFocusButton 可以在打开的时候默认聚焦到某个按钮, 再点击回车可以触发改按钮的点击事件, 方便用户进行键盘操作. 该属性仅在 Modal 的 methods 中生效\n * en - Default focus button\n *    -- Setting autoFocusButton can focus on a button by default when you open it, and then press Enter to trigger the click event of the button, which is convenient for the user to perform keyboard operation. This property only takes effect in Modal methods\n */\nimport React from 'react';\nimport { Modal, Button, Message } from 'shineout';\n\nconst App: React.FC = () => {\n  const confirm = (type: 'cancel' | 'ok') => {\n    Modal.confirm({\n      title: 'This is a confirm message',\n      content: `the ${type} button will be focus`,\n      text: {\n        ok: 'ok',\n        cancel: 'cancel',\n      },\n      onOk: () => {\n        Message.info('you chose the ok');\n      },\n      onCancel: () => {\n        Message.info('you chose the cancel');\n      },\n      autoFocusButton: type,\n    });\n  };\n\n  return (\n    <div>\n      <Button onClick={() => confirm('cancel')} mode='outline'>\n        cancel\n      </Button>\n      <Button onClick={() => confirm('ok')} mode='outline'>\n        ok\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Full Screen",
        "description": "Use the fullScreen property to display the modal in full screen",
        "scenario": "basic",
        "code": "/**\n * cn - 全屏\n *    -- 使用 fullScreen 属性来使对话框全屏展示\n * en - Full Screen\n *    -- Use the fullScreen property to display the modal in full screen\n */\nimport React, { useState, useCallback } from 'react';\nimport {\n  Form,\n  Modal,\n  Button,\n  Input,\n  Upload,\n  Radio,\n  Checkbox,\n  DatePicker,\n  Textarea,\n} from 'shineout';\nconst Content = () => {\n  return (\n    <div>\n      <Form\n        defaultValue={{ name: 'zhangsan', email: 'zhangsan@qq.com', score: 3 }}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='Name'>\n          <Input name={'name'} placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Password'>\n          <Input name={'password'} placeholder='please input password' clearable />\n        </Form.Item>\n        <Form.Item label='Email'>\n          <Input name={'email'} clearable placeholder='please input email' />\n        </Form.Item>\n        <Form.Item label='Gendar'>\n          <Radio.Group name='gendar' data={['male', 'female']} keygen />\n        </Form.Item>\n        <Form.Item label='Course'>\n          <Checkbox.Group name='course' data={['chinese', 'maths', 'english', 'physics']} keygen />\n        </Form.Item>\n        <Form.Item label='Enrollment date'>\n          <DatePicker name='date' placeholder={'please select date'} clearable showSelNow />\n        </Form.Item>\n        <Form.Item label='upload avatar'>\n          <Upload.Image\n            action='/api/upload'\n            accept='image/*'\n            name='file'\n            htmlName='file'\n            recoverAble\n            leftHandler\n            removeConfirm='Are you sure to delete it ?'\n            limit={3}\n            onSuccess={(_res, filem, data) => {\n              return data;\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='Address'>\n          <Textarea name='address' />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const cancel = useCallback(() => {\n    setVisible(false);\n  }, [visible]);\n\n  const footer = () => (\n    <Button type='primary' onClick={cancel}>\n      OK\n    </Button>\n  );\n\n  return (\n    <div>\n      <Modal title='Profile' fullScreen visible={visible} onClose={cancel} footer={footer()}>\n        <Content></Content>\n      </Modal>\n      <Button mode='outline' onClick={() => setVisible(true)}>\n        Full Screen\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Target",
        "description": "set container to render target node",
        "scenario": "basic",
        "code": "/**\n * cn - 指定目标\n *    -- 使用 container 来指定 Modal 渲染的目标节点\n * en - Target\n *    -- set container to render target node\n */\nimport React, { useRef, useState } from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement | null>(null);\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  const handleDismiss = () => {\n    setVisible(false);\n  };\n\n  return (\n    <div ref={wrapperRef}>\n      <Button onClick={show} mode='outline'>\n        click me\n      </Button>\n      <Modal\n        container={wrapperRef.current || undefined}\n        visible={visible}\n        width={400}\n        title='Modal Title'\n        onClose={handleDismiss}\n        footer={[\n          <Button key='cancel' mode='outline' onClick={handleDismiss}>\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleDismiss}>\n            Ok\n          </Button>,\n        ]}\n      >\n        Modal mount after Button\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Form",
        "description": "The internal form of Modal can use Modal.Submit to trigger submit",
        "scenario": "form",
        "code": "/**\n * cn - 表单\n *    -- Modal 支持 Form 表单，并且支持 Form 的所有特性，表单提交可以使用 Modal.Submit 来代替 Button[type=submit]\n * en - Form\n *    --The internal form of Modal can use Modal.Submit to trigger submit\n */\nimport React, { useState } from 'react';\nimport { Modal, Button, Form, Input, Message, TYPE } from 'shineout';\n\ntype FormProps = TYPE.Form.Props<any>;\n\nconst rules: FormProps['rules'] = {\n  email: [\n    { required: true, message: 'Please enter your email.' },\n    { type: 'email', message: 'Please enter a valid email.' },\n  ],\n  password: [\n    { required: true, message: 'Please enter password.' },\n    { min: 7, message: 'Password must be at least {min} characters.' },\n    { regExp: /[a-z]+/i, message: 'Password at least has one letter.' },\n    // eslint-disable-next-line no-unused-vars\n    (value: string, _formdata: any, callback: (v: boolean | Error) => void) => {\n      if (/\\d+/.test(value)) callback(true);\n      else callback(new Error('Password at least has one numeral.'));\n    },\n  ],\n};\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  const handleClose = () => {\n    setVisible(false);\n  };\n\n  const footer = () => (\n    <div>\n      <Button onClick={handleClose} mode='outline'>\n        Cancel\n      </Button>\n      <Modal.Submit type='primary'>Submit</Modal.Submit>\n    </div>\n  );\n\n  const handleSubmit = (data: any) => {\n    setVisible(false);\n    Message.success(JSON.stringify(data));\n  };\n\n  return (\n    <div>\n      <Button mode='outline' onClick={show}>\n        Modal Form\n      </Button>\n\n      <Modal visible={visible} width={456} title='Form' onClose={handleClose} footer={footer()}>\n        <Form\n          labelWidth={75}\n          rules={rules}\n          labelAlign='right'\n          onSubmit={handleSubmit}\n        >\n          <Form.Item required label='Email'>\n            <Input name='email' />\n          </Form.Item>\n\n          <Form.Item required label='Password'>\n            <Input name='password' type='password' />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Moveable/resizable",
        "description": "set moveable mark modal move by header, set resizable to resize modal",
        "scenario": "basic",
        "code": "/**\n * cn - 可移动/伸缩\n *    -- 设置 moveable 来使 Modal 可以按住头部移动, 设置 resizable 来自由调整 Modal 大小\n * en - Moveable/resizable\n *    -- set moveable mark modal move by header, set resizable to resize modal\n */\nimport React, { useState } from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const [show, setShow] = useState(false);\n\n  const footer = () => (\n    <Button type='primary' onClick={() => setShow(false)}>\n      Confirm\n    </Button>\n  );\n\n  return (\n    <div>\n      <Button mode='outline' onClick={() => setShow(true)}>\n        Moveable modal\n      </Button>\n      <Modal\n        moveable\n        resizable\n        width={400}\n        visible={show}\n        title='Moveable'\n        footer={footer()}\n        onClose={() => setShow(false)}\n      >\n        drag title to move\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Multistage",
        "description": "Multi-layer Modal",
        "scenario": "basic",
        "code": "/**\n * cn - 多层 Modal\n *    -- 支持多层叠加 Modal\n * en - Multistage\n *    -- Multi-layer Modal\n */\nimport React, { useState, Fragment } from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst pickNumber = (ma = 65555, mi = 0, fixed = 2) => {\n  let max = ma;\n  let min = mi;\n  if (typeof max === 'string') max = parseInt(max, 10);\n  if (typeof min === 'string') min = parseInt(min, 10);\n\n  const num = Math.random() * (max - min) + min;\n  return parseFloat(num.toFixed(fixed));\n};\n\nconst range = (end: number, start = 0) => {\n  const delta = end - start;\n  if (typeof delta !== 'number' || Number.isNaN(delta)) {\n    console.error(new Error('end can not computed with start'));\n  }\n  return Array.from({ length: end - start }, (_v, k) => k + start);\n};\n\nconst size = range(11, 0).map(() => [pickNumber(450, 380), pickNumber(400, 300)]);\n\nconst App: React.FC = () => {\n  const [current, setCurrent] = useState(0);\n\n  const show = (v: number) => setCurrent(v);\n\n  const footer = (i: number) => (\n    <>\n    <Button mode='outline' onClick={() => show(0)}>\n      Close All\n    </Button>\n    {i < 10 && (\n      <Button type='primary' onClick={() => show(i + 1)}>\n        Next Level\n      </Button>\n    )}\n    </>\n  );\n\n  return (\n    <div>\n      <Button mode='outline' onClick={() => show(1)}>\n        click me\n      </Button>\n\n      {range(11, 1).map((i) => (\n        <Modal\n          key={i}\n          width={size[i][0]}\n          footer={footer(i)}\n          visible={current >= i}\n          title={`Modal Title ${i}`}\n          onClose={() => {\n            console.log('close', i);\n            show(i - 1);\n          }}\n        >\n          <p>{`Level ${i}`}. This is show information.</p>\n        </Modal>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Close",
        "description": "By default, clicking on the blank page outside the Modal box will closes the Modal box",
        "scenario": "basic",
        "code": "/**\n * cn - 点击空白关闭\n *    -- 默认点击对话框外部空白页面会关闭对话框\n *    -- 设置 maskCloseAble 属性为 false，禁用点击空白关闭，同时右上角的关闭图标也会隐藏\n *    -- 设置 maskCloseAble 属性为 null，禁用点击空白关闭，右上角的关闭图标会保留\n * en - Close\n *    -- By default, clicking on the blank page outside the Modal box will closes the Modal box\n *    -- Set maskCloseAble to false to disable the function that click mask to close and the close icon in the upper right corner will be hidden at the same time\n *    -- Set maskCloseAbel to null to disable the function that click mask to close and the close icon in the upper right corner will be preserved\n */\nimport React, { useState } from 'react';\nimport { Modal, Button, Radio } from 'shineout';\n\nconst list: { title: string; value: boolean | null }[] = [\n  {\n    title: 'false',\n    value: false,\n  },\n  {\n    title: 'true',\n    value: true,\n  },\n  {\n    title: 'null',\n    value: null,\n  },\n];\n\nconst App: React.FC = () => {\n  const [selected, setSelected] = useState(list[0]);\n  const [visible, setVisible] = useState(false);\n\n  const footer = () => (\n    <Button mode='outline' onClick={() => setVisible(false)}>\n      Close\n    </Button>\n  );\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', marginBlock: 24 }}>\n        <Radio.Group\n          data={list}\n          keygen='title'\n          value={selected}\n          renderItem='title'\n          onChange={(c) => setSelected(c)}\n          prediction={(v, d) => v.title === d.title}\n          style={{ marginInlineEnd: 20 }}\n        />\n      </div>\n\n      <Button mode='outline' onClick={() => setVisible(true)}>\n        Open\n      </Button>\n\n      <Modal\n        width={400}\n        visible={visible}\n        footer={footer()}\n        title='Modal Title'\n        maskCloseAble={selected.value}\n        onClose={() => setVisible(false)}\n      >\n        The prop maskCloseAble is &nbsp;\n        {selected.title}\n        .\n        <br />\n        You must click the button to close the Modal.\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Icon",
        "description": "use type display type icon",
        "scenario": "basic",
        "code": "/**\n * cn - 附带图标\n *    -- 使用 type 属性来指定标题附带的图标\n * en - Icon\n *    -- use type display type icon\n */\nimport React, { useState } from 'react';\nimport { Modal, Button, Radio, TYPE } from 'shineout';\n\ntype ModalProps = TYPE.Modal.Props;\ntype ModalType = ModalProps['type'];\n\nconst typeList: ModalType[] = ['info', 'success', 'warning', 'error'];\n\nconst App: React.FC = () => {\n  const [type, setType] = useState<ModalType>('success');\n  const [visible, setVisible] = useState(false);\n\n  const handleOk = () => {\n    setVisible(false);\n    console.log('clicked ok!');\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    console.log('clicked cancel');\n  };\n\n  const show = () => setVisible(true);\n\n  const footer = () => [\n    <Button key='cancel' mode=\"outline\" onClick={handleCancel}>\n      Cancel\n    </Button>,\n\n    <Button key='ok' type='primary' onClick={handleOk}>\n      Ok\n    </Button>,\n  ];\n\n  return (\n    <div>\n      <Radio.Group\n        style={{ marginBottom: 24 }}\n        data={typeList}\n        value={type}\n        keygen\n        onChange={setType}\n      />\n\n      <Button mode='outline' onClick={show}>\n        click me\n      </Button>\n\n      <Modal\n        type={type}\n        width={500}\n        visible={visible}\n        footer={footer()}\n        onClose={handleCancel}\n        title={`Modal Title with ${type} Icon`}\n      >\n        <span>Modal type: </span>\n        <b>{type}</b>\n      </Modal>\n    </div>\n  );\n};\nexport default App;\n"
      },
      {
        "title": "Zoom",
        "description": "Set the zoom property to enable zoom animation",
        "scenario": "basic",
        "code": "/**\n * cn - 缩放动画\n *    -- 设置 zoom 属性来开启缩放动画\n * en - Zoom\n *    -- Set the zoom property to enable zoom animation\n */\nimport React, { useState } from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const handleClose = () => setVisible(false);\n\n  const footer = () => (\n    <Button key='ok' type='primary' onClick={() => setVisible(false)}>\n      Ok\n    </Button>\n  );\n\n  return (\n    <div>\n      <Button mode='outline' onClick={() => setVisible(true)}>\n        Open\n      </Button>\n\n      <Modal\n        zoom\n        width={400}\n        title='zoom'\n        footer={footer()}\n        visible={visible}\n        onClose={handleClose}\n      >\n        Set the zoom property to enable zoom animation\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Position",
        "description": "Set position property to specify the pop-up position",
        "scenario": "basic",
        "code": "/**\n * cn - 位置（抽屉）\n *    -- 通过 position 可设置 Modal 弹出的位置，这时 Modal 就如 Drawer 一样。现支持 top、right、bottom 和 left 四个位置配置\n * en - Position\n *    -- Set position property to specify the pop-up position\n */\nimport React, { useState } from 'react';\nimport { Modal, Button, Form, Input, Radio, TYPE } from 'shineout';\n\ntype ModalProps = TYPE.Modal.Props;\ntype ModalPosition = ModalProps['position'];\n\nconst positionList: ModalPosition[] = ['top', 'right', 'bottom', 'left'];\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [position, setPosition] = useState<ModalPosition>('right');\n\n  const toggle = (v: boolean) => {\n    setVisible(v);\n  };\n\n  const footer = () => (\n    <div>\n      <Button mode='outline' onClick={() => toggle(false)}>\n        Cancel\n      </Button>\n      <Modal.Submit>Submit</Modal.Submit>\n    </div>\n  );\n  return (\n    <div>\n      <Radio.Group\n        keygen\n        value={position}\n        data={positionList}\n        onChange={(p) => setPosition(p)}\n        style={{ marginBottom: 24 }}\n      />\n\n      <Button mode='outline' onClick={() => toggle(true)}>click me</Button>\n\n      <Modal\n        title='Form'\n        key={position}\n        footer={footer()}\n        visible={visible}\n        position={position}\n        onClose={() => toggle(false)}\n      >\n        <Form\n          labelWidth={100}\n          labelAlign='right'\n          style={{ width: 500 }}\n          onSubmit={() => toggle(false)}\n        >\n          <Form.Item required label='Email'>\n            <Input name='email' />\n          </Form.Item>\n\n          <Form.Item required label='Password'>\n            <Input name='password' type='password' />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "bodystyle",
        "description": "bodystyle",
        "scenario": "basic",
        "code": "/**\n * cn - bodystyle\n *    -- bodystyle\n * en - bodystyle\n *    -- bodystyle\n */\nimport React, { useState } from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const handleClose = () => setVisible(false);\n\n  const footer = () => (\n    <Button key='ok' type='primary' onClick={() => setVisible(false)}>\n      Ok\n    </Button>\n  );\n  return (\n    <div>\n      <Button mode='outline' onClick={() => setVisible(true)}>\n        Open\n      </Button>\n      <Modal\n        className='hi'\n        zIndex={1000}\n        style={{ color: 'green' }}\n        zoom\n        width={400}\n        bodyStyle={{ height: '100px', background: '#ccc', overflow: 'auto' }}\n        title='zoom'\n        footer={footer()}\n        visible={visible}\n        onClose={handleClose}\n      >\n        hello, how are you fine thank you and you, i am fine too, hello, how are you fine thank you\n        and you, i am fine toohello, how are you fine thank you and you, i am fine toohello, how are\n        you fine thank you and you, i am fine toohello, how are you fine thank you and you, i am\n        fine toohello, how are you fine thank you and you, i am fine toohello, how are you fine\n        thank you and you, i am fine toohello, how are you fine thank you and you, i am fine\n        toohello, how are you fine thank you and you, i am fine toohello, how are you fine thank you\n        and you, i am fine toohello, how are you fine thank you and you, i am fine too\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "destroy",
        "description": "destroy",
        "scenario": "basic",
        "code": "/**\n * cn - destroy\n *    -- destroy\n * en - destroy\n *    -- destroy\n */\nimport React, { useEffect, useState } from 'react';\nimport { Modal, Button, Message } from 'shineout';\n\nconst Hello = () => {\n  const [content, setContent] = useState(1);\n  useEffect(() => {\n    Message.info('mount');\n    return () => {\n      Message.info('unmount');\n      console.log('unmount');\n    };\n  }, []);\n  return <div onClick={() => setContent(content + 1)}>hello ${content}</div>;\n};\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  const handleOk = () => {\n    setVisible(false);\n    console.log('clicked ok!');\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    console.log('clicked cancel');\n  };\n\n  return (\n    <div>\n      <Button mode='outline' onClick={show}>\n        click me\n      </Button>\n      <Modal\n        width={400}\n        visible={visible}\n        destroy\n        title='Modal Title'\n        type='success'\n        onClose={handleCancel}\n        footer={[\n          <Button key='cancel' onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleOk}>\n            Ok\n          </Button>,\n        ]}\n      >\n        <Hello />\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "closeAll",
        "description": "closeAll",
        "scenario": "basic",
        "code": "/**\n * cn - closeAll\n *    -- closeAll\n * en - closeAll\n *    -- closeAll\n */\nimport React from 'react';\nimport { Modal, Button } from 'shineout';\n\nlet id = 0;\n\nconst App: React.FC = () => {\n  const open = () => {\n    let uid = id++;\n    Modal.info({\n      title: 'This is a info message',\n      content: '哈哈哈哈',\n      onClose: () => {\n        console.log('close', uid);\n      },\n      footer: (\n        <div>\n          <Button mode='outline' onClick={() => Modal.closeAll()}>\n            close all\n          </Button>\n          <Button onClick={open}> open ${uid} </Button>\n        </div>\n      ),\n    });\n  };\n\n  return (\n    <div>\n      <Button mode='outline' onClick={open}>\n        confirm\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "hideMask",
        "description": "hideMask",
        "scenario": "basic",
        "code": "/**\n * cn - hideMask\n *    -- hideMask\n * en - hideMask\n *    -- hideMask\n */\nimport React, { useState } from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const [content, setContent] = useState(1);\n  const [visible, setVisible] = useState(false);\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  const handleOk = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked ok!');\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked cancel');\n  };\n\n  return (\n    <div>\n      <Button mode='outline' onClick={show}>\n        click me\n      </Button>\n      <Modal\n        width={400}\n        visible={visible}\n        title='Modal Title'\n        type='success'\n        onClose={handleCancel}\n        hideMask\n        footer={[\n          <Button mode='outline' key='cancel' onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleOk}>\n            Ok\n          </Button>,\n        ]}\n      >\n        {`you are visited ${content}`}\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Multiple form",
        "description": "",
        "scenario": "form",
        "code": "/**\n * cn - 多个表单onSubmit\n * en - Multiple form\n */\nimport React, { useState } from 'react';\nimport { Modal, Button, Form, Input, Message } from 'shineout';\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [form2, setForm2] = useState({ email2: '123' });\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  const handleClose = () => {\n    setVisible(false);\n  };\n\n  const footer = () => (\n    <div>\n      <Button onClick={handleClose} mode='outline'>\n        Cancel\n      </Button>\n      <Modal.Submit type='primary'>Submit</Modal.Submit>\n    </div>\n  );\n\n  const handleSubmit1 = (data: any) => {\n    // setVisible(false);\n    Message.success('submit1:' + JSON.stringify(data));\n  };\n\n  return (\n    <div>\n      <Button mode='outline' onClick={show}>\n        Modal Form\n      </Button>\n\n      <Modal visible={visible} width={456} title='Form' onClose={handleClose} footer={footer()}>\n        <div>\n          <Form\n            labelWidth={100}\n            labelAlign='right'\n            style={{ maxWidth: 400 }}\n            onSubmit={handleSubmit1}\n          >\n            <Form.Item required label='Email'>\n              <Input name='email' />\n            </Form.Item>\n\n            <Form.Item required label='Password'>\n              <Input name='password' type='password' />\n            </Form.Item>\n          </Form>\n\n          <Form\n            value={form2}\n            onChange={setForm2}\n            onSubmit={(v) => {\n              Message.success('submit2:' + JSON.stringify(v));\n            }}\n          >\n            <Form.Item required label='Email2'>\n              <Input name='email2' />\n            </Form.Item>\n          </Form>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Tabs-Form-Submit",
        "description": "Tabs-Form-Submit",
        "scenario": "form",
        "code": "/**\n * cn - Tabs-Form-Submit\n *    -- Tabs-Form-Submit\n * en - Tabs-Form-Submit\n *    -- Tabs-Form-Submit\n */\nimport React, { useState } from 'react';\nimport { Modal, Button, Tabs, Form, Input } from 'shineout';\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [activeTab, setActiveTab] = useState(1);\n  const [formValue1, setFormValue1] = useState({});\n  const [formValue2, setFormValue2] = useState({});\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    console.log('clicked cancel');\n  };\n\n  const handleSubmit1 = (v: any) => {\n    console.log('======================');\n    console.log('handleSubmit1: >>', v);\n    console.log('======================');\n  };\n\n  const handleSubmit2 = (v: any) => {\n    console.log('======================');\n    console.log('handleSubmit2: >>', v);\n    console.log('======================');\n  };\n\n  return (\n    <div>\n      <Button mode='outline' onClick={show}>\n        click me\n      </Button>\n      <Modal\n        width={400}\n        visible={visible}\n        title='Modal Title'\n        type='success'\n        onClose={handleCancel}\n        hideMask\n        footer={[\n          <Button mode='outline' key='cancel' onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Modal.Submit key='ok' type='primary'>\n            Submit\n          </Modal.Submit>,\n        ]}\n      >\n        <Tabs\n          active={activeTab}\n          onChange={(key) => {\n            setActiveTab(Number(key));\n            if (key === 2) {\n              setFormValue2({\n                title: '222',\n              });\n            } else {\n              setFormValue1({\n                title: '111',\n              });\n            }\n          }}\n        >\n          <Tabs.Panel tab='A' id={1}>\n            {activeTab === 1 && (\n              <Form onSubmit={handleSubmit1} value={formValue1} onChange={setFormValue1}>\n                <Form.Item label='name'>\n                  <Input name='title' />\n                </Form.Item>\n                <Form.Submit>inner submit</Form.Submit>\n              </Form>\n            )}\n          </Tabs.Panel>\n          <Tabs.Panel tab='B' id={2}>\n            {activeTab === 2 && (\n              <Form onSubmit={handleSubmit2} value={formValue2} onChange={setFormValue2}>\n                <Form.Item label='name'>\n                  <Input name='title' />\n                </Form.Item>\n\n                <Form.Submit>inner submit</Form.Submit>\n              </Form>\n            )}\n          </Tabs.Panel>\n        </Tabs>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 29,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 19
    },
    "subComponentApis": {}
  },
  "Pagination": {
    "name": "Pagination",
    "description": "显示当前数据所在页面，具有上下翻页、定位页面以及呈现总页数的功能",
    "category": "navigation",
    "importPath": "import { Pagination } from 'shineout'",
    "props": [
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "align",
        "type": "\"left\" | \"center\" | \"right\"",
        "required": false,
        "defaultValue": "\\\"left\\\"",
        "description": "排布方式"
      },
      {
        "name": "pageSize",
        "type": "number",
        "required": false,
        "defaultValue": "10",
        "description": "每页数量"
      },
      {
        "name": "total",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "总条目数。如果 total 小于 0，隐藏分页"
      },
      {
        "name": "current",
        "type": "number",
        "required": false,
        "description": "当前页，如果传入值，组件为受控组件，必须通过 onChange 来处理回调"
      },
      {
        "name": "span",
        "type": "number",
        "required": false,
        "defaultValue": "5",
        "description": "分页器页码按钮数量"
      },
      {
        "name": "defaultCurrent",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "初始页码"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "禁用"
      },
      {
        "name": "layout",
        "type": "( | \"links\" | \"list\" | \"jumper\" | \"simple\" | ((props: PaginationProps) => ReactNode))[]",
        "required": false,
        "defaultValue": "[\\\"links\\\"]",
        "description": "子组件布局，可选值为:\\\"links\\\": 页码；\\\"simple\\\": 简约页码(和links不要同时使用)；\\\"list\\\": 每页数量选择。\\\"jumper\\\": 跳转页码；function({ current, total, pageSize }): 匿名函数，用来信息展示"
      },
      {
        "name": "mode",
        "type": "\"text\" | \"outline\"",
        "required": false,
        "defaultValue": "\\\"text\\\"",
        "description": "风格"
      },
      {
        "name": "onChange",
        "type": "((current: number, pageSize: number, sizeChange?: boolean ) => void)",
        "required": false,
        "description": "页码或每页显示数量改变时回调。current: 新的页码。pageSize: 每页数量"
      },
      {
        "name": "pageSizeList",
        "type": "number[]",
        "required": false,
        "defaultValue": "[10, 20, 30, 50, 100]",
        "description": "每页数量可选列表"
      },
      {
        "name": "text",
        "type": "{ prev?: string , next?: string , page?: string , jumper?: string }",
        "required": false,
        "description": "替换文案。prev: 上一页。next: 下一页。page: pageSizeList 文字。jumper: 跳转输入框文字, \\\"{input}\\\" 为输入框占位"
      },
      {
        "name": "simple",
        "type": "boolean",
        "required": false,
        "description": "是否使用简约模式"
      },
      {
        "name": "select",
        "type": "SelectProps",
        "required": false,
        "description": "分页器有关 Select 组件的配置，目前支持 absolute、position 和 zIndex，类型同 Select 组件",
        "version": "3.4.4"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "The basic usage",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的使用\n * en - Base\n *    -- The basic usage\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  return <Pagination total={10000} defaultCurrent={1} span={3}></Pagination>;\n};\n"
      },
      {
        "title": "Total",
        "description": "Show total by custom layout property",
        "scenario": "basic",
        "code": "/**\n * cn - 带总条数的\n *    -- 通过自定义 layout 属性展示总条数\n * en - Total\n *    -- Show total by custom layout property\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  const total = 500;\n  const renderTotal = () => {\n    return `total ${total}`;\n  };\n  const layout = [renderTotal, 'links'] as any;\n  return <Pagination total={total} layout={layout} defaultCurrent={1} span={3}></Pagination>;\n};\n"
      },
      {
        "title": "Jumper",
        "description": "Show jumper by setting `jumper` value of `layout` property",
        "scenario": "basic",
        "code": "/**\n * cn - 跳转\n *    -- 通过配置`layout`属性的`jumper`值展示跳转输入框，借助`text`属性自定义文案\n * en - Jumper\n *    -- Show jumper by setting `jumper` value of `layout` property\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  const total = 100;\n  const layout = ['links', 'jumper'];\n  const text = {\n    jumper: 'Go to {input} Page',\n  };\n  return (\n    <Pagination total={total} text={text} layout={layout} defaultCurrent={1} span={3}></Pagination>\n  );\n};\n"
      },
      {
        "title": "Mode",
        "description": "Set `mode` property to change the style of pagination",
        "scenario": "basic",
        "code": "/**\n * cn - 样式\n *    -- 配置`mode`属性切换不同风格的分页器，有文字、线框两种样式\n * en - Mode\n *    -- Set `mode` property to change the style of pagination\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Pagination\n        style={{ marginBottom: 24 }}\n        total={100}\n        mode='text'\n        defaultCurrent={1}\n        span={3}\n      ></Pagination>\n      <Pagination total={100} mode='outline' defaultCurrent={1} span={3}></Pagination>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Size",
        "description": "Set the size of pagination by `size` property",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 通过`size`属性设置分页器的尺寸\n * en - Size\n *    -- Set the size of pagination by `size` property\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Pagination\n        size='small'\n        total={100}\n        defaultCurrent={1}\n        span={3}\n        style={{ marginBottom: 24 }}\n      ></Pagination>\n      <Pagination total={100} defaultCurrent={1} span={3} style={{ marginBottom: 24 }}></Pagination>\n      <Pagination size='large' total={100} defaultCurrent={1} span={3}></Pagination>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Disabled",
        "description": "Set `disabled` property to disable pagination",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用\n *    -- 通过设置`disabled`属性禁用分页器\n * en - Disabled\n *    -- Set `disabled` property to disable pagination\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  const total = 500;\n  const renderTotal = () => {\n    return `total ${total}`;\n  };\n  const text = {\n    jumper: 'Go to {input} Page',\n    page: ' / page',\n  };\n\n  const layout = [renderTotal, 'links', 'list', 'jumper'];\n  return (\n    <Pagination\n      disabled\n      total={total}\n      layout={layout}\n      text={text}\n      defaultCurrent={1}\n      span={3}\n    ></Pagination>\n  );\n};\n"
      },
      {
        "title": "Span",
        "description": "Set the number of buttons by `span` property",
        "scenario": "basic",
        "code": "/**\n * cn - 按钮数量\n *    -- 通过`span`属性设置按钮数量\n * en - Span\n *    -- Set the number of buttons by `span` property\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Pagination total={100} defaultCurrent={1} span={5} style={{ marginBottom: 24 }}></Pagination>\n      <Pagination total={1000} defaultCurrent={10} span={10}></Pagination>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Align",
        "description": "Set the position of pagination by `align` property",
        "scenario": "basic",
        "code": "/**\n * cn - 位置\n *    -- 设置`align`属性调整分页器的位置，默认为left\n * en - Align\n *    -- Set the position of pagination by `align` property\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Pagination\n        align='left'\n        total={100}\n        defaultCurrent={1}\n        span={3}\n        style={{ marginBottom: 24 }}\n      ></Pagination>\n      <Pagination\n        align='center'\n        total={100}\n        defaultCurrent={1}\n        span={3}\n        style={{ marginBottom: 24 }}\n      ></Pagination>\n      <Pagination align='right' total={100} defaultCurrent={1} span={3}></Pagination>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Jumper",
        "description": "Show jumper by setting `jumper` value of `layout` property",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义文案\n *    -- 通过编辑`text`属性的prev、next、jumper、page属性值自定义分页器文案\n *    -- prev 上一页按钮文案\n *    -- next 下一页按钮文案\n *    -- page 每页数量列表选择器文案\n *    -- jumper 跳转输入框文案，其中 {input} 占位符代表输入框\n * en - Jumper\n *    -- Show jumper by setting `jumper` value of `layout` property\n *    -- prev Prev button text\n *    -- next Next button text\n *    -- page Page button text\n *    -- jumper Jumper text, the placeholder {input} represents the input box\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  const info = ({\n    current,\n    pageSize,\n    total,\n  }: {\n    current: number;\n    pageSize: number;\n    total: number;\n  }) => {\n    let to = current * pageSize;\n    if (to > total) to = total;\n    const from = (current - 1) * pageSize + 1;\n    return `${from} to ${to} of ${total} items`;\n  };\n  const total = 256;\n  const layout = ['links', 'list', info];\n  const text = {\n    prev: 'Previous',\n    next: 'Next',\n    page: ' / page',\n  };\n\n  return (\n    <Pagination total={total} text={text} layout={layout} defaultCurrent={1} span={3}></Pagination>\n  );\n};\n"
      },
      {
        "title": "Controlled",
        "description": "Set `current` and `onChange` property to use as a controlled component",
        "scenario": "basic",
        "code": "/**\n * cn - 受控模式\n *    -- 设置`current`和`onChange`属性，可以作为受控组件使用\n * en - Controlled\n *    -- Set `current` and `onChange` property to use as a controlled component\n */\nimport { useState } from 'react';\nimport { Pagination, Input } from 'shineout';\n\nexport default () => {\n  const [current, setCurrent] = useState(1);\n\n  const handleCurrentChange = (v) => setCurrent(Number(v));\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 24 }}>\n        <span style={{ fontSize: 14 }}>Jump to</span>\n        <Input.Number\n          min={1}\n          max={10}\n          value={current}\n          onChange={handleCurrentChange}\n          style={{ width: 80, marginInlineStart: 8 }}\n        />\n      </div>\n      <Pagination total={100} span={3} current={current} onChange={setCurrent} />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Simple",
        "description": "Set `simple` property to use simple mode",
        "scenario": "basic",
        "code": "/**\n * cn - 极简模式\n *    -- 设置`simple`属性，可以使用极简模式\n * en - Simple\n *    -- Set `simple` property to use simple mode\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  return <Pagination simple defaultCurrent={1} pageSize={20} total={100}></Pagination>;\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 17,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 11
    }
  },
  "Popover": {
    "name": "Popover",
    "description": "通常用于鼠标悬浮即显的操作，以及一般性的二次确认对话框承载",
    "category": "other",
    "importPath": "import { Popover } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "position",
        "type": "| \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"left\" | \"right\" | \"top\" | \"bottom\" | \"auto\"",
        "required": false,
        "description": "弹出层位置。若不设置，则默认为 auto"
      },
      {
        "name": "priorityDirection",
        "type": "\"auto\" | \"vertical\" | \"horizontal\"",
        "required": false,
        "defaultValue": "\\\"vertical\\\"",
        "description": "弹出位置优先级, 默认为左右优先, 只在未设置 position 时生效"
      },
      {
        "name": "mouseEnterDelay",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "移入显示延迟(毫秒)"
      },
      {
        "name": "mouseLeaveDelay",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "移除隐藏延迟(毫秒)"
      },
      {
        "name": "trigger",
        "type": "\"click\" | \"hover\"",
        "required": false,
        "defaultValue": "\\\"hover\\\"",
        "description": "触发方式"
      },
      {
        "name": "destroy",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "关闭 Popover 后销毁内容 dom"
      },
      {
        "name": "visible",
        "type": "boolean",
        "required": false,
        "description": "是否可见(受控)"
      },
      {
        "name": "onVisibleChange",
        "type": "((open: boolean) => void)",
        "required": false,
        "description": "The event of visible change"
      },
      {
        "name": "onOpen",
        "type": "(() => void)",
        "required": false,
        "description": "Popover 弹出回调事件"
      },
      {
        "name": "onClose",
        "type": "(() => void)",
        "required": false,
        "description": "Popover 关闭时回调事件"
      },
      {
        "name": "children",
        "type": "ReactNode | ((close: () => void) => ReactNode)",
        "required": false,
        "defaultValue": "index",
        "description": "弹出显示内容，如果内容为函数，则参数是主动关闭操作"
      },
      {
        "name": "getPopupContainer",
        "type": "(() => HTMLElement | null)",
        "required": false,
        "description": "自定义 Popover 容器，覆盖默认渲染在 body 下的行为, () => DOMElement"
      },
      {
        "name": "useTextStyle",
        "type": "boolean",
        "required": false,
        "description": "使用内置文本样式"
      },
      {
        "name": "type",
        "type": "\"info\" | \"success\" | \"warning\" | \"danger\" | \"error\"",
        "required": false,
        "description": "Type of popover"
      },
      {
        "name": "border",
        "type": "string",
        "required": false,
        "description": "弹出层边框颜色（含箭头）"
      },
      {
        "name": "background",
        "type": "string",
        "required": false,
        "description": "弹出层背景色（含箭头）"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1060",
        "description": "Popover 层级"
      },
      {
        "name": "showArrow",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示箭头"
      },
      {
        "name": "defaultVisible",
        "type": "boolean",
        "required": false,
        "description": "默认是否显示"
      },
      {
        "name": "clickToCancelDelay",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "MouseEnterDelay 内点击元素后取消弹出"
      },
      {
        "name": "scrollDismiss",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "滚动来关闭气泡框，如果需要指定滚动元素，则通过函数返回"
      },
      {
        "name": "arrowClass",
        "type": "string",
        "required": false,
        "description": "箭头的 class 名称"
      },
      {
        "name": "offset",
        "type": "[number, number]",
        "required": false,
        "defaultValue": "[0,0]",
        "description": "弹出层宽度|高度的附加值，期望弹出层的宽度|高度增加或减少的值，可以是负数；举例：[4, 0] 表示宽度增加 4px，高度不变",
        "version": "3.6.0"
      },
      {
        "name": "popupGap",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "弹出层与触发元素的间距",
        "version": "3.6.0"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "是否禁用弹出",
        "version": "3.7.0"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Basic usage, support mouse hover to show prompt text",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基本的用法，支持鼠标悬浮即显提示文字\n * en - Basic\n *    -- Basic usage, support mouse hover to show prompt text\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nexport default () => {\n  return (\n    <Button mode='outline'>\n      Hover\n      <Popover>some Text</Popover>\n    </Button>\n  );\n};\n"
      },
      {
        "title": "Position",
        "description": "Twelve pop-up positions are built in",
        "scenario": "basic",
        "code": "/**\n * cn - 弹出位置\n *    -- 内置了十二个弹出的位置\n * en - Position\n *    -- Twelve pop-up positions are built in\n */\n\nimport React from 'react';\nimport { Button, Popover, TYPE } from 'shineout';\n\ntype PopoverProps = TYPE.Popover.Props;\ntype PopoverPosition = PopoverProps['position'];\n\nconst positions: Array<PopoverPosition[]> = [\n  [undefined, 'bottom-left', 'bottom', 'bottom-right', undefined],\n  ['right-top', undefined, undefined, undefined, 'left-top'],\n  ['right', undefined, undefined, undefined, 'left'],\n  ['right-bottom', undefined, undefined, undefined, 'left-bottom'],\n  [undefined, 'top-left', 'top', 'top-right', undefined],\n];\n\nconst style: React.CSSProperties = {\n  margin: 4,\n  width: 110,\n  display: 'inline-block',\n};\n\nconst App: React.FC = () => (\n  <div>\n    {positions.map((row, i) => (\n      <div key={i}>\n        {row.map((p, j) =>\n          p ? (\n            <Button key={j} mode={'outline'} style={style}>\n              <Popover trigger='hover' position={p} useTextStyle>\n                <div>i am popover content</div>\n                <div>{p}</div>\n              </Popover>\n              {p}\n            </Button>\n          ) : (\n            <div key={j} style={{ ...style, border: 0 }} />\n          ),\n        )}\n      </div>\n    ))}\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Trigger",
        "description": "Set the trigger property to change the trigger event to 'click'",
        "scenario": "basic",
        "code": "/**\n * cn - 点击触发\n *    -- 默认是移入组件触发，设置 trigger 为 'click'，可以改为点击触发\n * en - Trigger\n *    -- Set the trigger property to change the trigger event to 'click'\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst App: React.FC = () => (\n  <Button mode=\"outline\">\n    <Popover trigger='click'>hello shineout</Popover>\n    Click me\n  </Button>\n);\n\nexport default App;\n"
      },
      {
        "title": "control",
        "description": "can be controlled by visible",
        "scenario": "basic",
        "code": "/**\n * cn - 受控模式\n *    -- 可以通过 visible 去控制\n * en -  control\n *    -- can be controlled by visible\n */\nimport React, { useState } from 'react';\nimport { Button, Popover, Switch } from 'shineout';\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Switch value={visible} onChange={setVisible} />\n        <span style={{ marginInlineStart: 8, fontSize: 14 }}>\n          {!visible ? 'Turn on switch to display popover' : 'Turn off switch to hide popover'}{' '}\n        </span>\n      </div>\n      <Button mode=\"outline\">\n        <Popover\n          priorityDirection='horizontal'\n          visible={visible}\n          onVisibleChange={(v) => {\n            console.log('onVisibleChange', v);\n          }}\n        >\n          Some text1\n        </Popover>\n        Hover\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "delay",
        "description": "the hidden/show delay",
        "scenario": "basic",
        "code": "/**\n * cn - 延迟\n *    -- 可以设置展示延时和关闭延时\n * en - delay\n *    -- the hidden/show delay\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst App: React.FC = () => (\n  <Button mode=\"outline\">\n    <Popover mouseEnterDelay={200} mouseLeaveDelay={1000}>\n      Some text\n    </Popover>\n    Hover\n  </Button>\n);\n\nexport default App;\n"
      },
      {
        "title": "Custom container",
        "description": "use getPopupContainer return target container",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义容器\n *    -- 使用 getPopupContainer 指定渲染的目标容器\n * en - Custom container\n *    -- use getPopupContainer return target container\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst buttonStyle: React.CSSProperties = { margin: '100px 0' };\nconst targetStyle: React.CSSProperties = { height: 200, overflowY: 'auto', position: 'relative' };\n\nconst App: React.FC = () => (\n  <div id='popup-target' style={targetStyle}>\n    <Button style={buttonStyle} mode=\"outline\">\n      Scrollable\n      <Popover trigger='click' getPopupContainer={() => document.querySelector('#popup-target')}>\n        render in parent element\n      </Popover>\n    </Button>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "When the parent element is disabled, you can place the Popver and the disabled element in the same hierarchy and wrap them with the element",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用元素\n *    -- 当父元素被禁用，可以将 Popver 和禁用元素置于同一层级，并用元素将他们包裹\n * en - Disabled\n *    -- When the parent element is disabled, you can place the Popver and the disabled element in the same hierarchy and wrap them with the element\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst style: React.CSSProperties = { display: 'inline-block' };\n\nconst App: React.FC = () => (\n  <div style={style}>\n    <Popover>Disabled parent</Popover>\n\n    <Button disabled mode=\"outline\">Disabled</Button>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Type",
        "description": "Four styles are built in",
        "scenario": "basic",
        "code": "/**\n * cn - 样式\n *    -- 内置四种样式\n * en - Type\n *    -- Four styles are built in\n */\nimport React from 'react';\nimport { Popover, Button, TYPE } from 'shineout';\n\ntype PopoverProps = TYPE.Popover.Props;\n\nconst types: PopoverProps['type'][] = ['success', 'info', 'warning', 'danger'];\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', gap: 12 }}>\n    {types.map((t, i) => (\n      <Button key={i} mode=\"outline\">\n        <Popover type={t}>Some text</Popover>\n        {t}\n      </Button>\n    ))}\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Confirm",
        "description": "Popover.Confirm provide popover confirm",
        "scenario": "basic",
        "code": "/**\n * cn - 确认\n *    -- Popover.Confirm 提供弹出气泡式的确认框\n * en - Confirm\n *    -- Popover.Confirm provide popover confirm\n */\nimport React from 'react';\nimport { Button, Popover, TYPE } from 'shineout';\n\ntype PopoverConfirmProps = TYPE.Popover.ConfirmProps;\ntype PopoverOnOk = PopoverConfirmProps['onOk'];\n\nconst App: React.FC = () => {\n  const onOk: PopoverOnOk = () =>\n    new Promise((resolve) => {\n      console.log('ok');\n      setTimeout(() => resolve(true), 2000);\n    });\n\n  return (\n    <Button mode=\"outline\">\n      <Popover.Confirm\n        priorityDirection='horizontal'\n        title='Tips'\n        onCancel={() => console.log('cancel')}\n        onOk={onOk}\n      >\n        Are you sure you want to delete this content ?\n      </Popover.Confirm>\n      Delete\n    </Button>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Close",
        "description": "Set the content property to a function, you can handle the close event inside the popup panel",
        "scenario": "basic",
        "code": "/**\n * cn - 关闭事件\n *    -- content 属性可以为一个函数，会传递 close 函数，用来在弹出面板内部处理关闭事件\n * en - Close\n *    -- Set the content property to a function, you can handle the close event inside the popup panel\n */\nimport React from 'react';\nimport { Button, Popover, Message, TYPE } from 'shineout';\n\ntype PopoverProps = TYPE.Popover.Props;\ntype PopoverContentChildren = PopoverProps['children'];\n\nconst App: React.FC = () => {\n  const content: PopoverContentChildren = (close: () => void) => (\n    <div style={{ padding: 16 }}>\n      <div>Are you sure you want to close this panel?</div>\n      <div style={{ marginTop: 16, textAlign: 'right' }}>\n        <Button\n          size='small'\n          mode=\"outline\"\n          onClick={() => {\n            close();\n            Message.success('Popover panel closed.');\n          }}\n        >\n          close\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <Button mode=\"outline\">\n      <Popover priorityDirection='horizontal' trigger='click'>\n        {content}\n      </Popover>\n      Click me\n    </Button>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Events",
        "description": "provider onOpen and onClose event",
        "scenario": "basic",
        "code": "/**\n * cn - 事件\n *    -- 提供了onOpen 和 onClose 事件\n * en - Events\n *    -- provider onOpen and onClose event\n */\nimport React from 'react';\nimport { Button, Popover, TYPE } from 'shineout';\n\ntype PopoverProps = TYPE.Popover.Props;\ntype PopoverOnOpen = PopoverProps['onOpen'];\ntype PopoverOnClose = PopoverProps['onClose'];\n\nconst App: React.FC = () => {\n  const open: PopoverOnOpen = () => console.log('popover open');\n  const close: PopoverOnClose = () => console.log('popover close');\n\n  return (\n    <Button mode=\"outline\">\n      <Popover onOpen={open} onClose={close} trigger='click'>\n        Some text\n      </Popover>\n      Click me\n    </Button>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "useTextStyle",
        "description": "When the content is string or set useTextStyle to true, the default text style will be used",
        "scenario": "basic",
        "code": "/**\n * cn - 文本样式\n *    -- 当内容为 string 或者 设置 useTextStyle 为 true 时会有默认的文本样式\n * en - useTextStyle\n *    -- When the content is string or set useTextStyle to true, the default text style will be used\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <div style={{ display: 'flex', gap: 12 }}>\n      <Button mode=\"outline\">\n        <Popover useTextStyle={false}>\n          <div>hello</div>\n        </Popover>\n        defaultStyle\n      </Button>\n\n      <Button mode=\"outline\">\n        <Popover useTextStyle>\n          <div>hello</div>\n        </Popover>\n        useTextStyle\n      </Button>\n    </div>\n  );\n};\nexport default App;\n"
      },
      {
        "title": "Hide arrow",
        "description": "Set `showArrow` to false to hide the arrow.",
        "scenario": "basic",
        "code": "/**\n * cn - 不带箭头\n *    -- 设置 `showArrow` 为 false，不显示箭头。\n *    -- 不带箭头的问题提示没有明确指向性。常用于不需要针对性提示的场景中。\n * en - Hide arrow\n *    -- Set `showArrow` to false to hide the arrow.\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <Button mode=\"outline\">\n      <Popover showArrow={false}>\n        This is some notice content.\n      </Popover>\n      Text prompt without arrow\n    </Button>\n  );\n};\nexport default App;\n"
      },
      {
        "title": "Offset",
        "description": "Set the `popupGap` property to adjust the offset distance between the popup and the target element.",
        "scenario": "basic",
        "code": "/**\n * cn - 调节偏移\n *    -- 设置 `popupGap` 属性可以调节弹出框与目标元素的偏移距离。\n *    -- 带箭头的间距默认是 10px，不带箭头的间距默认是 4px。\n *    -- 最终的间距是默认间距加上 popupGap 的值。\n * en - Offset\n *   -- Set the `popupGap` property to adjust the offset distance between the popup and the target element.\n *   -- The default gap with an arrow is 10px, and the default gap without an arrow is 4px.\n *   -- The final gap is the default gap plus the value of popupGap.\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst style = {\n  height: 60,\n  padding: 12,\n  backgroundColor: '#f7f8f9',\n  display: 'flex',\n  alignItems: 'center',\n};\n\nconst App: React.FC = () => {\n  return (\n    <div style={style}>\n      <Button mode='outline'>\n        <Popover showArrow={false} popupGap={12}>\n          popover content.\n        </Popover>\n        PopupGap\n      </Button>\n    </div>\n  );\n};\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "Set the disabled property to disable the popover",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用弹出\n *    -- 设置 `disabled` 属性可以禁用弹出\n * en - Disabled\n *    -- Set the disabled property to disable the popover\n */\nimport React from 'react';\nimport { Link, Switch, Popover } from 'shineout';\n\nexport default () => {\n  const [disabled, setDisabled] = React.useState(true);\n\n  return (\n    <div>\n      <div style={{marginBottom: 12}}>\n        <Switch checked={disabled} onChange={setDisabled} content={['禁用', '启用']} />\n      </div>\n\n      <Link type='primary' disabled>\n        Link\n        <Popover.Confirm disabled={disabled}>Are you sure?</Popover.Confirm>\n      </Link>\n    </div>\n  );\n};\n"
      },
      {
        "title": "destroy",
        "description": "当popover 卸载后删除dom",
        "scenario": "basic",
        "code": "/**\n * cn - destroy\n *    -- 当popover 卸载后删除dom\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst App: React.FC = () => (\n  <Button mode=\"outline\">\n    <Popover destroy style={{ padding: '4px 8px' }}>\n      Some text\n    </Popover>\n    Hover\n  </Button>\n);\n\nexport default App;\n"
      },
      {
        "title": "受控加载dom",
        "description": "当 popover 受控时，检查是否加载 dom",
        "scenario": "basic",
        "code": "/**\n * cn - 受控加载dom\n *    -- 当 popover 受控时，检查是否加载 dom\n */\nimport React, { useState } from 'react';\nimport { Button, Popover, TYPE } from 'shineout';\n\ntype PopoverProps = TYPE.Popover.Props;\ntype PopoverOnVisibleChange = PopoverProps['onVisibleChange'];\n\nconst style: React.CSSProperties = { width: 200, padding: 20 };\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const onVisibleChange: PopoverOnVisibleChange = (v) => setVisible(v);\n\n  return (\n    <div>\n      <Button onClick={() => setVisible(!visible)} mode=\"outline\">{visible ? 'Close' : 'Open'}</Button>\n      <Button mode=\"outline\">\n        <Popover visible={visible} onVisibleChange={onVisibleChange} style={style}>\n          Some text\n        </Popover>\n        Hover\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Nested of Popovers",
        "description": "Using more than one Popover by nested",
        "scenario": "basic",
        "code": "/**\n * cn - 嵌套使用\n *    -- 使用多个 Popover 进行嵌套展示\n * en - Nested of Popovers\n *    -- Using more than one Popover by nested\n */\nimport React, { useState } from 'react';\nimport { Button, Popover, TYPE } from 'shineout';\n\ntype PopoverProps = TYPE.Popover.Props;\ntype PopoverConfirmProps = TYPE.Popover.ConfirmProps;\ntype PopoverOnOk = PopoverConfirmProps['onOk'];\ntype PopoverText = PopoverConfirmProps['text'];\ntype PopoverOnCancel = PopoverConfirmProps['onCancel'];\ntype PopoverOnVisibleChange = PopoverProps['onVisibleChange'];\n\nconst style: React.CSSProperties = { padding: '4px 8px' };\n\nconst App: React.FC = () => {\n  const [show, setshow] = useState(false);\n\n  const text: PopoverText = { ok: 'Yes', cancel: 'No' };\n\n  const onOk: PopoverOnOk = () =>\n    new Promise((resolve) => {\n      console.log('ok');\n      setTimeout(() => resolve(true), 2000);\n    });\n\n  const onCancel: PopoverOnCancel = () => console.log('cancel');\n\n  const onVisibleChange: PopoverOnVisibleChange = (v) => setshow(v);\n\n  return (\n    <Button mode=\"outline\">\n      <Popover style={style} trigger='hover' onVisibleChange={onVisibleChange}>\n        <Button mode=\"outline\">\n          {show && (\n            <Popover.Confirm onCancel={onCancel} onOk={onOk} text={text}>\n              Hello Sheinout\n            </Popover.Confirm>\n          )}\n          Nested\n        </Button>\n      </Popover>\n      Hover\n    </Button>\n  );\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 27,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 18
    },
    "subComponentApis": {}
  },
  "Progress": {
    "name": "Progress",
    "description": "用户进行操作后，系统对该操作行为内容作出的反馈",
    "category": "feedback",
    "importPath": "import { Progress } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "最外层扩展样式"
      },
      {
        "name": "background",
        "type": "string",
        "required": false,
        "defaultValue": "\\\"#e9ecef\\\"",
        "description": "背景色"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "附加内容"
      },
      {
        "name": "color",
        "type": "string | { form?: string , to?: string }",
        "required": false,
        "defaultValue": "primary",
        "description": "前景色, 可以设置为对象变成渐变."
      },
      {
        "name": "shape",
        "type": "\"line\" | \"circle\" | \"line-pop\" | \"line-inner\"",
        "required": false,
        "defaultValue": "\\\"line\\\"",
        "description": "样式"
      },
      {
        "name": "size",
        "type": "number",
        "required": false,
        "defaultValue": "100",
        "description": "进度条大小，仅对 circle 有效"
      },
      {
        "name": "strokeWidth",
        "type": "number",
        "required": false,
        "defaultValue": "8",
        "description": "线框宽度"
      },
      {
        "name": "type",
        "type": "\"success\" | \"info\" | \"warning\" | \"danger\"",
        "required": false,
        "description": "内置配色"
      },
      {
        "name": "value",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "百分比值，0 <= value <= 100"
      },
      {
        "name": "strokeLinecap",
        "type": "\"butt\" | \"round\" | \"square\" | \"inherit\"",
        "required": false,
        "description": "进度条两端的描边形状"
      },
      {
        "name": "icon",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示图标"
      },
      {
        "name": "iconSize",
        "type": "number",
        "required": false,
        "description": "图标大小"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Basic Usage",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    --  最基本的用法\n * en - Basic\n *    --  Basic Usage\n */\nimport React from 'react';\nimport { Progress } from 'shineout';\n\nexport default () => {\n  return <Progress style={{ width: 400 }} value={75} />;\n};\n"
      },
      {
        "title": "Basic",
        "description": "set shape=\"line-pop\"，children will show in a popup",
        "scenario": "basic",
        "code": "/**\n * cn - 弹出展示\n *    --  设置 shape=\"line-pop\"，children 会通过弹出框展示\n * en - Basic\n *    --  set shape=\"line-pop\"，children will show in a popup\n */\n\nimport React, { useState } from 'react';\nimport { Progress, Button } from 'shineout';\n\nlet store = 0;\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState(0);\n\n  const handleClick = (num = store) => {\n    let v = num;\n    v += Math.random() * 12;\n    if (v >= 100) {\n      v = 100;\n      setValue(v);\n    } else {\n      store = v;\n      if (store > 100) {\n        setValue(100);\n        store = 0;\n      } else {\n        setValue(v);\n        setTimeout(handleClick, 320);\n      }\n    }\n  };\n\n  return (\n    <div style={{ width: 400 }}>\n      <Progress value={value} shape='line-pop'>{`${parseInt(value.toString(), 10)}%`}</Progress>\n\n      <Button mode=\"outline\" onClick={() => handleClick(0)} style={{ marginTop: 24 }}>Start</Button>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Type",
        "description": "There are 4 built-in style",
        "scenario": "basic",
        "code": "/**\n * cn - 进度条状态\n *    -- 内置了四种样式，通过 type 来调用\n * en - Type\n *    -- There are 4 built-in style\n */\nimport React from 'react';\nimport { Progress } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ width: 400, display: 'flex', flexDirection: \"column\", gap: 24 }}>\n    <Progress value={100} type='success'>100%</Progress>\n    <Progress value={90} type='info'>90%</Progress>\n    <Progress value={80} type='warning'>80%</Progress>\n    <Progress value={70} type='danger'>70%</Progress>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Circle",
        "description": "set shape to 'circle' to show circle progress",
        "scenario": "basic",
        "code": "/**\n * cn - 环形进度条\n *    -- 设置 shape 为 'circle' 展示环形进度条\n * en - Circle\n *    -- set shape to 'circle' to show circle progress\n */\nimport React from 'react';\nimport { Progress } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', gap: '32px' }}>\n    <Progress value={0} shape='circle' type='info' size={64} strokeWidth={4}>0%</Progress>\n    <Progress value={60} shape='circle' type='info' size={64} strokeWidth={4}>60%</Progress>\n    <Progress value={70} shape='circle' type='warning' size={64} strokeWidth={4} icon />\n    <Progress value={100} shape='circle' type='success' size={64} strokeWidth={4} icon />\n    <Progress value={90} shape='circle' type='danger' size={64} strokeWidth={4} icon />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Line inner",
        "description": "set shape to 'line-inner' to show line inner progress",
        "scenario": "basic",
        "code": "/**\n * cn - 内嵌进度条\n *    -- 设置 shape 为 'line-inner' 展示内嵌的进度条\n * en - Line inner\n *    -- set shape to 'line-inner' to show line inner progress\n */\nimport React from 'react';\nimport { Progress } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'column', gap: 24, width: 400 }}>\n    <Progress value={0} shape='line-inner' type='info'>\n      0%\n    </Progress>\n    <Progress value={5} shape='line-inner' type='info'>\n      5%\n    </Progress>\n    <Progress value={40} shape='line-inner' type='info'>\n      10%\n    </Progress>\n    <Progress value={50} shape='line-inner' type='warning'>\n      50%\n    </Progress>\n    <Progress value={100} shape='line-inner' type='success'>\n      100%\n    </Progress>\n    <Progress value={60} shape='line-inner' type='danger'>\n      60%\n    </Progress>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Gradient",
        "description": "Gradient color can be set when color is an object, recommended only in two colors",
        "scenario": "basic",
        "code": "/**\n * cn - 渐变色\n *    -- 当 color 为对象时可以设置渐变色, 推荐只使用两种颜色\n * en - Gradient\n *    -- Gradient color can be set when color is an object, recommended only in two colors\n */\nimport React from 'react';\nimport { Progress } from 'shineout';\n\nconst blue = '#7949FF';\nconst green = '#19A9FA';\n\nconst App: React.FC = () => (\n  <div style={{ width: 400 }}>\n    <Progress\n      value={40}\n      color={{\n        '0%': green,\n        '100%': blue,\n      }}\n    >\n      40%\n    </Progress>\n    <br />\n    <Progress\n      value={75}\n      color={{\n        from: green,\n        to: blue,\n      }}\n      shape='line-inner'\n    >\n      75%\n    </Progress>\n    <br />\n    <Progress\n      value={60}\n      color={{\n        '0%': green,\n        '100%': blue,\n      }}\n      shape='circle'\n    >\n      60%\n    </Progress>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Size",
        "description": "Set size or style to change the size of progress",
        "scenario": "basic",
        "code": "/**\n * cn - 大小\n *    -- 通过 size 或 style 来控制大小\n *    -- 通过 strokeWidth 属性来控制线框宽度\n *    -- 通过 iconSize 属性来控制图标大小\n * en - Size\n *    -- Set size or style to change the size of progress\n *   -- Set strokeWidth to change the width of line\n *  -- Set iconSize to change the size of icon\n */\nimport React, { useState } from 'react';\nimport { Progress, Radio } from 'shineout';\n\nconst sizeList = ['small', 'default', 'large'];\nconst App: React.FC = () => {\n  const [size, setSize] = useState('default');\n\n  return (\n    <div>\n      <Radio.Group\n        keygen\n        data={sizeList}\n        value={size}\n        onChange={setSize}\n        style={{ marginBottom: 24 }}\n      />\n      {size === 'small' && (\n        <>\n          <Progress style={{ width: 400 }} strokeWidth={3} value={75}>\n            <span style={{ fontSize: 12 }}>75%</span>\n          </Progress>\n          <Progress\n            shape='line-inner'\n            style={{ width: 400, marginTop: 24 }}\n            strokeWidth={16}\n            value={40}\n          >\n            <span style={{ fontSize: 12 }}>40%</span>\n          </Progress>\n          <Progress size={48} strokeWidth={4} shape='circle' value={60} style={{ marginTop: 24 }}>\n            <span style={{ fontSize: 12 }}>60%</span>\n          </Progress>\n        </>\n      )}\n      {size === 'large' && (\n        <>\n          <Progress style={{ width: 400 }} strokeWidth={8} value={75}>\n            <span style={{ fontSize: 16 }}>75%</span>\n          </Progress>\n          <Progress\n            shape='line-inner'\n            style={{ width: 400, marginTop: 24 }}\n            strokeWidth={24}\n            value={40}\n          >\n            <span>40%</span>\n          </Progress>\n          <Progress size={80} strokeWidth={4} shape='circle' value={60} style={{ marginTop: 24 }}>\n            <span style={{ fontSize: 16 }}>60%</span>\n          </Progress>\n        </>\n      )}\n      {size === 'default' && (\n        <>\n          <Progress style={{ width: 400 }} value={75}>\n            <span>75%</span>\n          </Progress>\n          <Progress shape='line-inner' style={{ width: 400, marginTop: 24 }} value={40}>\n            <span>40%</span>\n          </Progress>\n          <Progress shape='circle' value={60} style={{ marginTop: 24 }}>\n            <span>60%</span>\n          </Progress>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Animation",
        "description": "The animation for changing value",
        "scenario": "basic",
        "code": "/**\n * cn - 动态进度条\n *    -- value 变更时动画效果演示\n * en - Animation\n *    -- The animation for changing value\n */\nimport React, { useState } from 'react';\nimport { Button, Progress } from 'shineout';\n\nlet store = 0;\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState(0);\n\n  const handleClick = (num = store) => {\n    let v = num;\n    v += Math.random() * 12;\n    if (v >= 100) {\n      v = 100;\n      setValue(v);\n    } else {\n      store = v;\n      if (store > 100) {\n        setValue(100);\n        store = 0;\n      } else {\n        setValue(v);\n        setTimeout(handleClick, 320);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <Progress style={{ width: 400 }} value={value}>\n          <div style={{ width: 50 }}>{`${value.toFixed(0)}%`}</div>\n        </Progress>\n      </div>\n      <div style={{ marginTop: 24 }}>\n        <Progress shape='circle' type='success' value={value}>\n          {`${value.toFixed(0)}%`}\n        </Progress>\n      </div>\n\n      <Button onClick={() => handleClick(0)} style={{ marginTop: 24 }} mode=\"outline\">\n        Start\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 13,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 8
    }
  },
  "Radio": {
    "name": "Radio",
    "description": "单选框代表从一组互斥的选项中仅选择一个选项",
    "category": "other",
    "importPath": "import { Radio } from 'shineout'",
    "props": [
      {
        "name": "onChange",
        "type": "((value: T) => void)",
        "required": false,
        "description": "改变选中状态时触发回调"
      },
      {
        "name": "checked",
        "type": "boolean | ((d: T) => boolean)",
        "required": false,
        "description": "checked 传入时为受控组件"
      },
      {
        "name": "onClick",
        "type": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void)",
        "required": false,
        "description": "勾选框点击回调"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "inputRef",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "获取input dom"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "内容"
      },
      {
        "name": "htmlValue",
        "type": "T",
        "required": false,
        "defaultValue": "true",
        "description": "选中后返回的值"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Simple Radio",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 最基础的 Radio\n * en - Base\n *    -- Simple Radio\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState('');\n  return (\n    <Radio\n      checked={value === 'option'}\n      htmlValue={'option'}\n      onChange={(v) => {\n        setValue(v);\n      }}\n    >\n      Option\n    </Radio>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Base",
        "description": "checked property set the checked status of Radio; disabled property set the disabled status of Radio",
        "scenario": "basic",
        "code": "/**\n * cn - 状态\n *    -- checked 属性设置 Radio 选中状态； disabled 属性设置 Radio 禁用状态\n * en - Base\n *    -- checked property set the checked status of Radio; disabled property set the disabled status of Radio\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Radio checked={false}>OptionA</Radio>\n      <Radio checked={true}>OptionB</Radio>\n      <Radio checked={false} disabled>\n        OptionC\n      </Radio>\n      <Radio checked={true} disabled>\n        OptionD\n      </Radio>\n    </>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Size",
        "description": "Set `size` property to change the size of Radio",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性可以控制 Radio 的大小\n * en - Size\n *    -- Set `size` property to change the size of Radio\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <Radio.Group keygen>\n      <Radio size={'small'} htmlValue={'a'}>\n        OptionA\n      </Radio>\n      <Radio htmlValue={'b'}>OptionB</Radio>\n      <Radio size={'large'} htmlValue={'c'}>\n        OptionC\n      </Radio>\n    </Radio.Group>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Group",
        "description": "Radio.Group generate a group of radios from an array",
        "scenario": "basic",
        "code": "/**\n * cn - 单选框组\n *    -- Radio.Group 通过数据来生成一组单选框\n * en - Group\n *    -- Radio.Group generate a group of radios from an array\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    myRadioGroup: {\n      '& .soui-radio': {\n        marginBottom: 12\n      },\n    },\n  },\n  { name: 'example-radio-group-0' },\n);\n\n\ntype RadioGroupItem = string;\n\nconst data: RadioGroupItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return <Radio.Group keygen data={data} defaultValue='blue' renderItem={(d) => d} className={classes.myRadioGroup} />;\n};\n\nexport default App;\n"
      },
      {
        "title": "*    -- A series of radios group by Radio.Group",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 将一组 Radio 放在 Radio.Group 中，以 React 组件方式调用\n * en -\n *    -- A series of radios group by Radio.Group\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    myRadioGroup: {\n      '& .soui-radio': {\n        marginBottom: 12\n      },\n    },\n  },\n  { name: 'example-radio-group-1' },\n);\n\nconst data: string[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Radio.Group\n        keygen\n        defaultValue='yellow'\n        onChange={(...args) => {\n          console.log(args);\n        }}\n        className={classes.myRadioGroup}\n      >\n        {data.map((d) => (\n          <Radio key={d} htmlValue={d}>\n            {d}\n          </Radio>\n        ))}\n      </Radio.Group>\n    </>\n  )\n};\nexport default App;\n"
      },
      {
        "title": "Vertical layout",
        "description": "The default is horizontal layout and setting the block property can changed it to be vertical layout",
        "scenario": "basic",
        "code": "/**\n * cn - 布局\n *    -- 默认为水平布局，设置 `block` 属性可以改为垂直布局\n * en - Vertical layout\n *    -- The default is horizontal layout and setting the block property can changed it to be vertical layout\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\ninterface RadioGroupItem {\n  id: number;\n  color: string;\n}\n\nconst data: RadioGroupItem[] = [\n  { id: 1, color: 'red' },\n  { id: 2, color: 'orange' },\n  { id: 3, color: 'yellow' },\n  { id: 4, color: 'green' },\n  { id: 5, color: 'cyan' },\n  { id: 6, color: 'blue' },\n  { id: 7, color: 'violet' },\n];\n\nconst App: React.FC = () => (\n  <>\n    <Radio.Group\n      style={{}}\n      keygen='id'\n      data={data}\n      format={'id'}\n      defaultValue={3}\n      renderItem='color'\n    />\n    <Radio.Group\n      style={{ display: 'inline-block', marginTop: 24 }}\n      block\n      keygen='id'\n      data={data}\n      format={'id'}\n      defaultValue={3}\n      renderItem='color'\n    />\n  </>\n);\n\nexport default App;\n"
      },
      {
        "title": "Cancel",
        "description": "Use component list for toggle radio",
        "scenario": "basic",
        "code": "/**\n * cn - 支持取消\n *    -- 使用组件形式来支持取消选中\n * en - Cancel\n *    -- Use component list for toggle radio\n */\nimport React, { useState } from 'react';\nimport { Radio } from 'shineout';\n\ntype RadioGroupItem = string;\n\nconst data: string[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => {\n  const [current, setCurrent] = useState<RadioGroupItem>('red');\n\n  return (\n    <Radio.Group keygen value={current}>\n      {data.map((d) => (\n        <Radio\n          key={d}\n          htmlValue={d}\n          onClick={() => {\n            if (current === d) {\n              setCurrent('');\n            } else {\n              setCurrent(d);\n            }\n          }}\n        >\n          {d}\n        </Radio>\n      ))}\n    </Radio.Group>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Button Radio",
        "description": "set button to show button style",
        "scenario": "basic",
        "code": "/**\n * cn - 按钮单选框\n *    -- 设置 button 属性可以展示为按钮样式\n * en - Button Radio\n *    -- set button to show button style\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst data = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\nconst App: React.FC = () => (\n  <>\n    <Radio.Group button keygen data={data} defaultValue='Wednesday' />\n    <br />\n    <Radio.Group\n      button\n      keygen\n      data={data}\n      defaultValue='Wednesday'\n      disabled\n      style={{ marginTop: 24 }}\n    />\n  </>\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- set button with outline to show outline button style",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 设置 button 为 outline 可以展示透明背景的按钮样式\n * en -\n *    -- set button with outline to show outline button style\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst data = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\nconst App: React.FC = () => (\n  <>\n    <Radio.Group button='outline' keygen data={data} defaultValue='Wednesday' />\n    <br />\n    <Radio.Group\n      button='outline'\n      keygen\n      data={data}\n      defaultValue='Wednesday'\n      disabled\n      style={{ marginTop: 24 }}\n    />\n  </>\n);\n\nexport default App;\n"
      },
      {
        "title": "Button size",
        "description": "size to set button style size",
        "scenario": "basic",
        "code": "/**\n * cn - 按钮单选框尺寸\n *    -- 设置 size 可以控制按钮样式的大小\n * en - Button size\n *    -- size to set button style size\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst data: string[] = ['red', 'orange', 'yellow'];\n\nconst App: React.FC = () => (\n  <div>\n    <Radio.Group size='small' button keygen data={data} defaultValue='red' />\n    <br />\n    <Radio.Group keygen button data={data} defaultValue='red' style={{ marginTop: 24 }} />\n    <br />\n    <Radio.Group\n      size='large'\n      button\n      keygen\n      data={data}\n      defaultValue='red'\n      style={{ marginTop: 24 }}\n    />\n    <br />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Radio Group Disabled",
        "description": "Set disabled property is set to true, all the options is disabled",
        "scenario": "basic",
        "code": "/**\n * cn - Radio 组禁用\n *    -- 设置 disabled 为 true 时，禁用所有选项\n * en - Radio Group Disabled\n *    -- Set disabled property is set to true, all the options is disabled\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst data: string[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => (\n  <Radio.Group keygen disabled data={data} defaultValue='blue' renderItem={(d) => d} />\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- When the disabled is a function, disbale the option that the function to return true",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- disabled 为函数时，根据函数返回结果实现有条件禁用\n * en -\n *    -- When the disabled is a function, disbale the option that the function to return true\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst data: string[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => (\n  <Radio.Group\n    keygen\n    data={data}\n    disabled={(d) => d === 'yellow'}\n    defaultValue='blue'\n    renderItem={(d) => d}\n  />\n);\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 10,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 12
    },
    "subComponentApis": {}
  },
  "Rate": {
    "name": "Rate",
    "description": "评分打星组件",
    "category": "other",
    "importPath": "import { Rate } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "allowHalf",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否允许半选"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否允许再次点击后清除"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否只读"
      },
      {
        "name": "max",
        "type": "number",
        "required": false,
        "defaultValue": "5",
        "description": "选项最大值，整数"
      },
      {
        "name": "repeat",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "为 true 时，显示的选项为当前分值对应选项的复制"
      },
      {
        "name": "size",
        "type": "string | number",
        "required": false,
        "defaultValue": "20",
        "description": "图标大小"
      },
      {
        "name": "text",
        "type": "ReactNode[]",
        "required": false,
        "description": "附加文字"
      },
      {
        "name": "value",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "选中的 key （受控)"
      },
      {
        "name": "defaultValue",
        "type": "number",
        "required": false,
        "description": "默认值  和 value 类型相同"
      },
      {
        "name": "onChange",
        "type": "((value?: number ) => void)",
        "required": false,
        "description": "值改变回调"
      },
      {
        "name": "background",
        "type": "ReactElement | string | Array<string | ReactElement>",
        "required": false,
        "description": "未选中元素背景"
      },
      {
        "name": "front",
        "type": "ReactElement | string | Array<string | ReactElement>",
        "required": false,
        "defaultValue": "background",
        "description": "选中元素背景"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Rate is a function that creates a new custom Rate component that specifies an icon or text",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- Rate 为一个函数，创建一个指定图标或文字的 Rate 组件，供多处复用\n * en - Base\n *    -- Rate is a function that creates a new custom Rate component that specifies an icon or text\n */\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => <StarRate />;\n\nexport default App;\n"
      },
      {
        "title": "Semi selection",
        "description": "Rate whether to allow semi selection",
        "scenario": "basic",
        "code": "/**\n * cn - 半选\n *    -- Rate 是否允许半选\n * en - Semi selection\n *    -- Rate whether to allow semi selection\n */\n\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => <StarRate allowHalf defaultValue={3.5} />;\n\nexport default App;\n"
      },
      {
        "title": "Size",
        "description": "Set the size through the size property",
        "scenario": "basic",
        "code": "/**\n * cn - 大小\n *    -- 通过 size 属性可以设置大小\n * en - Size\n *    -- Set the size through the size property\n */\n\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst titleStyle = { marginBottom: 8, fontSize: 16, fontWeight: '500' };\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => (\n  <div>\n    <div style={titleStyle}>16px</div>\n    <StarRate size={16} style={{ marginBottom: 32 }} />\n    <div style={titleStyle}>24px</div>\n    <StarRate size={24} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Text",
        "description": "Set text property to append text to each item",
        "scenario": "basic",
        "code": "/**\n * cn - 附加文字\n *    -- text 属性可以为每个选项附加文字\n * en - Text\n *    -- Set text property to append text to each item\n */\n\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => (\n  <StarRate allowHalf defaultValue={4} text={['poor', 'fair', 'good', 'very good', 'excellent']} />\n);\n\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "Set disabled to true make it be read-only. When disabled, value can be passed in decimals",
        "scenario": "basic",
        "code": "/**\n * cn - 只读\n *    -- 设置 disabled 标示为只读，只读状态下，value可以传入小数\n * en - Disabled\n *    -- Set disabled to true make it be read-only. When disabled, value can be passed in decimals\n */\n\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => <StarRate value={3.6} disabled />;\n\nexport default App;\n"
      },
      {
        "title": "Array",
        "description": "You can use arrays to display items with different scores when creating components. In this case, values with decimals are not supported",
        "scenario": "basic",
        "code": "/**\n * cn - 分级显示\n *    -- 创建组件时可以使用数组显示不同分数下的选项，这种情况下，不支持带小数的value\n * en - Array\n *    -- You can use arrays to display items with different scores when creating components. In this case, values with decimals are not supported\n */\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst defaultIcon = (\n  <svg width='32' height='32' viewBox='0 0 32 32' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      fillRule='evenodd'\n      clipRule='evenodd'\n      d='M16 29.0909C23.2299 29.0909 29.0909 23.2299 29.0909 16C29.0909 8.77009 23.2299 2.90909 16 2.90909C8.77006 2.90909 2.90906 8.77009 2.90906 16C2.90906 23.2299 8.77006 29.0909 16 29.0909ZM20.1653 14.8099C21.1511 14.8099 21.9504 14.0107 21.9504 13.0248C21.9504 12.0389 21.1511 11.2397 20.1653 11.2397C19.1794 11.2397 18.3801 12.0389 18.3801 13.0248C18.3801 14.0107 19.1794 14.8099 20.1653 14.8099ZM11.8347 14.8099C12.8206 14.8099 13.6198 14.0107 13.6198 13.0248C13.6198 12.039 12.8206 11.2397 11.8347 11.2397C10.8488 11.2397 10.0495 12.039 10.0495 13.0248C10.0495 14.0107 10.8488 14.8099 11.8347 14.8099ZM10.9091 20C10.9091 19.3975 11.3975 18.9091 12 18.9091H20C20.6025 18.9091 21.0909 19.3975 21.0909 20C21.0909 20.6025 20.6025 21.0909 20 21.0909H12C11.3975 21.0909 10.9091 20.6025 10.9091 20Z'\n      fill='#E8EBF0'\n    />\n  </svg>\n);\n\nconst cryIcon0 = (\n  <svg width='32' height='32' viewBox='0 0 32 32' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      fillRule='evenodd'\n      clipRule='evenodd'\n      d='M16 29.0909C23.2299 29.0909 29.0909 23.2299 29.0909 16C29.0909 8.77009 23.2299 2.90909 16 2.90909C8.77012 2.90909 2.90912 8.77009 2.90912 16C2.90912 23.2299 8.77012 29.0909 16 29.0909ZM10.2754 10.884C10.406 11.1841 10.8529 11.5374 11.5396 11.5374C12.2262 11.5374 12.6731 11.1841 12.8037 10.884C13.0003 10.4319 13.5261 10.2248 13.9782 10.4214C14.4302 10.618 14.6373 11.1438 14.4407 11.5959C13.9685 12.6818 12.7782 13.3226 11.5396 13.3226C10.301 13.3226 9.11067 12.6818 8.6384 11.5959C8.44181 11.1438 8.64891 10.618 9.10096 10.4214C9.55302 10.2248 10.0788 10.4319 10.2754 10.884ZM20.4629 11.5374C19.7762 11.5374 19.3293 11.1841 19.1987 10.884C19.0021 10.4319 18.4763 10.2248 18.0243 10.4214C17.5722 10.618 17.3651 11.1438 17.5617 11.5959C18.034 12.6818 19.2243 13.3226 20.4629 13.3226C21.7014 13.3226 22.8917 12.6818 23.364 11.5959C23.5606 11.1438 23.3535 10.618 22.9015 10.4214C22.4494 10.2248 21.9236 10.4319 21.727 10.884C21.5964 11.1841 21.1495 11.5374 20.4629 11.5374ZM11.2573 22.1879C11.1262 22.7759 10.5432 23.1463 9.95513 23.0152C9.36709 22.884 8.9967 22.301 9.12785 21.713C9.83008 18.5644 12.639 16.2101 16.0004 16.2101C19.3617 16.2101 22.1707 18.5644 22.8729 21.713C23.004 22.301 22.6336 22.884 22.0456 23.0152C21.4575 23.1463 20.8745 22.7759 20.7434 22.1879C20.2588 20.0153 18.3179 18.3919 16.0004 18.3919C13.6828 18.3919 11.7419 20.0153 11.2573 22.1879Z'\n      fill='#FFC91A'\n    />\n  </svg>\n);\n\nconst cryIcon = (\n  <svg width='32' height='32' viewBox='0 0 32 32' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      fillRule='evenodd'\n      clipRule='evenodd'\n      d='M16 29.0909C23.2299 29.0909 29.0909 23.2299 29.0909 16C29.0909 8.77009 23.2299 2.90909 16 2.90909C8.77006 2.90909 2.90906 8.77009 2.90906 16C2.90906 23.2299 8.77006 29.0909 16 29.0909ZM21.9504 13.0248C21.9504 14.0107 21.1511 14.8099 20.1653 14.8099C19.1794 14.8099 18.3801 14.0107 18.3801 13.0248C18.3801 12.0389 19.1794 11.2397 20.1653 11.2397C21.1511 11.2397 21.9504 12.0389 21.9504 13.0248ZM16 19.4708C14.3046 19.4708 12.8188 20.6196 12.2772 22.2871C12.0911 22.8602 11.4757 23.1738 10.9027 22.9877C10.3297 22.8016 10.016 22.1862 10.2021 21.6132C11.0093 19.1278 13.2765 17.289 16 17.289C18.7234 17.289 20.9907 19.1278 21.7979 21.6132C21.984 22.1862 21.6703 22.8016 21.0973 22.9877C20.5243 23.1738 19.9089 22.8602 19.7228 22.2871C19.1812 20.6196 17.6954 19.4708 16 19.4708ZM11.8347 14.8099C12.8206 14.8099 13.6198 14.0107 13.6198 13.0248C13.6198 12.039 12.8206 11.2397 11.8347 11.2397C10.8488 11.2397 10.0495 12.039 10.0495 13.0248C10.0495 14.0107 10.8488 14.8099 11.8347 14.8099Z'\n      fill='#FFC91A'\n    />\n  </svg>\n);\n\nconst normallyIcon = (\n  <svg width='32' height='32' viewBox='0 0 32 32' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      fillRule='evenodd'\n      clipRule='evenodd'\n      d='M16 29.0909C23.2299 29.0909 29.0909 23.2299 29.0909 16C29.0909 8.77009 23.2299 2.90909 16 2.90909C8.77006 2.90909 2.90906 8.77009 2.90906 16C2.90906 23.2299 8.77006 29.0909 16 29.0909ZM20.1653 14.8099C21.1511 14.8099 21.9504 14.0107 21.9504 13.0248C21.9504 12.0389 21.1511 11.2397 20.1653 11.2397C19.1794 11.2397 18.3801 12.0389 18.3801 13.0248C18.3801 14.0107 19.1794 14.8099 20.1653 14.8099ZM11.8347 14.8099C12.8206 14.8099 13.6198 14.0107 13.6198 13.0248C13.6198 12.039 12.8206 11.2397 11.8347 11.2397C10.8488 11.2397 10.0495 12.039 10.0495 13.0248C10.0495 14.0107 10.8488 14.8099 11.8347 14.8099ZM10.9091 20C10.9091 19.3975 11.3975 18.9091 12 18.9091H20C20.6025 18.9091 21.0909 19.3975 21.0909 20C21.0909 20.6025 20.6025 21.0909 20 21.0909H12C11.3975 21.0909 10.9091 20.6025 10.9091 20Z'\n      fill='#FFC91A'\n    />\n  </svg>\n);\n\nconst happyIcon0 = (\n  <svg width='32' height='32' viewBox='0 0 32 32' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      fillRule='evenodd'\n      clipRule='evenodd'\n      d='M16 29.0909C23.2299 29.0909 29.0909 23.2299 29.0909 16C29.0909 8.77009 23.2299 2.90909 16 2.90909C8.77006 2.90909 2.90906 8.77009 2.90906 16C2.90906 23.2299 8.77006 29.0909 16 29.0909ZM20.1653 14.8099C21.1511 14.8099 21.9504 14.0107 21.9504 13.0248C21.9504 12.0389 21.1511 11.2397 20.1653 11.2397C19.1794 11.2397 18.3801 12.0389 18.3801 13.0248C18.3801 14.0107 19.1794 14.8099 20.1653 14.8099ZM11.8347 14.8099C12.8206 14.8099 13.6198 14.0107 13.6198 13.0248C13.6198 12.039 12.8206 11.2397 11.8347 11.2397C10.8488 11.2397 10.0495 12.039 10.0495 13.0248C10.0495 14.0107 10.8488 14.8099 11.8347 14.8099ZM16 20.8596C14.3046 20.8596 12.8188 19.7108 12.2772 18.0432C12.0911 17.4702 11.4757 17.1565 10.9027 17.3427C10.3297 17.5288 10.016 18.1442 10.2021 18.7172C11.0093 21.2026 13.2765 23.0414 16 23.0414C18.7234 23.0414 20.9907 21.2026 21.7979 18.7172C21.984 18.1442 21.6703 17.5288 21.0973 17.3427C20.5243 17.1565 19.9089 17.4702 19.7228 18.0432C19.1812 19.7108 17.6954 20.8596 16 20.8596Z'\n      fill='#FFC91A'\n    />\n  </svg>\n);\n\nconst happyIcon = (\n  <svg width='32' height='32' viewBox='0 0 32 32' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      fillRule='evenodd'\n      clipRule='evenodd'\n      d='M16 29.0909C23.2299 29.0909 29.0909 23.2299 29.0909 16C29.0909 8.77009 23.2299 2.90909 16 2.90909C8.77006 2.90909 2.90906 8.77009 2.90906 16C2.90906 23.2299 8.77006 29.0909 16 29.0909ZM11.5395 12.1322C10.8529 12.1322 10.4059 12.4855 10.2754 12.7857C10.0788 13.2378 9.55295 13.4449 9.1009 13.2483C8.64885 13.0517 8.44175 12.5259 8.63834 12.0738C9.1106 10.9878 10.3009 10.3471 11.5395 10.3471C12.7781 10.3471 13.9684 10.9878 14.4407 12.0738C14.6372 12.5259 14.4301 13.0517 13.9781 13.2483C13.526 13.4449 13.0002 13.2378 12.8036 12.7857C12.6731 12.4855 12.2261 12.1322 11.5395 12.1322ZM20.4628 12.1322C19.7762 12.1322 19.3292 12.4855 19.1987 12.7857C19.0021 13.2378 18.4762 13.4449 18.0242 13.2483C17.5721 13.0517 17.365 12.5259 17.5616 12.0738C18.0339 10.9878 19.2242 10.3471 20.4628 10.3471C21.7014 10.3471 22.8917 10.9878 23.364 12.0738C23.5605 12.5259 23.3534 13.0517 22.9014 13.2483C22.4493 13.4449 21.9235 13.2378 21.7269 12.7857C21.5964 12.4855 21.1494 12.1322 20.4628 12.1322ZM11.2573 17.0637C11.1261 16.4757 10.5431 16.1053 9.95507 16.2364C9.36703 16.3676 8.99664 16.9506 9.12779 17.5387C9.83002 20.6873 12.6389 23.0415 16.0003 23.0415C19.3617 23.0415 22.1706 20.6873 22.8728 17.5387C23.004 16.9506 22.6336 16.3676 22.0455 16.2364C21.4575 16.1053 20.8745 16.4757 20.7433 17.0637C20.2588 19.2363 18.3178 20.8597 16.0003 20.8597C13.6828 20.8597 11.7418 19.2363 11.2573 17.0637Z'\n      fill='#FFC91A'\n    />\n  </svg>\n);\n\nconst background = defaultIcon;\n\nconst front = [cryIcon0, cryIcon, normallyIcon, happyIcon0, happyIcon];\nconst TextRate = Rate(background, front);\n\nexport default function () {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>\n      <TextRate size={28} defaultValue={5} />\n      <TextRate size={28} defaultValue={4} />\n      <TextRate size={28} defaultValue={3} />\n      <TextRate size={28} defaultValue={2} />\n      <TextRate size={28} defaultValue={1} />\n      <TextRate size={28} defaultValue={0} />\n    </div>\n  );\n}\n"
      },
      {
        "title": "No Repeat",
        "description": "By default, the item corresponding to the current value is displayed repeatedly. Set repeat property to false to display different item by value",
        "scenario": "basic",
        "code": "/**\n * cn - 不重复选项\n *    -- 默认情况下，会重复显示当前分值对应的选项，设置 repeat 属性为 false 可以按分值显示不同选项\n * en - No Repeat\n *    -- By default, the item corresponding to the current value is displayed repeatedly. Set repeat property to false to display different item by value\n */\n\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst LetterRate = Rate(['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E']);\nconst NumberRate = Rate(['1', '2', '3', '4', '5'], ['1', '2', '3', '4', '5']);\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n    <LetterRate size={16} repeat={false} defaultValue={3} />\n    <NumberRate size={16} repeat={false} defaultValue={3} />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Max",
        "description": "Set the maximum value of the option through the max attribute. The default value is 5",
        "scenario": "basic",
        "code": "/**\n * cn - 最大值\n *    -- 通过 max 属性设置选项最大值，默认为 5\n * en - Max\n *    -- Set the maximum value of the option through the max attribute. The default value is 5\n */\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => <StarRate max={10} defaultValue={3} />;\n\nexport default App;\n"
      },
      {
        "title": "Icon color",
        "description": "Set the color when the component is created",
        "scenario": "basic",
        "code": "/**\n * cn - 颜色\n *    -- 在创建组件时设置颜色\n * en - Icon color\n *    -- Set the color when the component is created\n */\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst getColorStar = (color: string) => (\n  <svg viewBox='0 0 24 24' fill={color} xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst heartBg = getColorStar('currentColor');\nconst heart = getColorStar('#ff4d4f');\nconst HeartRate = Rate(heartBg, heart);\n\nconst App: React.FC = () => <HeartRate defaultValue={2} />;\n\nexport default App;\n"
      },
      {
        "title": "clear",
        "description": "Set the clearable to clear value when click again",
        "scenario": "basic",
        "code": "/**\n * cn - 清除\n *    -- 通过 clearable 属性可以设置再次点击清除 value\n * en - clear\n *    -- Set the clearable to clear value when click again\n */\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => <StarRate clearable />;\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 20,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 10
    },
    "subComponentApis": {}
  },
  "Rule": {
    "name": "Rule",
    "description": "Shineout Form 内部定义了一套数据校验机制，在 Form 内的组件上通过 rules 属性进行配置",
    "category": "other",
    "importPath": "import { Rule } from 'shineout'",
    "props": [
      {
        "name": "message",
        "type": "string",
        "required": false,
        "description": "校验失败时显示的错误提示信息"
      }
    ],
    "examples": [
      {
        "title": "Required validation",
        "description": "Required validation, verifies if the field is filled. Supports three usage methods: rule.required() with default message, rule.required('custom message') with custom message, object form { required: true, message: 'custom message' }",
        "scenario": "basic",
        "code": "/**\n * cn - 必填校验\n *    -- 必填校验，验证字段是否已填写。支持三种使用方式：rule.required() 使用默认提示、rule.required('自定义提示') 传入自定义提示、对象形式 { required: true, message: '自定义提示' }\n * en - Required validation\n *    -- Required validation, verifies if the field is filled. Supports three usage methods: rule.required() with default message, rule.required('custom message') with custom message, object form { required: true, message: 'custom message' }\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required()]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input name='age' rules={[rule.required('age required')]} />\n      </Form.Item>\n      <Form.Item label='address' required>\n        <Input name='address' rules={[{ required: true, message: 'address required' }]} />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
      },
      {
        "title": "Minimum value validation",
        "description": "Minimum value validation, automatically determines based on field data type: validates numeric value for number type, string length for string type, array length for array type. Supports rule.min(value) and object form { min: value, message: 'custom message' }",
        "scenario": "basic",
        "code": "/**\n * cn - 最小值校验\n *    -- 最小值校验，会根据字段值的数据类型自动判断：如果值是数字类型则验证数值大小，如果值是字符串类型则验证字符串长度，如果值是数组类型则验证数组长度。支持 rule.min(value) 和对象形式 { min: value, message: '自定义提示' }\n * en - Minimum value validation\n *    -- Minimum value validation, automatically determines based on field data type: validates numeric value for number type, string length for string type, array length for array type. Supports rule.min(value) and object form { min: value, message: 'custom message' }\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required(), rule.min(2)]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input.Number name='age' title='age' rules={[rule.required(), rule.min(18)]} />\n      </Form.Item>\n      <Form.Item label='address' required>\n        <Input.Number\n          name='address'\n          title='address'\n          rules={[rule.required(), { min: 3, message: 'address must be at least three characters' }]}\n        />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
      },
      {
        "title": "Maximum value validation",
        "description": "Maximum value validation, automatically determines based on field data type: validates numeric value for number type, string length for string type, array length for array type. Supports rule.max(value) and object form { max: value, message: 'custom message' }",
        "scenario": "basic",
        "code": "/**\n * cn - 最大值校验\n *    -- 最大值校验，会根据字段值的数据类型自动判断：如果值是数字类型则验证数值大小，如果值是字符串类型则验证字符串长度，如果值是数组类型则验证数组长度。支持 rule.max(value) 和对象形式 { max: value, message: '自定义提示' }\n * en - Maximum value validation\n *    -- Maximum value validation, automatically determines based on field data type: validates numeric value for number type, string length for string type, array length for array type. Supports rule.max(value) and object form { max: value, message: 'custom message' }\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required(), rule.max(5)]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input.Number name='age' title='age' rules={[rule.required(), rule.max(100)]} />\n      </Form.Item>\n      <Form.Item label='address' required>\n        <Input.Number\n          name='address'\n          title='address'\n          rules={[rule.required(), { max: 3, message: 'address must be at least three characters' }]}\n        />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
      },
      {
        "title": "Range validation",
        "description": "Range validation, sets both minimum and maximum limits. Automatically determines based on field data type: validates numeric range for number type, string length range for string type, array length range for array type. Use rule.range(min, max, message) to set range",
        "scenario": "basic",
        "code": "/**\n * cn - 范围校验\n *    -- 范围校验，同时设置最小值和最大值限制。会根据字段值的数据类型自动判断：如果值是数字类型则验证数值范围，如果值是字符串类型则验证字符串长度范围，如果值是数组类型则验证数组长度范围。使用 rule.range(min, max, message) 设置范围\n * en - Range validation\n *    -- Range validation, sets both minimum and maximum limits. Automatically determines based on field data type: validates numeric range for number type, string length range for string type, array length range for array type. Use rule.range(min, max, message) to set range\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required(), rule.range(1, 5)]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input.Number name='age' title='age' rules={[rule.required(), rule.range(18, 100)]} />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
      },
      {
        "title": "Built-in type validation",
        "description": "Built-in type validation, supports email, integer, number (including decimal), url, json, hex (hexadecimal color), rgb (RGB color), ipv4 (IPv4 address) and other types. Use rule.type(message) for validation",
        "scenario": "basic",
        "code": "/**\n * cn - 内置类型校验\n *    -- 内置类型校验，支持 email（邮箱格式）、integer（整数）、number（数字，包含小数）、url（网址）、json（JSON 格式）、hex（十六进制颜色）、rgb（RGB 颜色）、ipv4（IPv4 地址）等类型。使用 rule.type(message) 进行校验\n * en - Built-in type validation\n *    -- Built-in type validation, supports email, integer, number (including decimal), url, json, hex (hexadecimal color), rgb (RGB color), ipv4 (IPv4 address) and other types. Use rule.type(message) for validation\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='email' rules={[rule.required(), rule.email('email is invalid')]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input name='age' rules={[rule.required(), rule.integer('Please enter a valid age')]} />\n      </Form.Item>\n      <Form.Item label='price' required>\n        <Input name='price' rules={[rule.required(), rule.number('Please enter a valid price')]} />\n      </Form.Item>\n      <Form.Item label='url' required>\n        <Input name='url' rules={[rule.required(), rule.url('The url is not valid')]} />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
      },
      {
        "title": "Regular expression validation",
        "description": "Regular expression validation, supports RegExp object or regex string. Use rule.regExp(pattern, message) to verify if input value matches the specified pattern. The example validates phone number format, allowing only digits, spaces and specific symbols",
        "scenario": "basic",
        "code": "/**\n * cn - 正则表达式校验\n *    -- 正则表达式校验，支持传入 RegExp 对象或正则字符串。使用 rule.regExp(pattern, message) 验证输入值是否匹配指定模式。示例中验证电话号码格式，只允许数字、空格和特定符号\n * en - Regular expression validation\n *    -- Regular expression validation, supports RegExp object or regex string. Use rule.regExp(pattern, message) to verify if input value matches the specified pattern. The example validates phone number format, allowing only digits, spaces and specific symbols\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='tel' required>\n        <Input\n          name='tel'\n          rules={[rule.required(), rule.regExp('^[\\\\d\\\\s ().-]+$', 'Please enter a valid tel')]}\n        />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
      },
      {
        "title": "Custom",
        "description": "Custom validation using function. Pass an object to Rule(), with custom rule name as key and validation function as value. The validation function receives: value (current value), formData (form data), callback (callback function), props (component props). Use callback(true) for validation pass, callback(new Error(message)) for validation fail",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义校验\n *    -- 使用自定义函数进行校验。在 Rule() 中传入对象，键名为自定义规则名，值为校验函数。校验函数接收参数：value(当前值)、formData(表单数据)、callback(回调函数)、props(组件属性)。通过 callback(true) 表示通过，callback(new Error(message)) 表示验证失败\n * en - Custom\n *    -- Custom validation using function. Pass an object to Rule(), with custom rule name as key and validation function as value. The validation function receives: value (current value), formData (form data), callback (callback function), props (component props). Use callback(true) for validation pass, callback(new Error(message)) for validation fail\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule({\n  tel: (value, _formData, callback, _props) => {\n    if (!value) return callback(new Error('Please enter your phone number'));\n    if (!/^[0-9\\s ().-]+$/.test(value)) return callback(new Error('Please enter a valid phone number'));\n    return callback(true);\n  },\n});\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='tel' required>\n        <Input name='tel' rules={[rule.tel]} />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 1,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 7
    },
    "subComponentApis": {}
  },
  "Select": {
    "name": "Select",
    "description": "用于收纳大量选项的信息录入类组件",
    "category": "other",
    "importPath": "import { Select } from 'shineout'",
    "props": [
      {
        "name": "filterSameChange",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "当两次选择的值相同时不触发 onChange"
      },
      {
        "name": "value",
        "type": "any",
        "required": false,
        "description": "选中的值。在表单中使用时，此属性由表单管理。注意：请勿使用 undefined 或 null 作为有效选项值，当 value 为 undefined/null 时组件将跳过处理",
        "whenCn": "用于受控组件；在 Form 内使用时可省略",
        "whenEn": "For controlled component usage; omit when used inside Form"
      },
      {
        "name": "data",
        "type": "DataItem[]",
        "required": false,
        "description": "下拉列表的选项数据数组",
        "whenCn": "用于扁平的列表数据结构",
        "whenEn": "Use for flat list data structure"
      },
      {
        "name": "treeData",
        "type": "Object[]",
        "required": false,
        "description": "树形结构数据，包含嵌套的子节点。格式：[{children: [...]}]",
        "whenCn": "用于层级/嵌套数据结构，替代扁平数据",
        "whenEn": "Use for hierarchical/nested data structure instead of flat data"
      },
      {
        "name": "noCache",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "禁用值与数据项的缓存。默认情况下，Select 会缓存 value 对应的 data 项以优化性能。当 data 频繁变化时，建议设为 true 以确保组件始终使用最新数据",
        "whenCn": "当数据频繁更新或动态变化时使用",
        "whenEn": "When data updates frequently or dynamically"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "非受控组件的初始值",
        "whenCn": "需要设置初始选中值但不需要外部控制时使用"
      },
      {
        "name": "separator",
        "type": "string",
        "required": false,
        "description": "多选模式下，使用此分隔符将选中值连接成字符串",
        "whenCn": "当后端需要逗号分隔或其他分隔符字符串时使用",
        "whenEn": "When backend expects comma-separated or other delimited string"
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启多选模式",
        "whenCn": "需要选择多个选项时使用"
      },
      {
        "name": "childrenKey",
        "type": "ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "\\\"children\\\"",
        "description": "指定树形数据中子节点的属性名称",
        "whenCn": "当使用 treeData 且子节点属性名不是 \\\"children\\\" 时使用",
        "whenEn": "When using treeData with a different property name for children"
      },
      {
        "name": "disabled",
        "type": "boolean | ((data: DataItem) => boolean)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时禁用全部选项；为函数时根据返回值禁用特定选项",
        "whenCn": "需要禁用整个选择器或根据条件禁用特定选项时使用"
      },
      {
        "name": "prediction",
        "type": "((value: Value extends (infer U)[] ? U : Value, Data: DataItem) => boolean)",
        "required": false,
        "defaultValue": "(val, d) => val===format(d)",
        "description": "自定义匹配函数，用于判断 value 是否与数据项匹配。解决 JavaScript 引用相等（===）的局限性，即内容相同但引用不同的对象会被判定为不相等的问题",
        "whenCn": "当选中值为对象类型且数据源会重新生成（如从接口获取）时使用，避免因引用变化导致的匹配失败"
      },
      {
        "name": "format",
        "type": "((data: DataItem) => Value extends (infer U)[] ? U : Value) | ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "d => d",
        "description": "格式化数据项为选中值。字符串：提取对应属性（如 \\\"id\\\" 获取 d.id）。函数：从数据项返回自定义值",
        "whenCn": "当数据项为对象但只需要其中某个属性作为值时使用"
      },
      {
        "name": "onChange",
        "type": "((value: Value, data?: DataItem , checked?: boolean ) => void)",
        "required": false,
        "description": "值变更回调。参数：value（选中值）、data（选中的数据项）、checked（选中状态）",
        "whenCn": "需要响应选择变化时使用"
      },
      {
        "name": "groupBy",
        "type": "((item: DataItem, index?: number , data?: DataItem[] ) => string)",
        "required": false,
        "description": "通过返回分组名称对选项进行分组。参数：item（当前要分类的数据项）、index（数据项在数组中的索引位置）、data（完整的数据数组，提供上下文信息）",
        "whenCn": "需要将选项按类别分组显示时使用，如按部门、类型或首字母等条件组织选项"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "innerTitle",
        "type": "ReactNode",
        "required": false,
        "description": "内嵌标题"
      },
      {
        "name": "absolute",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1000",
        "description": "选项列表 z-index 值, 需要配合 absolute"
      },
      {
        "name": "emptyText",
        "type": "ReactNode",
        "required": false,
        "description": "自定义空状态内容。与 renderOptionList 搭配使用时，将 emptyText 设置为 false 可禁用此功能，需要自定义空内容时可在 renderOptionList 中处理",
        "whenCn": "当没有选项匹配过滤条件或数据数组为空时使用",
        "whenEn": "When no options match the filter or data array is empty"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number) | true",
        "required": true,
        "defaultValue": "index",
        "description": "生成 key 的辅助方法, 为函数时，使用此函数返回值, 为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d) => d.id。默认值为数组索引。对于简单数组（字符串/数字），可以使用默认值。但对于对象数组，必须指定合适的 keygen 以避免错误。如果不指定 keygen，组件会将整个对象作为 key，当 renderItem 默认为 (d) => d 时，会导致将对象直接渲染到 DOM 中，引发 React 渲染错误。",
        "whenCn": "对象数组必须指定；基础类型数组可选",
        "whenEn": "Always required for object arrays; optional for primitive arrays"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "启用时显示清除图标，可一键清空所有选中值",
        "whenCn": "当用户需要快速清空选择时使用",
        "whenEn": "When users need ability to quickly clear selection"
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": "未选择任何选项时显示的占位文本",
        "whenCn": "为空选择框提供提示文本时使用",
        "whenEn": "To provide hint text when select is empty"
      },
      {
        "name": "loading",
        "type": "boolean | ReactNode",
        "required": false,
        "defaultValue": "false",
        "description": "加载状态指示器。为 true 时显示默认的 Spin 组件，也可传入自定义加载组件",
        "whenCn": "异步获取数据或搜索操作期间使用",
        "whenEn": "When fetching data asynchronously or during search operations"
      },
      {
        "name": "header",
        "type": "ReactNode",
        "required": false,
        "description": "自定义下拉列表顶部内容",
        "whenCn": "在选项上方显示说明、过滤器或操作按钮时使用",
        "whenEn": "To display instructions, filters, or actions above options"
      },
      {
        "name": "footer",
        "type": "ReactNode",
        "required": false,
        "description": "自定义下拉列表底部内容",
        "whenCn": "在选项下方显示汇总、操作按钮或加载更多按钮时使用",
        "whenEn": "To display summary, actions, or load more button below options"
      },
      {
        "name": "renderOptionList",
        "type": "((list: ReactNode, info: { loading?: ReactNode; }) => ReactNode)",
        "required": false,
        "description": "自定义渲染整个下拉列表内容。第一个参数 `list` 包含预渲染的选项列表（包括虚拟滚动、多列布局等）。第二个参数 `info` 包含：`loading` - 当前加载状态，可为 boolean（true 时显示默认加载动画）或自定义 ReactNode。注意：与 emptyText 配合使用时，将 emptyText 设为 false 可完全控制空状态渲染",
        "whenCn": "完全控制下拉内容（如自定义容器、动画、在选项列表周围添加额外 UI 元素）时使用",
        "whenEn": "For complete control over dropdown content (e.g., custom wrapper, animations, additional UI elements around the option list)"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "控制是否显示选择框边框",
        "whenCn": "设为 false 实现无边框设计或自定义样式时使用",
        "whenEn": "Set to false for borderless design or custom styling"
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "仅显示底部边框，呈现下划线样式",
        "whenCn": "用于极简 UI 设计或类似表单的外观时使用",
        "whenEn": "For minimal UI design or form-like appearance"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "程序化控制下拉列表的显示/隐藏状态",
        "whenCn": "用于受控的下拉状态或自定义触发逻辑时使用",
        "whenEn": "For controlled dropdown state or custom trigger logic"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "选择框的宽度。可接受数字（像素）或带单位的字符串",
        "whenCn": "设置固定宽度替代默认的自动调整宽度时使用",
        "whenEn": "To set fixed width instead of default auto-sizing"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": "下拉列表的最大高度。可接受数字（像素）或带单位的字符串",
        "whenCn": "当选项较多时限制下拉列表高度使用",
        "whenEn": "To limit dropdown height when many options exist"
      },
      {
        "name": "optionWidth",
        "type": "string | number",
        "required": false,
        "defaultValue": "100%",
        "description": "下拉列表的宽度。可接受数字（像素）或带单位的字符串",
        "whenCn": "当下拉列表需要与选择框不同宽度时使用",
        "whenEn": "When dropdown needs different width than select input"
      },
      {
        "name": "itemsInView",
        "type": "number",
        "required": false,
        "defaultValue": "10",
        "description": "一次渲染的最大选项数。使用虚拟滚动优化大数据集性能。如需显示超过 10 个可见项，请调整此值",
        "whenCn": "当下拉高度需显示超过 10 个项目时增加此值",
        "whenEn": "Increase when dropdown height shows more than 10 items"
      },
      {
        "name": "lineHeight",
        "type": "number | \"auto\"",
        "required": false,
        "defaultValue": "32",
        "description": "每个选项的高度。固定高度内容请设置数字；设为 \\\"auto\\\" 则根据内容自适应高度（大数据集时可能影响性能）",
        "whenCn": "固定高度项目设置数字；可变内容使用 \\\"auto\\\"",
        "whenEn": "Set number for consistent height items; \\\"auto\\\" for variable content",
        "version": "3.4.0 added \\\"auto\\\" mode"
      },
      {
        "name": "position",
        "type": "\"auto\" | \"bottom-left\" | \"bottom-right\" | \"top-left\" | \"top-right\"",
        "required": false,
        "defaultValue": "auto",
        "description": "下拉列表弹出位置。\\\"auto\\\" 会根据可用空间自动调整",
        "whenCn": "需要覆盖自动定位以满足特定布局需求时使用",
        "whenEn": "Override auto positioning for specific layout requirements"
      },
      {
        "name": "columns",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "选项显示的列数。大于 1 时启用多列布局模式",
        "whenCn": "当有许多短选项需要更好地利用空间时使用",
        "whenEn": "When many short options need better space utilization"
      },
      {
        "name": "columnsTitle",
        "type": "ReactNode",
        "required": false,
        "description": "多列多选模式下，列顶部显示的标题",
        "whenCn": "使用多列布局且启用多选时使用",
        "whenEn": "Using multi-column layout with multiple selection"
      },
      {
        "name": "showArrow",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "显示下拉箭头图标（仅单选模式）",
        "whenCn": "设为 false 实现更简洁的外观或使用自定义图标时使用",
        "whenEn": "Set to false for cleaner appearance or custom icon"
      },
      {
        "name": "focusSelected",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "多选模式下启用过滤时，点击选项后是否选中过滤输入框中的文本",
        "whenCn": "设为 false 以在选择后保留过滤文本",
        "whenEn": "Set to false to preserve filter text after selection"
      },
      {
        "name": "trim",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "失去焦点时自动删除输入内容的首尾空白字符",
        "whenCn": "当用户可能意外输入空格时，用于保持数据整洁",
        "whenEn": "For cleaner data when users may accidentally input spaces"
      },
      {
        "name": "columnWidth",
        "type": "number",
        "required": false,
        "defaultValue": "160",
        "description": "多列布局中每列的宽度（仅在 columns > 1 时生效）",
        "whenCn": "在多列模式下根据选项内容长度调整",
        "whenEn": "Adjust based on option content length in multi-column mode"
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": "过滤输入框允许输入的最大字符数",
        "whenCn": "限制过滤/创建输入长度时使用",
        "whenEn": "To limit filter/create input length"
      },
      {
        "name": "autoAdapt",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "下拉列表宽度根据内容自动调整",
        "whenCn": "当选项内容宽度差异较大时使用",
        "whenEn": "When option content varies significantly in width"
      },
      {
        "name": "compressed",
        "type": "boolean | \"no-repeat\" | \"hide-popover\"",
        "required": false,
        "defaultValue": "false",
        "description": "压缩多选项显示。true: 根据容器宽度动态计算并显示 \\\"+N\\\"；\\\"no-repeat\\\": 与 true 相同但弹出框中不重复显示已选项；\\\"hide-popover\\\": 仅显示 \\\"+N\\\" 不显示弹出框",
        "whenCn": "当多选项可能超出容器宽度时使用",
        "whenEn": "When multiple selections may exceed container width"
      },
      {
        "name": "compressedBound",
        "type": "number",
        "required": false,
        "description": "固定显示的标签数量，超出部分显示 \\\"+N\\\"。设置后将始终显示指定数量的标签，不再根据容器宽度动态计算。对于大数据集，推荐设置此属性以避免昂贵的 DOM 计算，提升性能",
        "whenCn": "配合压缩模式和大量选项以提升性能时使用",
        "whenEn": "With compressed mode and many selections for better performance"
      },
      {
        "name": "compressedClassName",
        "type": "string",
        "required": false,
        "description": "压缩项弹出框的 CSS 类名",
        "whenCn": "为压缩项弹出框设置样式时使用",
        "whenEn": "To style the compressed items popover"
      },
      {
        "name": "renderCompressed",
        "type": "((options: { data: DataItem[], onRemove: (item: DataItem) => void }) => ReactNode)",
        "required": false,
        "description": "自定义渲染压缩/折叠项的显示内容",
        "whenCn": "自定义 \\\"+N\\\" 显示或压缩内容时使用",
        "whenEn": "To customize the \\\"+N\\\" display or compressed content",
        "version": "3.5.0"
      },
      {
        "name": "hideCreateOption",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "从下拉列表中隐藏创建选项。按回车键直接选中创建的值",
        "whenCn": "配合 onCreate 使用，当创建是主要操作时保持界面简洁",
        "whenEn": "With onCreate for cleaner UI when creating is primary action"
      },
      {
        "name": "filterSingleSelect",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "过滤结果仅剩一个选项时，失焦自动选中该选项（仅在启用过滤时有效）",
        "whenCn": "当用户期望单一匹配项被自动选中以提升体验时使用",
        "whenEn": "For better UX when users expect single match to be selected"
      },
      {
        "name": "defaultExpanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "树形数据中默认展开的节点 key 值（非受控）",
        "whenCn": "配合 treeData 使用，初始显示特定节点展开",
        "whenEn": "With treeData to show specific nodes expanded initially"
      },
      {
        "name": "defaultExpandAll",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "初始展开所有树节点（仅树形数据有效）",
        "whenCn": "用于小型树形数据集，所有节点都应该可见时使用",
        "whenEn": "For small tree datasets where all nodes should be visible"
      },
      {
        "name": "expanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "树形数据中展开的节点 key 值（受控）",
        "whenCn": "用于受控的树展开状态管理",
        "whenEn": "For controlled tree expansion state"
      },
      {
        "name": "showHitDescendants",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "过滤树形数据时，显示匹配项的所有子节点",
        "whenCn": "在搜索期间保持父子节点上下文可见时使用",
        "whenEn": "To keep parent-child context visible during search"
      },
      {
        "name": "convertBr",
        "type": "string | ((text: string) => string)",
        "required": false,
        "defaultValue": "\\\" \\\"",
        "description": "粘贴文本时转换换行符。字符串用于替换换行；函数用于转换文本",
        "whenCn": "配合 onCreate 粘贴多行内容时使用",
        "whenEn": "When pasting multi-line content with onCreate"
      },
      {
        "name": "resultClassName",
        "type": "string | ((value: DataItem) => string)",
        "required": false,
        "description": "选中项显示容器的 CSS 类名。可为字符串或基于值返回类名的函数",
        "whenCn": "根据值为选中项设置不同样式时使用",
        "whenEn": "To style selected items differently based on value"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((data: DataItem, index?: number ) => ReactNode)",
        "required": false,
        "defaultValue": "d => d",
        "description": "渲染下拉列表中的每个选项。字符串使用属性值；函数自定义显示",
        "whenCn": "显示复杂选项内容或特定属性时使用",
        "whenEn": "To display complex option content or specific property"
      },
      {
        "name": "renderResult",
        "type": "((data: DataItem, index?: number ) => ReactNode)",
        "required": false,
        "defaultValue": "renderItem",
        "description": "渲染选中项的显示内容。未指定时使用 renderItem",
        "whenCn": "当选中项显示与下拉显示不同时使用",
        "whenEn": "When selected display differs from dropdown display"
      },
      {
        "name": "renderUnmatched",
        "type": "((value: Value extends (infer U)[] ? U : Value) => ReactNode)",
        "required": false,
        "description": "自定义渲染数据中不存在的值",
        "whenCn": "当值可能不存在于当前数据中时（如异步加载）使用",
        "whenEn": "When value might not exist in current data (e.g., async loading)"
      },
      {
        "name": "onBlur",
        "type": "((e: any) => void)",
        "required": false,
        "description": "选择框失去焦点时触发",
        "whenCn": "用于表单验证或保存草稿选择时使用",
        "whenEn": "For form validation or saving draft selections"
      },
      {
        "name": "onFocus",
        "type": "((e: any) => void)",
        "required": false,
        "description": "选择框获得焦点时触发",
        "whenCn": "用于加载数据、显示提示或跟踪分析时使用",
        "whenEn": "To load data, show hints, or track analytics"
      },
      {
        "name": "onFilter",
        "type": "((text: string, from?: string ) => void | ((data: DataItem) => boolean) )",
        "required": false,
        "description": "启用过滤功能。返回函数用于前端过滤，返回 undefined 用于后端过滤",
        "whenCn": "用于可搜索选择框或大数据集时使用",
        "whenEn": "For searchable select or large datasets"
      },
      {
        "name": "onCreate",
        "type": "boolean | ((input: string | DataItem) => string | DataItem)",
        "required": false,
        "description": "从输入创建新选项。true 直接使用输入值；函数将输入转换为选项",
        "whenCn": "用于标签输入或允许自定义值时使用",
        "whenEn": "For tags input or allowing custom values"
      },
      {
        "name": "onEnterExpand",
        "type": "((e: KeyboardEvent<HTMLDivElement>) => boolean)",
        "required": false,
        "description": "按回车键展开下拉框时调用。返回 false 阻止展开",
        "whenCn": "自定义回车键行为时使用",
        "whenEn": "To customize Enter key behavior"
      },
      {
        "name": "onCollapse",
        "type": "((collapse: boolean) => void)",
        "required": false,
        "description": "下拉框打开/关闭时触发。参数表示是否收起状态",
        "whenCn": "同步 UI 状态或打开时加载数据时使用",
        "whenEn": "To sync UI state or load data on open"
      },
      {
        "name": "onExpand",
        "type": "((value: (string | number)[]) => void)",
        "required": false,
        "description": "树节点展开/收起时触发。接收展开节点的 key 数组",
        "whenCn": "用于受控的树展开或跟踪状态时使用",
        "whenEn": "For controlled tree expansion or tracking state"
      },
      {
        "name": "emptyAfterSelect",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "选中选项后清空过滤输入框",
        "whenCn": "在可搜索多选中提升用户体验时使用",
        "whenEn": "For better UX in searchable multi-select"
      },
      {
        "name": "filterDelay",
        "type": "number",
        "required": false,
        "defaultValue": "400",
        "description": "过滤输入的防抖延迟（毫秒）",
        "whenCn": "为服务端过滤或性能调整时使用",
        "whenEn": "Adjust for server-side filtering or performance"
      },
      {
        "name": "loader",
        "type": "((key: string | number, data: DataItem) => void)",
        "required": false,
        "description": "动态加载树节点子级。无 children 的节点展开时触发加载",
        "whenCn": "用于懒加载大型树结构时使用",
        "whenEn": "For lazy-loading large tree structures"
      },
      {
        "name": "onAdvancedFilter",
        "type": "((text: string) => (data: DataItem) => boolean)",
        "required": false,
        "description": "高级过滤模式，允许在当前层级的过滤结果和原始数据间切换",
        "whenCn": "用于具有切换能力的复杂过滤场景时使用",
        "whenEn": "For complex filtering scenarios with toggle capability"
      },
      {
        "name": "reFocus",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "启用过滤和创建功能时，选中选项后自动聚焦输入框",
        "whenCn": "在过滤+创建模式下连续输入时使用",
        "whenEn": "For continuous input in filter+create mode"
      },
      {
        "name": "adjust",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "下拉框被视口边缘遮挡时自动调整位置",
        "whenCn": "设为 false 用于固定定位需求时使用",
        "whenEn": "Set to false for fixed positioning requirements"
      },
      {
        "name": "onLoadMore",
        "type": "(() => void | Promise<any>)",
        "required": false,
        "description": "滚动到下拉列表底部时触发，用于无限滚动加载",
        "whenCn": "用于分页或懒加载大数据集时使用",
        "whenEn": "For pagination or lazy-loading large datasets",
        "version": "3.4.0"
      },
      {
        "name": "threshold",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "触发 onLoadMore 的滚动阈值（0-1）。1 表示列表底部",
        "whenCn": "设置较低值以在到达底部前预加载时使用",
        "whenEn": "Set lower to preload before reaching bottom",
        "version": "3.4.0"
      },
      {
        "name": "trigger",
        "type": "\"click\" | \"hover\"",
        "required": false,
        "defaultValue": "\\\"click\\\"",
        "description": "打开下拉框的触发方式",
        "whenCn": "使用 \\\"hover\\\" 用于快速预览场景时使用",
        "whenEn": "Use \\\"hover\\\" for quick preview scenarios",
        "version": "3.4.0"
      },
      {
        "name": "highlight",
        "type": "boolean",
        "required": false,
        "description": "过滤时高亮匹配的文本",
        "whenCn": "视觉标识搜索匹配项时使用",
        "whenEn": "To visually indicate search matches",
        "version": "3.7.0"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Select 通过`data`属性设置数据源，通过`keygen`属性设置key生成器，通过`renderItem`属性设置渲染函数",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- Select 通过`data`属性设置数据源，通过`keygen`属性设置key生成器，通过`renderItem`属性设置渲染函数\n * en - Basic\n *    --\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select width={300} clearable data={data} keygen placeholder='Select Color' />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Multiple",
        "description": "Set `multiple` to enable multiple selection",
        "scenario": "basic",
        "code": "/**\n * cn - 多选\n *    -- 设置`multiple`属性允许开启多选功能\n * en - Multiple\n *    -- Set `multiple` to enable multiple selection\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const [value, setValue] = React.useState<string[]>();\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select\n        width={300}\n        multiple\n        data={data}\n        keygen\n        value={value}\n        onChange={(v) => setValue(v)}\n        placeholder='Select Color'\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Compressed",
        "description": "Set `compressed` to prevent wrapping and will be displayed beyond the fold when multiple",
        "scenario": "basic",
        "code": "/**\n * cn - 合并选项\n *    -- 多选下设置`compressed`属性，结果不换行，超出折叠显示\n * en - Compressed\n *    -- Set `compressed` to prevent wrapping and will be displayed beyond the fold when multiple\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select\n        width={300}\n        defaultValue={data}\n        multiple\n        onChange={(v) => console.log(v)}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        compressed\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Compressed no-repeat",
        "description": "When the value of the `compressed` property is 'no-repeat', the repeated content in the merged options will not appear in the result box",
        "scenario": "basic",
        "code": "/**\n * cn - 合并选项去重\n *    -- 当`compressed`属性值为 \"no-repeat\" 时，合并的选项中不会出现结果框中的重复内容\n * en - Compressed no-repeat\n *    -- When the value of the `compressed` property is 'no-repeat', the repeated content in the merged options will not appear in the result box\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select\n        width={300}\n        defaultValue={data}\n        multiple\n        onChange={(v) => console.log(v)}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        compressed='no-repeat'\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Only merge options",
        "description": "Set the `compressed` property to `hide-popover` to merge the selected results, only display the number of merged options, and no longer display the merged options in the pop-up layer",
        "scenario": "basic",
        "code": "/**\n * cn - 隐藏合并选项\n *    -- 使用 `compressed` 属性并设置值为 \"hide-popover\" 可以合并选中结果，仅展示合并后的选项数量，不再弹出层中展示合并的选项\n *    -- 建议数据量较大的情况下开启该功能，配合固定数值的 `compressedBound` 属性可降额外的低性能开销\n * en - Only merge options\n *    -- Set the `compressed` property to `hide-popover` to merge the selected results, only display the number of merged options, and no longer display the merged options in the pop-up layer\n *    -- It is recommended to enable this function when the data volume is large\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select\n        width={300}\n        defaultValue={data}\n        multiple\n        onChange={(v) => console.log(v)}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        compressed='hide-popover'\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Custom rendering of compressed content",
        "description": "Support custom rendering of compressed content by configuring `renderCompressed`, and customize optimized rendering for large data",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义渲染合并内容\n *    -- 通过配置 `renderCompressed` 支持自定义折叠内容渲染，大体量数据可自定义优化渲染\n *    -- `renderCompressed` 参数为一个对象，包含 `data` 和 `onRemove` 两个属性，`data` 为折叠内容数据，`onRemove` 为删除事件\n *    -- 该示例演示使用Table组件的虚拟列表特性渲染大体量的结果\n * en - Custom rendering of compressed content\n *    -- Support custom rendering of compressed content by configuring `renderCompressed`, and customize optimized rendering for large data\n *    -- The `renderCompressed` parameter is an object containing two properties, `data` and `onRemove`, `data` is the compressed content data, and `onRemove` is the delete event\n *    -- This example demonstrates using the virtual list feature of the Table component to render large amounts of results\n */\nimport React, { useState } from 'react';\nimport { Select, Popover, Table, Link, TYPE } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    item: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      padding: '5px 8px',\n      '&:hover': {\n        borderRadius: 2,\n        backgroundColor: 'var(---Neutral-fill-2-, #F4F5F8)',\n      },\n    },\n    table: {\n      borderRadius: 4,\n      overflow: 'hidden',\n      '& td': {\n        padding: '0 8px',\n        border: 'none !important',\n      },\n      '& tr:first-child td': {\n        paddingTop: '8px',\n      },\n      '& tr:last-child td': {\n        paddingBottom: '8px',\n      },\n      '& [data-soui-role=\"scroll\"]': {\n        scrollbarColor: '#c0c0c0 transparent',\n      },\n    },\n  },\n);\n\ninterface DataItem {\n  id: string;\n  name: string;\n  height: number;\n}\ntype SelectProps = TYPE.Select.Props<DataItem, string>;\ntype TableColumnItem = TYPE.Table.ColumnItem<DataItem>;\n\nconst data: DataItem[] = [];\n\nfor (let i = 0; i < 10000; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `标签 ${i}`,\n    height: Math.floor(Math.random() * 100) + 34,\n  });\n}\n\nexport default () => {\n  const [value, setValue] = useState<DataItem[]>(data);\n  const classNames = useStyles();\n\n  const handleChange = (v: DataItem[]) => {\n    setValue(v);\n  };\n\n  const renderItem: SelectProps['renderItem'] = (d) => d.name;\n\n  const renderCompressed: SelectProps['renderCompressed'] = (options) => {\n    const { data, onRemove } = options;\n\n    const columns: TableColumnItem[] = [\n      {\n        render: (item) => (\n          <div className={classNames.item}>\n            <span>node-{item.id}</span>\n            <Link type='primary' onClick={() => onRemove(item)}>\n              删除\n            </Link>\n          </div>\n        ),\n      },\n    ];\n\n    return (\n      <span\n        style={{\n          fontSize: 12,\n          color: '#fff',\n          margin: '2px 0',\n          borderRadius: 4,\n          padding: '0 4px',\n          background: 'var(--soui-brand-6)',\n        }}\n      >\n        +{data ? data.length : ''}\n        <Popover position='bottom'>\n          <Table\n            data={data}\n            keygen='id'\n            virtual\n            columns={columns}\n            hideHeader\n            width={200}\n            hover={false}\n            style={{ maxHeight: 160 }}\n            className={classNames.table}\n          />\n        </Popover>\n      </span>\n    );\n  };\n\n  return (\n    <div>\n      <Select\n        width={300}\n        data={data}\n        keygen='id'\n        multiple\n        compressed\n        value={value}\n        onChange={handleChange}\n        compressedBound={2}\n        renderCompressed={renderCompressed}\n        placeholder='Static lineHeight'\n        renderItem={renderItem}\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "autoAdapt",
        "description": "Set the `autoAdapt` property, the list will automatically expand with the content width",
        "scenario": "basic",
        "code": "/**\n * cn - 自动撑开列表\n *    -- 设置`autoAdapt`属性，列表会随内容宽度自动撑开\n * en - autoAdapt\n *    -- Set the `autoAdapt` property, the list will automatically expand with the content width\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const data = [\n    'red',\n    'loooooooooooooooooooooooooooooooooooooooooooong',\n    'yellow',\n    'green',\n    'cyan',\n    'blue',\n    'violet',\n    'pink',\n  ];\n  return (\n    <div>\n      <Select width={300} autoAdapt data={data} keygen placeholder='Select Color' clearable />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Format",
        "description": "Set the format property to format the data. When the format is a string, the corresponding value will be taken from the data. When the format is a function, the return value of the function will be used",
        "scenario": "form",
        "code": "/**\n * cn - 数据格式化\n *    -- 设置`format`属性，可以对数据进行格式化，format为字符串时，会从数据中取对应的值；为函数时，会使用函数返回值\n *    -- 注意，复杂数据格式化时，需要配置`prediction`辅助比对函数用于比较复杂类型的数据\n * en - Format\n *    -- Set the format property to format the data. When the format is a string, the corresponding value will be taken from the data. When the format is a function, the return value of the function will be used\n *    -- Note that when formatting complex data, you need to configure the prediction auxiliary comparison function to compare complex types of data\n */\nimport React from 'react';\nimport { Select, TYPE } from 'shineout';\n\ntype SelectProps = TYPE.Select.Props<DataItem, string>;\n\ninterface DataItem {\n  id: string;\n  name: string;\n}\n\nconst data: DataItem[] = [];\nfor (let i = 0; i < 15; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `Label ${i}`,\n  });\n}\n\nexport default () => {\n  const prediction: SelectProps['prediction'] = (v, d) => v === d.id;\n\n  const renderItem: SelectProps['renderItem'] = (d) => d.name;\n\n  return (\n    <div>\n      <Select\n        width={300}\n        data={data}\n        keygen='id'\n        format='id'\n        prediction={prediction}\n        placeholder='Select Color'\n        renderItem={renderItem}\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- When multi-select formatting, set `prediction` to: (v, d) => v.id === d.id",
        "description": "",
        "scenario": "form",
        "code": "/**\n * cn -\n *    -- 多选格式化时，设置 `prediction` 为: (v, d) => v.id === d.id\n * en -\n *    -- When multi-select formatting, set `prediction` to: (v, d) => v.id === d.id\n */\nimport React, { useState } from 'react';\nimport { Select, TYPE } from 'shineout';\n\ntype SelectProps = TYPE.Select.Props<DataItem, DataItem>;\n\ninterface DataItem {\n  id: string;\n  name: string;\n}\n\nconst data: DataItem[] = [];\nfor (let i = 0; i < 15; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `Label ${i}`,\n  });\n}\n\nexport default () => {\n  const [value, setValue] = useState<DataItem[]>([data[0], data[1]]);\n  const prediction: SelectProps['prediction'] = (v, d) => v.id === d.id;\n  const renderItem: SelectProps['renderItem'] = (d) => d.name;\n\n  console.log('======================')\n  console.log('select value: >>', value)\n  console.log('======================')\n  return (\n    <div>\n      <Select\n        width={300}\n        data={data}\n        keygen='id'\n        value={value}\n        onChange={setValue}\n        prediction={prediction}\n        placeholder='Select Color'\n        renderItem={renderItem}\n        clearable\n        multiple\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Set the `separator` property to merge or parse values with a separator when multiple selection is supported",
        "description": "",
        "scenario": "form",
        "code": "/**\n * cn -\n *    -- 设置`separator`属性支持多选时以分隔符分合并或解析值\n * en -\n *    -- Set the `separator` property to merge or parse values with a separator when multiple selection is supported\n */\nimport React, { useState } from 'react';\nimport { Select } from 'shineout';\nimport { primitiveData } from './static/mock';\nimport Code from './static/code';\n\nexport default () => {\n  const [value, setValue] = useState('orange~blue');\n  return (\n    <div style={{ display: 'flex' }}>\n      <div style={{ marginRight: 100 }}>\n        <Select\n          width={300}\n          multiple\n          value={value}\n          separator='~'\n          onChange={setValue}\n          data={primitiveData}\n          keygen\n          placeholder='Select Color'\n          renderItem={(d) => d}\n          clearable\n        />\n      </div>\n      <Code value={value}></Code>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Virtual List",
        "description": "Select has built-in virtual list to support big data rendering, this example shows 100,000 pieces of data",
        "scenario": "basic",
        "code": "/**\n * cn - 虚拟列表\n *    -- 内置虚拟列表，支持大数据渲染，本例展示10万条数据\n *    -- 出于默认的性能考虑，每条选项的高度默认为统一高度值，可以通过调整 `lineHeight` 属性来调整每一条选项的固定高度\n *    -- 如果需要根据内容自适应高度，通过设置 `lineHeight='auto'` 开启动态虚拟列表功能，组件将对渲染的条目预先测绘并动态计算高度\n *    -- 开启`lineHeight='auto'`将不再限制选项换行行为\n *    -- 注意，开启动态虚拟列表功能会带来额外的性能开销，请根据实际情况选择使用。此外，如果选项内容为动态的，例如选项中包含异步内容，出于性能考虑组件不自动处理尺寸的变化。\n * en - Virtual List\n *    -- Select has built-in virtual list to support big data rendering, this example shows 100,000 pieces of data\n */\nimport React from 'react';\nimport { Select, TYPE } from 'shineout';\n\ntype SelectProps = TYPE.Select.Props<DataItem, string>;\n\ninterface DataItem {\n  id: string;\n  name: string;\n  height: number;\n}\n\nconst data: DataItem[] = [];\n\nfor (let i = 0; i < 100000; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `标签 ${i}`,\n    height: Math.floor(Math.random() * 100) + 34,\n  });\n}\n\nexport default () => {\n  const renderItem: SelectProps['renderItem'] = (d) => d.name;\n  const renderDynamicHeightItem: SelectProps['renderItem'] = (d) => (\n    <div style={{ height: d.height }}>{d.name}</div>\n  );\n  return (\n    <div style={{ display: 'flex', gap: 24 }}>\n      <Select\n        width={300}\n        data={data}\n        keygen='id'\n        placeholder='Static lineHeight'\n        renderItem={renderItem}\n        clearable\n        onFilter={(v) => (d) => d.name.indexOf(v) >= 0}\n      />\n      <Select\n        width={300}\n        data={data}\n        keygen='id'\n        lineHeight='auto'\n        renderResult={(d) => d.name}\n        placeholder='Auto lineHeight'\n        renderItem={renderDynamicHeightItem}\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Size",
        "description": "Set the size property to change the size of the input box component. There are three built-in sizes available: small, default, and large.",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸大小\n *    -- 设置 `size` 属性改变输入框组件的尺寸大小。内置三种尺寸：small、default、large\n * en - Size\n *    -- Set the size property to change the size of the input box component. There are three built-in sizes available: small, default, and large.\n */\n\nimport React from 'react';\nimport { Select } from 'shineout';\n\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', gap: 24, alignItems: 'center' }}>\n      <Select width={240} size='small' placeholder='Select Color' data={data} keygen clearable />\n      <Select\n        width={240}\n        placeholder='Select Color'\n        data={data}\n        keygen\n        renderItem={(d) => d}\n        clearable\n      />\n      <Select width={240} placeholder='Select Color' size='large' data={data} keygen clearable />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Group",
        "description": "Set the `groupBy` function to group the data",
        "scenario": "basic",
        "code": "/**\n * cn - 数据分组\n *    -- 设置`groupBy`分组函数，对数据进行分组\n * en - Group\n *    -- Set the `groupBy` function to group the data\n */\nimport React from 'react';\nimport { Select, TYPE } from 'shineout';\n\ntype SelectProps = TYPE.Select.Props<DataItem, string>;\ninterface DataItem {\n  value: string;\n  group: string;\n}\n\nexport default () => {\n  const data: DataItem[] = [\n    { value: 'Mars', group: '3' },\n    { value: 'China', group: '2' },\n    { value: 'Beijing', group: '1' },\n    { value: 'Shanghai', group: '1' },\n  ];\n\n  const groupBy: SelectProps['groupBy'] = (d) => {\n    if (d.group === '1') return 'City';\n    if (d.group === '2') return 'Country';\n    return 'Other';\n  };\n\n  return (\n    <Select\n      width={300}\n      data={data}\n      placeholder='Select a city'\n      keygen='value'\n      format='value'\n      prediction={(v, d) => v === d.value}\n      renderItem='value'\n      style={{ width: 240 }}\n      groupBy={groupBy}\n      clearable\n    />\n  );\n};\n"
      },
      {
        "title": "Disabled",
        "description": "Set the `disabled` property to disable the component. When `disabled` is a function, support disabling a single option",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用/禁用选项\n *    -- 通过设置`disabled`属性可以禁用组件。disabled为函数时，支持禁用单个选项\n * en - Disabled\n *    -- Set the `disabled` property to disable the component. When `disabled` is a function, support disabling a single option\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div style={{ display: 'flex', flexWrap: 'wrap', gap: 24, width: 624 }}>\n      <Select width={300} disabled data={data} keygen placeholder='Select Color' clearable />\n      <Select\n        width={300}\n        disabled={(d) => d === 'orange'}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        clearable\n      />\n      <Select\n        compressed\n        multiple\n        value={['red', 'orange']}\n        width={300}\n        disabled\n        data={data}\n        keygen\n        placeholder='Select Color'\n        clearable\n      />\n      <Select\n        multiple\n        compressed\n        defaultValue={['red', 'orange']}\n        width={300}\n        disabled={(d) => d === 'orange'}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Tree Data",
        "description": "Set the `treeData` property to create tree data; the effect is the same as the `TreeSelect` component.",
        "scenario": "basic",
        "code": "/**\n * cn - 树形数据\n *    -- 设置 `treeData` 属性，即可创建树形数据；效果同 `TreeSelect`组件。\n * en - Tree Data\n *    -- Set the `treeData` property to create tree data; the effect is the same as the `TreeSelect` component.\n */\nimport React from 'react';\nimport { Select, TYPE } from 'shineout';\n\ntype SelectProps = TYPE.Select.Props<DataItem, string>;\n\ntype DataItem = {\n  id: string;\n  title: string;\n  children?: DataItem[];\n};\n\nexport default () => {\n  const treeData: SelectProps['treeData'] = [\n    {\n      id: '1',\n      title: 'node 1',\n      children: [\n        {\n          id: '1-1',\n          title: 'node 1-1',\n          children: [\n            {\n              id: '1-1-1',\n              title: 'node 1-1-1',\n              // 模拟嵌套深度为10层的树形数据，重复嵌套children\n              children: [\n                {\n                  id: '1-1-1-1',\n                  title: 'node 1-1-1-1',\n                  children: [\n                    {\n                      id: '1-1-1-1-1',\n                      title: 'node 1-1-1-1-1',\n                      children: [\n                        {\n                          id: '1-1-1-1-1-1',\n                          title: 'node 1-1-1-1-1-1',\n                          children: [\n                            {\n                              id: '1-1-1-1-1-1-1',\n                              title: 'node 1-1-1-1-1-1-1',\n                              children: [\n                                {\n                                  id: '1-1-1-1-1-1-1-1',\n                                  title: 'node 1-1-1-1-1-1-1-1',\n                                  children: [\n                                    {\n                                      id: '1-1-1-1-1-1-1-1-1',\n                                      title: 'node 1-1-1-1-1-1-1-1-1',\n                                      children: [\n                                        {\n                                          id: '1-1-1-1-1-1-1-1-1-1',\n                                          title: 'node 1-1-1-1-1-1-1-1-1-1',\n                                          children: [\n                                            {\n                                              id: '1-1-1-1-1-1-1-1-1-1-1',\n                                              title: 'node 1-1-1-1-1-1-1-1-1-1-1',\n                                              children: [\n                                                {\n                                                  id: '1-1-1-1-1-1-1-1-1-1-1-1',\n                                                  title: 'node 1-1-1-1-1-1-1-1-1-1-1-1',\n                                                },\n                                              ],\n                                            },\n                                          ],\n                                        },\n                                      ],\n                                    },\n                                  ],\n                                },\n                              ],\n                            },\n                          ],\n                        },\n                      ],\n                    },\n                  ],\n                },\n              ]\n            },\n            { id: '1-1-2', title: 'node 1-1-2' },\n          ],\n        },\n        { id: '1-2', title: 'node 1-2' },\n      ],\n    },\n    {\n      id: '2',\n      title: 'node 2',\n    },\n    { id: '3', title: 'node 3', children: [{ id: '3-1', title: 'node 3-1' }] },\n    { id: '4', title: 'node 4' },\n  ];\n\n  const prediction: SelectProps['prediction'] = (v, d) => v === d.id;\n\n  const renderItem: SelectProps['renderItem'] = (d) => d.title;\n\n  return (\n    <div>\n      <Select\n        width={300}\n        childrenKey='children'\n        treeData={treeData}\n        keygen='id'\n        format='id'\n        placeholder='Select Color'\n        prediction={prediction}\n        renderItem={renderItem}\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Create option",
        "description": "If the `onCreate` property is set, you can create entries that do not exist in the options;",
        "scenario": "basic",
        "code": "/**\n * cn - 创建选项\n *    -- 设置 `onCreate` 属性，即可创建选项中不存在的条目；\n *    -- 当 `onCreate` 为 true 时，使用默认函数 text => text；\n *    -- 当 `onCreate` 为函数时，将此函数返回值作为新的选项插入最上方。\n * en - Create option\n *    -- If the `onCreate` property is set, you can create entries that do not exist in the options;\n *   -- When `onCreate` is true, use the default function text => text;\n *  -- When `onCreate` is a function, the return value of this function is inserted as a new option at the top.\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\ntype DataItem = {\n  id: string;\n  name: string;\n};\n\nconst data: DataItem[] = [];\nfor (let i = 0; i < 15; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `标签 ${i}`,\n  });\n}\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select\n        width={300}\n        data={data}\n        onCreate\n        height={250}\n        keygen\n        placeholder='Select Color'\n        clearable\n      />\n\n      <Select\n        multiple\n        style={{ marginLeft: 24 }}\n        width={300}\n        data={data}\n        onCreate\n        height={250}\n        keygen\n        placeholder='Select Color'\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Filter data (local)",
        "description": "Set the `onFilter` property and return the content as a function, the local data will be filtered according to the returned filter function",
        "scenario": "basic",
        "code": "/**\n * cn - 过滤数据（本地）\n *    -- 设置`onFilter`属性且返回内容为函数时，会根据返回的过滤函数对本地数据进行过滤\n * en - Filter data (local)\n *    -- Set the `onFilter` property and return the content as a function, the local data will be filtered according to the returned filter function\n */\nimport React from 'react';\nimport { Form, Select, Switch, TYPE } from 'shineout';\n\ntype SelectProps = TYPE.Select.Props<string, string>;\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  const handleFilter: SelectProps['onFilter'] = (v) => (d) => d.indexOf(v) >= 0;\n  const [highlight, setHighlight] = React.useState(true);\n\n  return (\n    <div>\n      <Form>\n        <Form.Item label='高亮关键字' labelWidth={72}>\n          <Switch value={highlight} onChange={setHighlight} />\n        </Form.Item>\n      </Form>\n\n      <Select\n        width={200}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        onFilter={handleFilter}\n        clearable\n        highlight={highlight}\n      />\n      <br />\n      <br />\n      <Select\n        width={300}\n        data={data}\n        keygen\n        placeholder='Select Multiple Color'\n        onFilter={handleFilter}\n        clearable\n        multiple\n        highlight={highlight}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Filter data (server)",
        "description": "Set the `onFilter` property and do not return the content, you can filter according to the input content, and reset the data according to the data returned by the backend interface",
        "scenario": "basic",
        "code": "/**\n * cn - 过滤数据（服务端）\n *    -- 设置 `onFilter` 属性且不返回内容时，可以根据输入的内容自行进行过滤，并根据后端接口返回的数据重新设置data\n *    -- 其中第二参数为触发过滤的方式，值为 `edit` 时代表输入框输入内容，值为 `blur` 代表输入框失去焦点并关闭下拉框\n * en - Filter data (server)\n *    -- Set the `onFilter` property and do not return the content, you can filter according to the input content, and reset the data according to the data returned by the backend interface\n *    -- The second parameter of `onFilter` is the way to trigger the filter. When the value is `edit`, it means that the input box enters the content, and when the value is `blur`, it means that the input box loses focus and closes the drop-down box\n *\n */\nimport React, { useState, useEffect } from 'react';\nimport { Select, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ntype SelectProps = TYPE.Select.Props<DataItem, string>;\n\ninterface DataItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\nexport default () => {\n  const [data, setData] = useState<DataItem[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const getData = (text: string) => {\n    user.fetch.get('user', { username: text, sorter: {} }).then((res: { data: DataItem[] }) => {\n      setData(res.data);\n      setLoading(false);\n    });\n  };\n\n  const handleFilter: SelectProps['onFilter'] = (text, from) => {\n    if (from === 'blur') {\n      console.log('选择结束并关闭面板，清空过滤条件，查询默认的列表数据');\n      getData('');\n      setLoading(false);\n      return;\n    }\n\n    if (from === 'edit') {\n      console.log('输入框输入内容，根据输入内容进行过滤');\n      setLoading(true);\n      getData(text);\n    }\n  };\n\n  const renderItem: SelectProps['renderItem'] = (d) => `${d.firstName}-${d.lastName}`;\n\n  useEffect(() => {\n    getData('');\n  }, []);\n\n  return (\n    <div>\n      <Select\n        loading={loading}\n        width={300}\n        data={data}\n        keygen='id'\n        format={'id'}\n        placeholder='Select Color'\n        renderItem={renderItem}\n        onFilter={handleFilter}\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Tree data filter",
        "description": "Set onFilter and treeData to filter tree data",
        "scenario": "basic",
        "code": "/**\n * cn - 树形数据过滤\n *    -- 通过设置`onFilter`和`treeData`可以对树形数据进行过滤\n * en - Tree data filter\n *    -- Set onFilter and treeData to filter tree data\n */\nimport React from 'react';\nimport { Select, TYPE } from 'shineout';\n\ntype SelectProps = TYPE.Select.Props<DataItem, string>;\n\ntype DataItem = {\n  id: string;\n  title: string;\n  children?: DataItem[];\n};\n\nexport default () => {\n  const treeData: DataItem[] = [\n    {\n      id: '1',\n      title: 'node 1',\n      children: [\n        {\n          id: '1-1',\n          title: 'node 1-1',\n          children: [\n            { id: '1-1-1', title: 'node 1-1-1' },\n            { id: '1-1-2', title: 'node 1-1-2' },\n          ],\n        },\n        { id: '1-2', title: 'node 1-2' },\n      ],\n    },\n    {\n      id: '2',\n      title: 'node 2',\n    },\n    { id: '3', title: 'node 3', children: [{ id: '3-1', title: 'node 3-1' }] },\n    { id: '4', title: 'node 4' },\n  ];\n\n  const handleFilter: SelectProps['onFilter'] = (text) => (d) => {\n    return d.title.indexOf(text) >= 0;\n  };\n\n  const renderItem: SelectProps['renderItem'] = (d) => d.title;\n\n  const prediction: SelectProps['prediction'] = (v, d) => v === d.id;\n\n  return (\n    <div>\n      <Select\n        width={300}\n        childrenKey='children'\n        treeData={treeData}\n        keygen='id'\n        format='id'\n        onFilter={handleFilter}\n        placeholder='Select Color'\n        prediction={prediction}\n        renderItem={renderItem}\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Absolute",
        "description": "If the parent container of the option popup layer is blocked, you can set the absolute property to render the popup option in a separate layer. (Not recommended unless necessary)",
        "scenario": "basic",
        "code": "/**\n * cn - 绝对定位\n *    -- 如果选项弹出层的父容器被遮挡，可以设置 absolute 属性使弹出选项在单独层中渲染。（非必要情况下不建议）\n * en - Absolute\n *    -- If the parent container of the option popup layer is blocked, you can set the absolute property to render the popup option in a separate layer. (Not recommended unless necessary)\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nconst data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\nconst styleAbsolute: React.CSSProperties = {\n  padding: 10,\n  height: 100,\n  width: '100%',\n  overflow: 'hidden',\n};\n\nexport default () => {\n  return (\n    <div style={styleAbsolute}>\n      <Select width={120} keygen data={data} placeholder='default' clearable />\n      <Select\n        style={{ marginInlineStart: 16 }}\n        width={300}\n        absolute\n        multiple\n        keygen\n        data={data}\n        placeholder='Select user'\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Columns",
        "description": "Set the `columns` property to make the selection box multi-column display, and `columns` is the number of items displayed per row.",
        "scenario": "basic",
        "code": "/**\n * cn - 多列选择\n *    -- 设置 `columns` 属性可以让选择框变成多列显示，`columns` 为每行显示的数量\n * en - Columns\n *    -- Set the `columns` property to make the selection box multi-column display, and `columns` is the number of items displayed per row.\n */\nimport React, { useState, useEffect } from 'react';\nimport { Select, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ntype SelectProps = TYPE.Select.Props<DataItem, string>;\n\ninterface DataItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\nexport default () => {\n  const [data, setData] = useState<DataItem[]>([]);\n\n  const renderItem: SelectProps['renderItem'] = (d) => `${d.firstName}-${d.lastName}`;\n\n  useEffect(() => {\n    user.fetch.get('user', { username: '', sorter: {} }).then((res: { data: DataItem[] }) => {\n      setData(res.data);\n    });\n  }, []);\n\n  return (\n    <div style={{ display: 'flex', gap: 24 }}>\n      <Select\n        width={300}\n        data={data}\n        keygen='id'\n        columns={4}\n        placeholder='Select Color'\n        renderItem={renderItem}\n        clearable\n      />\n      <Select\n        multiple\n        compressed\n        // compressedBound={2}\n        width={300}\n        data={data}\n        keygen='id'\n        columns={4}\n        placeholder='Select Color'\n        renderItem={renderItem}\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Inner title",
        "description": "Set `innerTitle` to render inner title",
        "scenario": "basic",
        "code": "/**\n * cn - 内嵌标题\n *    -- 通过配置`innerTitle`可以渲染内嵌标题\n * en - Inner title\n *    -- Set `innerTitle` to render inner title\n */\nimport React from 'react';\nimport { Select, Gap } from 'shineout';\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <Gap style={{ flexDirection: 'column', gap: 24 }}>\n      <Select size=\"small\" innerTitle='Select Color' width={300} data={data} keygen clearable />\n      <Select innerTitle='Select Color' width={300} data={data} keygen clearable />\n      <Select size=\"large\" innerTitle='Select Color' width={300} data={data} keygen clearable />\n    </Gap>\n  );\n};\n"
      },
      {
        "title": "Loading",
        "description": "Set `loading` to true will show a default Spin component, you can pass a custom Spin to replace it",
        "scenario": "basic",
        "code": "/**\n * cn - 加载中\n *    -- 设置`loading`为true时会展示一个默认的Spin组件，可以传入一个自定义的Spin代替\n * en - Loading\n *    -- Set `loading` to true will show a default Spin component, you can pass a custom Spin to replace it\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select loading width={300} data={data} keygen placeholder='Select Color' clearable />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Header",
        "description": "Set `header` to customize the content of the header area",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义列表布局\n *    -- 通过设置`header`属性可以自定义列表头部区域内容\n *    -- 通过设置`footer`属性可以自定义列表底部区域内容\n *    -- 通过设置`renderOptionList`可以自定义列表内容，并将列表实例抛出\n *    -- 注意，与`emptyText`属性搭配使用时，`emptyText`渲染优先级高于`renderOptionList`，可将`emptyText`设置为 false 忽略空内容渲染，如需渲染空内容，请在`renderOptionList`中自行处理\n * en - Header\n *    -- Set `header` to customize the content of the header area\n */\nimport React, { useState } from 'react';\nimport { Select } from 'shineout';\n\nconst defaultData = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n\nexport default () => {\n  const [data, setData] = useState(defaultData);\n\n  const handleAppend = () => {\n    setData(['new color', ...data]);\n  };\n\n  const addMore = (\n    <div\n      style={{\n        height: 32,\n        backgroundColor: '#197AFA',\n        color: '#ffffff',\n        padding: '5px 12px',\n        boxSizing: 'border-box',\n      }}\n      onClick={handleAppend}\n    >\n      + add\n    </div>\n  );\n\n  return (\n    <div style={{ display: 'flex', gap: '24px', flexWrap: 'wrap' }}>\n      <Select\n        header={addMore}\n        width={300}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        clearable\n      />\n      <Select\n        footer={addMore}\n        width={300}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        clearable\n      />\n      <Select\n        keygen\n        onCollapse={(v) => console.log(v)}\n        width={300}\n        clearable\n        data={data}\n        placeholder='Select Color'\n        renderOptionList={(s) => (\n          <div>\n            {addMore}\n            <div>{s}</div>\n            {addMore}\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "renderResult",
        "description": "Set `renderResult` to custom render the result",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义选中结果\n *    -- 通过`renderResult`可以自定义选中结果的渲染\n * en - renderResult\n *    -- Set `renderResult` to custom render the result\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  const renderResult = (d: string) => {\n    return `i love ${d}`;\n  };\n  return (\n    <div>\n      <Select\n        width={300}\n        renderResult={renderResult}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Show more complex custom rendering",
        "description": "",
        "scenario": "custom",
        "code": "/**\n * cn -\n *    -- 演示更复杂的自定义渲染\n * en -\n *    -- Show more complex custom rendering\n */\nimport React, { useEffect, useMemo, useRef, Ref } from 'react';\nimport { Select, Input, Empty, icons } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    select: {\n      '& .soui-select-option-inner:has(.soui-select-empty)': {\n        overflow: 'visible'\n      },\n    },\n  },\n  { name: 'select-example-17' },\n);\n\nconst svgs = [\n  <svg key='0' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' width={14} height={14}>\n    <path\n      d='M8 15c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7zM4 7c-.6 0-1 .4-1 1s.4 1 1 1h8c.6 0 1-.4 1-1s-.4-1-1-1H4z'\n      fill='#ff5630'\n    />\n  </svg>,\n  <svg key='1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' width={14} height={14}>\n    <linearGradient\n      id='a'\n      gradientUnits='userSpaceOnUse'\n      x1='-46.25'\n      y1='65.1105'\n      x2='-46.25'\n      y2='64.1105'\n      gradientTransform='matrix(12 0 0 -13.1121 563 854.7415)'\n    >\n      <stop offset='0' stopColor='#ff5630' />\n      <stop offset='1' stopColor='#ff8f73' />\n    </linearGradient>\n    <path\n      d='M2.5 4l5-2.9c.3-.2.7-.2 1 0l5 2.9c.3.2.5.5.5.9v8.2c0 .6-.4 1-1 1-.2 0-.4 0-.5-.1L8 11.4 3.5 14c-.5.3-1.1.1-1.4-.4-.1-.1-.1-.3-.1-.5V4.9c0-.4.2-.7.5-.9z'\n      fill='url(#a)'\n    />\n  </svg>,\n  <svg key='2' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' width={14} height={14}>\n    <path\n      d='M3.47876 7.9c-.5.3-1.1.1-1.4-.4s-.1-1 .4-1.3l5-3c.3-.2.7-.2 1 0l5 3c.5.3.6.9.3 1.4-.2.4-.8.6-1.3.3l-4.5-2.7-4.5 2.7z'\n      fill='#ff5630'\n    />\n    <path\n      d='M3.47876 12.2c-.5.3-1.1.2-1.4-.3s-.1-1.1.4-1.4l5-3c.3-.2.7-.2 1 0l5 3c.5.3.6.9.3 1.4-.3.5-.9.6-1.4.3l-4.4-2.7-4.5 2.7z'\n      fill='#ff7452'\n    />\n  </svg>,\n  <svg key='3' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' width={14} height={14}>\n    <path\n      d='M8.045319 12.806152l4.5-2.7c.5-.3 1.1-.1 1.3.4s.2 1.1-.3 1.3l-5 3c-.3.2-.7.2-1 0l-5-3c-.5-.3-.6-.9-.3-1.4.3-.5.9-.6 1.4-.3l4.4 2.7z'\n      fill='#0065ff'\n    />\n    <path\n      d='M12.545319 5.806152c.5-.3 1.1-.1 1.3.3s.2 1.1-.3 1.4l-5 3c-.3.2-.7.2-1 0l-5-3c-.5-.3-.6-.9-.3-1.4.3-.5.9-.6 1.4-.3l4.4 2.7 4.5-2.7z'\n      fill='#2684ff'\n    />\n    <path\n      d='M12.545319 1.506152c.5-.3 1.1-.2 1.3.3s.2 1.1-.3 1.4l-5 3c-.3.2-.7.2-1 0l-5-3c-.5-.3-.6-.9-.3-1.4.3-.5.9-.6 1.4-.3l4.4 2.7 4.5-2.7z'\n      fill='#4c9aff'\n    />\n  </svg>,\n];\n\ninterface DataItem {\n  label: string;\n  value: string;\n  icon: React.ReactNode;\n}\n\nconst data = [\n  {\n    label: 'P0-紧急',\n    value: '0',\n    icon: svgs[0],\n  },\n  {\n    label: 'P1-高',\n    value: '1',\n    icon: svgs[1],\n  },\n  {\n    label: 'P2-中',\n    value: '2',\n    icon: svgs[2],\n  },\n  {\n    label: 'P3-低',\n    value: '3',\n    icon: svgs[3],\n  },\n];\n\nconst FilterInput = React.forwardRef(\n  (\n    {\n      value,\n      onChange,\n      style,\n    }: {\n      value?: string;\n      onChange: (value?: string) => void;\n      style?: React.CSSProperties;\n    },\n    ref,\n  ) => {\n    return (\n      <div style={{ ...style, border: 'none', borderBottom: '1px solid #E8EBF0' }}>\n        <Input\n          forwardRef={ref as Ref<HTMLInputElement>}\n          type='search'\n          placeholder='搜索'\n          value={value}\n          onChange={onChange}\n          style={{ border: 'none', boxShadow: 'none' }}\n          onKeyDown={(e) => e.stopPropagation()}\n          prefix={\n            <div\n              style={{\n                display: 'flex',\n                width: 14,\n                marginRight: 8,\n                color: 'var(--soui-input-icon-color,var(--soui-neutral-text-4,#666C7C))',\n              }}\n            >\n              {icons.Search}\n            </div>\n          }\n        />\n      </div>\n    );\n  },\n);\n\nexport default () => {\n  const [value, setValue] = React.useState<string[]>(['0', '1']);\n  const [filterText, setFilterText] = React.useState<string | undefined>('');\n\n  const classes = useStyles()\n\n  const displayData = useMemo(() => {\n    if (!filterText) return data;\n    return data.filter((d) => d.label.includes(filterText));\n  }, [filterText]);\n\n  const renderItem = (d: DataItem) => {\n    return (\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        {d.icon}\n        <span style={{ marginLeft: 4 }}>{d.label}</span>\n      </div>\n    );\n  };\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [displayData.length]);\n\n  const renderOptionList = (list: React.ReactNode) => {\n    return (\n      <div style={{ height: 173, overflow: 'au' }}>\n        <FilterInput value={filterText} onChange={setFilterText} ref={inputRef} />\n        {list}\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Select\n        keygen='value'\n        format={'value'}\n        value={value}\n        onChange={setValue}\n        width={300}\n        renderItem={renderItem}\n        className={classes.select}\n        emptyText={\n          <div>\n            <FilterInput\n              value={filterText}\n              onChange={setFilterText}\n              style={{ margin: '-6px 0 0 -12px', width: 'calc(100% + 24px)' }}\n              ref={inputRef}\n            />\n            <Empty style={{ margin: '24px auto 12px' }} />\n          </div>\n        }\n        data={displayData}\n        placeholder='Please Select'\n        clearable\n        compressed\n        multiple\n        renderOptionList={renderOptionList}\n        onCollapse={(v) => {\n          setTimeout(() => {\n            if (v && inputRef.current) {\n              inputRef.current.focus();\n            }\n          }, 20);\n        }}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "renderUnmatched",
        "description": "The unmatched value can be rendered through the `renderUnmatched` property",
        "scenario": "custom",
        "code": "/**\n * cn - 渲染未匹配值\n *    -- 通过`renderUnmatched`属性可以渲染未匹配的值\n * en - renderUnmatched\n *    -- The unmatched value can be rendered through the `renderUnmatched` property\n */\nimport React from 'react';\nimport { Select, TYPE } from 'shineout';\n\ntype SelectProps = TYPE.Select.Props<string, string>;\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n\n  const renderUnmatched: SelectProps['renderUnmatched'] = (v) => {\n    return `I am ${v} color`;\n  };\n\n  return (\n    <div>\n      <Select\n        width={300}\n        defaultValue='redddd'\n        renderUnmatched={renderUnmatched}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Basic",
        "description": "通过配置`onLoadMore`方法，当下拉面板内容滚动至一定程度时，会触发该方法，实现滚动加载的效果",
        "scenario": "basic",
        "code": "/**\n * cn - 滚动加载\n *    -- 通过配置`onLoadMore`方法，当下拉面板内容滚动至一定程度时，会触发该方法，实现滚动加载的效果\n *    -- 通过配置`threshold`属性控制触发加载的阈值，默认为 1 即滚动至底部时触发加载，范围为 0 ~ 1\n *    -- 注意，加载中样式及效果需自行设置，`onLoadMore`方法需自行设置触发频率，避免高频调用\n * en - Basic\n *    --\n */\nimport React, { useState, useEffect } from 'react';\nimport { Select, Spin } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\nexport default () => {\n  const [current, setCurrent] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<ListItem[]>([]);\n\n  const fetchData = (c: number) => {\n    setLoading(true);\n    user.fetch\n      .get('List', { current: c, pageSize: 10, sorter: {}, username: '' })\n      .then((_data: { data: ListItem[] }) => {\n        setData([...data, ..._data.data]);\n        setCurrent(c);\n        setLoading(false);\n      });\n  };\n\n  const onLoadMore = async () => {\n    if (current >= 10) return;\n    // 避免高频调用\n    if (loading) return;\n    await fetchData(current + 1);\n  };\n\n  useEffect(() => {\n    fetchData(1);\n  }, []);\n\n  return (\n    <div>\n      <Select\n        width={300}\n        clearable\n        data={data}\n        keygen='id'\n        format='id'\n        threshold={1}\n        renderItem={(d) => d.firstName}\n        placeholder='Select User'\n        onLoadMore={onLoadMore}\n        renderOptionList={(List) => {\n          return (\n            <Spin loading={loading} name='ring' size={14}>\n              {List}\n            </Spin>\n          );\n        }}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Trigger",
        "description": "Set the trigger property to set the way the panel opens. Set to `hover` to trigger on mouse enter, default click trigger",
        "scenario": "basic",
        "code": "/**\n * cn - 触发方式\n *    -- Select 通过`trigger`属性设置面板的打开方式。设置为`hover`时，鼠标移入时触发，默认为点击触发\n * en - Trigger\n *    -- Set the trigger property to set the way the panel opens. Set to `hover` to trigger on mouse enter, default click trigger\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nimport { primitiveData } from './static/mock';\n\nexport default () => {\n  return (\n    <div>\n      <Select\n        width={300}\n        trigger='hover'\n        clearable\n        data={primitiveData}\n        keygen\n        placeholder='Hover Me & Select Color'\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "tip",
        "description": "test tip",
        "scenario": "basic",
        "code": "/**\n * cn - tip\n *    -- test tip\n * en - tip\n *    -- test tip\n */\nimport React from 'react';\nimport { Select } from 'shineout';\nimport { primitiveData } from './static/mock';\n\nexport default () => {\n  return (\n    <div>\n      <Select tip='i am a tip' width={300} data={primitiveData} keygen placeholder='Select Color' />\n      <Select status='error' width={300} data={primitiveData} keygen placeholder='Select Color' />\n      <Select\n        error={'error'}\n        popover\n        width={300}\n        data={primitiveData}\n        keygen\n        placeholder='Select Color'\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "empty",
        "description": "test empty",
        "scenario": "basic",
        "code": "/**\n * cn - empty\n *    -- test empty\n * en - empty\n *    -- test empty\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nconst options = [\n  { id: 0, name: 'zero' },\n  { id: 1, name: 'red' },\n  { id: 2, name: 'blue' },\n  { id: 3, name: 'yellow' },\n  { id: 4, name: 'green' },\n  { id: 5, name: 'black' },\n  { id: 6, name: 'white' },\n]\n\nexport default () => {\n  return (\n    <div>\n      <Select\n        width={300}\n        data={options}\n        keygen=\"id\"\n        // multiple\n        // renderItem=\"name\"\n        renderItem={item => <span>\n          <span style={{background: 'green', color: '#fff', marginRight: 8}}>通过</span>\n          {item.name}\n        </span>}\n        placeholder='Select Color'\n        onFilter={text => (item) => item.name.indexOf(text) > -1}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "maxLength",
        "description": "Set `maxLength` property can limit the length of the input filter characters",
        "scenario": "basic",
        "code": "/**\n * cn - 限制过滤字符长度\n *    -- 设置`maxLength`属性可以限制输入过滤字符的长度\n * en - maxLength\n *    -- Set `maxLength` property can limit the length of the input filter characters\n */\nimport React from 'react';\nimport { Select, TYPE } from 'shineout';\n\ntype SelectProps = TYPE.Select.Props<string, string>;\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  const handleFilter: SelectProps['onFilter'] = (v) => (d) => d.indexOf(v) >= 0;\n\n  return (\n    <div>\n      <Select\n        maxLength={2}\n        width={300}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        onFilter={handleFilter}\n        clearable\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Tree data auto adapt dropdown width",
        "description": "* en - Tree data auto adapt dropdown width",
        "scenario": "basic",
        "code": "/**\n * cn - 树形数据自动撑宽下拉框容器\n *    --\n * en - Tree data auto adapt dropdown width\n *    --\n */\nimport React from 'react';\nimport { Select, TYPE } from 'shineout';\n\ntype SelectProps = TYPE.Select.Props<DataItem, string>;\n\ntype DataItem = {\n  id: string;\n  title: string;\n  children?: DataItem[];\n};\n\nexport default () => {\n  const treeData: SelectProps['treeData'] = [\n    {\n      id: '1',\n      title: 'node 1',\n      children: [\n        {\n          id: '1-1',\n          title: 'node 1-1',\n          children: [\n            {\n              id: '1-1-1',\n              title: 'node 1-1-1',\n              // 模拟嵌套深度为10层的树形数据，重复嵌套children\n              children: [\n                {\n                  id: '1-1-1-1',\n                  title: 'node 1-1-1-1',\n                  children: [\n                    {\n                      id: '1-1-1-1-1',\n                      title: 'node 1-1-1-1-1',\n                      children: [\n                        {\n                          id: '1-1-1-1-1-1',\n                          title: 'node 1-1-1-1-1-1',\n                          children: [\n                            {\n                              id: '1-1-1-1-1-1-1',\n                              title: 'node 1-1-1-1-1-1-1',\n                              children: [\n                                {\n                                  id: '1-1-1-1-1-1-1-1',\n                                  title: 'node 1-1-1-1-1-1-1-1',\n                                  children: [\n                                    {\n                                      id: '1-1-1-1-1-1-1-1-1',\n                                      title: 'node 1-1-1-1-1-1-1-1-1',\n                                      children: [\n                                        {\n                                          id: '1-1-1-1-1-1-1-1-1-1',\n                                          title: 'node 1-1-1-1-1-1-1-1-1-1',\n                                          children: [\n                                            {\n                                              id: '1-1-1-1-1-1-1-1-1-1-1',\n                                              title: 'node 1-1-1-1-1-1-1-1-1-1-1',\n                                              children: [\n                                                {\n                                                  id: '1-1-1-1-1-1-1-1-1-1-1-1',\n                                                  title: 'node 1-1-1-1-1-1-1-1-1-1-1-1',\n                                                },\n                                              ],\n                                            },\n                                          ],\n                                        },\n                                      ],\n                                    },\n                                  ],\n                                },\n                              ],\n                            },\n                          ],\n                        },\n                      ],\n                    },\n                  ],\n                },\n              ],\n            },\n            { id: '1-1-2', title: 'node 1-1-2' },\n          ],\n        },\n        { id: '1-2', title: 'node 1-2' },\n      ],\n    },\n    {\n      id: '2',\n      title: 'node 2',\n    },\n    { id: '3', title: 'node 3', children: [{ id: '3-1', title: 'node 3-1' }] },\n    { id: '4', title: 'node 4' },\n  ];\n\n  const prediction: SelectProps['prediction'] = (v, d) => v === d.id;\n\n  const renderItem: SelectProps['renderItem'] = (d) => d.title;\n\n  const [value, setValue] = React.useState<string | undefined>('1');\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        bottom: 100,\n        right: 50,\n      }}\n    >\n      <Select\n        width={260}\n        childrenKey='children'\n        treeData={treeData}\n        keygen='id'\n        format='id'\n        placeholder='Select Color'\n        prediction={prediction}\n        renderItem={renderItem}\n        clearable\n        autoAdapt\n        // expanded={['1', '1-1', '1-1-1', '1-1-1-1', '1-1-1-1-1']}\n        value={value}\n        onChange={setValue}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "open control",
        "description": "Set `open` to control the open state of the Select",
        "scenario": "basic",
        "code": "/**\n * cn - open受控\n * en - open control\n *    -- Set `open` to control the open state of the Select\n */\nimport React, { useState } from 'react';\nimport { Select } from 'shineout';\n\nconst defaultData = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n\nexport default () => {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState([])\n  const [data, setData] = useState<string[]>(['123']);\n\n  const handleAppend = () => {\n    setTimeout(() => {\n      setData(defaultData);\n    }, 3000);\n  };\n\n  const addMore = (\n    <div\n      style={{\n        height: 32,\n        backgroundColor: '#197AFA',\n        color: '#ffffff',\n        padding: '5px 12px',\n        boxSizing: 'border-box',\n      }}\n      onClick={handleAppend}\n    >\n      + add\n    </div>\n  );\n\n  return (\n    <div style={{ display: 'flex', gap: '24px', flexWrap: 'wrap' }}>\n      <Select\n        keygen\n        open={open}\n        onCollapse={setOpen}\n        value={value}\n        onChange={(v) => setValue(v)}\n        multiple\n        onFilter={text => item => item.indexOf(text) >= 0}\n        width={300}\n        clearable\n        data={data}\n        placeholder='Select Color'\n        renderOptionList={(s) => (\n          <div>\n            {addMore}\n            {/* <input type='text' placeholder='input' /> */}\n            <div>{s}</div>\n            {/* {addMore} */}\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {
      "cn": "当 data 为对象数组时，必须正确配置以下属性以确保组件正常工作：\\n1. keygen（必需）：指定唯一标识，避免 React 渲染错误\\n2. format（推荐）：定义 value 的格式，如 format=\\\"id\\\" 将使用对象的 id 属性作为值\\n3. prediction（可选）：当数据源会重新生成时使用，解决对象引用变化导致的匹配失败。如果不设置 format，强烈建议设置 prediction 来确保对象匹配的准确性\\n4. renderItem/renderResult（推荐）：自定义显示内容，避免显示 [object Object]\\n\\n重要提示：format 只影响 value 格式，不影响 renderItem 和 renderResult 的显示内容",
      "en": "When data is an object array, the following properties must be configured correctly:\\n1. keygen (required): Specify unique identifier to avoid React rendering errors\\n2. format (recommended): Define value format, e.g., format=\\\"id\\\" uses object\\\"s id property as value\\n3. prediction (optional): Use when data source regenerates to solve matching failures due to reference changes. If format is not set, it\\\"s strongly recommended to set prediction for accurate object matching\\n4. renderItem/renderResult (recommended): Customize display content to avoid showing [object Object]\\n\\nImportant: format only affects value format, not the display content of renderItem and renderResult"
    },
    "apiSummary": {
      "totalProps": 86,
      "requiredProps": 1,
      "propsWithWhen": 70,
      "examplesCount": 34
    }
  },
  "Skeleton": {
    "name": "Skeleton",
    "description": "在页面没有加载出真实内容时，给页面提供一个大致结构的占位图形组合",
    "category": "other",
    "importPath": "import { Skeleton } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "animation",
        "type": "boolean",
        "required": false,
        "description": "是否开启动画效果"
      },
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "description": "是否加载中，为true时，显示骨架屏"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "真实内容"
      },
      {
        "name": "text",
        "type": "boolean | SkeletonTextProps",
        "required": false,
        "description": "是否显示文本或段落"
      },
      {
        "name": "image",
        "type": "boolean | SkeletonImageProps",
        "required": false,
        "description": "是否显示图片"
      },
      {
        "name": "button",
        "type": "boolean | SkeletonButtonProps",
        "required": false,
        "description": "是否显示按钮"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Set `loading` to true to enable loading state",
        "scenario": "basic",
        "code": "/**\n* cn - 基本用法\n*    -- 设置 `loading` 为true，开启加载状态\n* en - Basic\n*    -- Set `loading` to true to enable loading state\n */\nimport { Skeleton } from 'shineout';\n\nexport default () => {\n  return (\n    <Skeleton loading>\n      <div>\n        I am the content after loading. I am the content after loading. I am the content after loading.\n      </div>\n    </Skeleton>\n  );\n};\n"
      },
      {
        "title": "animation",
        "description": "Set `animation` to true to enable animation",
        "scenario": "basic",
        "code": "/**\n* cn - 动画\n*    -- 设置 `animation` 为true，开启动画效果\n* en - animation\n*    -- Set `animation` to true to enable animation\n */\nimport React from 'react';\nimport { Skeleton, Switch } from 'shineout';\n\nexport default () => {\n  const [animation, setAnimation] = React.useState(true);\n  return (\n    <>\n      <Switch value={animation} onChange={setAnimation} style={{ marginBottom: 24 }} />\n      <Skeleton loading animation={animation} text={{ rows: 5, width: '70%' }} image button={{ count: 2 }}>\n        <div>\n          I am the content after loading. I am the content after loading. I am the content after loading.\n        </div>\n      </Skeleton>\n    </>\n  );\n};\n"
      },
      {
        "title": "Different elements",
        "description": "Configure different `text`, `image` and `button` properties to render different elements",
        "scenario": "basic",
        "code": "/**\n* cn - 不同元素\n*    -- 配置不同的 `text`，`image` 和 `button` 属性来渲染不同的元素\n* en - Different elements\n*    -- Configure different `text`, `image` and `button` properties to render different elements\n */\nimport React from 'react';\nimport { Skeleton } from 'shineout';\n\nconst style = {\n  marginTop: 32,\n  marginBottom: 16,\n}\n\nexport default () => {\n  return (\n    <div>\n      <p style={{marginBottom: 16}}>文本</p>\n      <Skeleton loading text={{ rows: 1 }}>I am the content after loading. </Skeleton>\n\n      <p style={style}>段落</p>\n      <Skeleton loading text={{ rows: 3, width: '70%' }}>I am the content after loading. </Skeleton>\n\n      <p style={style}>头像</p>\n      <Skeleton loading text={false} image={{ size: 'large' }}>I am the content after loading. </Skeleton>\n\n      <p style={style}>图片</p>\n      <Skeleton loading text={false} image={{ shape: 'square', size: 'large' }}>I am the content after loading. </Skeleton>\n\n      <p style={style}>按钮</p>\n      <Skeleton loading text={false} button>I am the content after loading. </Skeleton>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Combination usage",
        "description": "A placeholder effect that combines multiple elements such as images, text, buttons, and avatars",
        "scenario": "basic",
        "code": "/**\n* cn - 组合用法\n*    -- 包含图片、文字、按钮、头像等多种元素组合在一起的占位效果\n* en - Combination usage\n*    -- A placeholder effect that combines multiple elements such as images, text, buttons, and avatars\n */\nimport React from 'react';\nimport { Skeleton } from 'shineout';\n\nconst style = {\n  marginTop: 32,\n  marginBottom: 16,\n}\n\nexport default () => {\n  return (\n    <div>\n      <p style={{marginBottom: 16}}>头像 + 文本</p>\n      <Skeleton loading text={{rows: 5, width: '70%'}} image={{size: 'large'}} style={{marginBottom: 32}}>I am the content after loading. </Skeleton>\n      <Skeleton loading text={{rows: 3, width: '70%'}} image={{size: 'large'}}>I am the content after loading. </Skeleton>\n\n      <p style={style}>图片 + 文本 + 按钮</p>\n      <Skeleton loading text={{rows: 5, width: '70%'}} image={{ shape: 'square', size: 'large' }} style={{marginBottom: 32}}>I am the content after loading. </Skeleton>\n      <Skeleton loading text={{rows: 5, width: '70%'}} image={{ shape: 'square', size: 'large' }} button={{count: 2}}>I am the content after loading. </Skeleton>\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 8,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 4
    }
  },
  "Slider": {
    "name": "Slider",
    "description": "滑动型输入器，帮助用户在连续或间断的区间内，通过滑动来选择一个数值或范围数值的控件",
    "category": "other",
    "importPath": "import { Slider } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "valueTipType",
        "type": "\"always\" | \"hover\"",
        "required": false,
        "defaultValue": "\\\"always\\\"",
        "description": "展示当前值的方式,默认为常驻展示"
      },
      {
        "name": "autoHide",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否自动隐藏当前值和刻度"
      },
      {
        "name": "formatScale",
        "type": "false | ((value: number, index?: number ) => string | number)",
        "required": false,
        "defaultValue": "v => v",
        "description": "格式化显示刻度，为 false 时，不显示刻度"
      },
      {
        "name": "formatValue",
        "type": "false | ((value: number) => string)",
        "required": false,
        "defaultValue": "v => v",
        "description": "格式化显示当前值，为 false 时，不显示当前值"
      },
      {
        "name": "height",
        "type": "number",
        "required": false,
        "defaultValue": "200",
        "description": "高度，仅在 vertical 为 true 情况下有效"
      },
      {
        "name": "onChange",
        "type": "((value: Value) => void)",
        "required": false,
        "description": "值改变时回调函数"
      },
      {
        "name": "scale",
        "type": "number[]",
        "required": false,
        "defaultValue": "[0, 100]",
        "description": "取值范围，长度 >= 2 的数组"
      },
      {
        "name": "step",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "步长，必须大于等于0；为0时，只能选取 scale 指定的值"
      },
      {
        "name": "value",
        "type": "number | number[]",
        "required": false,
        "description": "当前值"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认值"
      },
      {
        "name": "vertical",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否垂直"
      },
      {
        "name": "range",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示双滑块"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用组件"
      },
      {
        "name": "onIncrease",
        "type": "(() => void)",
        "required": false,
        "description": "拖动超过最大值事件"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "The basic usage",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的用法\n * en - Base\n *    -- The basic usage\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => <Slider defaultValue={50} />;\n\nexport default App;\n"
      },
      {
        "title": "Range",
        "description": "Set the range property to display double sliders, and value is an array of length 2",
        "scenario": "basic",
        "code": "/**\n * cn - 范围选择\n *    -- 设置 range 属性显示为双滑块，输入(返回)值为长度为 2 的数组\n * en - Range\n *    -- Set the range property to display double sliders, and value is an array of length 2\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => <Slider range defaultValue={[25, 75]} />;\n\nexport default App;\n"
      },
      {
        "title": "Scale",
        "description": "Set the scale property to customize the interval",
        "scenario": "basic",
        "code": "/**\n * cn - 区间\n *    -- 设置 scale 属性可以自定义区间\n * en - Scale\n *    -- Set the scale property to customize the interval\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => <Slider scale={[0, 10, 100, 250, 500, 1000]} />;\n\nexport default App;\n"
      },
      {
        "title": "Input",
        "description": "change with number input",
        "scenario": "basic",
        "code": "/**\n * cn - 带输入框\n *    -- 和数组输入框保持同步\n * en - Input\n *    -- change with number input\n */\nimport React, { useState } from 'react';\nimport { Slider, Input } from 'shineout';\n\nconst container: React.CSSProperties = {\n  display: 'flex',\n  alignItems: 'center',\n};\n\nconst slider: React.CSSProperties = {\n  flex: 1,\n  marginInlineEnd: 16,\n};\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<number | undefined>(50);\n\n  return (\n    <div style={container}>\n      <Slider value={value} onChange={(n) => setValue(n)} style={slider} />\n      <Input.Number\n        digits={0}\n        width={100}\n        max={100}\n        min={0}\n        value={value}\n        onChange={(n) => {\n          if (n === '') {\n            setValue(undefined);\n          } else {\n            setValue(Number(n || 0));\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Format",
        "description": "Set the formatScale property to customize the display scale",
        "scenario": "form",
        "code": "/**\n * cn - 格式化\n *    -- 通过 formatScale 属性自定义刻度显示信息\n *    -- 通过 formatValue 属性自定义值显示信息\n * en - Format\n *    -- Set the formatScale property to customize the display scale\n *    -- Set the formatValue property to customize the display value\n */\nimport React from 'react';\nimport { Slider, TYPE } from 'shineout';\n\ntype SliderProps = TYPE.Slider.Props<number[]>;\ntype SliderFormatValue = SliderProps['formatValue'];\n\nconst pad = (i: number) => (i < 10 ? `0${i}` : i);\n\nconst format: SliderFormatValue = (v: number) => {\n  const value = v + 540;\n  const hours = Math.floor(value / 60);\n  return `${pad(hours)}:${pad(value - hours * 60)}`;\n};\n\nconst App: React.FC = () => (\n  <Slider\n    range\n    formatScale={format}\n    formatValue={format}\n    defaultValue={[33, 216]}\n    scale={[0, 60, 120, 180, 240, 300, 360, 420, 480, 540]}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Step",
        "description": "Set the step property to define the step size of the drag and the default value is 1",
        "scenario": "basic",
        "code": "/**\n * cn - 步长\n *    -- 设置 step 属性，定义拖动的步长，默认为 1\n * en - Step\n *    -- Set the step property to define the step size of the drag and the default value is 1\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => <Slider step={0.05} range defaultValue={[0.05, 0.25]} scale={[0, 1]} />;\n\nexport default App;\n"
      },
      {
        "title": "*    -- When the step is set to 0, only the value defined in scale can be taken",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- step 设定为 0 时，只能取 scale 内定义的值\n * en -\n *    -- When the step is set to 0, only the value defined in scale can be taken\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => (\n  <Slider\n    step={0}\n    scale={[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Hide value",
        "description": "When then autoHide property is true, automatically hide current values and scales",
        "scenario": "basic",
        "code": "/**\n * cn - 隐藏信息\n *    -- autoHide 选项为 true 时，自动隐藏当前值和刻度\n * en - Hide value\n *    -- When then autoHide property is true, automatically hide current values and scales\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => (\n  <Slider autoHide defaultValue={4} scale={[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]} step={1} />\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- Set formatValue and fotmatScale to false to hide the scale and current values completely",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 如果要彻底不显示刻度和当前值，设置 formatValue 和 fotmatScale 为 false\n * en -\n *    -- Set formatValue and fotmatScale to false to hide the scale and current values completely\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => (\n  <Slider defaultValue={4} step={1} formatValue={false} formatScale={false} />\n);\n\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "Set the disabled property to disable the component",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用\n *    -- 设置 disabled 属性，禁用组件\n * en - Disabled\n *    -- Set the disabled property to disable the component\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => <Slider range disabled defaultValue={[25, 75]} />;\n\nexport default App;\n"
      },
      {
        "title": "Vertical",
        "description": "Set the vertical property to change the component vertical",
        "scenario": "basic",
        "code": "/**\n * cn - 垂直\n *    -- 设置 vertical 属性，修改组件为垂直方向\n * en - Vertical\n *    -- Set the vertical property to change the component vertical\n */\nimport React from 'react';\nimport { Slider, TYPE } from 'shineout';\n\ntype SliderProps = TYPE.Slider.Props<number | number[]>;\ntype SliderFormatScale = SliderProps['formatScale'];\n\nconst App: React.FC = () => {\n  const formatTemp: SliderFormatScale = (v: number) => `${v}℃`;\n\n  return (\n    <div>\n      <Slider vertical defaultValue={50} />\n      <Slider range vertical defaultValue={[12, 70]} />\n      <Slider\n        vertical\n        defaultValue={18}\n        scale={[0, 20, 40, 60, 100]}\n        formatValue={false}\n        formatScale={formatTemp}\n      />\n      <Slider autoHide range vertical defaultValue={[12, 70]} />\n      <Slider disabled range vertical defaultValue={[12, 70]} />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "onIncrease",
        "description": "can increase the maximum infinitely while dragging",
        "scenario": "basic",
        "code": "/**\n * cn - 增长\n *    -- 允许拖动到最右边的时候进行增长\n * en - onIncrease\n *    -- can increase the maximum infinitely while dragging\n */\nimport React, { useState } from 'react';\nimport { Slider, TYPE } from 'shineout';\n\ntype SliderProps = TYPE.Slider.Props<number | number[]>;\ntype SliderScale = SliderProps['scale'];\ntype SliderOnIncrease = SliderProps['onIncrease'];\n\nconst App: React.FC = () => {\n  const [scale1, setScale1] = useState<SliderScale>([0, 100]);\n  const [scale2, setScale2] = useState<SliderScale>([0, 100]);\n\n  const onIncrease1: SliderOnIncrease = () => setScale1([0, scale1![1] + 1]);\n  const onIncrease2: SliderOnIncrease = () => setScale2([0, scale2![1] + 5]);\n\n  return (\n    <div>\n      <Slider\n        scale={scale1}\n        defaultValue={50}\n        onIncrease={onIncrease1}\n        style={{ marginBottom: '24px' }}\n      />\n      <Slider range scale={scale2} defaultValue={[20, 50]} onIncrease={onIncrease2} />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "HoverTip",
        "description": "Set tipType to hover, the current value is displayed when the mouse is hovered",
        "scenario": "basic",
        "code": "/**\n * cn - 悬浮提示\n *    -- 设置 tipType 为 hover，鼠标悬浮时显示当前值\n * en - HoverTip\n *    -- Set tipType to hover, the current value is displayed when the mouse is hovered\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => <div>\n  <Slider defaultValue={50} valueTipType='hover' />\n\n  <Slider defaultValue={50} valueTipType='hover' disabled />\n</div>;\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 22,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 13
    }
  },
  "Spin": {
    "name": "Spin",
    "description": "用于页面和区块的加载中状态 至 页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑",
    "category": "other",
    "importPath": "import { Spin } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "tipClassName",
        "type": "string",
        "required": false,
        "description": "tip 文案上的 className"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "作为包裹元素使用"
      },
      {
        "name": "tip",
        "type": "ReactNode",
        "required": false,
        "description": "提示文案"
      },
      {
        "name": "size",
        "type": "string | number",
        "required": false,
        "defaultValue": "40",
        "description": "尺寸"
      },
      {
        "name": "name",
        "type": "| \"default\" | \"chasing-dots\" | \"cube-grid\" | \"double-bounce\" | \"fading-circle\" | \"four-dots\" | \"plane\" | \"pulse\" | \"ring\" | \"scale-circle\" | \"three-bounce\" | \"wave\" | \"chasing-ring\"",
        "required": false,
        "description": "类型"
      },
      {
        "name": "color",
        "type": "string",
        "required": false,
        "description": "颜色"
      },
      {
        "name": "mode",
        "type": "\"vertical\" | \"horizontal\"",
        "required": false,
        "defaultValue": "\\\"vertical\\\"",
        "description": "布局模式"
      },
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否为加载中"
      },
      {
        "name": "ignoreConfig",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "内部属性，是否忽略全局配置"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Basic Spin usage",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基础 Spin 用法\n * en - Basic\n *    -- Basic Spin usage\n */\nimport React from 'react';\nimport { Spin } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 20 }}>\n      <Spin name=\"ring\" size={16} />\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Set different animation effects by configuring `name`, and set animation size by configuring `size`",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 通过配置 `name` ，可以设置不同的动画效果, 通过配置 `size` 可以设置动画大小\n * en -\n *    -- Set different animation effects by configuring `name`, and set animation size by configuring `size`\n */\nimport React from 'react';\nimport { Spin } from 'shineout';\n\nexport default () => {\n  const names1 = [\n    // 'default',\n    'chasing-dots',\n    'cube-grid',\n    'double-bounce',\n    'fading-circle',\n    'four-dots',\n    'plane',\n  ];\n\n  const names2 = ['pulse', 'ring', 'scale-circle', 'three-bounce', 'wave', 'chasing-ring'];\n\n  const renderTip = (name: string) => {\n    return (\n      <span style={{ fontSize: 12, lineHeight: '20px', display: 'inline-block' }}>\n        {name}\n      </span>\n    );\n  };\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <div style={{ display: 'flex', flexWrap: 'nowrap', gap: 65, marginBottom: 32 }}>\n        {names1.map((name, index) => (\n          <div key={index} style={{ width: '16%' }}>\n            <Spin name={name as any} size={16} tip={renderTip(name)} />\n          </div>\n        ))}\n      </div>\n      <div style={{ display: 'flex', flexWrap: 'nowrap', gap: 65 }}>\n        {names2.map((name, index) => (\n          <div key={index} style={{ width: '16%' }}>\n            <Spin key={index} name={name as any} size={16} tip={renderTip(name)} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Basic",
        "description": "After setting the `tip` text, you can use the `mode` property to set the layout mode: horizontal or vertical",
        "scenario": "basic",
        "code": "/**\n * cn - 布局模式\n *    -- 在设置 `tip` 文案后，可以通过配置 `mode` 实现不同的布局模式：horizontal 水平布局、vertical 垂直布局\n * en - Basic\n *    -- After setting the `tip` text, you can use the `mode` property to set the layout mode: horizontal or vertical\n */\nimport React from 'react';\nimport { Spin } from 'shineout';\n\nexport default () => {\n  const renderTip = () => {\n    return <span style={{ fontSize: 12 }}>Loading...</span>;\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 24 }}>\n      <div style={{ width: 100 }}>\n        <Spin name='ring' size={16} mode='vertical' tip={renderTip()} />\n      </div>\n      <div style={{ width: 100 }}>\n        <Spin name='ring' size={16} mode='horizontal' tip={renderTip()} />\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Wrapper",
        "description": "Spin can be used as a container, just wrap it in the outer layer",
        "scenario": "basic",
        "code": "/**\n * cn - 对容器使用\n *    -- Spin 可以当作容器使用，只需将它包裹在外层即可\n * en - Wrapper\n *    -- Spin can be used as a container, just wrap it in the outer layer\n */\nimport React, { useEffect } from 'react';\nimport { Spin } from 'shineout';\n\nexport default () => {\n  const [loading, setLoading] = React.useState(false);\n  useEffect(() => {\n    setLoading(true);\n  }, []);\n  return (\n    <Spin\n      size={20}\n      tip={<span style={{ fontSize: 14 }}>loading...</span>}\n      name='ring'\n      mode='vertical'\n      loading={loading}\n    >\n      <div\n        style={{\n          width: '100%',\n          fontWeight: 300,\n          border: '1px solid #E8EBF0',\n          padding: 16,\n          boxSizing: 'border-box',\n        }}\n      >\n        <p\n          style={{\n            width: '20%',\n            height: 18,\n            background: '#E8EBF0',\n            borderRadius: 2,\n            marginBottom: 16,\n          }}\n        ></p>\n        <p\n          style={{\n            width: '100%',\n            height: 18,\n            borderRadius: 2,\n            background: '#E8EBF0',\n            marginBottom: 16,\n          }}\n        ></p>\n        <p style={{ width: '100%', height: 18, borderRadius: 2, background: '#E8EBF0' }}></p>\n      </div>\n    </Spin>\n  );\n};\n"
      },
      {
        "title": "Tip",
        "description": "Set the `tip` property to customize the text",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义文案\n *    -- 通过配置 `tip` 属性来自定义文案\n * en - Tip\n *    -- Set the `tip` property to customize the text\n */\nimport React from 'react';\nimport { Spin } from 'shineout';\n\nexport default () => {\n  const renderTip = () => {\n    return <div style={{ fontSize: 14 }}>This may take a while...</div>;\n  };\n  return (\n    <div style={{ width: 200 }}>\n      <Spin name='ring' size={24} tip={renderTip()} />\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 11,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 5
    }
  },
  "Steps": {
    "name": "Steps",
    "description": "提示用户进度以及当前的步骤，用于引导用户按照步骤完成任务的导航条",
    "category": "navigation",
    "importPath": "import { Steps } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": true,
        "description": "子元素"
      },
      {
        "name": "direction",
        "type": "\"horizontal\" | \"vertical\"",
        "required": false,
        "defaultValue": "\\\"horizontal\\\"",
        "description": "步骤条方向"
      },
      {
        "name": "type",
        "type": "\"default\" | \"dot\" | \"arrow\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "节点样式类型"
      },
      {
        "name": "labelPlacement",
        "type": "\"horizontal\" | \"vertical\"",
        "required": false,
        "defaultValue": "\\\"vertical\\\"",
        "description": "标签描述文字放置的位置"
      },
      {
        "name": "status",
        "type": "\"wait\" | \"process\" | \"finish\" | \"error\"",
        "required": false,
        "description": "当前步数节点状态"
      },
      {
        "name": "current",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "当前步数"
      },
      {
        "name": "renderIcon",
        "type": "((index: number, status?: \"wait\" | \"process\" | \"finish\" | \"error\" ) => ReactNode)",
        "required": false,
        "description": "自定义节点图标"
      },
      {
        "name": "onChange",
        "type": "((index: number) => void)",
        "required": false,
        "description": "步骤切换的回调,配置该属性可让步骤条可点击"
      },
      {
        "name": "disabled",
        "type": "boolean | ((index: number, id: any) => boolean)",
        "required": false,
        "description": "当前步骤节点是否被禁用，支持传入函数进行判断。优先级低于 Step 上的 disabled"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Basic steps",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 步骤条基础用法\n * en - Basic\n *    -- Basic steps\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps current={1}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Size",
        "description": "Steps support three sizes: small, default, large",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 步骤条支持三种尺寸small、default、large\n * en - Size\n *    -- Steps support three sizes: small, default, large\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps size='small' current={1} style={{ marginBottom: 32 }}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n      <Steps current={1} style={{ marginBottom: 32 }}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n      <Steps size='large' current={1}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Description",
        "description": "Set description by `description` property",
        "scenario": "basic",
        "code": "/**\n * cn - 描述信息\n *    -- 通过配置`description`属性可以设置步骤条的描述信息\n * en - Description\n *    -- Set description by `description` property\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps current={1}>\n        <Steps.Step title='Succeeded' description='This is a description' />\n        <Steps.Step title='Processing' description='This is a description' />\n        <Steps.Step title='Pending' description='This is a description' />\n      </Steps>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Status",
        "description": "Set step status by `status` property",
        "scenario": "basic",
        "code": "/**\n * cn - 节点状态\n *    -- 通过指定`status`属性可以设置步骤条节点的状态\n *    -- 注意，step 的 status 优先级高于 steps 的 status\n * en - Status\n *    -- Set step status by `status` property\n *    -- Note that the status of the step has a higher priority than the status of the steps\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps current={1}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Error' status='error' />\n        <Steps.Step title='Pending' />\n      </Steps>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Custom icon",
        "description": "Set custom icon by `renderIcon` property",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义图标\n *    -- 通过`renderIcon`属性可以自定义渲染步骤条节点的图标\n * en - Custom icon\n *    -- Set custom icon by `renderIcon` property\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\nimport { successIcon, warningIcon, iconWait } from './static/icon';\n\nexport default () => {\n  const renderIcon = (index: number, status: any) => {\n    if (status === 'wait') {\n      return iconWait;\n    }\n    if (status === 'finish') {\n      return successIcon;\n    }\n    if (status === 'process') {\n      return warningIcon;\n    }\n    return index + 1;\n  };\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <Steps current={1} renderIcon={renderIcon}>\n        <Steps.Step title='Step1' />\n        <Steps.Step title='Step2' />\n        <Steps.Step title='Step3' />\n        <Steps.Step title='Step4' />\n      </Steps>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Type",
        "description": "Set different style of steps by `type` property",
        "scenario": "basic",
        "code": "/**\n * cn - 不同风格的步骤条\n *    -- 通过`type`属性可以设置不同风格的步骤条\n * en - Type\n *    -- Set different style of steps by `type` property\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <div style={{ width: 500 }}>\n        <Steps current={1} type='dot' style={{ marginBottom: 32 }}>\n          <Steps.Step title='Succeeded' />\n          <Steps.Step title='Complete information' />\n          <Steps.Step title='Pending' />\n        </Steps>\n        <Steps current={1} type='dot' style={{ marginBottom: 32 }}>\n          <Steps.Step title='Succeeded' description='This is a description' />\n          <Steps.Step\n            title='Complete information'\n            description='Please fill in your home address and phone number'\n          />\n          <Steps.Step title='Pending' description='This is a description' />\n        </Steps>\n      </div>\n      <div style={{ minWidth: 700 }}>\n        <Steps current={1} type='arrow' style={{ marginBottom: 32 }}>\n          <Steps.Step title='Succeeded' />\n          <Steps.Step title='Complete information' />\n          <Steps.Step title='Pending' />\n        </Steps>\n        <Steps current={1} type='arrow'>\n          <Steps.Step title='Succeeded' description='This is a description' />\n          <Steps.Step\n            title='Complete information'\n            description='Please fill in your home address and phone number'\n          />\n          <Steps.Step title='Pending' description='This is a description' />\n        </Steps>\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Direction",
        "description": "Set direction by `direction` property",
        "scenario": "basic",
        "code": "/**\n * cn - 垂直布局\n *    -- 通过`direction`属性可以设置步骤条的布局方向\n * en - Direction\n *    -- Set direction by `direction` property\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <div\n        style={{ width: 500, display: 'flex', gap: 32, marginBottom: 24, alignItems: 'flex-start' }}\n      >\n        <Steps current={1} direction='vertical'>\n          <Steps.Step title='Succeeded' />\n          <Steps.Step title='Processing' />\n          <Steps.Step title='Pending' />\n        </Steps>\n        <Steps current={1} direction='vertical'>\n          <Steps.Step title='Succeeded' description='This is a description' />\n          <Steps.Step title='Processing' description='This is a description' />\n          <Steps.Step title='Pending' description='This is a description' />\n        </Steps>\n      </div>\n\n      <div style={{ width: 500, display: 'flex', gap: 32, alignItems: 'flex-start' }}>\n        <Steps current={1} type='dot' direction='vertical'>\n          <Steps.Step title='Succeeded' />\n          <Steps.Step title='Processing' />\n          <Steps.Step title='Pending' />\n        </Steps>\n\n        <Steps current={1} type='dot' direction='vertical'>\n          <Steps.Step title='Succeeded' description='This is a description' />\n          <Steps.Step title='Processing' description='This is a description' />\n          <Steps.Step title='Pending' description='This is a description' />\n        </Steps>\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Label placement",
        "description": "Set the position of the label by `labelPlacement` property",
        "scenario": "basic",
        "code": "/**\n * cn - 标签位置\n *    -- 默认样式的步骤条支持通过设置`labelPlacement`属性可以设置标签的位置\n * en - Label placement\n *    -- Set the position of the label by `labelPlacement` property\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps current={1} labelPlacement='horizontal'>\n        <Steps.Step title='Succeeded' description='This is a description' />\n        <Steps.Step title='Processing' description='This is a description' />\n        <Steps.Step title='Pending' description='This is a description' />\n      </Steps>\n    </div>\n  );\n};\n"
      },
      {
        "title": "disabled",
        "description": "Set `disabled` property to make steps disabled",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用点击\n *    -- 配置 `disabled` 属性控制步骤条是否禁用点击，支持传入函数\n *    -- Step 的 `disabled` 优先级大于 Steps\n * en - disabled\n *    -- Set `disabled` property to make steps disabled\n */\nimport React, { useState } from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  const [current, setCurrent] = useState(0);\n\n  const renderTitle = (index: number, status: 'wait' | 'process' | 'finish' | 'error') => {\n    if (status === 'finish') return 'Succeeded';\n    if (status === 'process') return 'Processing';\n    if (status === 'wait') return 'Pending';\n    return 'Eerror';\n  };\n\n  const disabled = (index: number) => {\n    if (index < current) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <Steps current={current} onChange={setCurrent} disabled={disabled}>\n        <Steps.Step title={renderTitle} />\n        <Steps.Step title={renderTitle} />\n        <Steps.Step title={renderTitle} />\n      </Steps>\n    </div>\n  );\n};\n"
      },
      {
        "title": "onChange",
        "description": "Set `onChange` property to make steps clickable, and the callback function will be called when the step is clicked, the parameters are the index and status of the current step",
        "scenario": "basic",
        "code": "/**\n * cn - 可点击\n *    -- 配置`onChange`属性可以让步骤条可点击，点击后会触发回调函数，参数为当前步骤的索引和状态\n *    -- 步骤条状态：wait、process、finish、error\n * en - onChange\n *    -- Set `onChange` property to make steps clickable, and the callback function will be called when the step is clicked, the parameters are the index and status of the current step\n */\nimport React, { useState } from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  const [current, setCurrent] = useState(1);\n\n  const renderTitle = (index: number, status: 'wait' | 'process' | 'finish' | 'error') => {\n    if (status === 'finish') return 'Succeeded';\n    if (status === 'process') return 'Processing';\n    if (status === 'wait') return 'Pending';\n    return 'Eerror';\n  };\n\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <Steps current={current} onChange={setCurrent}>\n        <Steps.Step title={renderTitle} />\n        <Steps.Step title={renderTitle} />\n        <Steps.Step title={renderTitle} />\n        <Steps.Step title={renderTitle} />\n        <Steps.Step title={renderTitle} />\n      </Steps>\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 12,
      "requiredProps": 1,
      "propsWithWhen": 0,
      "examplesCount": 10
    },
    "subComponentApis": {}
  },
  "Sticky": {
    "name": "Sticky",
    "description": "Sticky 在屏幕滚动时，保持元素在屏幕可见区域",
    "category": "layout",
    "importPath": "import { Sticky } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "扩展样式。触发浮动后的默认 zIndex 为900，修改 style的 zIndex 来改变。"
      },
      {
        "name": "bottom",
        "type": "number",
        "required": false,
        "description": "距离底部多少偏移量触发"
      },
      {
        "name": "scrollContainer",
        "type": "string | HTMLElement | Element | null",
        "required": false,
        "description": "自定义附着的目标。可以传入 HTMLElement 或者 css selector，target 必须为 Sticky 组件的祖先节点"
      },
      {
        "name": "parent",
        "type": "HTMLElement | null",
        "required": false,
        "description": "sticky 父级元素, 当父元素离开视窗时，sticky 将失效"
      },
      {
        "name": "top",
        "type": "number",
        "required": false,
        "description": "距离顶部多少偏移量触发"
      },
      {
        "name": "css",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否采用 css 方式实现附着效果"
      },
      {
        "name": "onChange",
        "type": "((isSticky: boolean) => void)",
        "required": false,
        "description": "吸附效果时，触发该回调，当使用原生 sticky 时该方法无效"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Sticky 20px to top",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 附着在顶部 20px\n * en - Basic\n *    -- Sticky 20px to top\n */\nimport React, { useRef } from 'react';\nimport { Alert, Sticky } from 'shineout';\n\nconst App: React.FC = () => {\n  const elRef = useRef(null);\n  return (\n    <div\n      ref={elRef}\n      style={{\n        height: 300,\n        backgroundColor: '#f4f5f8',\n        backgroundImage:\n          'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), ' +\n          'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff)',\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 10px 10px',\n      }}\n    >\n      <Sticky\n        top={200}\n        scrollContainer='#layout'\n        parent={elRef.current}\n        onChange={(isStikcy) => {\n          console.log('isStikcy: >>', isStikcy);\n        }}\n      >\n        <Alert>Sticky 200px to top</Alert>\n      </Sticky>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Element",
        "description": "Sticky to element",
        "scenario": "basic",
        "code": "/**\n * cn - 容器内固定\n *    -- 附着在元素内\n * en - Element\n *    -- Sticky to element\n */\nimport React, { useRef } from 'react';\nimport { Alert, Sticky } from 'shineout';\n\nconst App: React.FC = () => {\n  const Element = useRef(null);\n\n  return (\n    <div style={{ position: 'relative', zIndex: 0 }}>\n      <div id='sticky_element' ref={Element} style={{ height: 400, overflow: 'auto' }}>\n        <div\n          style={{\n            height: 1600,\n            backgroundColor: '#f4f5f8',\n            backgroundImage:\n              'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), ' +\n              'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff)',\n            backgroundSize: '20px 20px',\n            backgroundPosition: '0 0, 10px 10px',\n          }}\n        >\n          <div style={{ height: 600 }}></div>\n          <Sticky top={0} bottom={0} scrollContainer='#sticky_element'>\n            <Alert style={{ marginBottom: 0 }} type='info'>\n              Sticky to element\n            </Alert>\n          </Sticky>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Bottom",
        "description": "Sticky to bottom",
        "scenario": "basic",
        "code": "/**\n * cn - 底部固定\n *    -- 附着在底部\n * en - Bottom\n *    -- Sticky to bottom\n */\nimport React, { useRef } from 'react';\nimport { Alert, Sticky } from 'shineout';\n\nconst App: React.FC = () => {\n  const elRef = useRef<HTMLDivElement | null>(null);\n  return (\n    <div\n      ref={elRef}\n      style={{\n        backgroundColor: '#f4f5f8',\n        backgroundImage:\n          'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), ' +\n          'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff)',\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 10px 10px',\n      }}\n    >\n      <div style={{ height: 300 }}></div>\n      <Sticky bottom={0} scrollContainer='#layout' parent={elRef.current}>\n        <Alert style={{ marginBottom: 0 }}>Sticky at bottom.</Alert>\n      </Sticky>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "fixed",
        "description": "When scrollContainer is not passed, use fixed positioning",
        "scenario": "basic",
        "code": "/**\n * cn - fixed\n *    -- 不传 scrollContainer 时，使用 fixe 定位\n * en - fixed\n *    -- When scrollContainer is not passed, use fixed positioning\n */\nimport React, { useRef, useState } from 'react';\nimport { Alert, Sticky, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const elRef = useRef<HTMLDivElement | null>(null);\n  const [left, setLeft] = useState(0);\n  return (\n    <div>\n      <Button onClick={() => setLeft(left + 10)}>Move Right</Button>\n      <div\n        ref={elRef}\n        style={{\n          backgroundColor: '#f4f5f8',\n          backgroundImage:\n            'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), ' +\n            'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff)',\n          backgroundSize: '20px 20px',\n          backgroundPosition: '0 0, 10px 10px',\n        }}\n      >\n        <div style={{ height: 300 }}></div>\n        <Sticky bottom={0}>\n          <Alert style={{ marginBottom: 0, marginLeft: left }}>Sticky at bottom.</Alert>\n        </Sticky>\n        <div style={{ height: 300 }}></div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 9,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 4
    }
  },
  "Switch": {
    "name": "Switch",
    "description": "用于两个互斥选项，用来打开或关闭选项的选择控件",
    "category": "other",
    "importPath": "import { Switch } from 'shineout'",
    "props": [
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": "当前选中状态，checked 传入时为受控组件"
      },
      {
        "name": "onChange",
        "type": "((value: boolean) => void)",
        "required": false,
        "description": "改变回调,Checked 表示选中状态"
      },
      {
        "name": "onClick",
        "type": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void)",
        "required": false,
        "description": "勾选框点击回调"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "inputRef",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "获取input dom"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "content",
        "type": "[ReactNode, ReactNode]",
        "required": false,
        "description": "选中和未选中时的内容"
      },
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "加载中"
      },
      {
        "name": "value",
        "type": "boolean",
        "required": false,
        "description": "Checked 未设置的情况下， checked = value"
      },
      {
        "name": "defaultValue",
        "type": "boolean",
        "required": false,
        "description": "默认值 和 value 类型相同"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "The basic usage",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 最基础的用法\n * en - Base\n *    -- The basic usage\n */\nimport React from 'react';\nimport { Switch } from 'shineout';\n\nconst App: React.FC = () => {\n  return <Switch />;\n};\n\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "Set disabled property to disable the Switch",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用状态\n *    -- 设置 `disabled` 属性, 可以设置禁用状态\n * en - Disabled\n *    -- Set disabled property to disable the Switch\n */\nimport React from 'react';\nimport { Switch } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'row', gap: 24 }}>\n      <Switch value={true} disabled />\n      <Switch value={false} disabled />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Base",
        "description": "Set the size property to adjust the size of the component",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性可以调整组件尺寸\n * en - Base\n *    -- Set the size property to adjust the size of the component\n */\nimport React from 'react';\nimport { Switch } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'row', gap: 24, alignItems: 'center' }}>\n      <Switch size={'small'} />\n      <Switch />\n      <Switch size={'large'} />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Base",
        "description": "Set `loading` property to make Switch loading",
        "scenario": "basic",
        "code": "/**\n * cn - 加载中\n *    -- 设置 `loading` 属性可以让 Switch 处于加载状态\n * en - Base\n *    -- Set `loading` property to make Switch loading\n */\nimport React from 'react';\nimport { Switch } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'row', gap: 24, alignItems: 'center' }}>\n      <Switch loading value />\n      <Switch loading />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Custom content",
        "description": "Customize the text and icon to display when the switch is on (off)",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义文案\n *    -- 自定义开关打开（关闭）时需要显示的文字和图标\n * en - Custom content\n *    -- Customize the text and icon to display when the switch is on (off)\n */\nimport React from 'react';\nimport { Switch } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'row', gap: 24, alignItems: 'center' }}>\n    <Switch size='small' defaultValue content={['ON', 'OFF']} />\n    <Switch defaultValue content={['ON', 'OFF']} />\n    <Switch size='large' defaultValue content={['ON', 'OFF']} />\n  </div>\n);\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 18,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 5
    }
  },
  "Table": {
    "name": "Table",
    "description": "展示行列数据，用于数据收集展示、分析整理、操作处理",
    "category": "other",
    "importPath": "import { Table } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "onCellClick",
        "type": "((data: DataItem, info: { rowIndex: number; columnIndex: number; columnKey: string | number; }) => void)",
        "required": false,
        "description": "单元格点击事件的回调函数。参数：data（行数据），info.rowIndex（行索引），info.columnIndex（列索引），info.columnKey（列的唯一标识）",
        "whenCn": "需要单元格级别的交互（如单元格编辑、详情查看）时使用",
        "whenEn": "Use when cell-level interaction is needed (e.g., cell editing, detail viewing)"
      },
      {
        "name": "scrollLeft",
        "type": "number",
        "required": false,
        "description": "横向滚动位置（仅在虚拟滚动模式下生效）",
        "whenCn": "需要程序化控制横向滚动位置时使用",
        "whenEn": "Use to programmatically control horizontal scroll position"
      },
      {
        "name": "rowHeight",
        "type": "number",
        "required": false,
        "defaultValue": "40",
        "description": "单行的预估高度。用于虚拟滚动的计算和滚动条显示",
        "whenCn": "当行高与默认值差异较大时调整，以优化虚拟滚动性能",
        "whenEn": "Adjust when row height differs significantly from default to optimize virtual scrolling performance"
      },
      {
        "name": "hover",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否启用行的鼠标悬浮高亮效果",
        "whenCn": "设为 false 可在复杂表格或特殊设计需求时禁用悬浮效果",
        "whenEn": "Set to false to disable hover effect for complex tables or special design requirements"
      },
      {
        "name": "empty",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "getLocale(\\\"Data not found\\\")",
        "description": "表格无数据时显示的内容",
        "whenCn": "自定义空数据提示，如添加操作按钮或个性化提示信息",
        "whenEn": "Customize empty state message, e.g., add action buttons or personalized hints"
      },
      {
        "name": "cellSelectable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否启用 Ctrl/Cmd + 点击来选中单元格",
        "whenCn": "需要单元格选择功能（如复制单元格内容）时使用",
        "whenEn": "Use when cell selection is needed (e.g., copying cell content)"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": "表格高度（与 style.height 作用相同）",
        "whenCn": "需要固定表格高度或启用纵向滚动时使用",
        "whenEn": "Use to set fixed table height or enable vertical scrolling"
      },
      {
        "name": "onScroll",
        "type": "((x: number, y: number, left: number, top: number) => void)",
        "required": false,
        "description": "滚动事件回调函数。参数：x（横向滚动比例 0-1），y（纵向滚动比例 0-1），left（横向滚动像素值），top（纵向滚动像素值）",
        "whenCn": "需要监听滚动位置（如同步滚动、懒加载）时使用",
        "whenEn": "Use to monitor scroll position (e.g., synchronized scrolling, lazy loading)"
      },
      {
        "name": "pagination",
        "type": "PaginationProps",
        "required": false,
        "description": "分页配置项。详见 [Pagination](/components/Pagination) 组件文档",
        "whenCn": "数据量较大需要分页显示时使用",
        "whenEn": "Use when large datasets need paginated display"
      },
      {
        "name": "loading",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "false",
        "description": "加载状态。为 true 时显示默认的 [Spin](/components/Spin) 组件，也可传入自定义的加载组件",
        "whenCn": "数据加载中或异步操作时显示加载状态",
        "whenEn": "Show loading state during data fetching or async operations"
      },
      {
        "name": "virtual",
        "type": "boolean | \"lazy\"",
        "required": false,
        "description": "启用虚拟滚动。设置为 \\\"lazy\\\" 可在滚动时避免重新渲染，提升性能",
        "whenCn": "大数据量表格（超过 100 行）时使用以优化性能",
        "whenEn": "Use for large datasets (over 100 rows) to optimize performance"
      },
      {
        "name": "rowsInView",
        "type": "number",
        "required": false,
        "defaultValue": "20",
        "description": "单次渲染的最大行数。使用懒加载优化大数据量性能。若表格超过 20 行，可调整此值。设为 0 渲染全部数据",
        "whenCn": "根据可视区域行数调整以平衡性能和用户体验",
        "whenEn": "Adjust based on visible rows to balance performance and user experience"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "表格尺寸大小",
        "whenCn": "根据内容密度和设计需求选择合适的尺寸",
        "whenEn": "Choose appropriate size based on content density and design requirements"
      },
      {
        "name": "radio",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "启用单选模式（只能选中一行）",
        "whenCn": "需要单选功能（如选择主记录、默认项）时使用",
        "whenEn": "Use when single selection is needed (e.g., selecting primary record, default item)"
      },
      {
        "name": "verticalAlign",
        "type": "\"top\" | \"middle\"",
        "required": false,
        "defaultValue": "\\\"top\\\"",
        "description": "单元格内容的垂直对齐方式",
        "whenCn": "当单元格内容高度不一致时调整对齐方式",
        "whenEn": "Adjust alignment when cell content heights vary"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "原生 tr/td 元素（仅应用样式，不提供功能）",
        "whenCn": "需要使用原生 HTML 表格元素但保留样式时使用",
        "whenEn": "Use when native HTML table elements are needed but want to keep styling"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "表格总宽度。默认为容器宽度，不能小于各列宽度之和",
        "whenCn": "需要固定表格宽度或处理横向滚动时使用",
        "whenEn": "Use to set fixed table width or handle horizontal scrolling"
      },
      {
        "name": "columns",
        "type": "CommonColumn[]",
        "required": false,
        "defaultValue": "[]",
        "description": "列配置数组。详见 Table columns 配置",
        "whenCn": "定义表格的列结构、渲染方式和行为",
        "whenEn": "Define table column structure, rendering and behavior"
      },
      {
        "name": "disabled",
        "type": "boolean | ((d: DataItem) => boolean)",
        "required": false,
        "description": "禁用行选择。为 true 时禁用所有行。为函数时：参数 d 为行数据，返回 true 禁用该行",
        "whenCn": "需要根据条件禁用某些行的选择功能时使用",
        "whenEn": "Use to disable row selection based on conditions"
      },
      {
        "name": "treeEmptyExpand",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "树形表格中，即使节点没有子数据也显示展开按钮",
        "whenCn": "在树形表格中需要动态加载子节点时使用",
        "whenEn": "Use in tree tables when child nodes are loaded dynamically"
      },
      {
        "name": "rowClickAttr",
        "type": "string | boolean | string[]",
        "required": false,
        "defaultValue": "[\\\"*\\\"]",
        "description": "指定哪些元素可以触发行点击。\\\"*\\\" 表示任何元素都可触发，也可指定特定的属性名",
        "whenCn": "需要精确控制行点击触发区域时使用",
        "whenEn": "Use to precisely control which areas trigger row clicks"
      },
      {
        "name": "onRowClick",
        "type": "((rowData: DataItem, index: number, fireAttr?: string | boolean ) => void)",
        "required": false,
        "description": "行点击事件回调。参数：rowData（当前行数据），index（行索引），fireAttr（触发点击的元素属性）",
        "whenCn": "需要响应整行点击（如展开详情、导航）时使用",
        "whenEn": "Use when responding to full row clicks (e.g., expand details, navigation)"
      },
      {
        "name": "striped",
        "type": "boolean",
        "required": false,
        "description": "启用交替行颜色（斑马纹效果）",
        "whenCn": "需要通过视觉区分提高表格可读性时使用",
        "whenEn": "Use to improve table readability through visual distinction"
      },
      {
        "name": "rowClassName",
        "type": "(rowData: DataItem, index: number) => string | undefined",
        "required": false,
        "description": "为每一行设置自定义 CSS 类名。参数：rowData（行数据），index（行索引）。返回类名字符串",
        "whenCn": "需要根据数据状态（如高亮、警告）自定义行样式时使用",
        "whenEn": "Use to customize row styles based on data state (e.g., highlight, warning)"
      },
      {
        "name": "rowEvents",
        "type": "object",
        "required": false,
        "description": "表格行 (tr) 元素的事件处理器集合",
        "whenCn": "需要监听行级别的 DOM 事件（如鼠标悬停、右键菜单）时使用",
        "whenEn": "Use to listen to row-level DOM events (e.g., hover, context menu)"
      },
      {
        "name": "data",
        "type": "object[]",
        "required": false,
        "description": "表格数据数组",
        "whenCn": "提供表格要显示的数据源",
        "whenEn": "Provide data source for table display"
      },
      {
        "name": "showSelectAll",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否在表头显示全选复选框",
        "whenCn": "需要隐藏全选功能（如分页场景下避免误操作）时设为 false",
        "whenEn": "Set to false to hide select-all (e.g., avoid mistakes in paginated scenarios)"
      },
      {
        "name": "bordered",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "显示表格边框",
        "whenCn": "需要清晰的表格边界或符合特定设计规范时使用",
        "whenEn": "Use when clear table boundaries are needed or to meet design requirements"
      },
      {
        "name": "treeCheckAll",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "全选时是否包含所有子孙节点（树形模式）",
        "whenCn": "树形表格中需要级联选择所有子节点时使用",
        "whenEn": "Use in tree tables when cascading selection of all child nodes is needed"
      },
      {
        "name": "renderSorter",
        "type": "((params: { status?: \"asc\" | \"desc\" | null , triggerAsc: () => void, triggerDesc: () => void }) => ReactNode)",
        "required": false,
        "description": "自定义渲染排序图标的函数。参数：status 当前排序状态（\\\"asc\\\"|\\\"desc\\\"|null），triggerAsc 触发升序排序，triggerDesc 触发降序排序",
        "whenCn": "需要自定义排序图标样式或交互方式时使用",
        "whenEn": "Use to customize sort icon style or interaction"
      },
      {
        "name": "hideHeader",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "隐藏表格头部",
        "whenCn": "特殊场景下不需要表头（如纯数据展示）时使用",
        "whenEn": "Use in special cases when header is not needed (e.g., pure data display)"
      },
      {
        "name": "summary",
        "type": "({ render: () => ReactNode, colSpan?: number , rowSpan?: number })[] | ({ render: () => ReactNode, colSpan?: number , rowSpan?: number })[][]",
        "required": false,
        "description": "表格底部，用于显示汇总行",
        "whenCn": "需要显示数据汇总、统计信息或总计时使用",
        "whenEn": "Use to display data summaries, statistics or totals"
      },
      {
        "name": "sticky",
        "type": "boolean | { top?: number ; css?: boolean ; target?: Element | null ; }",
        "required": false,
        "description": "固定表头。为 true 时固定在顶部（偏移量为 0）。也可传入对象配置 top 偏移量和 CSS 模式等选项",
        "whenCn": "长表格需要保持表头可见以便理解数据含义时使用",
        "whenEn": "Use for long tables to keep header visible for data context"
      },
      {
        "name": "showTopScrollbar",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "在表格顶部显示横向滚动条",
        "whenCn": "宽表格且表头需要滚动控制时使用，避免滚动到底部才能横向滚动",
        "whenEn": "Use for wide tables when header needs scroll control without scrolling to bottom",
        "version": "3.4.0"
      },
      {
        "name": "showBottomScrollbar",
        "type": "boolean | BottomScrollbarOption",
        "required": false,
        "defaultValue": "false",
        "description": "在表格底部显示固定的横向滚动条。可传入布尔值或包含 bottom 偏移量和 zIndex 的对象",
        "whenCn": "长表格需要始终可见的横向滚动控制时使用",
        "whenEn": "Use for long tables needing always-visible horizontal scroll control",
        "version": "3.7.0"
      },
      {
        "name": "tableRef",
        "type": "((table: TableRef) => void)",
        "required": false,
        "description": "获取表格实例引用。提供方法：scrollToIndex 滚动到指定行，getRenderIndexByData 获取数据的渲染索引，scrollColumnIntoView 滚动到指定列，scrollColumnByLeft 按像素横向滚动，sortByColumn 程序化排序。请谨慎使用，仅在虚拟模式下支持",
        "whenCn": "需要程序化控制表格滚动或排序行为时使用",
        "whenEn": "Use for programmatic control of table scrolling or sorting behavior"
      },
      {
        "name": "onRowSelect",
        "type": "((rows: Value) => void)",
        "required": false,
        "description": "行选择回调函数。参数 rows 包含选中的数据。如需数据格式化，请配合使用 format 和 prediction",
        "whenCn": "需要响应行选择变化进行后续操作时使用",
        "whenEn": "Use to respond to row selection changes for subsequent operations"
      },
      {
        "name": "defaultTreeExpandKeys",
        "type": "(string | number)[]",
        "required": false,
        "description": "默认展开行(非受控)",
        "whenCn": "需要设置初始展开的树形行但不需要外部控制时使用",
        "whenEn": "Use to set initially expanded tree rows without external control"
      },
      {
        "name": "onTreeExpand",
        "type": "((openKeys: (string | number)[], data: Item, expand: boolean, index: number) => void)",
        "required": false,
        "description": "当设置 treeExpandKeys 后，展开行时会触发该回调，keys 为展开的行",
        "whenCn": "需要响应树形行展开/折叠操作时使用",
        "whenEn": "Use to respond to tree row expand/collapse operations"
      },
      {
        "name": "treeExpandKeys",
        "type": "(string | number)[]",
        "required": false,
        "description": "树形数据展开行，受控",
        "whenCn": "需要外部控制树形行的展开状态时使用",
        "whenEn": "Use for external control of tree row expansion state"
      },
      {
        "name": "treeExpandIcon",
        "type": "((data: Item, index: number, isExpanded: boolean) => ReactNode)",
        "required": false,
        "description": "树形数据展开图标，函数返回 null 时隐藏展开图标",
        "whenCn": "需要自定义树形表格展开图标的样式或行为时使用",
        "whenEn": "Use to customize tree table expand icon style or behavior",
        "version": "3.5.0"
      },
      {
        "name": "expandIcon",
        "type": "((data: Item, index: number, isExpanded: boolean, expandInstance: ReactNode, clickEvent?: (() => void) ) => ReactNode)",
        "required": false,
        "description": "自定义渲染可展开行的图标内容，其中 data 为当前行的数据，index 为数据下标，isExpanded 为当前行的展开状态，expandInstance 为原始展开行图标实例，clickEvent 为展开事件。展开事件 clickEvent 仅在列类型为 `expand` 时返回",
        "whenCn": "需要自定义展开行图标的渲染逻辑或样式时使用",
        "whenEn": "Use to customize expand row icon rendering logic or style",
        "version": "3.5.4"
      },
      {
        "name": "loader",
        "type": "((data: Item, index: number) => Promise<void>)",
        "required": false,
        "description": "树形数据加载函数",
        "whenCn": "需要动态加载树形子节点数据时使用",
        "whenEn": "Use for dynamic loading of tree child node data",
        "version": "3.5.0"
      },
      {
        "name": "sorter",
        "type": "((sortName: string, sorter: \"asc\" | \"desc\", sortedList: ({ order: \"asc\" | \"desc\", manual: boolean, key: string | number, weight?: number })[]) => void | ((a: Item, b: Item) => number) )",
        "required": false,
        "defaultValue": "alphaSort(Column.sorter, sorter)",
        "description": "表格统一排序函数，参数分别为 Column.sorter 和 排序方式;\\n支持多列排序，sorter传入对象{ rule: string | function, weight: number }, rule为排序规则，为字符串时参考单列排序的用法, weight 为权重，指明排序的优先级。\\n多列排序时，sortedList 返回所有参与排序的字段信息",
        "whenCn": "需要自定义排序逻辑或实现多列排序时使用",
        "whenEn": "Use for custom sorting logic or multi-column sorting"
      },
      {
        "name": "onSortCancel",
        "type": "((preType: \"asc\" | \"desc\", key: string | number, orders: ({ order: \"asc\" | \"desc\", weight?: number , key: string | number, manual: boolean })[], sorter: string) => void)",
        "required": false,
        "description": "排序取消事件回调。当点击已排序的列取消排序时触发。参数：preType（之前的排序方向），key（列的唯一标识），orders（当前所有排序项信息），sorter（列的排序器名称）",
        "whenCn": "需要在取消排序时执行特定操作时使用",
        "whenEn": "Use to perform specific actions when sorting is cancelled"
      },
      {
        "name": "sortDirections",
        "type": "(\"asc\" | \"desc\")[]",
        "required": false,
        "defaultValue": "[\\\"asc\\\", \\\"desc\\\"]",
        "description": "排序方向",
        "whenCn": "需要限制可用的排序方向（如只允许升序）时使用",
        "whenEn": "Use to limit available sort directions (e.g., ascending only)",
        "version": "3.5.0"
      },
      {
        "name": "columnResizable",
        "type": "boolean",
        "required": false,
        "description": "设置 columnResizable 为 true，使所有列可伸缩",
        "whenCn": "需要用户能够手动调整列宽时使用",
        "whenEn": "Use when users need to manually adjust column widths"
      },
      {
        "name": "onColumnResize",
        "type": "(columns: TableColumn[]) => void",
        "required": false,
        "description": "列宽伸缩后的回调",
        "whenCn": "需要响应列宽变化（如保存用户配置）时使用",
        "whenEn": "Use to respond to column width changes (e.g., save user preferences)"
      },
      {
        "name": "dataChangeResize",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "数据发生变化后是否重新计算列宽",
        "whenCn": "数据内容长度变化较大时使用，保持列宽合理分配",
        "whenEn": "Use when data content length varies significantly to maintain proper column width distribution"
      },
      {
        "name": "expandKeys",
        "type": "(string | number)[]",
        "required": false,
        "description": "展开行受控",
        "whenCn": "需要外部控制行展开状态时使用",
        "whenEn": "Use for external control of row expansion state"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number)",
        "required": true,
        "description": "生成每一项key的辅助方法\\n为函数时，使用此函数返回值\\n为string时，使用这个string对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)",
        "whenCn": "为每行数据生成唯一标识，用于选择、展开等功能",
        "whenEn": "Generate unique identifier for each row, used for selection, expansion, etc."
      },
      {
        "name": "value",
        "type": "any",
        "required": false,
        "description": "当前选中的数据值，数据格式与 onRowSelect 回调返回的格式保持一致",
        "whenCn": "需要受控的行选择功能时使用，用于外部管理选中状态",
        "whenEn": "Use for controlled row selection to manage selected state externally"
      },
      {
        "name": "format",
        "type": "ObjectKey<DataItem> | ((data: DataItem) => Value extends (infer U)[] ? U : Value)",
        "required": false,
        "defaultValue": "d => d",
        "description": "格式化选中值。字符串时：作为属性名提取值（如 \\\"id\\\" 提取 d.id）。函数时：参数为行数据，返回格式化后的值",
        "whenCn": "当选中值需要特定格式（如仅保存 ID）时使用",
        "whenEn": "Use when selected values need specific format (e.g., storing only IDs)"
      },
      {
        "name": "prediction",
        "type": "((value: Value extends (infer U)[] ? U : Value, data: DataItem) => boolean)",
        "required": false,
        "defaultValue": "(val, d) => val===format(d)",
        "description": "自定义值匹配函数。参数：value（选中值），data（行数据）。返回 true 表示匹配。用于默认比较失效时（如对象引用不同）",
        "whenCn": "当数据对象引用变化（如从服务器重新获取）但需保持选中状态时使用",
        "whenEn": "Use when data object references change (e.g., refetched from server) but selection state needs to persist"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Basic table usage",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基础的表格用法。推荐 columns 写为常量，以提升性能\n * en - Base\n *    -- Basic table usage\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={data} />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Empty",
        "description": "Table empty state",
        "scenario": "basic",
        "code": "/**\n * cn - 空状态\n *    -- 表格空状态\n * en - Empty\n *    -- Table empty state\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={[]} />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Style",
        "description": "Set striped to add zebra-striping; Set bordered to add borders",
        "scenario": "basic",
        "code": "/**\n * cn - 边框和底纹\n *    -- 通过 striped 显示交错底纹；通过 bordered 显示边框\n * en - Style\n *    -- Set striped to add zebra-striping; Set bordered to add borders\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={data} bordered striped />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Size",
        "description": "Set size to small to display compact table, large to display loose table",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸类型\n *    -- 设置 size 为 small 显示紧凑表格，large 为显示松散表格\n * en - Size\n *    -- Set size to small to display compact table, large to display loose table\n */\nimport React from 'react';\nimport { Radio, Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst sizeList = ['small', 'default', 'large'];\nexport default () => {\n  const [size, setSize] = React.useState<'small' | 'large' | 'default'>('default');\n  return (\n    <div>\n      <Radio.Group\n        keygen\n        data={sizeList}\n        value={size}\n        onChange={setSize}\n        style={{ marginBottom: 24 }}\n      />\n      <Table keygen='id' size={size} columns={columns} data={data} />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Column group",
        "description": "Table automatically merges headers with adjacent and identical groups",
        "scenario": "basic",
        "code": "/**\n * cn - 表头分组\n *    -- Table 会自动合并相邻相同 group 的表头\n * en - Column group\n *    -- Table automatically merges headers with adjacent and identical groups\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst name = (\n  <span style={{ background: '#E8EBF0', display: 'block', lineHeight: '40px', color: '#141737' }}>\n    Name\n  </span>\n);\n\nconst other = <span>Other</span>;\n\nconst columns: TableColumnItem[] = [\n  { title: 'First Name', render: 'firstName', group: [name, 'True Name'] },\n  { title: 'Last Name', render: 'lastName', group: [name, 'True Name'] },\n  { title: 'Nick Name', render: () => 'nickname', group: name },\n  { title: 'Country', render: 'country' },\n  { title: 'Office', render: 'office', group: other },\n  { title: 'Position', render: 'position', group: other, groupProps: { style: { background: '#EEF2FE' }, className: 'my-custom-header' } },\n];\n\nconst App: React.FC = () => <Table bordered keygen='id' columns={columns} data={data} />;\n\nexport default App;\n"
      },
      {
        "title": "Fixed head",
        "description": "When the table sets the height, the header will be fixed at the top",
        "scenario": "basic",
        "code": "/**\n * cn - 固定表头\n *    -- 当 table 设置高度后，表头会固定在顶部\n * en - Fixed head\n *    -- When the table sets the height, the header will be fixed at the top\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(20);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => (\n  <Table keygen='id' style={{ height: 300 }} columns={columns} data={data} width={1500} />\n);\n\nexport default App;\n"
      },
      {
        "title": "Bottom scrollbar",
        "description": "Set `showBottomScrollbar` to enable the bottom scrollbar",
        "scenario": "basic",
        "code": "/**\n * cn - 底部滚动\n *    -- 设置`showBottomScrollbar`开启底部可吸附的滚动条\n * en - Bottom scrollbar\n *    -- Set `showBottomScrollbar` to enable the bottom scrollbar\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(20);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  {\n    title: 'First Name',\n    group: 'Name',\n    render: 'firstName',\n    width: 120,\n  },\n  {\n    title: 'Last Name',\n    fixed: 'left',\n    group: 'Name',\n    render: 'lastName',\n    width: 120,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    fixed: 'right',\n    align: 'right',\n    width: 100,\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => (\n  <Table\n    bordered\n    keygen='id'\n    width={1500}\n    columns={columns}\n    data={data}\n    showBottomScrollbar={{\n      bottom: 0,\n      // 可选属性\n      zIndex: 10,\n    }}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Double scrollbar",
        "description": "Set `showTopScrollbar` to enable double scrollbar",
        "scenario": "basic",
        "code": "/**\n * cn - 顶部滚动\n *    -- 设置`showTopScrollbar`开启顶部滚动条\n * en - Double scrollbar\n *    -- Set `showTopScrollbar` to enable double scrollbar\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(20);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  {\n    title: 'First Name',\n    group: 'Name',\n    render: 'firstName',\n    width: 120,\n  },\n  {\n    title: 'Last Name',\n    fixed: 'left',\n    group: 'Name',\n    render: 'lastName',\n    width: 120,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    fixed: 'right',\n    align: 'right',\n    width: 100,\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => (\n  <Table showTopScrollbar bordered keygen='id' width={1500} columns={columns} data={data} />\n);\n\nexport default App;\n"
      },
      {
        "title": "Fixed column",
        "description": "Set the fixed property of the column can fix the column; Only take effect if the table's width property is set and width is greater than the external container",
        "scenario": "basic",
        "code": "/**\n * cn - 固定列\n *    -- 设置 column 的 fixed 属性，可以固定列。只在设置了表格的 width 属性，并且 width 大于外部容器情况下才会生效\n * en - Fixed column\n *    -- Set the fixed property of the column can fix the column; Only take effect if the table's width property is set and width is greater than the external container\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(20);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  {\n    title: 'First Name',\n    group: 'Name',\n    render: 'firstName',\n    width: 120,\n  },\n  {\n    title: 'Last Name',\n    fixed: 'left',\n    group: 'Name',\n    render: 'lastName',\n    width: 120,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    fixed: 'right',\n    align: 'right',\n    width: 100,\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => (\n  <Table bordered keygen='id' width={1500} style={{ height: 300 }} columns={columns} data={data} />\n);\n\nexport default App;\n"
      },
      {
        "title": "Large data",
        "description": "The rendering of large amounts of data in the Table has been optimized by lazy render. This example loads 10000 pieces and 55 columns of data",
        "scenario": "basic",
        "code": "/**\n * cn - 大数据量表格\n *    -- Table内部对大量数据的渲染做了lazy render的优化。这个例子加载了10000条，55列数据。可以通过设置rowsInView调整单次最多render的行数，默认为20\n * en - Large data\n *    -- The rendering of large amounts of data in the Table has been optimized by lazy render. This example loads 10000 pieces and 55 columns of data\n *    -- You can set rowsInView property to change the number of rows in rendering. The default value is 20\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(10000);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 80 },\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: (d) => <div style={{ height: d.height }}>{`${d.firstName} ${d.lastName}`}</div>,\n    width: 160,\n  },\n  { title: 'Country', render: 'country', width: 200 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start', width: 140 },\n];\n\nfor (let i = 0; i < 50; i++) {\n  columns.push({\n    title: `${i + 1}($)`,\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  });\n}\n\nconst App: React.FC = () => (\n  <Table\n    verticalAlign='top'\n    virtual\n    keygen='id'\n    width={6400}\n    style={{ height: 600 }}\n    columns={columns}\n    data={data}\n    rowsInView={20}\n    bordered\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "scrollToIndex",
        "description": "The virtual list table provides a scrollToIndex method to scroll to the specified row",
        "scenario": "basic",
        "code": "/**\n * cn - 虚拟滚动\n *    -- 虚拟列表提供了一个`scrollToIndex`方法滚动到指定行\n * en - scrollToIndex\n *    -- The virtual list table provides a scrollToIndex method to scroll to the specified row\n */\nimport React, { useState, useEffect } from 'react';\nimport { Input, Table, Form, TYPE, Button } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(10000);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 80 },\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: (d) => (\n      <div id={`name_${d.id}`} style={{ height: d.height }}>\n        {`${d.firstName} ${d.lastName}`}\n      </div>\n    ),\n    width: 160,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start', width: 140 },\n];\n\nconst App: React.FC = () => {\n  const [table, setTable] = useState<any>();\n\n  const [state, setState] = useState({\n    index: 25,\n  });\n\n  const handleScroll = () => {\n    if (table)\n      table.scrollToIndex(state.index - 1, () => {\n        const el: HTMLElement = document.querySelector(`#name_${state.index}`)!;\n        if (el) {\n          el.style.color = 'red';\n        }\n      });\n  };\n\n  const handleIndexChange = ({ index }: { index: number }) => {\n    setState({ index });\n  };\n\n  useEffect(() => {\n    setTimeout(handleScroll);\n  }, [state]);\n\n  return (\n    <div>\n      <Form style={{ marginBottom: 24 }} defaultValue={state} inline onSubmit={handleIndexChange}>\n        <Input.Number min={1} max={10000} width={100} name='index' style={{marginRight: 12}} />\n        <Button type='primary' htmlType='submit'>\n          Scroll\n        </Button>\n      </Form>\n\n      <Table\n        keygen='id'\n        bordered\n        data={data}\n        virtual\n        width={1400}\n        rowsInView={10}\n        columns={columns}\n        style={{ height: 500 }}\n        tableRef={(t) => setTable(t)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "scrollToIndex",
        "description": "The virtual list table provides a getRenderIndexByData method to get the actual index of the data, and then call the `scrollToIndex` method to scroll to the specified row",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 虚拟列表提供了`getRenderIndexByData`方法获取数据实际的index，然后再调用`scrollToIndex`方法滚动到指定行\n * en - scrollToIndex\n *    -- The virtual list table provides a getRenderIndexByData method to get the actual index of the data, and then call the `scrollToIndex` method to scroll to the specified row\n */\nimport React, { useState, useEffect } from 'react';\nimport { Input, Table, Form, TYPE, Button } from 'shineout';\n\ninterface TableRowData {\n  id: string;\n  office: string;\n  country: string;\n  position: string;\n  children?: TableRowData[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\n\nlet defaultTreeExpandKeys:string[] = []\nfunction generateMockTreeData(depth: number, count: number, parentId?: string): TableRowData[] {\n  const data: TableRowData[] = [];\n  for (let i = 0; i < count; i++) {\n    const currentId = parentId ? `${parentId}__${depth}_${i}` : `${depth}_${i}`\n    const children = depth > 1 ? generateMockTreeData(depth - 1, count, currentId) : undefined;\n    if(children?.length) {\n      defaultTreeExpandKeys.push(currentId)\n    }\n    data.push({\n      id: currentId,\n      position: `position_${i}`,\n      country: `country_${i}`,\n      office: `office_${i}`,\n      children,\n    });\n  }\n  return data;\n}\n\nconst mockData = generateMockTreeData(4, 20);\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'ID',\n    render: (d) => (\n      <span id={`name_${d.id}`}>\n        {d.id}\n      </span>\n    ),\n    width: 300,\n    treeIndent: 22,\n    treeColumnsName: 'children',\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst App: React.FC = () => {\n  const [tableRef, setTableRef] = useState<any>();\n\n  const [state, setState] = useState({\n    id: '4_0__3_0__2_5__1_0',\n  });\n\n  const handleScroll = () => {\n    if (tableRef){\n      const index = tableRef.getRenderIndexByData({id: state.id});\n      // 或者这样使用也可以：\n      // const index = tableRef.getRenderIndexByData(state.id)\n      if(index === -1) return;\n      tableRef.scrollToIndex(index, () => {\n        const el: HTMLElement = document.querySelector(`#name_${state.id}`)!;\n        if (el) {\n          el.style.color = 'red';\n        }\n      });\n    }\n  };\n\n  const handleIndexChange = ({ id }: { id: string }) => {\n    setState({ id });\n  };\n\n  useEffect(() => {\n    setTimeout(handleScroll);\n  }, [state]);\n\n  return (\n    <div>\n      <Form style={{ marginBottom: 24 }} defaultValue={state} inline onSubmit={handleIndexChange}>\n        <Input placeholder='输入ID' width={200} name='id' style={{marginRight: 12}} />\n        <Button type='primary' htmlType='submit'>\n          Scroll\n        </Button>\n      </Form>\n\n      <Table\n        keygen='id'\n        bordered\n        data={mockData}\n        virtual\n        width={1400}\n        rowsInView={10}\n        columns={columns}\n        style={{ height: 500 }}\n        tableRef={(t) => setTableRef(t)}\n        defaultTreeExpandKeys={defaultTreeExpandKeys}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "scrollColumnIntoView",
        "description": "The virtual list table provides a scrollColumnIntoView method to scroll to the specified column",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 虚拟列表提供了一个`scrollColumnIntoView`方法滚动到指定列\n * en - scrollColumnIntoView\n *    -- The virtual list table provides a scrollColumnIntoView method to scroll to the specified column\n */\nimport React, { useState, useEffect } from 'react';\nimport { Input, Table, Form, TYPE, Button, Link, Gap } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(10000);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 80 },\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: (d) => (\n      <div id={`name_${d.id}`} style={{ height: d.height }}>\n        {`${d.firstName} ${d.lastName}`}\n      </div>\n    ),\n    width: 160,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start', width: 140 },\n  { title: 'Operation', render: () => {\n    return <Gap>\n      <Link type='primary'>Detail</Link>\n      <Link type='primary'>Edit</Link>\n    </Gap>\n  }, width: 140, fixed: 'right' },\n];\n\nconst App: React.FC = () => {\n  const [table, setTable] = useState<any>();\n\n  const [state, setState] = useState({\n    key: 0,\n  });\n\n  const handleScroll = () => {\n    if (table)\n      table.scrollColumnIntoView(state.key);\n  };\n\n  const handleIndexChange = ({ key }: { key: number }) => {\n    setState({ key });\n  };\n\n  useEffect(() => {\n    setTimeout(handleScroll);\n  }, [state]);\n\n  return (\n    <div>\n      <Form style={{ marginBottom: 24 }} defaultValue={state} inline onSubmit={handleIndexChange}>\n        <Input.Number width={200} name='key' min={0} max={columns.length - 1} placeholder='输入列key' style={{marginRight: 12}} />\n        <Button type='primary' htmlType='submit'>\n          Scroll\n        </Button>\n      </Form>\n\n      <Table\n        keygen='id'\n        bordered\n        data={data}\n        virtual\n        width={1400}\n        rowsInView={10}\n        columns={columns}\n        style={{ height: 300 }}\n        tableRef={(t) => setTable(t)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "scrollColumnByLeft",
        "description": "The virtual list table provides a scrollColumnByLeft method to scroll to a specified column based on the left value",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 虚拟列表提供了一个`scrollColumnByLeft`方法根据left值滚动到指定列\n * en - scrollColumnByLeft\n *    -- The virtual list table provides a scrollColumnByLeft method to scroll to a specified column based on the left value\n */\nimport React, { useState, useEffect } from 'react';\nimport { Input, Table, Form, TYPE, Button, Gap, Link } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(10000);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 80 },\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: (d) => (\n      <div id={`name_${d.id}`} style={{ height: d.height }}>\n        {`${d.firstName} ${d.lastName}`}\n      </div>\n    ),\n    width: 160,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start', width: 140 },\n  { title: 'Operation', render: () => {\n    return <Gap>\n      <Link type='primary'>Detail</Link>\n      <Link type='primary'>Edit</Link>\n    </Gap>\n  }, width: 140, fixed: 'right' },\n];\n\nconst App: React.FC = () => {\n  const [table, setTable] = useState<any>();\n\n  const [state, setState] = useState({\n    left: 100,\n  });\n\n  const handleScroll = () => {\n    if (table)\n      table.scrollColumnByLeft(state.left);\n  };\n\n  const handleIndexChange = ({ left }: { left: number }) => {\n    setState({ left });\n  };\n\n  useEffect(() => {\n    setTimeout(handleScroll);\n  }, [state]);\n\n  return (\n    <div>\n      <Form style={{ marginBottom: 24 }} defaultValue={state} inline onSubmit={handleIndexChange}>\n        <Input.Number min={0} max={1000} width={100} name='left' style={{marginRight: 12}} />\n        <Button type='primary' htmlType='submit'>\n          Scroll\n        </Button>\n      </Form>\n\n      <Table\n        keygen='id'\n        bordered\n        data={data}\n        virtual\n        width={1400}\n        rowsInView={10}\n        columns={columns}\n        style={{ height: 300 }}\n        tableRef={(t) => setTable(t)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "*    -- When encountering rendering performance issues, you can set the `virtual=\"lazy\"` property.",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 当遇到渲染性能问题时，可设置 `virtual=\"lazy\"`\n * en -\n *    -- When encountering rendering performance issues, you can set the `virtual=\"lazy\"` property.\n */\nimport React, { useState } from 'react';\nimport { Input, Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(1000);\n\nconst App: React.FC = () => {\n  const [inputValue, setInputValue] = useState<string | undefined>();\n\n  const columns: TableColumnItem[] = [\n    { title: 'id', render: 'id', width: 80 },\n    {\n      title: 'Name',\n      fixed: 'left',\n      render: (d) => (\n        <div id={`name_${d.id}`} style={{ height: d.height }}>\n          {`${d.firstName} ${d.lastName}`}\n        </div>\n      ),\n      width: 160,\n    },\n    {\n      title: 'Country',\n      render: (d) => (\n        <div style={{ display: 'flex', gap: 8 }}>\n          {d.country}\n          <Input value={inputValue} onChange={setInputValue} width={100} />\n        </div>\n      ),\n    },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start', width: 140 },\n  ];\n\n  return (\n    <div>\n      <Table\n        keygen='id'\n        bordered\n        data={data}\n        virtual=\"lazy\"\n        width={1400}\n        columns={columns}\n        style={{ height: 500 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Loading",
        "description": "Set the loading property can set the table state to loading",
        "scenario": "basic",
        "code": "/**\n * cn - 加载中\n *    -- 设置 loading 属性可以将表格状态设置为加载中\n * en - Loading\n *    -- Set the loading property can set the table state to loading\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(8);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst App: React.FC = () => {\n  return <Table keygen='id' loading columns={columns} data={data} />;\n};\n\nexport default App;\n"
      },
      {
        "title": "Filter",
        "description": "Set the filter property of column to display the filter box",
        "scenario": "basic",
        "code": "/**\n * cn - 筛选\n *    -- 设置 column 的 `filter` 开启数据筛选功能\n *    -- 支持搜索框和下拉选择框两种模式，下拉框支持单选和多选\n * en - Filter\n *    -- Set the filter property of column to display the filter box\n *    -- Support two modes: search and select, select mode supports single and multiple selection\n */\n\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport {icon1, icon2, icon3, icon4, icon5, icon6} from './static/icon'\n\ninterface TableRowData {\n  id: number;\n  name: string;\n  age: number;\n  salary: number;\n  company: string;\n  address: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    name: 'Ephraim',\n    age: 28,\n    address: 'New York No.1 Lake Park',\n    salary: 88000,\n    company: 'Google',\n  },\n  {\n    id: 2,\n    name: 'Osvaldo',\n    age: 50,\n    address: 'New York No.2 Lake Park',\n    salary: 90000,\n    company: 'Apple',\n  },\n  {\n    id: 3,\n    name: 'Dylan',\n    age: 25,\n    address: 'New York No.3 Lake Park',\n    salary: 68000,\n    company: 'Microsoft',\n  },\n  {\n    id: 4,\n    name: 'Shaniya',\n    age: 42,\n    address: 'New York No.4 Lake Park',\n    salary: 55000,\n    company: 'Tictok',\n  },\n  {\n    id: 5,\n    name: 'Jovanny',\n    age: 35,\n    address: 'New York No.5 Lake Park',\n    salary: 45000,\n    company: 'Tencent',\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'Name',\n    render: 'name',\n    width: 300,\n    filter: {\n      // 筛选模式：search 搜索框\n      mode: 'search',\n      // 根据onFilter函数过滤数据\n      onFilter: (value: string, row) => {\n        return row.name.startsWith(value);\n      },\n    },\n  },\n  {\n    title: 'Age',\n    render: 'age',\n    width: 300,\n    filter: {\n      // 筛选模式：select 选择框（单选或多选）\n      mode: 'select',\n      // 仅select模式下有效，筛选选项的配置\n      config: {\n        // 筛选的选项数据\n        data: [\n          { label: 'Young', value: 'young' },\n          { label: 'Middle', value: 'middle' },\n          { label: 'Old', value: 'old' },\n        ],\n        // 是否开启多选\n        multiple: true,\n      },\n      onFilter: (values: string[], row) => {\n        return values.some(value => {\n          if (value === 'young') return row.age < 30;\n          if (value === 'middle') return row.age >= 30 && row.age < 40;\n          return row.age >= 40;\n        })\n      },\n    },\n  },\n  {\n    title: 'Salary',\n    render: 'salary',\n    width: 300,\n    filter: {\n      mode: 'select',\n      config: {\n        data: [\n          { label: '50000', value: 50000 },\n          { label: '60000', value: 60000 },\n          { label: '70000', value: 70000 },\n          { label: '80000', value: 80000 },\n          { label: '90000', value: 90000 },\n        ],\n        // 自定义渲染选项\n        renderItem: (d) => `>= ${d.label}`,\n        multiple: false,\n      },\n      onFilter: (value, row) => {\n        return row.salary >= value;\n      },\n    },\n  },\n  {\n    title: 'Company',\n    render: 'company',\n    width: 300,\n    filter: {\n      mode: 'select',\n      config: {\n        data: [\n          { label: 'Google', value: 'Google', icon: icon1 },\n          { label: 'Apple', value: 'Apple', icon: icon2 },\n          { label: 'Microsoft', value: 'Microsoft', icon: icon3 },\n          { label: 'Tictok', value: 'Tictok', icon: icon4 },\n          { label: 'Tencent', value: 'Tencent', icon: icon5 },\n        ],\n        // 自定义渲染选项\n        renderItem: (d) => (\n          <div style={{display: 'flex', alignItems: 'center', gap: 8}}>\n            {d.icon}\n            <span>{d.label}</span>\n          </div>\n        ),\n        multiple: false,\n        // 是否显示搜索框\n        search: true,\n      },\n      onFilter: (value, row) => {\n        return value.includes(row.company);\n      },\n    },\n  },\n\n  {\n    title: 'Address',\n    render: 'address',\n    width: 300,\n    filter: {\n      mode: 'search',\n      onFilter: (value, row) => {\n        return row.address.includes(value);\n      },\n      icon: icon6,\n    },\n  },\n];\n\nexport default () => {\n  return <Table keygen='id' columns={columns} data={data} />;\n};\n"
      },
      {
        "title": "Sorter",
        "description": "Set the sorter property of Table to indicate the method of table sort",
        "scenario": "basic",
        "code": "/**\n * cn - 排序\n *    -- 设置 Table 的 sorter 属性统一指定排序函数\n *    -- 设置 column 的 sorter 标示此列需要排序并指定依据字段，会作为第一个参数传入排序函数\n *    -- defaultOrder 指定该列默认排序规则\n *    -- sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序\n *    -- 后端或自行排序用户自行处理，sorter 函数不要返回结果\n * en - Sorter\n *    -- Set the sorter property of Table to indicate the method of table sort\n *    -- Set the sorter property of Column to indicate the sort key string, will pass to table sorter method\n *    -- Set defaultOrder mark defualt order\n *    -- When the sorter returns a function, use this function to sort data internally\n *    -- Server-side or self-sorting is is handled by the user, do not return results\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  age: number;\n  salary: number;\n  office: string;\n  country: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData>;\ntype TableSorter = TableProps['sorter'];\ntype TableColumnOrder = TYPE.Table.ColumnOrder;\ntype TableOnSortCancel = TableProps['onSortCancel'];\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(10);\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'Name',\n    fixed: 'left',\n    sorter: 'firstName',\n    defaultOrder: 'asc',\n    render: (d) => `${d.firstName} ${d.lastName}`,\n  },\n  { title: 'Age', render: 'age', sorter: 'age', align: 'right', },\n  { title: 'Position', render: 'position' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => {\n  const sorter: {\n    [x: string]: any;\n  } = {\n    age: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n      order === 'asc' ? a.age - b.age : b.age - a.age,\n    firstName: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n      order === 'asc'\n        ? a.firstName.localeCompare(b.firstName)\n        : b.firstName.localeCompare(a.firstName),\n  };\n\n  const handleSorter: TableSorter = (name, order) => sorter[name](order);\n\n  const handleCancel: TableOnSortCancel = (prevType, index) => {\n    console.log('sort cancel : ', prevType, index);\n  };\n\n  return (\n    <Table\n      striped\n      data={data}\n      keygen='id'\n      columns={columns}\n      sorter={handleSorter}\n      onSortCancel={handleCancel}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Sorter",
        "description": "Set the renderSorter property of the Table to customize the icon",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义排序图标\n *    -- 设置 Table 的 renderSorter 属性来自定义图标\n * en - Sorter\n *    -- Set the renderSorter property of the Table to customize the icon\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  age: number;\n  salary: number;\n  office: string;\n  country: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData>;\ntype TableSorter = TableProps['sorter'];\ntype TableColumnOrder = TYPE.Table.ColumnOrder;\ntype TableRenderSorter = TableProps['renderSorter'];\ntype TableOnSortCancel = TableProps['onSortCancel'];\ntype TableSorterParam = TYPE.Table.RenderSorterParam;\n\nconst data: TableRowData[] = user.fetchSync(10);\nconst columns: TableColumnItem[] = [\n  {\n    title: 'Name',\n    fixed: 'left',\n    sorter: 'firstName',\n    defaultOrder: 'asc',\n    render: (d) => `${d.firstName} ${d.lastName}`,\n  },\n  { title: 'Age', render: 'age', sorter: 'age', align: 'right' },\n  { title: 'Position', render: 'position' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst commonStyle: React.CSSProperties = {\n  cursor: 'pointer',\n  width: '8px',\n  height: '5px',\n  display: 'flex',\n  alignItems: 'center',\n};\n\nconst App: React.FC = () => {\n  const sorter: {\n    [x: string]: any;\n  } = {\n    age: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n      order === 'asc' ? a.age - b.age : b.age - a.age,\n    firstName: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n      order === 'asc'\n        ? a.firstName.localeCompare(b.firstName)\n        : b.firstName.localeCompare(a.firstName),\n  };\n\n  const renderSorter: TableRenderSorter = ({\n    status,\n    triggerAsc,\n    triggerDesc,\n  }: TableSorterParam) => (\n    <>\n      <div\n        style={{\n          ...commonStyle,\n          color: status === 'asc' ? '#197afa' : '#999da8',\n        }}\n        onClick={triggerAsc}\n      >\n        <svg\n          fill='currentColor'\n          width='8'\n          height='5'\n          viewBox='0 0 8 5'\n          xmlns='http://www.w3.org/2000/svg'\n        >\n          <path d='M3.59594 0.183058C3.80193 -0.0422441 4.12606 -0.0595753 4.35023 0.131065L4.40406 0.183058L7.83263 3.93306C8.05579 4.17714 8.05579 4.57286 7.83263 4.81694C7.62664 5.04224 7.30251 5.05958 7.07834 4.86893L7.02451 4.81694L4.40409 1.95128C4.18088 1.70732 3.81912 1.70732 3.59591 1.95128L0.975489 4.81694C0.769499 5.04224 0.445367 5.05958 0.2212 4.86893L0.167368 4.81694C-0.0386232 4.59164 -0.0544688 4.23712 0.119831 3.99194L0.167368 3.93306L3.59594 0.183058Z' />\n        </svg>\n      </div>\n      <div\n        style={{\n          ...commonStyle,\n          color: status === 'desc' ? '#197afa' : '#999da8',\n          marginTop: 4,\n        }}\n        onClick={triggerDesc}\n      >\n        <svg\n          width='8'\n          height='5'\n          viewBox='0 0 8 5'\n          fill='currentColor'\n          xmlns='http://www.w3.org/2000/svg'\n        >\n          <path d='M3.59594 4.81694C3.80193 5.04224 4.12606 5.05958 4.35023 4.86893L4.40406 4.81694L7.83263 1.06694C8.05579 0.822864 8.05579 0.427136 7.83263 0.183058C7.62664 -0.042244 7.30251 -0.0595751 7.07834 0.131065L7.02451 0.183058L4.40409 3.04872C4.18088 3.29268 3.81912 3.29268 3.59591 3.04872L0.975489 0.183058C0.769499 -0.042244 0.445367 -0.0595751 0.2212 0.131065L0.167368 0.183058C-0.0386232 0.408361 -0.0544688 0.76288 0.119831 1.00806L0.167368 1.06694L3.59594 4.81694Z' />\n        </svg>\n      </div>\n    </>\n  );\n\n  const handleSorter: TableSorter = (name, order) => sorter[name](order);\n\n  const handleCancel: TableOnSortCancel = (prevType, index) => {\n    console.log('sort cancel : ', prevType, index);\n  };\n  return (\n    <Table\n      striped\n      data={data}\n      keygen='id'\n      columns={columns}\n      sorter={handleSorter}\n      onSortCancel={handleCancel}\n      renderSorter={renderSorter}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "multiple Sorter",
        "description": "Set the sorter property of Table to indicate the method of table sort",
        "scenario": "basic",
        "code": "/**\n * cn - 多列排序\n *    -- 设置 column 的 sorter 为一个对象，对象的rule属性同单列排序的sorter，weight表示排序权重，值越大表示排序优先级越高\n *    -- 支持多列默认排序，为需要默认排序的列设置defaultOrder\n *    -- sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序\n *    -- 后端或自行排序用户自行处理，sorter 函数不要返回结果\n * en - multiple Sorter\n *    -- Set the sorter property of Table to indicate the method of table sort\n *    -- Set the sorter of column to an object, the rule attribute of the object is the same as the sorter of single column sorting, weight indicates the sorting weight, the larger the value, the higher the sorting priority\n *    -- Support multi-column default sorting, set defaultOrder for columns that need default sorting\n *    -- When the sorter returns a function, use this function to sort data internally\n *    -- Server-side or self-sorting is is handled by the user, do not return results\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  age: number;\n  salary: number;\n  office: string;\n  country: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData>;\ntype TableSorter = TableProps['sorter'];\ntype TableColumnOrder = TYPE.Table.ColumnOrder;\ntype TableOnSortCancel = TableProps['onSortCancel'];\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    age: 20,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    age: 20,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    age: 25,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    age: 26,\n  },\n];\nconst columns: TableColumnItem[] = [\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: (d) => `${d.firstName} ${d.lastName}`,\n  },\n  {\n    title: 'Age',\n    render: 'age',\n    sorter: {\n      rule: 'age',\n      weight: 2,\n    },\n    align: 'right',\n    defaultOrder: 'asc',\n  },\n  { title: 'Position', render: 'position' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    sorter: { rule: 'salary', weight: 1 },\n    defaultOrder: 'desc',\n  },\n];\n\nconst sorter: {\n  [x: string]: any;\n} = {\n  age: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n    order === 'asc' ? a.age - b.age : b.age - a.age,\n  salary: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n    order === 'asc' ? a.salary - b.salary : b.salary - a.salary,\n};\n\nconst App: React.FC = () => {\n  const handleSorter: TableSorter = (name, order) => sorter[name](order);\n\n  const handleCancel: TableOnSortCancel = (prevType, index) => {\n    console.log('sort cancel : ', prevType, index);\n  };\n\n  return (\n    <Table\n      striped\n      data={data}\n      keygen='id'\n      columns={columns}\n      sorter={handleSorter}\n      onSortCancel={handleCancel}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Configure sorter",
        "description": "Set the `sortDirections` of Table to set the available sorting directions for all columns. Support only ascending or descending.",
        "scenario": "basic",
        "code": "/**\n * cn - 配置排序\n *    -- 设置 Table 的 `sortDirections`，可对全部列设置可用的排序方向。支持仅开启升序或降序。\n *    -- 设置 column 的 `sortDirections` 优先级高于 Table 的 `sortDirections`\n * en - Configure sorter\n *    -- Set the `sortDirections` of Table to set the available sorting directions for all columns. Support only ascending or descending.\n *    -- The `sortDirections` of column takes precedence over the `sortDirections` of Table\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  age: number;\n  salary: number;\n  office: string;\n  country: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData>;\ntype TableSorter = TableProps['sorter'];\ntype TableColumnOrder = TYPE.Table.ColumnOrder;\ntype TableOnSortCancel = TableProps['onSortCancel'];\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    age: 21,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    age: 20,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    age: 25,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    age: 26,\n  },\n];\nconst columns: TableColumnItem[] = [\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: (d) => `${d.firstName} ${d.lastName}`,\n  },\n  {\n    title: 'Age',\n    render: 'age',\n    sorter: {\n      rule: 'age',\n      weight: 2,\n    },\n    align: 'right',\n    defaultOrder: 'asc',\n    sortDirections: ['asc'],\n  },\n  { title: 'Position', render: 'position' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    sorter: { rule: 'salary', weight: 1 },\n    sortDirections: ['asc', 'desc'],\n  },\n];\n\nconst sorter: {\n  [x: string]: any;\n} = {\n  age: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n    order === 'asc' ? a.age - b.age : b.age - a.age,\n  salary: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n    order === 'asc' ? a.salary - b.salary : b.salary - a.salary,\n};\n\nconst App: React.FC = () => {\n  const handleSorter: TableSorter = (name, order) => sorter[name](order);\n\n  const handleCancel: TableOnSortCancel = (prevType, index) => {\n    console.log('sort cancel : ', prevType, index);\n  };\n\n  return (\n    <Table\n      striped\n      data={data}\n      keygen='id'\n      columns={columns}\n      sorter={handleSorter}\n      sortDirections={['desc']}\n      onSortCancel={handleCancel}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Configure sorter",
        "description": "Call the `sortByColumn` method of TableRef from the outside to sort the column",
        "scenario": "basic",
        "code": "/**\n * cn - 外部排序\n *    -- 调用 TableRef 的 `sortByColumn` 方法，从外部对 列进行排序\n * en - Configure sorter\n *    -- Call the `sortByColumn` method of TableRef from the outside to sort the column\n */\n\nimport React, { useState } from 'react';\nimport { Button, Form, Radio, Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  age: number;\n  salary: number;\n  office: string;\n  country: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData>;\ntype TableSorter = TableProps['sorter'];\ntype TableColumnOrder = TYPE.Table.ColumnOrder;\ntype TableOnSortCancel = TableProps['onSortCancel'];\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(10);\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'FirstName',\n    fixed: 'left',\n    sorter: 'firstName',\n    key: 'firstName',\n    render: (d) => `${d.firstName} ${d.lastName}`,\n  },\n  { title: 'Age',\n    render: 'age',\n    sorter: 'age',\n    key: 'age',\n    align: 'right',\n  },\n  { title: 'Position', render: 'position' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => {\n  const [sortForm, setSortForm] = useState<{\n    columnName: string;\n    order: TableColumnOrder;\n  }>({\n    columnName: 'firstName',\n    order: 'asc',\n  });\n  const [tableRef, setTableRef] = useState<TYPE.Table.TableRef>();\n\n  const sorters: {\n    [x: string]: any;\n  } = {\n    age: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n      order === 'asc' ? a.age - b.age : b.age - a.age,\n    firstName: (order: TableColumnOrder) => (a: TableRowData, b: TableRowData) =>\n      order === 'asc'\n        ? a.firstName.localeCompare(b.firstName)\n        : b.firstName.localeCompare(a.firstName),\n  };\n\n  const getTableSorter: TableSorter = (name, order) => sorters[name](order);\n\n  const handleCancel: TableOnSortCancel = (prevType, index) => {\n    console.log('sort cancel : ', prevType, index);\n  };\n\n  const handleManualSort = () => {\n    tableRef?.sortByColumn({\n      columnKey: sortForm.columnName,\n      direction: sortForm.order,\n      columnSorter: sorters[sortForm.columnName]\n    });\n  };\n\n  return (\n    <div>\n      <Form value={sortForm} onChange={setSortForm} inline>\n        <Form.Item label='Column Name'>\n          <Radio.Group name=\"columnName\" keygen data={['firstName', 'age']}>\n          </Radio.Group>\n        </Form.Item>\n        <Form.Item label='Sort Order'>\n        <Radio.Group name=\"order\" keygen data={['asc', 'desc']}>\n        </Radio.Group>\n        </Form.Item>\n        <Form.Item label=''>\n        <Button onClick={handleManualSort}>排序</Button>\n        </Form.Item>\n      </Form>\n    <Table\n      striped\n      data={data}\n      keygen='id'\n      columns={columns}\n      sorter={getTableSorter}\n      onSortCancel={handleCancel}\n      tableRef={ref => setTableRef(ref)}\n    />\n    </div>\n  );\n};\n\nexport default App;\n\n"
      },
      {
        "title": "Pagination",
        "description": "Set the pagination property to show the pagination and if not set onChange property, the data is automatically paged",
        "scenario": "basic",
        "code": "/**\n * cn - 分页\n *    -- 前端分页的情况下, 设置 pagination 显示分页，没有设置 onChange 处理数据的情况下，会自动对数据进行分页\n *    -- pagination 的参数和 Pagination 组件一致\n * en - Pagination\n *    -- Set the pagination property to show the pagination and if not set onChange property, the data is automatically paged\n *    -- The parameters of pagination are consistent with the Pagination component\n */\nimport React, { useState } from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(1000);\n\nconst App: React.FC = () => {\n  const [current, setCurrent] = useState<number>(1);\n  const [pageSize, setPageSize] = useState<number>(10);\n\n  const handlePageChange = (_current: number, size?: number) => {\n    if(size !== undefined) setPageSize(size);\n    setCurrent(_current);\n  };\n\n  const columns: TableColumnItem[] = [\n    {\n      title: 'id',\n      render: 'id',\n      width: 70,\n      sorter: (order) => {\n        handlePageChange(1);\n        return (a, b) => {\n          if (order === 'asc') return a.id - b.id;\n          return b.id - a.id;\n        };\n      },\n    },\n    {\n      title: 'First Name',\n      group: 'Name',\n      render: 'firstName',\n      width: 100,\n    },\n    {\n      title: 'Last Name',\n      fixed: 'left',\n      group: 'Name',\n      render: 'lastName',\n      width: 120,\n      sorter: (order) => {\n        handlePageChange(1);\n        return (a, b) => {\n          if (order === 'asc') return a.lastName.localeCompare(b.lastName);\n          return b.lastName.localeCompare(a.lastName);\n        };\n      },\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n      title: 'Salary($)',\n      align: 'right',\n      fixed: 'right',\n      width: 100,\n      render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n  ];\n\n  return (\n    <Table\n      keygen='id'\n      data={data}\n      width={1500}\n      style={{maxHeight: '80vh'}}\n      columns={columns}\n      // bordered\n      pagination={{\n        current,\n        pageSize,\n        layout: ['links', 'list'],\n        onChange: handlePageChange,\n        pageSizeList: [10, 15, 20],\n        text: {\n          page: '/ page',\n        },\n      }}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "*    -- Processing (acquiring) data in pagination's onChange realizes the pagination of server-side",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 后端分页的情况下, 在 pagination 的 onChange 中处理（获取）数据，可以实现服务端分页\n * en -\n *    -- Processing (acquiring) data in pagination's onChange realizes the pagination of server-side\n */\nimport React, { useState, useEffect } from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype TableColumnOrder = TYPE.Table.ColumnOrder;\n\nconst App: React.FC = () => {\n  const [total, setTotal] = useState(0);\n  const [sorter, setSorter] = useState({});\n  const [current, setCurrent] = useState(1);\n  const [pageSize, setPageSize] = useState(20);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<TableRowData[]>([]);\n\n  const fetchData = () => {\n    setLoading(true);\n    user.fetch.get('user', { sorter, current, pageSize, username: '' }).then((res) => {\n      setData(res.data);\n      setLoading(false);\n      setTotal(res.total);\n    });\n  };\n\n  const handleSorter = (name: string, order: TableColumnOrder) => {\n    setSorter({ name, order });\n    setCurrent(1);\n  };\n\n  const handlePageChange = (c: number, p: number) => {\n    setCurrent(c);\n    setPageSize(p);\n  };\n\n  const columns: TableColumnItem[] = [\n    {\n      width: 80,\n      title: 'id',\n      render: 'id',\n      sorter: (order) => handleSorter('id', order),\n    },\n    {\n      width: 100,\n      group: 'Name',\n      title: 'First Name',\n      render: 'firstName',\n    },\n    {\n      width: 120,\n      fixed: 'left',\n      group: 'Name',\n      render: 'lastName',\n      title: 'Last Name',\n      sorter: (order) => handleSorter('lastName', order),\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start', sorter: (order) => handleSorter('start', order) },\n  ];\n\n  useEffect(() => {\n    fetchData();\n  }, [current, pageSize, sorter]);\n\n  return (\n    <Table\n      bordered\n      virtual\n      keygen='id'\n      data={data}\n      loading={loading}\n      columns={columns}\n      style={{ height: 400 }}\n      pagination={{\n        total,\n        current,\n        pageSize,\n        layout: ['links', 'list'],\n        onChange: handlePageChange,\n        pageSizeList: [10, 15, 20, 100],\n      }}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "onScroll",
        "description": "The onScroll event returns the current position(float,[0,1]) of the scroll bar",
        "scenario": "basic",
        "code": "/**\n * cn - 滚动加载\n *    -- onScroll 事件会返回当前滚动条位置 (float 类型，[0,1])，可以据此实现滚动加载数据\n * en - onScroll\n *    -- The onScroll event returns the current position(float,[0,1]) of the scroll bar\n */\nimport React, { useState, useEffect } from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst App: React.FC = () => {\n  const [pageSize] = useState(20);\n  const [current, setCurrent] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<TableRowData[]>([]);\n\n  const fetchData = () => {\n    setLoading(true);\n    user.fetch.get('table', { current, pageSize, sorter: {}, username: '' }).then((res) => {\n      setData([...data, ...res.data]);\n      setLoading(false);\n    });\n  };\n\n  const handleScroll = (_left: number, top: number) => {\n    if (top === 1 && !loading) {\n      setCurrent(current + 1);\n    }\n  };\n\n  const columns: TableColumnItem[] = [\n    { title: 'id', render: 'id', width: 70 },\n    {\n      width: 100,\n      group: 'Name',\n      title: 'First Name',\n      render: 'firstName',\n    },\n    {\n      width: 120,\n      fixed: 'left',\n      group: 'Name',\n      title: 'Last Name',\n      render: 'lastName',\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n  ];\n\n  useEffect(() => {\n    fetchData();\n  }, [pageSize, current]);\n\n  return (\n    <Table\n      bordered\n      virtual\n      keygen='id'\n      data={data}\n      loading={loading}\n      columns={columns}\n      verticalAlign='middle'\n      style={{ height: 450 }}\n      onScroll={handleScroll}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "*    -- The style of the loading element at the bottom of the Table",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- loading 元素位置在 Table 底部的样式\n * en -\n *    -- The style of the loading element at the bottom of the Table\n */\nimport React, { useState, useEffect } from 'react';\nimport { Table, Spin, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst App: React.FC = () => {\n  const [pageSize] = useState(20);\n  const [current, setCurrent] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<TableRowData[]>([]);\n\n  const fetchData = () => {\n    setLoading(true);\n    user.fetch.get('table', { current, pageSize, sorter: {}, username: '' }).then((res) => {\n      setData([...data, ...res.data]);\n      setLoading(false);\n    });\n  };\n\n  const handleScroll = (_left: number, top: number) => {\n    if (top === 1 && !loading) {\n      setCurrent(current + 1);\n    }\n  };\n\n  const columns: TableColumnItem[] = [\n    { title: 'id', render: 'id', width: 70 },\n    {\n      width: 100,\n      group: 'Name',\n      title: 'First Name',\n      render: 'firstName',\n    },\n    {\n      width: 120,\n      fixed: 'left',\n      group: 'Name',\n      title: 'Last Name',\n      render: 'lastName',\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n  ];\n\n  useEffect(() => {\n    fetchData();\n  }, [pageSize, current]);\n\n  return (\n    <Table\n      bordered\n      virtual\n      keygen='id'\n      data={data}\n      columns={columns}\n      verticalAlign='middle'\n      style={{ height: 450 }}\n      onScroll={handleScroll}\n    >\n      {loading && <div style={{padding: 16}}><Spin size={16} /></div>}\n    </Table>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "rowSpan & colSpan",
        "description": "- Set column's rowSpan property to merge rows. The rowSpan property is a function that passed in two adjacent rows of data and determine whether to merge or not",
        "scenario": "basic",
        "code": "/**\n * cn - 合并行/列\n *    -- 设置 column 的 rowSpan 可以合并行，rowSpan 为函数，会传入相邻的两行数据，根据此函数返回结果(bool)判断是否合并行\n *    -- 设置 column 的 colSpan 可以合并列，colSpan 为函数，传入参数为当前行数据，函数返回结果为需要向后合并的列数，不合并返回 1\n *    -- 一个单元格同时指定了rowSpan和colSpan时，如果两行的colSpan计算结果不同，这两行不会合并\n * en - rowSpan & colSpan\n *    -- - Set column's rowSpan property to merge rows. The rowSpan property is a function that passed in two adjacent rows of data and determine whether to merge or not\n *    -- - Set column's colSpan property to merge columns. The colSpan property is a function that passed in current row of data and the result returned by this function is as the number of columns that need to be merged\n *    -- - When a cell specifies both rowSpan and colSpan, if the colSpan's calculation results of the two rows are different, the two rows will not be merged\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 8850,\n    firstName: 'Kyler',\n    lastName: 'Corkery',\n    position: 'Systems Administrator',\n    start: '2010-03-22',\n    time: '01:49',\n    salary: 492227,\n    country: 'Bulgaria',\n    office: 'Accra',\n    office5: 'Pune',\n    height: 163.5,\n  },\n  {\n    id: 9656,\n    firstName: 'Blanca',\n    lastName: 'Beatty',\n    position: 'Integration Specialist',\n    start: '2010-03-24',\n    time: '08:41',\n    salary: 197056,\n    country: 'Hong Kong',\n    office: 'Qingdao',\n    office5: 'Fuzhou',\n    height: 165.15,\n  },\n  {\n    id: 1263,\n    firstName: 'Deondre',\n    lastName: 'Steuber',\n    position: 'Accountant',\n    start: '2010-03-25',\n    time: '08:15',\n    salary: 399963,\n    country: 'Ghana',\n    office: 'Lagos',\n    office5: 'Fuzhou',\n    height: 137.43,\n  },\n  {\n    id: 1487,\n    firstName: 'Sister',\n    lastName: 'Auer',\n    position: 'Support Engineer',\n    start: '2010-03-25',\n    time: '08:52',\n    salary: 172989,\n    country: 'Falkland Islands (Malvinas)',\n    office: 'Washington',\n    office5: 'Qingdao',\n    height: 157.17,\n  },\n  {\n    id: 5844,\n    firstName: 'Brett',\n    lastName: 'Harvey',\n    position: 'System Architect',\n    start: '2010-03-25',\n    time: '01:36',\n    salary: 253785,\n    country: 'Norfolk Island',\n    office: 'London',\n    office5: 'Fuzhou',\n    height: 131.22,\n  },\n  {\n    id: 8620,\n    firstName: 'Geovany',\n    lastName: 'Gulgowski',\n    position: 'Support Engineer',\n    start: '2010-03-25',\n    time: '07:20',\n    salary: 134985,\n    country: 'Bulgaria',\n    office: 'San Paulo',\n    office5: 'Chongqing',\n    height: 86.96,\n  },\n  {\n    id: 7323,\n    firstName: 'Luz',\n    lastName: 'Homenick',\n    position: 'Technical Author',\n    start: '2010-03-26',\n    time: '12:53',\n    salary: 380952,\n    country: 'Botswana',\n    office: 'Qingdao',\n    office5: 'Qingdao',\n    height: 132.83,\n  },\n  {\n    id: 9831,\n    firstName: 'Oma',\n    lastName: 'Hoeger',\n    position: 'Regional Director',\n    start: '2010-03-26',\n    time: '02:42',\n    salary: 390428,\n    country: 'Nauru',\n    office: 'Abidjan',\n    office5: 'Chongqing',\n    height: 158.7,\n  },\n  {\n    id: 1230,\n    firstName: 'Lillie',\n    lastName: 'Aufderhar',\n    position: 'Technical Author',\n    start: '2010-03-27',\n    time: '05:43',\n    salary: 71278,\n    country: 'Norfolk Island',\n    office: 'Riyadh',\n    office5: 'Fuzhou',\n    height: 133.9,\n  },\n  {\n    id: 4014,\n    firstName: 'Dominic',\n    lastName: 'Thiel',\n    position: 'Developer',\n    start: '2010-03-27',\n    time: '01:25',\n    salary: 361583,\n    country: 'Nauru',\n    office: 'Alexandria',\n    office5: 'Xian',\n    height: 109.25,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'id',\n    render: 'id',\n    width: 70,\n  },\n  {\n    title: 'First Name',\n    group: 'Name',\n    render: 'firstName',\n    rowSpan: (a, b) => a.firstName === b.firstName,\n  },\n  { title: 'Last Name', group: 'Name', render: 'lastName' },\n  {\n    title: 'Start Date',\n    width: 120,\n    render: 'start',\n    rowSpan: (a, b) => a.start === b.start,\n    colSpan: (d) => {\n      const hour = parseInt(d.time.slice(0, 2), 10);\n      if (hour > 21 || hour < 9) return 2;\n      return 1;\n    },\n  },\n  { title: 'Time', render: 'time' },\n  { title: 'Office', render: 'office5' },\n];\n\nconst App: React.FC = () => <Table bordered data={data} keygen='id' columns={columns} />;\n\nexport default App;\n"
      },
      {
        "title": "Select",
        "description": "Set the onRowSelect property will automatically add a column with checkbox",
        "scenario": "basic",
        "code": "/**\n * cn - 选择行\n *    -- 设置 onRowSelect 属性，会自动添加选择列\n * en - Select\n *    -- Set the onRowSelect property will automatically add a column with checkbox\n */\nimport React, { useState } from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData[]>;\ntype TableOnRowSelect = TableProps['onRowSelect'];\n\nconst data: TableRowData[] = user.fetchSync(20);\n\nconst columns: TableColumnItem[] = [\n  {\n    type: 'checkbox',\n    width: 40,\n  },\n  {\n    title: 'id',\n    render: 'id',\n    width: 60,\n  },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}`, width: 160 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst App: React.FC = () => {\n  const [selectedValue, setSelectedValue] = useState([data[2]]);\n  const handelRowSelect: TableOnRowSelect = (v) => {\n    setSelectedValue(v);\n  };\n\n  return (\n    <div>\n      <Table\n        data={data}\n        width={3000}\n        keygen='id'\n        columns={columns}\n        value={selectedValue}\n        style={{ height: 300 }}\n        onRowSelect={handelRowSelect}\n        prediction={(v, d) => v.id === d.id}\n      />\n      <div style={{ marginTop: 24, fontSize: 14 }}>{`selected rows: [${selectedValue\n        .map((v) => v.id)\n        .join(', ')}]`}</div>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Select format",
        "description": "Set format property to format the returned value",
        "scenario": "form",
        "code": "/**\n * cn - 选择行格式化\n *    -- 使用 format，可以格式化返回的数据\n * en - Select format\n *    -- Set format property to format the returned value\n */\nimport React, { useState } from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype TableProps = TYPE.Table.Props<TableRowData, string[]>;\ntype TableOnRowSelect = TableProps['onRowSelect'];\n\nconst data: TableRowData[] = user.fetchSync(20);\nconst value = [2, 3, 5].map((i) => `${data[i].firstName} ${data[i].lastName}`);\n\nconst columns: TableColumnItem[] = [\n  {\n    width: 60,\n    title: 'id',\n    render: 'id',\n  },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}`, width: 160 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst App: React.FC = () => {\n  const [selectedValue, setSelectedValue] = useState(value);\n\n  const handelRowSelect: TableOnRowSelect = (v) => {\n    setSelectedValue(v);\n  };\n  return (\n    <div>\n      <Table\n        keygen='id'\n        data={data}\n        columns={columns}\n        value={selectedValue}\n        style={{ height: 300 }}\n        onRowSelect={handelRowSelect}\n        format={(d) => `${d.firstName} ${d.lastName}`}\n      />\n      <div style={{ wordBreak: 'break-all', marginTop: 24, fontSize: 14 }}>\n        selected rows:\n        {JSON.stringify(selectedValue)}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Select signle",
        "description": "Set the radio attribute to achieve the radio effect",
        "scenario": "basic",
        "code": "/**\n * cn - 单选\n *    -- 设置 radio 属性实现单选效果\n * en - Select signle\n *    -- Set the radio attribute to achieve the radio effect\n */\nimport React, { useState } from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype TableProps = TYPE.Table.Props<TableRowData, number>;\ntype TableOnRowSelect = TableProps['onRowSelect'];\n\nconst data: TableRowData[] = user.fetchSync(20);\n\nconst columns: TableColumnItem[] = [\n  {\n    width: 60,\n    title: 'id',\n    render: 'id',\n  },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}`, width: 160 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst App: React.FC = () => {\n  const [selectedValue, setSelectedValue] = useState(3);\n\n  const handelRowSelect: TableOnRowSelect = (v) => {\n    setSelectedValue(v);\n  };\n  return (\n    <Table\n      keygen='id'\n      radio\n      data={data}\n      columns={columns}\n      value={selectedValue}\n      style={{ height: 300 }}\n      onRowSelect={handelRowSelect}\n      format='id'\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Select row span",
        "description": "Set the rowSpan property of the column with type checkbox to merge the selection row",
        "scenario": "basic",
        "code": "/**\n * cn - 选择行合并\n *    -- 给 type 为 checkbox 的列设置 rowSpan 属性，可以合并选择行\n * en - Select row span\n *    -- Set the rowSpan property of the column with type checkbox to merge the selection row\n */\nimport React, { useState } from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype TableProps = TYPE.Table.Props<TableRowData, number[]>;\ntype TableOnRowSelect = TableProps['onRowSelect'];\n\nconst data: TableRowData[] = user.fetchSync(20);\n\nconst rowSpan = (a: TableRowData, _next: TableRowData) => a.id % 3 === 0;\nconst columns: TableColumnItem[] = [\n  {\n    type: 'checkbox',\n    rowSpan,\n  },\n  {\n    width: 60,\n    title: 'id',\n    render: 'id',\n  },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}`, width: 160 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst App: React.FC = () => {\n  const [selectedValue, setSelectedValue] = useState([2, 3, 5]);\n\n  const handelRowSelect: TableOnRowSelect = (v) => {\n    setSelectedValue(v);\n  };\n  return (\n    <div>\n      <Table\n        keygen='id'\n        data={data}\n        columns={columns}\n        value={selectedValue}\n        style={{ height: 300 }}\n        onRowSelect={handelRowSelect}\n        format={'id'}\n      />\n      <div style={{ wordBreak: 'break-all', marginTop: 24, fontSize: 14 }}>\n        selected rows:\n        {JSON.stringify(selectedValue)}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Select disabled",
        "description": "Set disabled to true to disable all, set to a function to disable a specific row",
        "scenario": "basic",
        "code": "/**\n * cn - 选择行禁用\n *    -- disabled 属性设置为 true 时禁用全部, 设置为函数时禁用指定行\n * en - Select disabled\n *    -- Set disabled to true to disable all, set to a function to disable a specific row\n */\nimport React, { useState } from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype TableProps = TYPE.Table.Props<TableRowData, number[]>;\ntype TableOnRowSelect = TableProps['onRowSelect'];\n\nconst data: TableRowData[] = user.fetchSync(20);\n\nconst rowSpan = (a: TableRowData, _next: TableRowData) => a.id % 3 === 0;\nconst columns: TableColumnItem[] = [\n  {\n    type: 'checkbox',\n    rowSpan,\n  },\n  {\n    width: 60,\n    title: 'id',\n    render: 'id',\n  },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}`, width: 160 },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst App: React.FC = () => {\n  const [selectedValue, setSelectedValue] = useState([2, 3, 5]);\n\n  const handelRowSelect: TableOnRowSelect = (v) => {\n    setSelectedValue(v);\n  };\n  return (\n    <div>\n      <Table\n        keygen='id'\n        disabled={(d) => d.id === 3}\n        data={data}\n        columns={columns}\n        value={selectedValue}\n        style={{ height: 300 }}\n        onRowSelect={handelRowSelect}\n        format={'id'}\n      />\n      <div style={{ wordBreak: 'break-all', marginTop: 24, fontSize: 14 }}>\n        selected rows:\n        {JSON.stringify(selectedValue)}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Fixed head",
        "description": "Set the columnResizable property to make all columns resizable. set columnResizable: false on columns item to cancel resizable",
        "scenario": "basic",
        "code": "/**\n * cn - 可伸缩列\n *    -- 设置 columnResizable，使所有列可伸缩。<br />可在columns中设置某一列 columnResizable: false 来取消伸缩该列。\n * en - Fixed head\n *    -- Set the columnResizable property to make all columns resizable. set columnResizable: false on columns item to cancel resizable\n */\nimport React from 'react';\nimport { Table, TYPE, Popover } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(20);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', fixed: 'left', maxWidth: 300, minWidth: 100 },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start', columnResizable: false },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => (\n  <Table\n    columnResizable\n    virtual\n    height={300}\n    width={1200}\n    keygen='id'\n    columns={columns}\n    bordered\n    data={data}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Expand",
        "description": "Add a column with type 'expand' and the render function returns a function, that means the row can be expanded. The content is the result returned by this function",
        "scenario": "basic",
        "code": "/**\n * cn - 可展开\n *    -- 需要展开行时，可以增加一个 type 为 'expand' 的 column，render 函数返回函数时，表示此行可以展开，内容为此函数返回结果\n * en - Expand\n *    -- Add a column with type 'expand' and the render function returns a function, that means the row can be expanded. The content is the result returned by this function\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(100);\n\nconst columns: TableColumnItem[] = [\n  {\n    width: 10,\n    type: 'row-expand',\n    render: (d) => {\n      if (d.salary < 300000) return undefined;\n      return () => (\n        <div style={{ padding: '8px 12px', wordBreak: 'break-all' }}>{JSON.stringify(d)}</div>\n      );\n    },\n  },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => (\n  <Table\n    keygen='id'\n    data={data}\n    columns={columns}\n    style={{ height: 300 }}\n    onRowClick={(d, i) => console.log(d, i)}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- When an expandKeys is provided, the expansion becomes controlled and needs to be processed by the onClick in the column",
        "description": "受控,当传入一个expandKeys时,展开会变成受控的,需要自行在column里面的onClick去处理",
        "scenario": "basic",
        "code": "/**\n * cn - 可展开受控\n *    -- 受控,当传入一个expandKeys时,展开会变成受控的,需要自行在column里面的onClick去处理\n * en -\n *    -- When an expandKeys is provided, the expansion becomes controlled and needs to be processed by the onClick in the column\n */\nimport React, { useState } from 'react';\nimport { Table, Checkbox, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(5);\n\nconst App: React.FC = () => {\n  const [expandKeys, setExpandKeys] = useState([1]);\n\n  const columns: TableColumnItem[] = [\n    { title: 'id', render: 'id', width: 50 },\n    {\n      type: 'expand',\n      onClick: (d, isExpand) => {\n        if (isExpand) setExpandKeys([...expandKeys, d.id]);\n        else setExpandKeys(expandKeys.filter((k) => k !== d.id));\n      },\n      render: (d) => {\n        if (d.id > 5) return undefined;\n        return () => (\n          <div style={{ padding: '8px 12px', wordBreak: 'break-all' }}>{JSON.stringify(d)}</div>\n        );\n      },\n    },\n    { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n    { title: 'Office', render: 'office' },\n    { title: 'Start Date', render: 'start' },\n    {\n      title: 'Salary($)',\n      align: 'right',\n      render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n    },\n  ];\n\n  return (\n    <div>\n      <Checkbox.Group\n        style={{ marginBottom: 24 }}\n        keygen='id'\n        value={expandKeys}\n        onChange={setExpandKeys}\n      >\n        {[1, 2, 3, 4, 5].map((d) => (\n          <Checkbox key={d} htmlValue={d}>{`展开第 ${d} 行`}</Checkbox>\n        ))}\n      </Checkbox.Group>\n\n      <Table\n        expandKeys={expandKeys}\n        data={data}\n        keygen='id'\n        style={{ height: 300 }}\n        columns={columns}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Row ClassName",
        "description": "Set the rowClassName property to set row style. (You must specify td background-color when the rowClassName is set)",
        "scenario": "basic",
        "code": "/**\n * cn - 行样式\n *    -- 通过 rowClassName 设置单行样式（使用了 rowClassName 必须给 td 指定背景色）\n * en - Row ClassName\n *    -- Set the rowClassName property to set row style. (You must specify td background-color when the rowClassName is set)\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyle = createUseStyles(\n  {\n    danger: {\n      'table & td': {\n        backgroundColor: '#FCE6E6',\n      },\n    },\n    success: {\n      'table & td': {\n        backgroundColor: '#E4FCED',\n      },\n    },\n  },\n  { name: 'custom-table' },\n);\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData[]>;\ntype TableRowClassName = TableProps['rowClassName'];\n\nconst data: TableRowData[] = user.fetchSync(5);\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => {\n  const classes = useStyle();\n\n  const rowClassName: TableRowClassName = (d) => {\n    if (d.id === 2) return classes.danger;\n    if (d.id === 3) return classes.success;\n    return undefined;\n  };\n  return <Table keygen='id' columns={columns} data={data} rowClassName={rowClassName} />;\n};\n\nexport default App;\n"
      },
      {
        "title": "Base",
        "description": "Set the rowClickAttr to trigger an onRowClick event for an element",
        "scenario": "basic",
        "code": "/**\n * cn - 行内元素点击\n *    -- 设置 rowClickAttr，可以使行内元素的点击事件触发onRowClick\n * en - Base\n *    -- Set the rowClickAttr to trigger an onRowClick event for an element\n */\nimport React, { useState } from 'react';\nimport { Table, Radio, Gap, Link, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst dataList = user.fetchSync(4);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  {\n    title: 'Operation',\n    render: () => (\n      <Gap>\n        <Link data-info>\n          <span data-info>info</span>\n        </Link>\n        <Link data-call>\n          <span data-call>call</span>\n        </Link>\n      </Gap>\n    ),\n  },\n];\n\nconst App: React.FC = () => {\n  const [count, setCount] = useState(0);\n  const [attrs, setAttrs] = useState(['*']);\n\n  const handleClick = () => setCount(count + 1);\n\n  const handleChange = (v: string[]) => setAttrs(v);\n\n  return (\n    <div>\n      <Table\n        rowClickAttr={attrs}\n        onRowClick={handleClick}\n        keygen='id'\n        columns={columns}\n        data={dataList}\n      />\n      <div style={{ marginTop: 12, fontSize: 14, lineHeight: '22px' }}>\n        <span>rowClickAttr：</span>\n        <Radio.Group\n          keygen\n          value={attrs}\n          onChange={handleChange}\n          data={['data-info', 'data-call', '*']}\n          style={{ display: 'inline-block', verticalAlign: 'middle' }}\n        />\n      </div>\n      <div style={{ fontSize: 14 }}>\n        <span>onRowClick call count： </span>\n        <span>{count}</span>\n      </div>\n    </div>\n  );\n};\nexport default App;\n"
      },
      {
        "title": "Tree Data",
        "description": "Support Tree Data",
        "scenario": "basic",
        "code": "/**\n * cn - 树形数据\n *    -- 支持树形数据的展示，通过 `columns.treeColumnsName` 指定子数据字段名，同时在该列自动添加 展开/收起 按钮；\n *    -- 通过 columns.treeIndent 指定每一层缩进宽度；\n *    -- 备注：当展开列内容过长时，单元格会自动换行，可以通过 width 设定足够的长度来避免。\n * en - Tree Data\n *    -- Support Tree Data\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  office: string;\n  country: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n  children?: TableRowData[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    country: 'Reunion',\n    office: 'Miami',\n    children: [\n      {\n        id: 6,\n        firstName: 'Ialu',\n        lastName: 'Opis',\n        position: 'Finalick Designer',\n        country: 'Tokiy',\n        office: 'Miami',\n        children: [\n          {\n            id: 3,\n            firstName: 'Dylan',\n            lastName: 'Ratke',\n            position: 'Development Lead',\n            country: 'Peru',\n            office: 'Boston',\n            children: [\n              {\n                id: 10,\n                firstName: 'Danil',\n                lastName: 'Forun',\n                position: 'Development Lead',\n                country: 'Deini',\n                office: 'Conty',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 7,\n        firstName: 'Foak',\n        lastName: 'Resilt',\n        position: 'Dcaoko Designer',\n        country: 'Moran',\n        office: 'Korosal',\n      },\n      {\n        id: 8,\n        firstName: 'Jest',\n        lastName: 'Rokio',\n        position: 'Fmaiil Mail',\n        country: 'Moran',\n        office: 'Ticko',\n        children: [\n          {\n            id: 9,\n            firstName: 'Domo',\n            lastName: 'Wang',\n            position: 'Ameri Kich',\n            country: 'Moran',\n            office: 'Fiour',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n  },\n  {\n    id: 11,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    country: 'Peru',\n    office: 'Chengdu',\n    children: [\n      {\n        id: 12,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        country: 'Peru',\n        office: 'Boston',\n      },\n    ],\n  },\n  {\n    id: 13,\n    firstName: 'Wolo',\n    lastName: 'Casho',\n    position: 'Developer',\n    country: 'Franch',\n    office: 'Jiangsu',\n  },\n  {\n    id: 14,\n    firstName: 'Lou',\n    lastName: 'Woch',\n    position: 'Befined',\n    country: 'China',\n    office: 'Beijing',\n    children: [\n      {\n        id: 15,\n        firstName: 'Oos',\n        lastName: 'Wargen',\n        position: 'UX Designer',\n        country: 'Upck',\n        office: 'Andwarea',\n      },\n    ],\n  },\n  {\n    id: 16,\n    firstName: 'Endted',\n    lastName: 'Wang',\n    position: 'Ameri Kich',\n    country: 'Moran',\n    office: 'Fiour',\n    children: [\n      {\n        id: 17,\n        firstName: 'Oos',\n        lastName: 'Wargen',\n        position: 'UX Designer',\n        country: 'Upck',\n        office: 'Andwarea',\n      },\n    ],\n  },\n  {\n    id: 18,\n    firstName: 'Danil',\n    lastName: 'Forun',\n    position: 'Development Lead',\n    country: 'Deini',\n    office: 'Conty',\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'Name',\n    render: (d) => `${d.firstName} ${d.lastName}`,\n    width: 300,\n    treeIndent: 22,\n    treeColumnsName: 'children',\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst App: React.FC = () => (\n  <Table bordered height={300} keygen='id' columns={columns} data={data} />\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- Set treeCheckAll to deep check children",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 设置 treeCheckAll, 支持递归选择子数据\n * en -\n *    -- Set treeCheckAll to deep check children\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  office: string;\n  country: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n  children?: TableRowData[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    country: 'Reunion',\n    office: 'Miami',\n    children: [\n      {\n        id: 6,\n        firstName: 'Ialu',\n        lastName: 'Opis',\n        position: 'Finalick Designer',\n        country: 'Tokiy',\n        office: 'Miami',\n        children: [\n          {\n            id: 3,\n            firstName: 'Dylan',\n            lastName: 'Ratke',\n            position: 'Development Lead',\n            country: 'Peru',\n            office: 'Boston',\n            children: [\n              {\n                id: 10,\n                firstName: 'Danil',\n                lastName: 'Forun',\n                position: 'Development Lead',\n                country: 'Deini',\n                office: 'Conty',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 7,\n        firstName: 'Foak',\n        lastName: 'Resilt',\n        position: 'Dcaoko Designer',\n        country: 'Moran',\n        office: 'Korosal',\n      },\n      {\n        id: 8,\n        firstName: 'Jest',\n        lastName: 'Rokio',\n        position: 'Fmaiil Mail',\n        country: 'Moran',\n        office: 'Ticko',\n        children: [\n          {\n            id: 9,\n            firstName: 'Domo',\n            lastName: 'Wang',\n            position: 'Ameri Kich',\n            country: 'Moran',\n            office: 'Fiour',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n  },\n  {\n    id: 11,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    country: 'Peru',\n    office: 'Chengdu',\n    children: [\n      {\n        id: 12,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        country: 'Peru',\n        office: 'Boston',\n      },\n    ],\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'Name',\n    render: (d) => `${d.firstName} ${d.lastName}`,\n    width: 300,\n    treeColumnsName: 'children',\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst App: React.FC = () => (\n  <Table\n    bordered\n    defaultTreeExpandKeys={[1]}\n    keygen='id'\n    format='id'\n    data={data}\n    treeCheckAll\n    columns={columns}\n    onRowSelect={(selected) => console.log(selected)}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- Use treeExpandKeys and onTreeExpand to control the expand row",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 使用 treeExpandKeys 和 onTreeExpand 使展开行受控\n * en -\n *    -- Use treeExpandKeys and onTreeExpand to control the expand row\n */\nimport React, { useState } from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  office: string;\n  country: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n  children?: TableRowData[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\ntype TableProps = TYPE.Table.Props<TableRowData, TableRowData>;\ntype TableOnTreeExpand = TableProps['onTreeExpand'];\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    country: 'Reunion',\n    office: 'Miami',\n    children: [\n      {\n        id: 6,\n        firstName: 'Ialu',\n        lastName: 'Opis',\n        position: 'Finalick Designer',\n        country: 'Tokiy',\n        office: 'Miami',\n        children: [\n          {\n            id: 3,\n            firstName: 'Dylan',\n            lastName: 'Ratke',\n            position: 'Development Lead',\n            country: 'Peru',\n            office: 'Boston',\n            children: [\n              {\n                id: 10,\n                firstName: 'Danil',\n                lastName: 'Forun',\n                position: 'Development Lead',\n                country: 'Deini',\n                office: 'Conty',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 7,\n        firstName: 'Foak',\n        lastName: 'Resilt',\n        position: 'Dcaoko Designer',\n        country: 'Moran',\n        office: 'Korosal',\n      },\n      {\n        id: 8,\n        firstName: 'Jest',\n        lastName: 'Rokio',\n        position: 'Fmaiil Mail',\n        country: 'Moran',\n        office: 'Ticko',\n        children: [\n          {\n            id: 9,\n            firstName: 'Domo',\n            lastName: 'Wang',\n            position: 'Ameri Kich',\n            country: 'Moran',\n            office: 'Fiour',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n  },\n  {\n    id: 11,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    country: 'Peru',\n    office: 'Chengdu',\n    children: [\n      {\n        id: 12,\n        firstName: 'Dylan',\n        lastName: 'Ratke',\n        position: 'Development Lead',\n        country: 'Peru',\n        office: 'Boston',\n      },\n    ],\n  },\n  {\n    id: 13,\n    firstName: 'Wolo',\n    lastName: 'Casho',\n    position: 'Developer',\n    country: 'Franch',\n    office: 'Jiangsu',\n  },\n  {\n    id: 14,\n    firstName: 'Lou',\n    lastName: 'Woch',\n    position: 'Befined',\n    country: 'China',\n    office: 'Beijing',\n    children: [\n      {\n        id: 15,\n        firstName: 'Oos',\n        lastName: 'Wargen',\n        position: 'UX Designer',\n        country: 'Upck',\n        office: 'Andwarea',\n      },\n    ],\n  },\n  {\n    id: 16,\n    firstName: 'Endted',\n    lastName: 'Wang',\n    position: 'Ameri Kich',\n    country: 'Moran',\n    office: 'Fiour',\n    children: [\n      {\n        id: 17,\n        firstName: 'Oos',\n        lastName: 'Wargen',\n        position: 'UX Designer',\n        country: 'Upck',\n        office: 'Andwarea',\n      },\n    ],\n  },\n  {\n    id: 18,\n    firstName: 'Danil',\n    lastName: 'Forun',\n    position: 'Development Lead',\n    country: 'Deini',\n    office: 'Conty',\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'Name',\n    render: (d) => `${d.firstName} ${d.lastName}`,\n    width: 300,\n    treeColumnsName: 'children',\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst App: React.FC = () => {\n  const [expands, setExpands] = useState<(number | string)[]>([1]);\n\n  const handleExpand: TableOnTreeExpand = (keys) => {\n    console.log(keys);\n    setExpands(keys);\n  };\n\n  return (\n    <Table\n      bordered\n      virtual\n      keygen='id'\n      data={data}\n      height={300}\n      columns={columns}\n      treeExpandKeys={expands}\n      onTreeExpand={handleExpand}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "*    -- Set loader, support dynamic loading of child nodes",
        "description": "树形数据用法下，设置 `loader`后支持动态加载子节点数据;",
        "scenario": "basic",
        "code": "/**\n * cn - 动态加载\n *    -- 树形数据用法下，设置 `loader`后支持动态加载子节点数据;\n *    -- 备注：`column.treeColumnsName` 对应的字段(该例子中是children)未定义时视为可以动态加载节点，开启该节点的加载图标，点击图标触发 `loader` 函数，当children 为 null 或者长度为 0 视为叶子节点；\n * en -\n *    -- Set loader, support dynamic loading of child nodes\n */\nimport React, { useEffect, useState } from 'react';\nimport { Table, TYPE } from 'shineout';\ninterface TableRowData {\n  id: string;\n  title: string;\n  children?: TableRowData[] | null;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst initialData: TableRowData[] = [\n  {\n    id: '1',\n    title: 'Can Expand to load more1',\n  },\n  {\n    id: '2',\n    title: 'Can Expand to load more2',\n  },\n  {\n    id: '3',\n    title: 'Can\\'t Expand to load more3, cause children.length === 0',\n    children: [],\n  },\n  {\n    id: '4',\n    title: 'Can\\'t Expand to load more4, cause children is null',\n    children: null,\n  },\n  // mock 至 20\n  ...new Array(16).fill(0).map((_, index) => ({\n    id: `${index + 5}`,\n    title: `Can't Expand to load more${index + 5}, cause children is null`,\n    children: null,\n  })),\n];\n\nconst updateTreeData = (list: TableRowData[], key: React.Key, children: TableRowData[]): TableRowData[] =>\n  list.map((node) => {\n    if (node.id === key) {\n      return {\n        ...node,\n        children,\n      };\n    }\n    if (node.children) {\n      return {\n        ...node,\n        children: updateTreeData(node.children, key, children),\n      };\n    }\n    return node;\n  });\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'Title',\n    render: 'title',\n    width: 300,\n    treeIndent: 24,\n    treeColumnsName: 'children',\n  },\n  {\n    title: 'Id',\n    render: 'id',\n    width: 300,\n  },\n];\n\nconst App: React.FC = () => {\n  const [treeData, setTreeData] = useState<TableRowData[]>([]);\n  const [current, setCurrent] = useState(1);\n\n  useEffect(() => {\n    //根据current计算分页后的treeData\n    setTreeData(initialData.slice((current - 1) * 10, current * 10));\n  }, [current]);\n\n  const onLoadData = (dataItem: TableRowData) => {\n    return new Promise<void>((resolve) => {\n      if (dataItem?.children && dataItem?.children?.length > 0) {\n        resolve();\n        return;\n      }\n      setTimeout(() => {\n        setTreeData((origin) =>\n          updateTreeData(origin, dataItem?.id, [\n            { title: 'Child Node', id: `${dataItem?.id}-0` },\n            { title: 'Child Node', id: `${dataItem?.id}-1` },\n          ]),\n        );\n\n        resolve();\n      }, 3000);\n    })\n  };\n\n  return (\n    <Table\n      bordered\n      keygen='id'\n      columns={columns}\n      data={treeData}\n      loader={onLoadData}\n      pagination={{\n        pageSize: 10,\n        current,\n        onChange: setCurrent,\n        total: initialData.length,\n        pageSizeList: [10, 20, 30],\n      }}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Style only",
        "description": "Use the native tr and td to display the table",
        "scenario": "basic",
        "code": "/**\n * cn - 只使用样式\n *    -- 使用原生的tr, td来显示表格\n * en - Style only\n *    -- Use the native tr and td to display the table\n */\nimport React from 'react';\nimport { Table } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\nconst data: TableRowData[] = user.fetchSync(6);\n\nconst App: React.FC = () => (\n  <Table striped keygen='id' bordered>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Office</th>\n        <th>Start Date</th>\n        <th style={{ textAlign: 'right' }}>Salary($)</th>\n      </tr>\n    </thead>\n    <tbody>\n      {data.map((d) => (\n        <tr key={d.id}>\n          <td>{`${d.firstName} ${d.lastName}`}</td>\n          <td>{d.office}</td>\n          <td>{d.start}</td>\n          <td style={{ textAlign: 'right' }}>{`${d.salary\n            .toString()\n            .replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`}</td>\n        </tr>\n      ))}\n    </tbody>\n  </Table>\n);\n\nexport default App;\n"
      },
      {
        "title": "Sticky Header",
        "description": "Use the sticky attribute to sticky the header",
        "scenario": "basic",
        "code": "/**\n * cn - 表头附着\n *    -- 在滚屏场景下，可以设置 sticky 属性使表头附着顶部\n * en - Sticky Header\n *    -- Use the sticky attribute to sticky the header\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(20);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => {\n  return <Table sticky={{ top: 65, css: true }} data={data} columns={columns} keygen='id' />;\n};\n\nexport default App;\n"
      },
      {
        "title": "Cell selectable",
        "description": "whether to enable ctrl/cmd + click check",
        "scenario": "basic",
        "code": "/**\n * cn - 单元格选中\n *    -- 通过 cellSelectable 属性来启用 ctrl/cmd + click 选中单元格\n * en - Cell selectable\n *    -- whether to enable ctrl/cmd + click check\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => (\n  <Table keygen='id' width={1500} columns={columns} data={data} cellSelectable />\n);\n\nexport default App;\n"
      },
      {
        "title": "drag row",
        "description": "customize drag events through the rowEvents property",
        "scenario": "basic",
        "code": "/**\n * cn - 拖动行\n *    -- 通过 rowEvents 属性来自定义拖拽事件\n * en - drag row\n *    -- customize drag events through the rowEvents property\n */\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    exampleDragable: {\n      cursor: 'move',\n    },\n    exampleDragIn: {\n      '& td': {\n        borderBottom: '2px dashed #197AFA !important',\n      },\n    },\n  },\n  { name: 'table-example-drag' },\n);\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst findNearestDOM = (el: HTMLElement, tagName: string) => {\n  let node: any = el;\n  while (node.tagName !== tagName && node.tagName !== 'BODY') {\n    node = node.parentNode;\n  }\n  return node;\n};\nconst findIndex = (el: HTMLElement) => {\n  const tbody = findNearestDOM(el, 'TBODY');\n  const nodes = Array.prototype.slice.call(tbody.children);\n\n  return nodes.indexOf(el);\n};\n\nconst App: React.FC = () => {\n  const [d, setD] = useState(data);\n  const classes = useStyles();\n  const [target, setTarget] = useState<number | null>();\n  const ref = useRef<{\n    startIndex?: number;\n    dragging?: boolean;\n    current: { dragging?: boolean; startIndex?: number };\n  }>({ current: {} });\n\n  const dragStartHandler = useCallback((e: React.DragEvent) => {\n    if (ref.current.dragging) return;\n    ref.current.dragging = true;\n    ref.current.startIndex = findIndex(e.target as HTMLElement);\n  }, []);\n\n  const dragEnterHandler = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    if (!ref.current.dragging) return;\n    const tr = findNearestDOM(e.target as HTMLElement, 'TR');\n    const index = findIndex(tr);\n    setTarget(index);\n  }, []);\n\n  const dragOverHandler = useCallback((e: React.DragEvent) => {\n    if (!ref.current.dragging) return;\n    e.preventDefault();\n  }, []);\n\n  const dragEndHandler = useCallback((e: React.DragEvent) => {\n    if (!ref.current.dragging) return;\n    ref.current.dragging = false;\n    setTarget(null);\n  }, []);\n\n  const dropHandler = useCallback(\n    (e: React.DragEvent) => {\n      if (!ref.current.dragging) return;\n      e.preventDefault();\n      const tr = findNearestDOM(e.target as HTMLTableRowElement, 'TR');\n      const start = ref.current.startIndex;\n      const end = findIndex(tr);\n      if (start === end) return;\n      const source = d[start!];\n      const r = [...d];\n      console.log(start, end);\n      r.splice(start!, 1);\n      r.splice(end, 0, source);\n      setD(r);\n    },\n    [d],\n  );\n\n  return (\n    <Table\n      data={d}\n      keygen='id'\n      cellSelectable\n      columns={columns}\n      rowClassName={(_row, index) =>\n        `${index === target ? classes.exampleDragIn : ''} ${classes.exampleDragable}`\n      }\n      rowEvents={{\n        draggable: true,\n        onDrop: dropHandler,\n        onDragEnd: dragEndHandler,\n        onDragOver: dragOverHandler,\n        onDragStart: dragStartHandler,\n        onDragEnter: dragEnterHandler,\n      }}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "handle drag",
        "description": "customize drag events through the rowEvents property",
        "scenario": "basic",
        "code": "/**\n * cn - 句柄拖拽\n *    -- 通过 rowEvents 属性来自定义拖拽事件\n * en - handle drag\n *    -- customize drag events through the rowEvents property\n */\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    exampleDragIn: {\n      '& td': {\n        borderBottom: '2px dashed #197AFA !important',\n      },\n    },\n  },\n  { name: 'table-example-drag' },\n);\n\nlet canDrag = false;\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  {\n    title: '',\n    render: () => {\n      return (\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            minHeight: '14px',\n          }}\n        >\n          <span\n            style={{ cursor: 'move', height: '14px', lineHeight: 1 }}\n            onMouseEnter={() => {\n              canDrag = true;\n            }}\n            onMouseLeave={() => {\n              canDrag = false;\n            }}\n          >\n            <svg viewBox=\"0 0 24 24\" width=\"14px\" height=\"14px\">\n              <path fill='#B3B7C1' d=\"M16.002 18C17.1065 18 18.002 18.8954 18.002 20C18.002 21.1046 17.1065 22 16.002 22C14.8974 22 14.002 21.1046 14.002 20C14.002 18.8954 14.8974 18 16.002 18ZM8.00195 18C9.10652 18 10.002 18.8954 10.002 20C10.002 21.1046 9.10652 22 8.00195 22C6.89738 22 6.00195 21.1046 6.00195 20C6.00195 18.8954 6.89738 18 8.00195 18ZM16.002 10C17.1065 10 18.002 10.8954 18.002 12C18.002 13.1046 17.1065 14 16.002 14C14.8974 14 14.002 13.1046 14.002 12C14.002 10.8954 14.8974 10 16.002 10ZM8.00195 10C9.10652 10 10.002 10.8954 10.002 12C10.002 13.1046 9.10652 14 8.00195 14C6.89738 14 6.00195 13.1046 6.00195 12C6.00195 10.8954 6.89738 10 8.00195 10ZM16.002 2C17.1065 2 18.002 2.89543 18.002 4C18.002 5.10457 17.1065 6 16.002 6C14.8974 6 14.002 5.10457 14.002 4C14.002 2.89543 14.8974 2 16.002 2ZM8.00195 2C9.10652 2 10.002 2.89543 10.002 4C10.002 5.10457 9.10652 6 8.00195 6C6.89738 6 6.00195 5.10457 6.00195 4C6.00195 2.89543 6.89738 2 8.00195 2Z\"></path>\n            </svg>\n          </span>\n        </div>\n      );\n    },\n    width: 40,\n  },\n  { title: 'id', render: 'id', width: 50 },\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst findNearestDOM = (el: HTMLElement, tagName: string) => {\n  let node: any = el;\n  while (node.tagName !== tagName && node.tagName !== 'BODY') {\n    node = node.parentNode;\n  }\n  return node;\n};\nconst findIndex = (el: HTMLElement) => {\n  const tbody = findNearestDOM(el, 'TBODY');\n  const nodes = Array.prototype.slice.call(tbody.children);\n\n  return nodes.indexOf(el);\n};\n\nconst App: React.FC = () => {\n  const [d, setD] = useState(data);\n  const classes = useStyles();\n  const [target, setTarget] = useState<number | null>();\n  const ref = useRef<{\n    startIndex?: number;\n    dragging?: boolean;\n    current: { dragging?: boolean; startIndex?: number };\n  }>({ current: {} });\n\n  const dragStartHandler = useCallback((e: React.DragEvent) => {\n    if (!canDrag) {\n      e.preventDefault();\n      return;\n    }\n    if (ref.current.dragging) return;\n    ref.current.dragging = true;\n    ref.current.startIndex = findIndex(e.target as HTMLElement);\n  }, []);\n\n  const dragEnterHandler = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    if (!ref.current.dragging) return;\n    const tr = findNearestDOM(e.target as HTMLElement, 'TR');\n    const index = findIndex(tr);\n    setTarget(index);\n  }, []);\n\n  const dragOverHandler = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n  }, []);\n\n  const dragEndHandler = useCallback(() => {\n    if (!ref.current.dragging) return;\n    ref.current.dragging = false;\n    setTarget(null);\n  }, []);\n\n  const dropHandler = useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault();\n      if (!ref.current.dragging) return;\n      const tr = findNearestDOM(e.target as HTMLTableRowElement, 'TR');\n      const start = ref.current.startIndex;\n      const end = findIndex(tr);\n      if (start === end) return;\n      const source = d[start!];\n      const r = [...d];\n      console.log(start, end);\n      r.splice(start!, 1);\n      r.splice(end, 0, source);\n      setD(r);\n    },\n    [d],\n  );\n\n  return (\n    <Table\n      data={d}\n      keygen='id'\n      cellSelectable\n      columns={columns}\n      rowClassName={(_row, index) => `${index === target ? classes.exampleDragIn : ''}`}\n      rowEvents={{\n        draggable: true,\n        onDrop: dropHandler,\n        onDragEnd: dragEndHandler,\n        onDragOver: dragOverHandler,\n        onDragStart: dragStartHandler,\n        onDragEnter: dragEnterHandler,\n      }}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "footer summary",
        "description": "Render bottom information through the summary property",
        "scenario": "basic",
        "code": "/**\n * cn - 底部总结栏\n *    -- 通过 summary 属性来渲染底部信息\n * en - footer summary\n *    -- Render bottom information through the summary property\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  height: number;\n  salary: number;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\ntype TableProps = TYPE.Table.Props<TableRowData, number[]>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    salary: 115777,\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    salary: 396093,\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    salary: 236064,\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    salary: 338985,\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'height', render: 'height' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst summary: TableProps['summary'] = [\n  [\n    {\n      render: () => <span>Total</span>,\n    },\n    {\n      render: () => <span>{1347016}</span>,\n    },\n    {\n      render: () => <span>{2341312}</span>,\n    },\n  ],\n  [\n    {\n      render: () => <span>Balance</span>,\n    },\n    {\n      render: () => <span>{1234}</span>,\n      colSpan: 2,\n    },\n  ],\n];\n\nconst App: React.FC = () => (\n  <Table bordered data={data} keygen='id' cellSelectable columns={columns} summary={summary} />\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- Fixed column usage",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 固定列用法\n * en -\n *    -- Fixed column usage\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\ntype TableProps = TYPE.Table.Props<TableRowData, number[]>;\n\nconst data: TableRowData[] = user.fetchSync(20);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  {\n    title: 'First Name',\n    group: 'Name',\n    render: 'firstName',\n    width: 120,\n  },\n  {\n    title: 'Last Name',\n    fixed: 'left',\n    group: 'Name',\n    render: 'lastName',\n    width: 120,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    align: 'right',\n    fixed: 'right',\n    width: 100,\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst summary: TableProps['summary'] = [\n  [\n    { render: () => <span>Summary</span>, colSpan: 3 },\n    { render: () => <span>summary content</span>, colSpan: 4 },\n    { render: () => <span>summary2</span> },\n  ],\n];\n\nconst App: React.FC = () => (\n  <Table\n    bordered\n    keygen='id'\n    width={1500}\n    style={{ height: 300 }}\n    columns={columns}\n    data={data}\n    summary={summary}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Editable Rows",
        "description": "Usage of Table with Form component",
        "scenario": "form",
        "code": "/**\n * cn - 可编辑行\n *    -- 演示与Form组件结合使用实现可编辑行\n * en - Editable Rows\n *    -- Usage of Table with Form component\n */\n\nimport { useState } from 'react';\nimport { Button, Form, Input, Table, TYPE, Rule, Link, Modal, Message, Popover } from 'shineout';\n\nexport function ItemWithRequired(props: { children: React.ReactNode; top?: number, disabled?: boolean }) {\n  if (props.disabled) {\n    return props.children;\n  }\n  return (\n    <div style={{ position: 'relative' }}>\n      <span\n        style={{\n          color: '#EB4242',\n          position: 'absolute',\n          top: props.top || 0,\n          left: -2,\n          transform: 'translate(-100%, 0)',\n        }}\n      >\n        *\n      </span>\n      {props.children}\n    </div>\n  );\n}\ninterface TableRowData {\n  id?: number;\n  name?: string;\n  age?: string;\n}\n\ninterface FormTableValues {\n  values: TableRowData[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst rules = Rule();\n\nconst defaultData = [\n  { id: 1, name: 'Tom1', age: '18' },\n  { id: 2, name: 'Tom2', age: '28' },\n];\nexport default () => {\n  const [nextId, setNextId] = useState(3);\n  const [edits, setEdits] = useState<boolean[]>(new Array(defaultData.length).fill(false));\n  const [formDatas, setFormDatas] = useState<FormTableValues>({\n    values: defaultData,\n  });\n  const [tableData, setTableData] = useState<FormTableValues>({\n    values: defaultData,\n  });\n\n  const columns: TableColumnItem[] = [\n    { title: 'ID', width: 100, render: (d, index) => <div key={edits[index]?.toString()} style={{ lineHeight: edits[index] ? '32px' : 'auto' }}>{d.id}</div> },\n    {\n      title: <ItemWithRequired>Name</ItemWithRequired>,\n      width: 200,\n      render: (d, index) => {\n        return edits[index] ? (\n          <Form.Item style={{ marginBottom: 0 }}>\n            <Input rules={[rules.required]} name={`values[${index}].name`} />\n          </Form.Item>\n        ) : (\n          d.name\n        );\n      },\n    },\n    {\n      title: 'Age',\n      width: 200,\n      render: (d, index) => {\n        return edits[index] ? (\n          <ItemWithRequired disabled={Number(d.age) <= 18} top={5}>\n            <Form.Item style={{ marginBottom: 0 }}>\n              <Input rules={[rules.required]} name={`values[${index}].age`} />\n            </Form.Item>\n          </ItemWithRequired>\n        ) : (\n          d.age\n        );\n      },\n    },\n    {\n      title: 'Operation',\n      width: 100,\n      render: (d, index) => {\n        return edits[index] ? (\n          <>\n            <Link\n              type='primary'\n              onClick={() => {\n                setEdits(prev => {\n                  const newEdits = new Array(prev.length).fill(false);\n                  return newEdits;\n                });\n                setTableData({\n                  values: tableData.values.map((item, idx) =>\n                    idx === index ? { ...item, ...formDatas.values[index] } : item,\n                  ),\n                });\n                Message.success('Data saved successfully');\n              }}\n              style={{ lineHeight: '32px', marginRight: 8 }}\n            >\n              Save\n            </Link>\n            <Link\n              type='primary'\n              style={{ lineHeight: '32px' }}\n              onClick={() => {\n                setEdits(prev => {\n                  const newEdits = new Array(prev.length).fill(false);\n                  return newEdits;\n                });\n              }}\n            >\n              Cancel\n            </Link>\n          </>\n        ) : (\n          <>\n          <Link\n            type='primary'\n            onClick={() => {\n              setEdits(prev => {\n                const newEdits = new Array(prev.length).fill(false);\n                newEdits[index] = !prev[index];\n                return newEdits;\n              });\n              setFormDatas({\n                values: formDatas.values.map((item, idx) => (idx === index ? { ...d } : item)),\n              });\n            }}\n            style={{ marginRight: 8 }}\n          >\n            Edit\n          </Link>\n          <Link\n            type='danger'\n          >\n            <Popover.Confirm\n              title='Sure to delete?'\n              onCancel={() => console.log('cancel')}\n              onOk={() => {\n                const newDatas = tableData.values.filter((_, idx) => idx !== index);\n                setTableData({ values: newDatas });\n                setFormDatas({ values: newDatas });\n                setEdits(prev => prev.filter((_, idx) => idx !== index));\n              }}\n            >\n            </Popover.Confirm>\n            Delete\n          </Link>\n          </>\n        );\n      },\n    },\n  ];\n\n  return (\n    <Form\n      value={formDatas}\n      onChange={setFormDatas}\n      onSubmit={() => console.log('submit:>>', JSON.stringify(formDatas, null, 2))}\n      reserveAble\n    >\n      <div style={{ marginBottom: 12 }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            const newDatas = {\n              values: [\n                ...tableData.values,\n                {\n                  id: nextId,\n                  name: `Tom${nextId}`,\n                  age: `${nextId * 10 + 8}`,\n                },\n              ],\n            }\n            setTableData(newDatas);\n            setFormDatas(newDatas);\n            setEdits(prev => [...prev, false]);\n            setNextId(prev => prev + 1);\n          }}\n        >\n          Add\n        </Button>\n\n        <Form.Submit\n          onClick={() => {\n            Modal.info({\n              title: 'Form Data in Table',\n              content: <pre>{JSON.stringify(formDatas, null, 2)}</pre>,\n            });\n          }}\n        >\n          Submit\n        </Form.Submit>\n      </div>\n\n      <Table data={tableData.values} columns={columns} keygen='id' />\n    </Form>\n  );\n};\n"
      },
      {
        "title": "Editable Cells",
        "description": "Demonstrates the use of Form component to implement editable cells in a table",
        "scenario": "form",
        "code": "/**\n * cn - 可编辑单元格\n *    -- 演示与Form组件结合使用实现可编辑单元格\n * en - Editable Cells\n *    -- Demonstrates the use of Form component to implement editable cells in a table\n */\n\nimport { useState } from 'react';\nimport { Button, Form, Input, Table, TYPE, Rule, Link, Modal, Message, Popover } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    cell: {\n      cursor: 'pointer',\n      lineHeight: '32px',\n      height: 32,\n      padding: '0 8px',\n      borderRadius: 4,\n      border: '1px solid transparent',\n      '&:hover': {\n        borderColor: 'var(--soui-brand-6,#197AFA)',\n      },\n    },\n  },\n  { name: 'table-editable' },\n);\n\nexport function ItemWithRequired(props: { children: React.ReactNode; top?: number }) {\n  return (\n    <div style={{ position: 'relative' }}>\n      <span\n        style={{\n          color: '#EB4242',\n          position: 'absolute',\n          top: props.top || 0,\n          left: -2,\n          transform: 'translate(-100%, 0)',\n        }}\n      >\n        *\n      </span>\n      {props.children}\n    </div>\n  );\n}\n\nfunction EditableCell({ value, onEdit }: { value?: string; onEdit: () => void }) {\n  const classes = useStyles();\n  return (\n    <div onClick={onEdit} className={classes.cell}>\n      {value}\n    </div>\n  );\n}\ninterface TableRowData {\n  id?: number;\n  name?: string;\n  age?: string;\n}\n\ninterface FormTableValues {\n  values: TableRowData[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst rules = Rule();\n\nconst defaultData = [\n  { id: 1, name: 'Tom1', age: '18' },\n  { id: 2, name: 'Tom2', age: '28' },\n];\nexport default () => {\n  const [nextId, setNextId] = useState(3);\n  const [edits, setEdits] = useState<boolean[]>(new Array(defaultData.length).fill(false));\n  const [formDatas, setFormDatas] = useState<FormTableValues>({\n    values: defaultData,\n  });\n  const [tableData, setTableData] = useState<FormTableValues>({\n    values: defaultData,\n  });\n\n  const columns: TableColumnItem[] = [\n    { title: 'ID', width: 100, render: (d) => <div style={{ lineHeight: '32px' }}>{d.id}</div> },\n    {\n      title: <ItemWithRequired>Name</ItemWithRequired>,\n      width: 200,\n      render: (d, index) => {\n        return edits[index] ? (\n          <Form.Item style={{ marginBottom: 0 }}>\n            <Input\n              rules={[rules.required]}\n              name={`values[${index}].name`}\n              autoFocus\n              onBlur={(e) => {\n                setEdits((prev) => {\n                  const newEdits = [...prev];\n                  newEdits[index] = !newEdits[index];\n                  return newEdits;\n                });\n                setTableData({\n                  values: tableData.values.map((item, i) =>\n                    i === index ? { ...item, name: (e.target as any).value } : item,\n                  ),\n                });\n\n                Message.success('Data saved successfully');\n              }}\n            />\n          </Form.Item>\n        ) : (\n          <EditableCell\n            value={d.name}\n            onEdit={() => {\n              setEdits((prev) => {\n                const newEdits = [...prev];\n                newEdits[index] = !newEdits[index];\n                return newEdits;\n              });\n            }}\n          />\n        );\n      },\n    },\n    {\n      title: 'Age',\n      width: 200,\n      render: (d) => <div style={{ lineHeight: '32px' }}>{d.age}</div>,\n    },\n    {\n      title: 'Operation',\n      width: 100,\n      render: (d, index) => {\n        return (\n          <Link type='danger' style={{ lineHeight: '32px' }}>\n            <Popover.Confirm\n              title='Sure to delete?'\n              onCancel={() => console.log('cancel')}\n              onOk={() => {\n                const newDatas = tableData.values.filter((_, idx) => idx !== index);\n                setTableData({ values: newDatas });\n                setFormDatas({ values: newDatas });\n                setEdits(prev => prev.filter((_, idx) => idx !== index));\n              }}\n            ></Popover.Confirm>\n            Delete\n          </Link>\n        );\n      },\n    },\n  ];\n\n  return (\n    <Form\n      value={formDatas}\n      onChange={setFormDatas}\n      onSubmit={() => console.log('submit:>>', JSON.stringify(formDatas, null, 2))}\n      reserveAble\n    >\n      <div style={{ marginBottom: 12 }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            const newDatas = {\n              values: [\n                ...tableData.values,\n                {\n                  id: nextId,\n                  name: `Tom${nextId}`,\n                  age: `${nextId * 10 + 8}`,\n                },\n              ],\n            };\n            setTableData(newDatas);\n            setFormDatas(newDatas);\n            setEdits(prev => [...prev, false]);\n            setNextId(prev => prev + 1);\n          }}\n        >\n          Add\n        </Button>\n\n        <Form.Submit\n          onClick={() => {\n            Modal.info({\n              title: 'Form Data in Table',\n              content: <pre>{JSON.stringify(formDatas, null, 2)}</pre>,\n            });\n          }}\n        >\n          Submit\n        </Form.Submit>\n      </div>\n\n      <Table data={tableData.values} columns={columns} keygen='id' />\n    </Form>\n  );\n};\n"
      },
      {
        "title": "Sorter (Out of date)",
        "description": "Set the sorter property of column to indicate that this column can be sorted",
        "scenario": "basic",
        "code": "/**\n * cn - 排序 (旧)\n *    -- 设置 column 的 sorter 属性标示此列需要排序\n *    -- sorter 返回一个 sort 函数时，使用这个函数对数据进行内部排序\n *    -- 后端或自行排序用户自行处理，sorter 函数不要返回结果\n * en - Sorter (Out of date)\n *    -- Set the sorter property of column to indicate that this column can be sorted\n *    -- When the sorter returns a function, use this function to sort data internally\n *    -- Server-side or self-sorting is is handled by the user, do not return results\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(1000);\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'id',\n    render: 'id',\n    width: '50%',\n    sorter: (order) => (a, b) => {\n      if (order === 'asc') return a.id - b.id;\n      return b.id - a.id;\n    },\n  },\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: (d) => `${d.firstName} ${d.lastName}`,\n    width: 160,\n    sorter: (order) => (a, b) => {\n      if (order === 'asc') return a.firstName.localeCompare(b.firstName);\n      return b.firstName.localeCompare(a.firstName);\n    },\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n];\n\nconst App: React.FC = () => (\n  <Table\n    striped\n    keygen='id'\n    virtual\n    data={data}\n    width={1200}\n    rowsInView={10}\n    columns={columns}\n    style={{ maxHeight: 400 }}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "empty",
        "description": "empty",
        "scenario": "basic",
        "code": "/**\n * cn - 无数据\n *    -- empty\n * en - empty\n *    -- empty\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [];\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'id',\n    render: 'id',\n    width: 80,\n    fixed: 'left',\n  },\n  {\n    title: 'Name',\n    fixed: 'left',\n    render: (d) => `${d.firstName} ${d.lastName}`,\n    width: 160,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start', fixed: 'right' },\n];\n\nconst App: React.FC = () => (\n  <Table\n    striped\n    keygen='id'\n    data={data}\n    width={1200}\n    rowsInView={10}\n    columns={columns}\n    style={{ height: 400 }}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Hide headers",
        "description": "set hideHeader to hide headers",
        "scenario": "basic",
        "code": "/**\n * cn - 隐藏表头\n *    -- hideHeader 隐藏表头\n * en - Hide headers\n *    -- set hideHeader to hide headers\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={data} hideHeader bordered virtual />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Disable hover",
        "description": "set hover to false",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用hover\n *    -- set hover to false\n * en - Disable hover\n *    -- set hover to false\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={data} bordered virtual hover={false} />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Column align",
        "description": "Set the align property of the columns object to set the column alignment",
        "scenario": "basic",
        "code": "/**\n * cn - 列对齐方式\n *    -- columns 对象增加 align 属性，设置列对齐方式\n * en - Column align\n *    -- Set the align property of the columns object to set the column alignment\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  {\n    title: 'Name',\n    render: (d) => `${d.firstName} ${d.lastName}`,\n    align: 'right',\n    className: 'hello',\n    style: { color: 'red' },\n  },\n  { title: 'Country', render: 'country', align: 'center' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={data} bordered virtual hover={false} />\n    </div>\n  );\n};\n"
      },
      {
        "title": "scrollToIndex",
        "description": "The virtual list table provides a scrollToIndex method to scroll to the specified row",
        "scenario": "basic",
        "code": "/**\n * cn - 动态增减行\n *    -- 测试动态添加或删除行之后表格是否闪烁\n * en - scrollToIndex\n *    -- The virtual list table provides a scrollToIndex method to scroll to the specified row\n */\nimport { useState } from 'react';\nimport { Table } from 'shineout';\n\nconst AA = () => {\n  const [list, setList] = useState([\n    { a: 1, id: 1 },\n    { a: 2, id: 2 },\n    { a: 3, id: 4 },\n  ]);\n\n  const columns = [\n    { title: 'col1', render: 'a' },\n    {\n      title: 'operate',\n      render: (_d, i) => (\n        <div style={{ height: 100 }}>\n          <button\n            onClick={() =>\n              setList((pre) => {\n                const temp = [...pre];\n                temp.splice(i, 1);\n                return temp;\n              })\n            }\n          >\n            remove\n          </button>\n          <button onClick={() => {\n            setList((pre) => {\n              const temp = [...pre];\n              temp.splice(i, 0, { a: Math.random().toString(32), id: Math.random() * 100000 });\n              return temp;\n            })\n          }}>\n            add row\n          </button>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div\n      style={{\n        height: 1000,\n        background: '#ccc',\n        padding: 20,\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <div style={{ height: 100 }}></div>\n      <div style={{ padding: 20, background: 'red' }}>\n        <Table\n          style={{ flex: 1 }}\n          data={list}\n          columns={columns}\n          keygen='id'\n          sticky={{ css: true, top: 0 }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AA;\n"
      },
      {
        "title": "scroll-y-debug",
        "description": "table-tabs debug",
        "scenario": "basic",
        "code": "/**\n * cn - table-tabs\n *    -- table-tabs debug\n * en - scroll-y-debug\n *    -- table-tabs debug\n */\nimport React from 'react';\nimport { Table, TYPE, Tabs, Button } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(1000);\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  {\n    title: 'First Name',\n    group: 'Name',\n    render: 'firstName',\n    width: 120,\n  },\n  {\n    title: 'Last Name',\n    fixed: 'left',\n    group: 'Name',\n    render: 'lastName',\n    width: 120,\n  },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n  { title: 'Start Date', render: 'start' },\n  {\n    title: 'Salary($)',\n    // fixed: 'right',\n    align: 'right',\n    width: 100,\n    render: (d) => `${d.salary.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,')}`,\n  },\n];\n\nconst App: React.FC = () => {\n  const [activeTab, setActiveTab] = React.useState<string | number>('tab1');\n  const [tableData, setTableData] = React.useState<any[]>(data);\n\n  // React.useEffect(()=>{\n  //   if(activeTab === 'tab2') {\n  //     setTableData(data)\n  //   }else{\n  //     setTableData([])\n  //   }\n  // }, [activeTab])\n\n  return <div>\n    <Tabs\n  active={activeTab}\n  onChange={v => {\n    setActiveTab(v)\n  }}\n  style={{padding: 32}}\n  >\n    <Tabs.Panel id=\"tab1\" tab=\"Tab1\">\n      <h1>Tab1</h1>\n    </Tabs.Panel>\n    <Tabs.Panel id=\"tab2\" tab=\"Tab2\">\n      <Table\n        bordered\n        keygen='id'\n        width={1500}\n        style={{ height: '50vh' }}\n        // height=\"auto\"\n        columns={columns}\n        data={tableData}\n        // rowsInView={30}\n        fixed=\"y\"\n      />\n    </Tabs.Panel>\n    <Tabs.Panel id=\"tab3\" tab=\"Tab3\">\n      <Table\n        bordered\n        keygen='id'\n        width={1500}\n        style={{ height: '60vh' }}\n        // height=\"auto\"\n        columns={columns}\n        data={tableData}\n        // rowsInView={30}\n        fixed=\"y\"\n      />\n    </Tabs.Panel>\n  </Tabs>\n  <Button onClick={() => {\n    setTableData([])\n  }}>清空数据</Button>\n\n<Button onClick={() => {\n    setTableData(data)\n  }}>设置数据</Button>\n  </div>\n}\n\nexport default App;\n"
      },
      {
        "title": "Select absolute",
        "description": "The absolute property of the Select component in the Table",
        "scenario": "basic",
        "code": "/**\n * cn - Select absolute\n *    -- Select 组件的 absolute 属性在Table内的表现\n * en - Select absolute\n *    -- The absolute property of the Select component in the Table\n */\nimport React from 'react';\nimport {\n  Button,\n  Popover,\n  Select,\n  Table,\n  Tooltip,\n  TYPE,\n  DatePicker,\n  Dropdown,\n  TreeSelect,\n} from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(20);\n\n\nconst App: React.FC = () => {\n  const tableContainerRef = React.useRef<HTMLDivElement>(null);\n\n\nconst columns: TableColumnItem[] = [\n  { title: 'id', render: 'id', width: 50 },\n  {\n    title: () => <Select keygen data={[1, 2, 3]} absolute={() => tableContainerRef.current} />,\n    group: 'Name',\n    render: 'firstName',\n    width: 120,\n  },\n  {\n    title: 'Last Name',\n    fixed: 'left',\n    group: 'Name',\n    render: 'lastName',\n    width: 120,\n  },\n  { title: () => <Select keygen data={[1, 2, 3]} absolute={() => tableContainerRef.current}  placeholder=\"absolute=tableContainerRef.current\" />, render: 'country' },\n  { title: () => <Select keygen data={[1, 2, 3]} absolute={false} placeholder=\"absolute=false\" />, render: 'position' },\n  { title: () => <Select keygen data={[1, 2, 3]} absolute placeholder=\"absolute=true\" />, render: 'office' },\n  { title: 'Start Date', render: () => <Select keygen data={[1, 2, 3]} follow /> },\n  {\n    title: 'tooltip',\n    render: () => (\n      <Tooltip\n        trigger='click'\n        tip={<div style={{ height: 200 }}>Are you sure you want to delete this content ?</div>}\n      >\n        <Button>tooltip</Button>\n      </Tooltip>\n    ),\n  },\n  {\n    title: 'Popover',\n    render: () => (\n      <Button>\n        confirm\n        <Popover\n          title='Tips'\n          trigger='click'\n          onCancel={() => console.log('cancel')}\n          // onOk={onOk}\n        >\n          <div style={{ height: 200 }}>Are you sure you want to delete this content ?</div>\n        </Popover>\n      </Button>\n    ),\n  },\n  {\n    title: 'Salary($)',\n    fixed: 'right',\n    align: 'right',\n    width: 100,\n    render: () => <Select keygen data={[1, 2, 3]} />,\n  },\n];\n\n  return (\n    <div>\n      <h4>测试表格</h4>\n      <div ref={tableContainerRef}>\n        <Table\n          bordered\n          keygen='id'\n          width={1500}\n          style={{ height: 300 }}\n          columns={columns}\n          data={data}\n          virtual\n          sticky={{top: 100}}\n        />\n      </div>\n      <h4>测试div内滚</h4>\n      <div style={{ height: 300, overflow: 'auto' }}>\n        <div style={{ height: 500 }}>placeholder</div>\n        <Tooltip\n          trigger='click'\n          tip={<div style={{ height: 200 }}>Are you sure you want to delete this content ?</div>}\n        >\n          <Button>tooltip</Button>\n        </Tooltip>\n\n        <DatePicker absolute />\n\n        <Dropdown absolute />\n\n        <Select keygen data={[1, 2, 3]} absolute />\n\n        <TreeSelect keygen data={[]} absolute />\n\n        <div style={{ height: 800 }}>placeholder</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "virtual=lazy",
        "description": "virtual=lazy does not trigger rerender during Table scrolling",
        "scenario": "basic",
        "code": "/**\n * cn - virtual=lazy\n *    -- virtual=lazy 在Table滚动期间不触发rerender\n * en - virtual=lazy\n *    -- virtual=lazy does not trigger rerender during Table scrolling\n */\nimport React, { useState } from 'react';\nimport { Input, Table, TYPE, Button } from 'shineout';\nimport { user } from '@sheinx/mock';\nimport TreeSelectExample from '../../tree-select/__example__/10-virtual';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n  [k: string]: any;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = user.fetchSync(1000);\n\nconst CacheTable = () => {\n  const [inputValue, setInputValue] = useState<string | undefined>('');\n\n  const columns: TableColumnItem[] = [\n    {\n      type: 'checkbox',\n      width: 80,\n    },\n    { title: 'id', render: 'id', width: 80 },\n    {\n      title: 'Name',\n      fixed: 'left',\n      render: (d) => (\n        <div\n          id={`name_${d.id}`}\n          style={{ height: d.height }}\n        >\n          {`${d.firstName} ${d.lastName}`}\n\n          <Button type=\"primary\">test</Button>\n\n          {/* <TreeSelectExample /> */}\n        </div>\n      ),\n      width: 160,\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n\n    // @ts-ignore mock 100 more columns\n    ...Array.from({ length: 100 }, (_, i) => ({\n      title: `Office${i}`,\n      render: 'office',\n      width: 100,\n    })),\n\n    {\n      title: 'Office',\n      render: () => (\n        <div>\n          <Input\n            value={inputValue}\n            onChange={(v) => {\n              console.log('input onChange: >>', v);\n              setInputValue(v);\n            }}\n          />\n          <Button type=\"primary\">test</Button>\n\n          <TreeSelectExample />\n        </div>\n      ),\n    },\n    {\n      title: 'Start Date',\n      render: () => (\n        <div>\n          inputValue: {inputValue}\n          {/* <Button mode='text'>test2</Button>\n          <TreeSelectExample /> */}\n        </div>\n      ),\n      fixed: 'right',\n      width: 140,\n    },\n  ];\n\n  return <Table\n      keygen='id'\n      bordered\n      data={data}\n      virtual=\"lazy\"\n      width={columns.reduce((a, b) => a + ((b.width || 100) as number), 0)}\n      rowsInView={5}\n      columns={columns}\n      style={{ height: 500 }}\n    />\n}\n\nconst NoCacheTable = () => {\n\n  const [inputValue, setInputValue] = useState<string | undefined>('');\n\n  const columns: TableColumnItem[] = [\n    {\n      type: 'checkbox',\n      width: 80,\n    },\n    { title: 'id', render: 'id', width: 80 },\n    {\n      title: 'Name',\n      fixed: 'left',\n      render: (d) => (\n        <div\n          id={`name_${d.id}`}\n          style={{ height: d.height }}\n        >\n          {`${d.firstName} ${d.lastName}`}\n          <Button type=\"warning\">test</Button>\n        </div>\n      ),\n      width: 160,\n    },\n    { title: 'Country', render: 'country' },\n    { title: 'Position', render: 'position' },\n    // @ts-ignore mock 100 more columns\n    ...Array.from({ length: 100 }, (_, i) => ({\n      title: `Office${i}`,\n      render: 'office',\n      width: 100,\n    })),\n\n    {\n      title: 'Office',\n      render: () => (\n        <div>\n          <Input\n            value={inputValue}\n            onChange={(v) => {\n              console.log('======================');\n              console.log('input onChange: >>', v);\n              console.log('======================');\n              setInputValue(v);\n            }}\n          />\n          <Button type=\"primary\">test</Button>\n\n          <TreeSelectExample />\n        </div>\n      ),\n    },\n    {\n      title: 'Start Date',\n      render: () => (\n        <div>\n          inputValue: {inputValue}\n          {/* <Button mode='text'>test2</Button>\n          <TreeSelectExample /> */}\n        </div>\n      ),\n      fixed: 'right',\n      width: 140,\n    },\n  ];\n\n  return <Table\n      keygen='id'\n      bordered\n      data={data}\n      virtual\n      width={columns.reduce((a, b) => a + ((b.width || 100) as number), 0)}\n      rowsInView={10}\n      columns={columns}\n      style={{ height: 500 }}\n    />\n\n}\nconst App: React.FC = () => {\n  return (\n    <div style={{ width: '100%', display: 'flex' }}>\n      <div style={{flex: 1, minWidth: 0}}>\n        <h2>CacheTable</h2>\n        <CacheTable />\n      </div>\n      <div style={{flex: 1, minWidth: 0}}>\n        <h2>NoCacheTable</h2>\n        <NoCacheTable />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 56,
      "requiredProps": 1,
      "propsWithWhen": 54,
      "examplesCount": 59
    },
    "subComponentApis": {}
  },
  "Tabs": {
    "name": "Tabs",
    "description": "用来分隔内容上有关联但属于不同类别的数据集合，具有全局导航的作用",
    "category": "other",
    "importPath": "import { Tabs } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "lazy",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启懒加载"
      },
      {
        "name": "shape",
        "type": "\"button\" | \"line\" | \"bordered\" | \"card\" | \"dash\" | \"fill\"",
        "required": false,
        "defaultValue": "\\\"card\\\"",
        "description": "Shape 不为空时，activeBackground 等颜色参数将会无效，当shape为bordered时，指向card"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素,必须为 Panel 元素"
      },
      {
        "name": "extra",
        "type": "ReactNode",
        "required": false,
        "description": "额外内容"
      },
      {
        "name": "splitColor",
        "type": "string",
        "required": false,
        "description": "分割线颜色,替代原有border属性"
      },
      {
        "name": "hideSplit",
        "type": "boolean",
        "required": false,
        "description": "是否隐藏分割线"
      },
      {
        "name": "collapsible",
        "type": "boolean",
        "required": false,
        "description": "是否可折叠"
      },
      {
        "name": "defaultCollapsed",
        "type": "boolean",
        "required": false,
        "description": "默认折叠状态,当 collapsible 设置为 true 时生效"
      },
      {
        "name": "autoFill",
        "type": "boolean",
        "required": false,
        "description": "自动填充内容区域,当position为left-top, right-top且shape为非button和fill时默认开启，其他情况需手动控制"
      },
      {
        "name": "switchToTop",
        "type": "boolean",
        "required": false,
        "description": "切换 tab 将自动滚动到 Tabs"
      },
      {
        "name": "sticky",
        "type": "number | boolean | StickyProps",
        "required": false,
        "description": "开启头部附着"
      },
      {
        "name": "position",
        "type": "| \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\"",
        "required": false,
        "description": "选项卡位置"
      },
      {
        "name": "activeBackground",
        "type": "string",
        "required": false,
        "description": "选中标签背景色"
      },
      {
        "name": "inactiveBackground",
        "type": "string",
        "required": false,
        "description": "未选中标签背景色"
      },
      {
        "name": "tabBarStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "tab bar 的样式对象"
      },
      {
        "name": "onChange",
        "type": "((key: string | number) => void)",
        "required": false,
        "description": "标签选中时触发回调事件"
      },
      {
        "name": "color",
        "type": "string",
        "required": false,
        "description": "标签页文字颜色，仅当 shape 为 \\\"card\\\" 时生效"
      },
      {
        "name": "allowNonPanel",
        "type": "boolean",
        "required": false,
        "description": "允许非Tabs.Panel的子元素",
        "version": "3.5.3"
      },
      {
        "name": "renderTabsHeader",
        "type": "((header: ReactNode, props: Omit<TabsProps, \"renderTabsHeader\">) => ReactNode)",
        "required": false,
        "description": "自定义渲染 header 内容",
        "version": "3.7.0"
      },
      {
        "name": "active",
        "type": "string | number",
        "required": false,
        "description": "当前选中标签页（受控）"
      },
      {
        "name": "defaultActive",
        "type": "string | number",
        "required": false,
        "defaultValue": "0",
        "description": "默认选中标签页（非受控）"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Basic usage of Tabs",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 选项卡的基本用法\n * en - Basic\n *    -- Basic usage of Tabs\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape='line' defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Shape",
        "description": "There are three shapes for tabs, you can set the `shape` property to change it",
        "scenario": "basic",
        "code": "/**\n * cn - 不同样式\n *    -- 选项卡有五种样式，可通过 `shape` 属性设置，card 卡片，line 线条，button 按钮, fill 填充, dash 短线\n *    -- 设置 `shape = \"line\"` 标签页显示为线条\n * en - Shape\n *    -- There are three shapes for tabs, you can set the `shape` property to change it\n *    -- Set `shape = \"line\"` to show tabs as line\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs: any[] = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape={'line'} defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Set `shape = \"button\"` to show tabs as buttons",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn - \n *    -- 设置 `shape = \"button\"` 标签页显示为按钮\n * en - \n *    -- Set `shape = \"button\"` to show tabs as buttons\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs: any[] = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape={'button'} defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Set `shape = \"card\"` to show tabs as card",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn - \n *    -- 设置 `shape = \"card\"` 标签页显示为卡片式\n * en - \n *    -- Set `shape = \"card\"` to show tabs as card\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs: any[] = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape={'card'} defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Set `shape = \"fill\"` to show tabs as fill",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn - \n *    -- 设置 `shape = \"fill\"` 标签页显示为填充\n * en - \n *    -- Set `shape = \"fill\"` to show tabs as fill\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs: any[] = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape={'fill'} defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Set `shape = \"dash\"` to show tabs as dash",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn - \n *    -- 设置 `shape = \"dash\"` 标签页显示为短线\n * en - \n *    -- Set `shape = \"dash\"` to show tabs as dash\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs: any[] = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape={'dash'} defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Position",
        "description": "Set the position of the tab through the `position` property. When the `shape` is button or fill, only the four positions of top-left, top-right, bottom-left, bottom-right are supported",
        "scenario": "basic",
        "code": "/**\n * cn - 不同位置\n *    -- 通过设置 `position` 属性来控制选项卡的位置\n *    -- 当 `shape` 为 button 或 fill 时，仅支持 top-left, top-right, bottom-left, bottom-right 四个位置\n *    -- 目前支持的位置有 top-left, top-right, bottom-left, bottom-right, left-top, right-top 六种布局\n * en - Position\n *    -- Set the position of the tab through the `position` property. When the `shape` is button or fill, only the four positions of top-left, top-right, bottom-left, bottom-right are supported\n *    -- Currently supported positions are top-left, top-right, bottom-left, bottom-right, left-top, right-top\n */\nimport { useState } from 'react';\nimport { Tabs, Radio, Form } from 'shineout';\n\nexport default () => {\n  const [shape, setShape] = useState('line');\n  const [position, setPosition] = useState('top-left');\n  const shapes = ['line', 'card', 'button', 'fill', 'dash'];\n  const positions = [\n    'top-left',\n    'top-right',\n    'bottom-left',\n    'bottom-right',\n    'left-top',\n    'right-top',\n  ];\n\n  const tabs = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({\n      title: `Tab ${i + 1}`,\n      content:\n        i === 1\n          ? 'Joy in living comes from having fine emotions, trusting them, giving them the freedom of a bird in the open. Joy in living can never be assumed as a pose, or put on from the outside as a mask. People who have this joy do not need to talk about it; they radiate it. They just live out their joy and let it splash its sunlight and glow into other lives as naturally as bird sings. We can never get it by working for it directly. It comes, like happiness, to those who are aiming at something higher. It is a byproduct of great, simple living. The joy of living comes from what we put into living, not from what we seek to get from it. As you travel through life there are always those times when decisions just have to be made when the choices are hard, and solutions seem scarce and the rain seems to soak your parade!Joy in living comes from having fine emotions, trusting them, giving them the freedom of a bird in the open. Joy in living can never be assumed as a pose, or put on from the outside as a mask. People who have this joy do not need to talk about it; they radiate it. They just live out their joy and let it splash its sunlight and glow into other lives as naturally as bird sings. We can never get it by working for it directly. It comes, like happiness, to those who are aiming at something higher. It is a byproduct of great, simple living. The joy of living comes from what we put into living, not from what we seek to get from it. As you travel through life there are always those times when decisions just have to be made when the choices are hard, and solutions seem scarce and the rain seems to soak your parade!'\n          : `Content of Tab ${i + 1}`,\n    });\n  }\n\n  return (\n    <div>\n      <Form labelWidth={65} labelAlign='left'>\n        <Form.Item label='Position:' style={{ marginBottom: 16 }}>\n          <Radio.Group keygen data={positions} value={position} onChange={setPosition} />\n        </Form.Item>\n\n        <Form.Item label='Type:' style={{ marginBottom: 24 }}>\n          <Radio.Group keygen data={shapes} value={shape} onChange={setShape} />\n        </Form.Item>\n      </Form>\n\n      <div style={{ height: 150 }}>\n        <Tabs shape={shape as any} position={position as any} autoFill defaultActive={0}>\n          {tabs.map((tab, index) => {\n            return (\n              <Tabs.Panel key={index} tab={tab.title} disabled={index === tabs.length - 1}>\n                <div style={{ padding: 16, fontSize: 14 }}>{tab.content}</div>\n              </Tabs.Panel>\n            );\n          })}\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Control",
        "description": "Set the `active` property to control the active state of the tab",
        "scenario": "basic",
        "code": "/**\n * cn - 受控\n *    -- 通过设置 `active` 属性来控制选项卡的激活状态\n * en - Control\n *    -- Set the `active` property to control the active state of the tab\n */\nimport { useState } from 'react';\nimport { Tabs, Radio } from 'shineout';\n\nexport default () => {\n  const [active, setActive] = useState<string | number>(1);\n  const actives = [0, 1, 2];\n  const tabs = [];\n\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div>\n      <Radio.Group\n        keygen\n        data={actives}\n        value={active}\n        renderItem={(v) => `Tab ${v + 1}`}\n        onChange={setActive}\n        style={{ marginBottom: 24 }}\n      />\n      <div style={{ height: 100 }}>\n        <Tabs shape='line' active={active} onChange={setActive}>\n          {tabs.map((tab, index) => {\n            return (\n              <Tabs.Panel key={index} tab={tab.title}>\n                <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n              </Tabs.Panel>\n            );\n          })}\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "autoFill",
        "description": "Set the `autoFill` property, the tab will automatically fill the width of the parent element",
        "scenario": "basic",
        "code": "/**\n * cn - 自动填充\n *    -- 设置 `autoFill` 属性后，选项卡会自动填充父元素的宽度\n * en - autoFill\n *    -- Set the `autoFill` property, the tab will automatically fill the width of the parent element\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div style={{ height: 150 }}>\n      <Tabs shape='line' autoFill defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div\n                style={{\n                  padding: 12,\n                  height: '100%',\n                  fontSize: 14,\n                  lineHeight: '20px',\n                }}\n              >\n                Joy in living comes from having fine emotions, trusting them, giving them the\n                freedom of a bird in the open. Joy in living can never be assumed as a pose, or put\n                on from the outside as a mask. People who have this joy do not need to talk about\n                it; they radiate it. They just live out their joy and let it splash its sunlight and\n                glow into other lives as naturally as bird sings. We can never get it by working for\n                it directly. It comes, like happiness, to those who are aiming at something higher.\n                It is a byproduct of great, simple living. The joy of living comes from what we put\n                into living, not from what we seek to get from it. As you travel through life there\n                are always those times when decisions just have to be made when the choices are\n                hard, and solutions seem scarce and the rain seems to soak your parade!\n              </div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "extra",
        "description": "Set the `extra` property to add extra content",
        "scenario": "basic",
        "code": "/**\n * cn - 额外内容\n *    -- 通过配置 `extra` 属性，允许传入额外的内容\n * en - extra\n *    -- Set the `extra` property to add extra content\n */\nimport { Tabs, Button } from 'shineout';\n\nexport default () => {\n  const tabs = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  const renderExtra = () => {\n    return (\n      <Button mode='text' type='primary'>\n        extra operation\n      </Button>\n    );\n  };\n\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape='line' defaultActive={0} extra={renderExtra()}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Scroll",
        "description": "When there are too many Tabs, the scroll function will be automatically enabled",
        "scenario": "basic",
        "code": "/**\n * cn - 滚动\n *    -- 当 Tabs 数量过多时，将自动开启滚动功能\n * en - Scroll\n *    -- When there are too many Tabs, the scroll function will be automatically enabled\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs = [];\n  for (let i = 0; i < 100; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape='line' defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Collapsible",
        "description": "Set the `collapsible` property to collapse the panel area",
        "scenario": "basic",
        "code": "/**\n * cn - 折叠\n *    -- 通过设置 `collapsible` 属性折叠面板区域\n * en - Collapsible\n *    -- Set the `collapsible` property to collapse the panel area\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const renderIcon = () => {\n    return (\n      <svg viewBox=\"0 0 24 24\" width=\"14px\" height=\"14px\">\n        <path fill='#666C7C' d=\"M16.002 1C16.9526 1 17.9107 1.91116 17.9958 2.86373L18.002 3V4H19.002C19.9526 4 20.9107 4.91116 20.9958 5.86373L21.002 6V22C21.002 22.6984 20.3103 23.1694 19.673 22.9446L19.5674 22.9006L13.502 19.974L7.43652 22.9006C6.84449 23.1863 6.1677 22.8326 6.02798 22.23L6.00823 22.1142L6.00195 22V19.145L4.43652 19.9006C3.84449 20.1863 3.1677 19.8326 3.02798 19.23L3.00823 19.1142L3.00195 19V3C3.00195 2.0725 3.9728 1.09337 4.87382 1.00627L5.00195 1H16.002ZM18.502 6H8.50195C8.25649 6 8.05234 6.17688 8.01001 6.41012L8.00195 6.5V19.6106C8.00195 19.6858 8.01893 19.7601 8.05163 19.8279C8.15829 20.049 8.40631 20.156 8.63478 20.0927L8.71923 20.0609L12.809 18.087L13.0674 17.963C13.2635 17.8684 13.4828 17.8413 13.6922 17.8819L13.8163 17.9143L13.9215 17.9569L13.9511 17.9701L17.6557 19.757L18.2847 20.0609C18.3524 20.0936 18.4267 20.1106 18.502 20.1106C18.7474 20.1106 18.9516 19.9337 18.9939 19.7005L19.002 19.6106V6.5C19.002 6.22386 18.7781 6 18.502 6ZM15.502 3H5.50195C5.25649 3 5.05234 3.17688 5.01001 3.41012L5.00195 3.5V16.6106C5.00195 16.6858 5.01893 16.7601 5.05163 16.8279C5.15829 17.049 5.40631 17.156 5.63478 17.0927L5.71923 17.0609L6.00195 16.924V6C6.00195 5.08197 6.95654 4.09423 7.8716 4.00633L8.00195 4H16.002V3.5C16.002 3.25454 15.8251 3.05039 15.5918 3.00806L15.502 3Z\"></path>\n      </svg>\n    );\n  };\n\n  return (\n    <div>\n      <Tabs shape='line' defaultActive={0} collapsible>\n        <Tabs.Panel tab='Tab 1'>\n          <div style={{ padding: 16, fontSize: 14 }}>\n            Joy in living comes from having fine emotions, trusting them, giving them the freedom of\n            a bird in the open. Joy in living can never be assumed as a pose, or put on from the\n            outside as a mask. People who have this joy do not need to talk about it; they radiate\n            it. They just live out their joy and let it splash its sunlight and glow into other\n            lives as naturally as bird sings. We can never get it by working for it directly. It\n            comes, like happiness, to those who are aiming at something higher. It is a byproduct of\n            great, simple living. The joy of living comes from what we put into living, not from\n            what we seek to get from it. As you travel through life there are always those times\n            when decisions just have to be made when the choices are hard, and solutions seem scarce\n            and the rain seems to soak your parade!\n          </div>\n        </Tabs.Panel>\n        <Tabs.Panel\n          tab={\n            <span style={{ marginInlineStart: 4, display: 'flex', alignItems: 'center' }}>\n              <span style={{ marginInlineEnd: 4 }}>Tab2</span>\n              {renderIcon()}\n            </span>\n          }\n        >\n          <div style={{ padding: 16, fontSize: 14 }}>Content of Tab 2</div>\n        </Tabs.Panel>\n        <Tabs.Panel\n          tab={\n            <span style={{ display: 'flex', alignItems: 'center' }}>\n              {renderIcon()}\n              <span style={{ marginInlineStart: 4 }}>Tab3</span>\n            </span>\n          }\n        >\n          <div style={{ padding: 16, fontSize: 14 }}>Content of Tab 3</div>\n        </Tabs.Panel>\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Sticky header",
        "description": "The sticky property will enable the sticky header feature; when sticky=true, the header will be attached to the top; when sticky=number, it means that the header is attached to the top and the distance from the top; when sticky=StickyProps, the parameters will be passed to the Sticky component; the switchToTop property supports whether to automatically scroll to Tabs",
        "scenario": "basic",
        "code": "/**\n * cn - 头部附着\n *    -- sticky 属性会开启头部附着功能；sticky=true时，开启附着在顶部；sticky=number时，代表附着顶部，且距离顶部的间距；sticky=StickyProps时，参数将传入 Sticky 组件内；switchToTop 属性支持是否自动滚动到Tabs\n * en - Sticky header\n *    -- The sticky property will enable the sticky header feature; when sticky=true, the header will be attached to the top; when sticky=number, it means that the header is attached to the top and the distance from the top; when sticky=StickyProps, the parameters will be passed to the Sticky component; the switchToTop property supports whether to automatically scroll to Tabs\n */\nimport React, { useRef } from 'react';\nimport { Tabs } from 'shineout';\n\nconst App: React.FC = () => {\n  const Element = useRef(null);\n  const tabs = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div style={{ position: 'relative', zIndex: 0 }}>\n      <div id='sticky_element' style={{ height: 400, overflow: 'auto' }}>\n        <div\n          style={{\n            height: 1600,\n            backgroundColor: '#f4f5f8',\n            backgroundImage:\n              'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), ' +\n              'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff)',\n            backgroundSize: '20px 20px',\n            backgroundPosition: '0 0, 10px 10px',\n          }}\n        >\n          <div style={{ height: 200 }}></div>\n          <div ref={Element}>\n            <Tabs\n              shape='line'\n              defaultActive={0}\n              sticky={{\n                scrollContainer: '#sticky_element',\n                parent: Element.current,\n                top: 0,\n              }}\n              style={{ backgroundColor: '#fff' }}\n              inactiveBackground='transparent'\n              activeBackground='transparent'\n              tabBarStyle={{ backgroundColor: '#fff' }}\n            >\n              {tabs.map((tab, index) => {\n                return (\n                  <Tabs.Panel key={index} tab={tab.title}>\n                    <div style={{ padding: 16, height: 100, fontSize: 14 }}>{tab.content}</div>\n                  </Tabs.Panel>\n                );\n              })}\n            </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Basic",
        "description": "Basic usage of Tabs",
        "scenario": "basic",
        "code": "/**\n * cn - lcd-link\n *    -- 选项卡的基本用法\n * en - Basic\n *    -- Basic usage of Tabs\n */\nimport { Tabs } from 'shineout';\nimport {Link as ReactRouterLink} from 'react-router-dom'\n// import { createLocation } from 'history';\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { let hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { let Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { let NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nconst createLocation = (str) => str\nconst isModifiedEvent = () => false\nimport React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import gud from 'gud';\n// import warning from 'tiny-warning';\nconst warning = str => str\nconst gud = () => ''\nlet MAX_SIGNED_31_BIT_INT = 1073741823; // Inlined Object.is polyfill.1\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\nfunction objectIs(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  }\n\n  return x !== x && y !== y;\n}\n\nfunction createEventEmitter(value) {\n  let handlers = [];\n  return {\n    on: function on(handler) {\n      handlers.push(handler);\n    },\n    off: function off(handler) {\n      handlers = handlers.filter(function (h) {\n        return h !== handler;\n      });\n    },\n    get: function get() {\n      return value;\n    },\n    set: function set(newValue, changedBits) {\n      value = newValue;\n      handlers.forEach(function (handler) {\n        return handler(value, changedBits);\n      });\n    }\n  };\n}\n\nfunction onlyChild(children) {\n  return Array.isArray(children) ? children[0] : children;\n}\n\nfunction createReactContext(defaultValue, calculateChangedBits) {\n  let contextProp = '__create-react-context-' + gud() + '__';\n\n  let Provider = /*#__PURE__*/function (_Component) {\n    _inherits(Provider, _Component);\n\n    let _super = _createSuper(Provider);\n\n    function Provider(props, context) {\n      let _this;\n\n      _classCallCheck(this, Provider);\n\n      _this = _super.call(this, props, context);\n      _this.emitter = createEventEmitter(_this.props.value);\n      return _this;\n    }\n\n    _createClass(Provider, [{\n      key: \"getChildContext\",\n      value: function getChildContext() {\n        return _defineProperty({}, contextProp, this.emitter);\n      }\n    }, {\n      key: \"UNSAFE_componentWillReceiveProps\",\n      value: function UNSAFE_componentWillReceiveProps(nextProps) {\n        if (this.props.value !== nextProps.value) {\n          let oldValue = this.props.value;\n          let newValue = nextProps.value;\n          let changedBits = 0;\n\n          if (objectIs(oldValue, newValue)) {\n            changedBits = 0; // No change\n          } else {\n            changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n            if (process.env.NODE_ENV !== 'production') {\n              warning((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);\n            }\n\n            changedBits |= 0;\n\n            if (changedBits !== 0) {\n              this.emitter.set(nextProps.value, changedBits);\n            }\n          }\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return this.props.children;\n      }\n    }]);\n\n    return Provider;\n  }(Component);\n\n  // Provider.childContextTypes = _defineProperty({}, contextProp, PropTypes.object.isRequired);\n\n  let Consumer = /*#__PURE__*/function (_Component2) {\n    _inherits(Consumer, _Component2);\n\n    let _super2 = _createSuper(Consumer);\n\n    function Consumer(props, context) {\n      let _this2;\n\n      _classCallCheck(this, Consumer);\n\n      _this2 = _super2.call(this, props, context);\n      _this2.state = {\n        value: _this2.getValue()\n      };\n      _this2.observedBits = 0;\n\n      _this2.onUpdate = function (newValue, changedBits) {\n        let observedBits = _this2.observedBits | 0;\n\n        if ((observedBits & changedBits) !== 0) {\n          _this2.setState({\n            value: _this2.getValue()\n          });\n        }\n      };\n\n      return _this2;\n    }\n\n    _createClass(Consumer, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (this.context[contextProp]) {\n          this.context[contextProp].on(this.onUpdate);\n        }\n\n        let observedBits = this.props.observedBits;\n        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default\n        : observedBits;\n      }\n    }, {\n      key: \"UNSAFE_componentWillReceiveProps\",\n      value: function UNSAFE_componentWillReceiveProps(nextProps) {\n        let observedBits = nextProps.observedBits;\n        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default\n        : observedBits;\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        if (this.context[contextProp]) {\n          this.context[contextProp].off(this.onUpdate);\n        }\n      }\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this.context[contextProp]) {\n          return this.context[contextProp].get();\n        }\n\n        return defaultValue;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return onlyChild(this.props.children)(this.state.value);\n      }\n    }]);\n\n    return Consumer;\n  }(Component);\n\n  // Consumer.contextTypes = _defineProperty({}, contextProp, PropTypes.object);\n  return {\n    Provider: Provider,\n    Consumer: Consumer\n  };\n}\n\n\nlet RouterContext = createReactContext(null);\nRouterContext.displayName = 'RRC-Router';\n\n\n\n\n\nlet Link = /*#__PURE__*/function (_React$Component) {\n  _inherits(Link, _React$Component);\n\n  let _super = _createSuper(Link);\n\n  function Link() {\n    _classCallCheck(this, Link);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Link, [{\n    key: \"handleClick\",\n    value: function handleClick(event, context, linkExtendable, to) {\n      let _this$props = this.props,\n          onClick = _this$props.onClick,\n          target = _this$props.target,\n          replace = _this$props.replace;\n\n      if (onClick) {\n        onClick(event);\n      }\n\n      let nextUrl = linkExtendable && context.linkExtendable ? context.genNextUrl(to) : to;\n\n      if (!event.defaultPrevented // onClick prevented default\n      && event.button === 0 // ignore everything but left clicks\n      && (!target || target === '_self') // let browser handle \"target=_blank\" etc.\n      && !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n          let method = replace ? context.history.replace : context.history.push;\n          method(nextUrl);\n        }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      let _this = this;\n\n      let _this$props2 = this.props,\n          innerRef = _this$props2.innerRef,\n          replace = _this$props2.replace,\n          to = _this$props2.to,\n          children = _this$props2.children,\n          linkExtendable = _this$props2.linkExtendable,\n          rest = _objectWithoutProperties(_this$props2, [\"innerRef\", \"replace\", \"to\", \"children\", \"linkExtendable\"]);\n\n      return /*#__PURE__*/React.createElement(RouterContext.Consumer, null, function (context) {\n        // if (!context) {\n        //   throw new Error('You should not use <Link> outside a <Router>');\n        // }\n\n        let location = '';\n        let href = location ? context.history.createHref(location) : '';\n        return /*#__PURE__*/React.createElement(\"a\", _extends({}, rest, {\n          onClick: function onClick(event) {\n            return _this.handleClick(event, context, linkExtendable, to);\n          },\n          href: href,\n          ref: innerRef\n        }), children);\n      });\n    }\n  }]);\n\n  return Link;\n}(React.Component);\n\nfunction MyLink(props) {\n  return <span>{props.children}</span>\n}\nexport default () => {\n  const tabs = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}`, link: '/cn/component/shineout/Table' });\n  }\n  // const renderTab = (title) => {\n  //   return <Link to=\"/\">{title}</Link>\n  // }\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape='line' defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={<Link to={'/'}>{tab.title}</Link>}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Tab nest",
        "description": "Nest usage",
        "scenario": "basic",
        "code": "/**\n * cn - Tab nest\n *    -- 嵌套使用\n * en - Tab nest\n *    -- Nest usage\n */\nimport React from 'react';\nimport { Tabs } from 'shineout';\n\nexport default () => {\n   const [outerIndex, setOuterIndex] = React.useState(0);\n   const [innerIndex, setInnerIndex] = React.useState([0, 0]);\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs active={outerIndex} onChange={setOuterIndex}>\n        <Tabs.Panel tab=\"home\">\n          <Tabs\n            shape=\"line\"\n            active={innerIndex[0]} onChange={v => {\n            setInnerIndex([v, innerIndex[1]]);\n          }}>\n              <Tabs.Panel tab=\"111\">111</Tabs.Panel>\n              <Tabs.Panel tab=\"222\">222</Tabs.Panel>\n              <Tabs.Panel tab=\"333\">333</Tabs.Panel>\n          </Tabs>\n        </Tabs.Panel>\n        <Tabs.Panel tab=\"demo\">\n          <Tabs\n            shape=\"line\"\n            active={innerIndex[1]} onChange={v => {\n            setInnerIndex([innerIndex[0], v]);\n          }}>\n              <Tabs.Panel tab=\"aaa\">aaa</Tabs.Panel>\n              <Tabs.Panel tab=\"bbb\">bbb</Tabs.Panel>\n          </Tabs>\n        </Tabs.Panel>\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Scroll",
        "description": "When there are too many Tabs, the scroll function will be automatically enabled",
        "scenario": "basic",
        "code": "/**\n * cn - 滚动debug\n *    -- 当 Tabs 数量过多时，将自动开启滚动功能\n * en - Scroll\n *    -- When there are too many Tabs, the scroll function will be automatically enabled\n */\nimport { useEffect, useState } from 'react';\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const [tabsData, setTabsData] = useState([{title: '111', content:\" 1111\"}]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      const tabs = [];\n      for (let i = 0; i < 100; i++) {\n        tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n      }\n      setTabsData(tabs);\n    }, 3000);\n  }, [])\n\n\n  return (\n    <div style={{ height: 100, width: 300 }}>\n      <Tabs shape='line' defaultActive={0}>\n        {tabsData.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Dynamic Tabs",
        "description": "Internal test",
        "scenario": "basic",
        "code": "/**\n * cn - 动态Tabs数量\n *    -- 内部测试\n * en - Dynamic Tabs\n *    -- Internal test\n */\nimport { useEffect, useState } from 'react';\nimport { Tabs } from 'shineout';\n\nconst AA = () => {\n  const [list, setList] = useState([1, 2, 3]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setList([1, 2]);\n    }, 3000);\n  }, []);\n\n  return (\n    <Tabs>\n      {list.map((el) => (\n        <Tabs.Panel tab={el} key={el} />\n      ))}\n    </Tabs>\n  );\n};\n\nexport default AA;\n\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 23,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 17
    },
    "subComponentApis": {}
  },
  "Tag": {
    "name": "Tag",
    "description": "标签是一种灵活、常用的分类方式，对关键词进行标记、分类或选择",
    "category": "other",
    "importPath": "import { Tag } from 'shineout'",
    "props": [
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "mode",
        "type": "\"bright\" | \"outline\" | \"fill\" | \"brightOutline\"",
        "required": false,
        "defaultValue": "\\\"bright\\\"",
        "description": "标签样式"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "color",
        "type": "| \"default\" | \"info\" | \"success\" | \"warning\" | \"danger\" | \"brown\" | \"purple\" | \"cyan\" | \"magenta\" | \"indigo\" | \"tangerine\" | \"lemon\" | \"neon\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "标签颜色,代替原有type属性，支持更多色系"
      },
      {
        "name": "shape",
        "type": "\"rounded\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "标签形状"
      },
      {
        "name": "backgroundColor",
        "type": "string",
        "required": false,
        "description": "背景色,可以自行的设置标签的背景色"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "内容，文字或react组件"
      },
      {
        "name": "onCompleted",
        "type": "((value: string) => void)",
        "required": false,
        "description": "Tag 编辑完成时触发该事件（children 必须为 string）"
      },
      {
        "name": "onClick",
        "type": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "点击 tag 事件"
      },
      {
        "name": "onClose",
        "type": "boolean | ((e: MouseEvent<HTMLDivElement, MouseEvent>) => void | Promise<any>)",
        "required": false,
        "description": "当 onClose 为空时，不显示关闭。如果需要关闭又不需要处理回调，设置为 true 即可"
      },
      {
        "name": "onKeyUp",
        "type": "((e: KeyboardEvent<HTMLInputElement>) => void)",
        "required": false,
        "description": "可编辑输入框 keyUp 事件"
      },
      {
        "name": "onEnterPress",
        "type": "((value: string, e: KeyboardEvent<HTMLInputElement>) => void)",
        "required": false,
        "description": "可编辑输入框回车事件"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "The five basic functions of the tag, default, info, danger, warning, success",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 标签常用的 5 种基本功能，默认、信息、危险、警告、成功\n *    -- 注意，`type` 属性将弃用，请使用 `color` 属性\n * en - Base\n *    -- The five basic functions of the tag, default, info, danger, warning, success\n *   -- Note that the `type` property will be deprecated, please use the `color` property\n */\n\nimport { Tag } from 'shineout';\nexport default () => {\n  const TagColor = ['default', 'info', 'danger', 'warning', 'success'];\n\n  const capitalizeFirstLetter = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n  return (\n    <div>\n      {TagColor.map((item, index) => (\n        <Tag key={index} color={item as any}>\n          {capitalizeFirstLetter(item)}\n        </Tag>\n      ))}\n    </div>\n  );\n};\n"
      },
      {
        "title": "Size",
        "description": "The size of the tag is divided into small, default and large",
        "scenario": "basic",
        "code": "/**\n * cn - 标签尺寸\n *    -- 标签尺寸分为 小、中、大 3 种\n * en - Size\n *    -- The size of the tag is divided into small, default and large\n */\n\nimport { Tag } from 'shineout';\nexport default () => {\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Tag size='small'>Small</Tag>\n        <Tag>Default</Tag>\n        <Tag size='large'>Large</Tag>\n      </div>\n      <div>\n        <Tag size='small' onClose>\n          Small\n        </Tag>\n        <Tag onClose>Default</Tag>\n        <Tag size='large' onClose>\n          Large\n        </Tag>\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Mode",
        "description": "The mode of the tag is divided into bright, fill, outline, brightOutline line 4 kinds",
        "scenario": "basic",
        "code": "/**\n * cn - 标签样式\n *    -- 标签样式分为 亮色、填充、线框、亮色线框 4 种\n * en - Mode\n *    -- The mode of the tag is divided into bright, fill, outline, brightOutline line 4 kinds\n */\n\nimport { Tag } from 'shineout';\nexport default () => {\n  const TagColor = ['default', 'info', 'danger', 'warning', 'success'];\n  const TagMode = ['bright', 'fill', 'outline', 'brightOutline'];\n\n  const capitalizeFirstLetter = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  return (\n    <div>\n      {TagMode.map((mode, midx) => {\n        return (\n          <div key={midx} style={{ marginBottom: midx === TagMode.length - 1 ? 0 : 24 }}>\n            {TagColor.map((color, cidx) => (\n              <Tag mode={mode as any} key={cidx} color={color as any}>\n                {capitalizeFirstLetter(color)}\n              </Tag>\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"
      },
      {
        "title": "Color",
        "description": "In addition to the five basic functions of the commonly used tag, the component also provides tags of other colors",
        "scenario": "basic",
        "code": "/**\n * cn - 多色标签\n *    -- 除常用 5 种常用的基本功能色外，组件还提供了其他色系的标签\n *    -- 注意，`type` 属性将弃用，`color` 属性同样支持 type 同属性值的样式\n * en - Color\n *    -- In addition to the five basic functions of the commonly used tag, the component also provides tags of other colors\n *    -- Note that the `type` property will be deprecated, and the `color` property also supports the style of the same property value as type\n */\n\nimport { TYPE, Tag } from 'shineout';\n\ntype TagColorType = Exclude<TYPE.Tag.Props['color'], undefined>\ntype TagModeType = Exclude<TYPE.Tag.Props['mode'], undefined>\n\nexport default () => {\n  const TagColor: TagColorType[] = ['tangerine', 'magenta', 'purple', 'indigo', 'cyan', 'neon', 'lemon', 'brown'];\n  const TagMode: TagModeType[] = ['bright', 'fill', 'outline', 'brightOutline'];\n\n  const capitalizeFirstLetter = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  return (\n    <div>\n      {TagMode.map((mode, midx) => {\n        return (\n          <div key={midx} style={{ marginBottom: 24 }}>\n            {TagColor.map((color, cidx) => (\n              <Tag mode={mode} key={cidx} color={color}>\n                {capitalizeFirstLetter(color)}\n              </Tag>\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"
      },
      {
        "title": "Delete and add tags",
        "description": "Generate tags through arrays, dynamically increase and change",
        "scenario": "basic",
        "code": "/**\n * cn - 可删除和添加标签\n *    -- 通过数组生成tags，动态增改\n * en - Delete and add tags\n *    -- Generate tags through arrays, dynamically increase and change\n */\n\nimport { useState } from 'react';\nimport { Tag } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyle = createUseStyles(\n  {\n    addTag: {\n      '&:hover': {\n        borderColor: 'var(--soui-tag-info-outline-border-color,var(--soui-brand-6,#197AFA))',\n        color: 'var(--soui-tag-info-outline-font-color,var(--soui-brand-6,#197AFA))',\n      },\n    },\n  },\n  { name: 'custom-tag' },\n);\n\nconst plusIcon = <svg viewBox=\"0 0 24 24\" width=\"12px\" height=\"12px\" fill=\"currentColor\" style={{display: 'block'}}>\n  <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M11.8185 2.09595C12.3708 2.09595 12.8185 2.54366 12.8185 3.09595V10.8181H20.9041C21.4564 10.8181 21.9041 11.2658 21.9041 11.8181C21.9041 12.3704 21.4564 12.8181 20.9041 12.8181H12.8185V20.904C12.8185 21.4563 12.3708 21.904 11.8185 21.904C11.2662 21.904 10.8185 21.4563 10.8185 20.904V12.8181H3.10059C2.5483 12.8181 2.10059 12.3704 2.10059 11.8181C2.10059 11.2658 2.5483 10.8181 3.10059 10.8181H10.8185V3.09595C10.8185 2.54366 11.2662 2.09595 11.8185 2.09595Z\"></path>\n</svg>\n\nexport default () => {\n  const [tags, setTags] = useState(['Tag 1', 'Tag 2', 'Tag 3']);\n  const [inputVisible, setInputVisible] = useState(false);\n\n  const classes = useStyle();\n\n  const remove = (removedTag: string) => {\n    const t = tags.filter((tag: string) => tag !== removedTag);\n    setTags(t);\n  };\n\n  const showInput = () => {\n    setInputVisible(true);\n  };\n\n  const handleInputBlur = (value: string) => {\n    let newTags = tags;\n    if (value && tags.indexOf(value) === -1) {\n      newTags = [...tags, value];\n    }\n    setTags(newTags);\n    setInputVisible(false);\n  };\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 24 }}>\n        {tags.map((a) => (\n          <Tag key={a} disabled={a === 'Tag 3' ? true : false} onClose={() => remove(a)}>\n            {a}\n          </Tag>\n        ))}\n\n        {inputVisible ? (\n          <Tag.Input style={{ marginLeft: 8 }} onBlur={handleInputBlur} size='small' />\n        ) : (\n          <Tag\n            style={{ cursor: 'pointer', borderStyle: 'dashed' }}\n            onClick={showInput}\n            mode='outline'\n            className={classes.addTag}\n          >\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <div style={{ marginInlineEnd: 4 }}>{plusIcon}</div>\n              <div>Add Tag</div>\n            </div>\n          </Tag>\n        )}\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "onCompleted",
        "description": "Set the `onCompleted` property to enable edit mode, and the function will be called after editing is completed, and the parameter is the edited value",
        "scenario": "basic",
        "code": "/**\n * cn - 可编辑标签\n *    -- 通过设置 `onCompleted` 属性开启编辑模式，编辑完成后会调用该函数，参数为编辑后的值\n * en - onCompleted\n *    -- Set the `onCompleted` property to enable edit mode, and the function will be called after editing is completed, and the parameter is the edited value\n */\n\nimport { useState } from 'react';\nimport { Tag } from 'shineout';\nexport default () => {\n  const [value, setValue] = useState('Abc');\n\n  return (\n    <div>\n      <Tag\n        onCompleted={(val) => {\n          setValue(val);\n        }}\n        onClose={() => {\n          console.log('close');\n        }}\n      >\n        {value}\n      </Tag>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Shape",
        "description": "The shape of the tag can be set by setting the `shape` property. The optional value is rounded",
        "scenario": "basic",
        "code": "/**\n * cn - 标签形状\n *    -- 通过设置 `shape` 属性可以设置标签的形状，可选值为 rounded 全圆角形\n * en - Shape\n *    -- The shape of the tag can be set by setting the `shape` property. The optional value is rounded\n */\n\nimport { Tag } from 'shineout';\nexport default () => {\n  return (\n    <div>\n      <Tag>Default</Tag>\n      <Tag shape='rounded'>Rounded</Tag>\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [
      {
        "name": "Input",
        "description": "",
        "whenCn": "",
        "whenEn": ""
      }
    ],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 14,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 7
    },
    "subComponentApis": {
      "Input": {
        "whenCn": "",
        "whenEn": "",
        "description": "",
        "props": [
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "size",
            "type": "\"small\" | \"large\" | \"default\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "不同尺寸"
          },
          {
            "name": "onKeyUp",
            "type": "((e: KeyboardEvent<HTMLInputElement>) => void)",
            "required": false,
            "description": "KeyUp 事件回调"
          },
          {
            "name": "onEnterPress",
            "type": "((value: string, e: KeyboardEvent<HTMLInputElement>) => void)",
            "required": false,
            "description": "EnterPress 事件回调"
          },
          {
            "name": "onFocus",
            "type": "((e: FocusEvent<HTMLInputElement, Element>) => void)",
            "required": false,
            "description": "Focus 事件回调"
          },
          {
            "name": "onBlur",
            "type": "((value: string, e: FocusEvent<HTMLInputElement, Element>) => void)",
            "required": false,
            "description": "Blur 事件回调"
          },
          {
            "name": "onChange",
            "type": "((value?: string ) => void)",
            "required": false,
            "description": "Value 改变回调"
          },
          {
            "name": "value",
            "type": "string",
            "required": false,
            "description": "受控"
          }
        ]
      }
    }
  },
  "Textarea": {
    "name": "Textarea",
    "description": "用户可以在文本框内输入或编辑文字",
    "category": "other",
    "importPath": "import { Textarea } from 'shineout'",
    "props": [
      {
        "name": "value",
        "type": "string",
        "required": false,
        "description": "defaultValue 和 value 可以同时设置，defaultValue 会被value覆盖"
      },
      {
        "name": "onChange",
        "type": "((value: string) => void)",
        "required": false,
        "description": "值改变回调函数"
      },
      {
        "name": "defaultValue",
        "type": "string",
        "required": false,
        "description": "默认值  和 value 类型相同"
      },
      {
        "name": "autosize",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "高度是否随内容自动变化"
      },
      {
        "name": "onBlur",
        "type": "FocusEventHandler<HTMLTextAreaElement>",
        "required": false,
        "description": "失去焦点后的回调"
      },
      {
        "name": "onFocus",
        "type": "FocusEventHandler<HTMLTextAreaElement>",
        "required": false,
        "description": "focus 事件回调函数"
      },
      {
        "name": "onClick",
        "type": "MouseEventHandler<Element>",
        "required": false,
        "description": "click 事件回调函数"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "textareaRef",
        "type": "Ref<HTMLTextAreaElement>",
        "required": false,
        "description": "获取textarea dom"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "onStatusChange",
        "type": "((status: { focused?: boolean ; }) => void)",
        "required": false,
        "description": ""
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否只展示下边框"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示边框"
      },
      {
        "name": "resize",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可以伸缩高度"
      },
      {
        "name": "onEnterPress",
        "type": "((value: string, e: KeyboardEvent<Element>) => void)",
        "required": false,
        "description": "回车键的回调函数"
      },
      {
        "name": "limit",
        "type": "number | ((text?: string ) => ReactNode)",
        "required": false,
        "description": "最大字符数",
        "version": "3.6.0"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可以清空值",
        "version": "3.6.0"
      },
      {
        "name": "info",
        "type": "number | ((value: string) => ReactNode | Error) | { content: number | ((value: string) => ReactNode | Error), position?: \"bottom-left\" | \"bottom-right\" }",
        "required": false,
        "description": "提示信息",
        "version": "3.4.0 支持 TextareaInfoOption 配置更多内容"
      },
      {
        "name": "maxHeight",
        "type": "string | number",
        "required": false,
        "description": "输入框的最大高度, 超过之后会出现滚动条"
      },
      {
        "name": "trim",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Trim 为 true 时，失去焦点时会自动删除空白字符"
      },
      {
        "name": "renderFooter",
        "type": "((value?: string ) => ReactNode)",
        "required": false,
        "description": "渲染 textarea footer"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "输入框宽度"
      },
      {
        "name": "delay",
        "type": "number",
        "required": false,
        "description": "用户输入触发 onChange 和校验间隔时间，单位 毫秒"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Basic usage of `Textarea`",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    --基础用法\n * en - Base\n *    --Basic usage of `Textarea`\n */\nimport { Textarea } from 'shineout';\n\nexport default () => {\n  return <Textarea autoFocus placeholder='input something' />;\n};\n"
      },
      {
        "title": "resize",
        "description": "Set the `resize` property to change the height by dragging",
        "scenario": "basic",
        "code": "/**\n * cn - 拖动高度\n *    -- 设置 `resize` 属性可以拖动改变高度\n * en - resize\n *    -- Set the `resize` property to change the height by dragging\n */\nimport { Textarea } from 'shineout';\n\nexport default () => {\n  return <Textarea placeholder='input something' resize />;\n};\n"
      },
      {
        "title": "Size",
        "description": "There are three sizes: small, default, and large",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 提供了三种尺寸 `small | default | large`\n * en - Size\n *    -- There are three sizes: small, default, and large\n */\nimport React from 'react';\nimport { Textarea } from 'shineout';\n\nconst style: React.CSSProperties = { width: 120, marginInlineEnd: 24 };\n\nconst App: React.FC = () => (\n  <div>\n    <Textarea size='small' rows={3} style={style} placeholder='small size' />\n    <Textarea style={style} rows={3} placeholder='default size' />\n    <Textarea size='large' rows={3} style={style} placeholder='large size' />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Adaptive height",
        "description": "`autosize` 为 true 时， rows 为最小高度，如果要设置最大高度，使用 `maxHeight` 即可",
        "scenario": "basic",
        "code": "/**\n * cn - 自适应高度\n *    -- `autosize` 为 true 时， rows 为最小高度，如果要设置最大高度，使用 `maxHeight` 即可\n * en - Adaptive height\n *    -- `autosize` 为 true 时， rows 为最小高度，如果要设置最大高度，使用 `maxHeight` 即可\n */\nimport { Textarea } from 'shineout';\n\nexport default () => {\n  return (\n    <Textarea\n      autosize\n      rows={2}\n      placeholder='Please enter content, the height can be automatically adjusted'\n      maxHeight={150}\n      resize\n    />\n  );\n};\n"
      },
      {
        "title": "Info",
        "description": "Set info to number, set the maximum length, and the user's focus shows the length of text that the user has entered",
        "scenario": "basic",
        "code": "/**\n * cn - 提示信息\n *    -- 设置 `info` 为数字, 设定最大长度，用户 focus 时会显示用户已输入文字长度。\n *    -- 如果超出长度， 则会报错，不会隐藏。\n * en - Info\n *    -- Set info to number, set the maximum length, and the user's focus shows the length of text that the user has entered\n *    -- If the length is exceeded, the error is reported. It is not hidden\n *\n */\nimport React from 'react';\nimport { Textarea } from 'shineout';\n\nconst App: React.FC = () => <Textarea rows={4} trim placeholder='input something' info={10} />;\n\nexport default App;\n"
      },
      {
        "title": "*    -- can customize the info by setting info as a function;",
        "description": "if the functio return an Error , the info doesn't hide;",
        "scenario": "custom",
        "code": "/**\n * cn -\n *    -- 可以通过设置 `info` 为函数去自定义提示信息;\n *    -- 如果 `info` 返回类型为 Error，不会隐藏；\n *    -- 可以通过设置 `popoverProps` 来自定义弹窗的属性， 参考Popover组件的属性。\n * en -\n *    -- can customize the info by setting info as a function;\n *    -- if the functio return an Error , the info doesn't hide;\n *    -- can customize the popover by setting `popoverProps` , reference to Popover component's props.\n */\nimport React from 'react';\nimport { Textarea } from 'shineout';\n\nconst renderInfo = (value?: string) => {\n  if (!value || value.length === 0) return null;\n  const text = `total is  ${value.length}`;\n  if (value.length <= 20) return text;\n  return new Error(text);\n};\n\nconst App: React.FC = () => (\n  <Textarea\n    rows={4}\n    trim\n    placeholder='input something'\n    info={renderInfo}\n    popoverProps={{\n      position: 'bottom-left',\n      getPopupContainer: () => document.body,\n    }}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Limit",
        "description": "Set the `limit` property to display the word count",
        "scenario": "basic",
        "code": "/**\n * cn - 字数统计\n *    -- 设置 `limit` 为数字，右下角显示字数统计\n *    -- 输入达到最大字数后，不再允许输入\n * en - Limit\n *    -- Set the `limit` property to display the word count\n */\nimport React from 'react';\nimport { Textarea } from 'shineout';\n\nconst App: React.FC = () => (\n  <Textarea rows={3} limit={50} placeholder='input something' />\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- Set the `limit` to a function to customize the display of the word count",
        "description": "输入达到最大字数后，可以继续输入",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 设置 `limit` 为函数，可以自定义右下角的字数统计显示\n *    -- 输入达到最大字数后，可以继续输入\n * en -\n *    -- Set the `limit` to a function to customize the display of the word count\n */\nimport React from 'react';\nimport { Textarea } from 'shineout';\n\nconst max = 100\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState('');\n\n  const error = value.length > max ? 'error' : undefined;\n  return (\n    <Textarea\n      status={error}\n      limit={(text) => (\n        <span>\n          最大字数：\n          <span\n            style={{\n              color: error ? 'var(--soui-danger-6,#EB4242)' : 'var(--soui-brand-6,#197AFA)',\n            }}\n          >\n            {text?.length || 0}\n          </span> / {max}\n        </span>\n      )}\n      value={value}\n      onChange={setValue}\n      placeholder='input something'\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "RenderFooter",
        "description": "render textarea `footer`",
        "scenario": "basic",
        "code": "/**\n * cn - 底部信息\n *    -- 设置 `renderFooter` 可自定义底部信息\n * en - RenderFooter\n *    -- render textarea `footer`\n */\nimport React from 'react';\nimport { Textarea } from 'shineout';\n\nfunction renderFooter(text: string = '') {\n  const style: React.CSSProperties = {\n    color: text.length > 20 ? 'var(--danger-6,#CC3D3A)' : 'inherit',\n  };\n  return (\n    <div style={{ textAlign: 'end', color: 'var(--neutral-text-2, #b3b7c1)' }}>\n      <span style={style}>{text.length}</span> / 20\n    </div>\n  );\n}\n\nconst App: React.FC = () => (\n  <Textarea rows={3} renderFooter={renderFooter} placeholder='input something' />\n);\n\nexport default App;\n"
      },
      {
        "title": "Clearable",
        "description": "Set `clearable` to show clear button",
        "scenario": "basic",
        "code": "/**\n * cn - 可清除\n *    -- 设置 `clearable` 可以显示清除按钮\n * en - Clearable\n *    -- Set `clearable` to show clear button\n */\nimport React from 'react';\nimport { Textarea } from 'shineout';\n\nconst App: React.FC = () => (\n  <Textarea placeholder='input something' clearable />\n);\n\nexport default App;\n"
      },
      {
        "title": "Rules",
        "description": "* en - Rules",
        "scenario": "basic",
        "code": "/**\n * cn - Rules\n *   --\n * en - Rules\n *    --\n */\nimport { Rule, Textarea } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Textarea\n      rules={[rule.required('必填')]}\n      tip={'input something'}\n      placeholder='input something'\n    />\n  );\n};\n"
      },
      {
        "title": "innerTitle",
        "description": "* en - innerTitle",
        "scenario": "basic",
        "code": "/**\n * cn - innerTitle\n *   --\n * en - innerTitle\n *    --\n */\nimport { Rule, Textarea } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Textarea\n      rows={1}\n      innerTitle={'hello world'}\n      rules={[rule.required('必填')]}\n      placeholder='input something'\n    />\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 32,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 12
    }
  },
  "Tooltip": {
    "name": "Tooltip",
    "description": "鼠标悬停、聚焦或点击在某个组件时，弹出的文字提示。主要用来显示文字提示，如果需要显示更多内容，请使 Popover",
    "category": "other",
    "importPath": "import { Tooltip } from 'shineout'",
    "props": [
      {
        "name": "trigger",
        "type": "\"hover\" | \"click\" | \"focus\"",
        "required": false,
        "defaultValue": "\\\"hover\\\"",
        "description": "弹出方式"
      },
      {
        "name": "position",
        "type": "| \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"left\" | \"right\" | \"top\" | \"bottom\" | \"auto\"",
        "required": false,
        "defaultValue": "\\\"auto\\\"",
        "description": "弹出层位置"
      },
      {
        "name": "priorityDirection",
        "type": "\"auto\" | \"vertical\" | \"horizontal\"",
        "required": false,
        "defaultValue": "\\\"vertical\\\"",
        "description": "弹出位置优先级, 默认为上下优先, 只在未设置 position 时生效"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "mouseEnterDelay",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "弹出延迟，默认为 0 不延迟，单位为毫秒。"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": true,
        "description": "子元素只能为一个 ReactElement"
      },
      {
        "name": "animation",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "弹出是否使用动画"
      },
      {
        "name": "disabledChild",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "使被禁用的元素正常显示提示"
      },
      {
        "name": "tip",
        "type": "ReactNode",
        "required": true,
        "description": "弹出文字"
      },
      {
        "name": "type",
        "type": "\"default\" | \"light\" | \"primary\" | \"success\" | \"warning\" | \"danger\"",
        "required": false,
        "defaultValue": "default",
        "description": "样式"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1051",
        "description": "tooltip 层级"
      },
      {
        "name": "persistent",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "鼠标悬停提示信息内容时，是否保持显示",
        "version": "3.5.3"
      },
      {
        "name": "showArrow",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示箭头",
        "version": "3.6.0"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "children can only be a ReactElement and cannot be a Fragment",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- children 只能为一个 ReactElement 并且不可以使用 Fragment\n *    -- 内置了四个弹出方向\n * en - Base\n *    -- children can only be a ReactElement and cannot be a Fragment\n *    -- There are four pop-up directions built in\n */\nimport React from 'react';\nimport { Tooltip, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <Tooltip tip='hello world' trigger='hover'>\n      <Button type='primary'>hover me</Button>\n    </Tooltip>\n  </div>\n);\nexport default App;\n"
      },
      {
        "title": "Position",
        "description": "Twelve pop-up positions are built in",
        "scenario": "basic",
        "code": "/**\n * cn - 弹出位置\n *    -- 内置了十二个弹出的位置\n * en - Position\n *    -- Twelve pop-up positions are built in\n *\n */\n\nimport React from 'react';\nimport { Button, Tooltip, TYPE } from 'shineout';\n\ntype PopoverProps = TYPE.Popover.Props;\ntype PopoverPosition = PopoverProps['position'];\n\nconst positions: Array<PopoverPosition[]> = [\n  [undefined, 'bottom-left', 'bottom', 'bottom-right', undefined],\n  ['right-top', undefined, undefined, undefined, 'left-top'],\n  ['right', undefined, undefined, undefined, 'left'],\n  ['right-bottom', undefined, undefined, undefined, 'left-bottom'],\n  [undefined, 'top-left', 'top', 'top-right', undefined],\n];\n\nconst style: React.CSSProperties = {\n  margin: 4,\n  width: 110,\n  display: 'inline-block',\n};\n\nconst App: React.FC = () => (\n  <div>\n    {positions.map((row, i) => (\n      <div key={i}>\n        {row.map((p, j) =>\n          p ? (\n            <Tooltip\n              key={j}\n              position={p}\n              tip={\n                <div>\n                  <div>i am popover content</div>\n                  <div>{p}</div>\n                </div>\n              }\n            >\n              <Button key={j} mode={'outline'} style={style}>\n                {p}\n              </Button>\n            </Tooltip>\n          ) : (\n            <div key={j} style={{ ...style, border: 0 }} />\n          ),\n        )}\n      </div>\n    ))}\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Click",
        "description": "Set the trigger property to change the `trigger` event to 'click'",
        "scenario": "basic",
        "code": "/**\n * cn - 点击触发\n *    -- 默认触发事件为 hover，如果需要点击触发，可以设置 `trigger` 为 'click'\n * en - Click\n *    -- Set the trigger property to change the `trigger` event to 'click'\n */\nimport React from 'react';\nimport { Tooltip, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <Tooltip tip='Some text.' trigger='click'>\n      <Button type='primary'>click me</Button>\n    </Tooltip>\n  </div>\n);\nexport default App;\n"
      },
      {
        "title": "Focus",
        "description": "Set the trigger property to change the `trigger` event to 'focus'",
        "scenario": "basic",
        "code": "/**\n * cn - 聚焦触发\n *    -- 需要聚焦触发，可以设置 `trigger` 为 'focus', children 需要是一个可以聚焦的元素\n * en - Focus\n *    -- Set the trigger property to change the `trigger` event to 'focus'\n * \n */\nimport React from 'react';\nimport { Tooltip, Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <Tooltip tip='Some text.' trigger='focus'>\n      <Input style={{ width: 300 }} />\n    </Tooltip>\n  </div>\n);\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "Set disabledChild make disabled child work",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用元素\n *    -- 设置 disabledChild 来使内部禁用的元素正常工作\n * en - Disabled\n *    -- Set disabledChild make disabled child work\n */\nimport React from 'react';\nimport { Button, Tooltip } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <Tooltip tip='Some text.' disabledChild>\n      <Button disabled>Disabled</Button>\n    </Tooltip>\n  </div>\n);\nexport default App;\n"
      },
      {
        "title": "Type",
        "description": "Set the type property to change the theme color",
        "scenario": "basic",
        "code": "/**\n * cn - 主题色\n *    -- 通过 `type` 设置主题色\n * en - Type\n *    -- Set the type property to change the theme color\n */\nimport React from 'react';\nimport { Tooltip, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex' }}>\n    <Tooltip tip='This is tooltip content'>\n      <Button style={{ marginRight: 24 }} type='secondary'>\n        default\n      </Button>\n    </Tooltip>\n    <Tooltip tip='This is tooltip content' type='light'>\n      <Button style={{ marginRight: 24 }} type='default' mode='outline'>\n        light\n      </Button>\n    </Tooltip>\n    <Tooltip tip='This is tooltip content' type='primary'>\n      <Button style={{ marginRight: 24 }} type='primary'>\n        primary\n      </Button>\n    </Tooltip>\n    <Tooltip tip='This is tooltip content' type='success'>\n      <Button style={{ marginRight: 24 }} type='success'>\n        success\n      </Button>\n    </Tooltip>\n    <Tooltip tip='This is tooltip content' type='warning'>\n      <Button style={{ marginRight: 24 }} type='warning'>\n        warning\n      </Button>\n    </Tooltip>\n    <Tooltip tip='This is tooltip content' type='danger'>\n      <Button style={{ marginRight: 24 }} type='danger'>\n        danger\n      </Button>\n    </Tooltip>\n  </div>\n);\nexport default App;\n"
      },
      {
        "title": "Stay on hover",
        "description": "Set the `persistent` property, the tooltip will not close when the mouse hovers over the tooltip content",
        "scenario": "basic",
        "code": "/**\n * cn - 鼠标悬停\n *    -- 设置 `persistent` 属性后，鼠标悬停提示信息时将不会关闭 tooltip\n * en - Stay on hover\n *    -- Set the `persistent` property, the tooltip will not close when the mouse hovers over the tooltip content\n */\nimport React from 'react';\nimport { Tooltip, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <Tooltip tip='i will not close when hover' trigger='hover' persistent>\n      <Button type='primary'>hover me</Button>\n    </Tooltip>\n  </div>\n);\nexport default App;\n"
      },
      {
        "title": "Delay",
        "description": "The old property `delay` is about to be deprecated, please use `mouseEnterDelay`.",
        "scenario": "basic",
        "code": "/**\n * cn - 延迟出现\n *    -- 旧属性 `delay` 即将废弃，请使用 `mouseEnterDelay`\n *    -- 设置 `mouseEnterDelay` 属性后，鼠标移入后将延迟出现组件，单位为毫秒\n *    -- 注意，该属性仅在 `trigger` 为 `hover` 时有效\n * en - Delay\n *    -- The old property `delay` is about to be deprecated, please use `mouseEnterDelay`.\n *    -- When the `mouseEnterDelay` property is set, the component will appear after the mouse enters, in milliseconds.\n *    -- Note that this property is only valid when `trigger` is `hover`.\n */\nimport React from 'react';\nimport { Tooltip, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <Tooltip tip='1000ms delay' trigger='hover' mouseEnterDelay={1000}>\n      <Button type='primary'>hover me</Button>\n    </Tooltip>\n  </div>\n);\nexport default App;\n"
      },
      {
        "title": "Hide arrow",
        "description": "Set the `showArrow` property to `false` to hide the arrow",
        "scenario": "basic",
        "code": "/**\n * cn - 不带箭头\n *    -- 设置 `showArrow` 属性为 `false` 可以隐藏箭头\n * en - Hide arrow\n*     -- Set the `showArrow` property to `false` to hide the arrow\n */\nimport React from 'react';\nimport { Tooltip, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <Tooltip tip='Tip message has no arrow.' showArrow={false} persistent>\n    <Button type='primary'>hover me</Button>\n  </Tooltip>\n);\nexport default App;\n"
      },
      {
        "title": "zoom",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn - css zoom\n * en - zoom\n */\nimport React from 'react';\nimport { Tooltip, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = React.useState(false);\n  const handleZoom = () => {\n    if(visible){\n      setVisible(false)\n      document.body.style.zoom = 1;\n    }else{\n      setVisible(true)\n      document.body.style.zoom = 0.9;\n    }\n  }\n\n  return (\n    <div>\n      <Button onClick={handleZoom}>change zoom</Button>\n      {visible && <Tooltip tip='hello world' trigger='click'>\n        <Button type='primary'>click me</Button>\n      </Tooltip>}\n    </div>\n  )\n};\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 14,
      "requiredProps": 2,
      "propsWithWhen": 0,
      "examplesCount": 10
    }
  },
  "Transfer": {
    "name": "Transfer",
    "description": "在两栏中移动元素，完成选择行为，左栏是“源”，右边是“目标”",
    "category": "other",
    "importPath": "import { Transfer } from 'shineout'",
    "props": [
      {
        "name": "value",
        "type": "Value",
        "required": false,
        "description": "显示在右侧框数据的值集合"
      },
      {
        "name": "data",
        "type": "DataItem[]",
        "required": true,
        "defaultValue": "index",
        "description": "数据源"
      },
      {
        "name": "selectedKeys",
        "type": "(string | number)[]",
        "required": false,
        "description": "被勾选的列表, 勾选的值均使用的是 keygen 的结果"
      },
      {
        "name": "defaultSelectedKeys",
        "type": "(string | number)[]",
        "required": false,
        "description": "默认被勾选的列表"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认值  和 value 类型相同"
      },
      {
        "name": "format",
        "type": "((data: DataItem) => Value[number]) | ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "d => d",
        "description": "格式化 value, 默认值，返回原始数据。 为 string 时，会作为 key 从原始数据中获取值，相当于 (d) => d[format]; 为函数时，以函数返回结果作为 value"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number) | true",
        "required": false,
        "defaultValue": "index",
        "description": "生成每一项key的辅助方法 为 true 时，以数据项本身作为key，相当于 (d => d) 为函数时，使用此函数返回值 为string时，使用这个string对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
      },
      {
        "name": "simple",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启简单模式"
      },
      {
        "name": "disabled",
        "type": "boolean | ((data: DataItem) => boolean)",
        "required": false,
        "description": "如果 disabled 为 true，禁用全部选项，如果 disabled 为函数，根据函数反回结果禁用选项"
      },
      {
        "name": "prediction",
        "type": "((value: Value[number], Data: DataItem) => boolean)",
        "required": false,
        "description": "默认使用 format 函数执行的结果来比较是否匹配，在某些情况下（例如返回原始数据的对象，更新数据时，生成了一个值相同，非同一个对象的选项），需要借助 prediction 函数来判断是否匹配"
      },
      {
        "name": "onChange",
        "type": "((value: Value, currentData: DataItem | DataItem[], isTarget: boolean) => void)",
        "required": false,
        "description": "改变回调,参数为当前选中值"
      },
      {
        "name": "onFilter",
        "type": "((text: string, data: DataItem, isSource: boolean) => boolean)",
        "required": false,
        "description": "筛选函数, 参数为: 输入文本, 数据, 是否为左侧数据"
      },
      {
        "name": "onSearch",
        "type": "((text: string, isSource: boolean) => void)",
        "required": false,
        "description": "输入框值变化的回调, 参数为: 输入文本, 是否为左侧数据"
      },
      {
        "name": "onSelectChange",
        "type": "((sourceKeys: (string | number)[], targetKeys?: (string | number)[] ) => void) | ((selectKeys: (string | number)[]) => void)",
        "required": false,
        "description": "勾选触发的方法"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "listHeight",
        "type": "number",
        "required": false,
        "defaultValue": "186",
        "description": "列表高度"
      },
      {
        "name": "lineHeight",
        "type": "number",
        "required": false,
        "defaultValue": "34",
        "description": "列表行高"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((data: DataItem) => ReactNode)",
        "required": false,
        "defaultValue": "d => d",
        "description": "为 string 时，返回 d[string] 为 function 时，返回函数结果"
      },
      {
        "name": "itemClass",
        "type": "string",
        "required": false,
        "description": "选项 className"
      },
      {
        "name": "empty",
        "type": "ReactNode",
        "required": false,
        "description": "无内容的展示"
      },
      {
        "name": "rowsInView",
        "type": "number",
        "required": false,
        "defaultValue": "20",
        "description": "一次加载的数据条数"
      },
      {
        "name": "listClassName",
        "type": "string",
        "required": false,
        "description": "列表扩展的 class"
      },
      {
        "name": "listStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "列表扩展的样式"
      },
      {
        "name": "titles",
        "type": "[ReactNode, ReactNode]",
        "required": false,
        "description": "两侧的标题, 顺序是从左到右"
      },
      {
        "name": "footers",
        "type": "[ReactNode, ReactNode]",
        "required": false,
        "description": "底部元素, 顺序是从左到右"
      },
      {
        "name": "operations",
        "type": "[ReactNode, ReactNode]",
        "required": false,
        "description": "操作元素, 顺序是从上到下"
      },
      {
        "name": "operationIcon",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示操作按钮的图标"
      },
      {
        "name": "loading",
        "type": "boolean | [boolean, boolean]",
        "required": false,
        "description": "加载中, 如果需要两侧加载中状态不一致, 需要传入数组"
      },
      {
        "name": "searchPlaceholder",
        "type": "string | [string, string]",
        "required": false,
        "description": "搜索框占位"
      },
      {
        "name": "renderFilter",
        "type": "((filterProps: FilterProps) => ReactNode)",
        "required": false,
        "description": "自定义过滤器渲染"
      },
      {
        "name": "children",
        "type": "((props: { onSelected: ((string | number)[]) => void; direction: \"left\" | \"right\"; selectedKeys: (string | number)[]; value: Value; filterText: string; }) => ReactNode)",
        "required": false,
        "description": "自定义渲染内容"
      },
      {
        "name": "equalPanelWidth",
        "type": "boolean",
        "required": false,
        "description": "面板均等分配容器宽度"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Base Transfer",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基础 Transfer 使用\n * en - Base\n *    -- Base Transfer\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return (\n    <div style={{ width: 600 }}>\n      <Transfer data={data} keygen='id' listHeight={232} renderItem='name'></Transfer>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Size",
        "description": "There are three built-in sizes, small, default, and large",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 内置三种尺寸，small、default、large\n * en - Size\n *    -- There are three built-in sizes, small, default, and large\n */\nimport { useState } from 'react';\nimport { Transfer, Radio } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\nconst radios = ['small', 'default', 'large'];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const [radio, setRadio] = useState<'small' | 'default' | 'large'>('default');\n\n  return (\n    <div>\n      <Radio.Group\n        style={{ marginBottom: 24 }}\n        keygen\n        value={radio}\n        onChange={setRadio}\n        data={radios}\n      ></Radio.Group>\n      <Transfer data={data} size={radio} keygen='id' listHeight={232} renderItem='name'></Transfer>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Simple",
        "description": "By turning on the `simple` property, you can use the simple mode. In simple mode, `selectKeys` and `onSelectChange` are not valid",
        "scenario": "basic",
        "code": "/**\n * cn - 简单模式\n *    -- 通过开启 `simple` 属性，可以使用简单模式\n *    -- 简单模式下`selectedKeys`和`onSelectChange`不生效\n * en - Simple\n *    -- By turning on the `simple` property, you can use the simple mode. In simple mode, `selectKeys` and `onSelectChange` are not valid\n *    -- In simple mode, `selectKeys` and `onSelectChange` are not valid\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return (\n    <Transfer\n      simple\n      data={data}\n      defaultValue={['id-7', 'id-8', 'id-9']}\n      keygen='id'\n      format='id'\n      listHeight={232}\n      renderItem='name'\n    ></Transfer>\n  );\n};\n"
      },
      {
        "title": "Filter",
        "description": "Set custom filter method through the `onFilter` property",
        "scenario": "basic",
        "code": "/**\n * cn - 筛选\n *    -- 通过`onFilter`属性设置自定义筛选方法\n * en - Filter\n *    -- Set custom filter method through the `onFilter` property\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const handleFilter = (text: string, item: { id: string; name: string }) => {\n    return item.name.indexOf(text) > -1;\n  };\n  return (\n    <Transfer\n      data={data}\n      keygen='id'\n      listHeight={188}\n      renderItem='name'\n      searchPlaceholder='Input search text'\n      onFilter={handleFilter}\n    ></Transfer>\n  );\n};\n"
      },
      {
        "title": "Custom render filter",
        "description": "Use `renderFilter` to get the filter parameters to achieve custom rendering of the filter area",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义渲染筛选\n *    -- 通过`renderFilter`获取过滤参数实现自定义渲染过滤区域\n * en - Custom render filter\n *    -- Use `renderFilter` to get the filter parameters to achieve custom rendering of the filter area\n */\nimport { Transfer, Input, TYPE } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\ntype FilterProps = TYPE.Transfer.TransferFilterProps;\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const handleFilter = (text: string, item: { id: string; name: string }) => {\n    return item.name.indexOf(text) > -1;\n  };\n\n  const renderFilter = (filterProps: FilterProps) => {\n    return (\n      <div style={{ display: 'flex', padding: '8px 12px 4px 12px' }}>\n        <Input\n          placeholder='Custom filter'\n          onChange={filterProps.onFilter as (text?: string) => void}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <Transfer\n      data={data}\n      keygen='id'\n      listHeight={188}\n      renderItem='name'\n      searchPlaceholder='Input search text'\n      onFilter={handleFilter}\n      renderFilter={renderFilter}\n    ></Transfer>\n  );\n};\n"
      },
      {
        "title": "Custom render",
        "description": "Support custom rendering of title, button, and bottom content area",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义渲染\n *    -- 支持自定义渲染标题、按钮、底部内容区域\n * en - Custom render\n *    -- Support custom rendering of title, button, and bottom content area\n */\nimport { Transfer, Button } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const renderFooter = () => {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          padding: '8px 12px',\n          boxSizing: 'border-box',\n        }}\n      >\n        <Button type='secondary'>Button</Button>\n      </div>\n    );\n  };\n\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <div style={{ minWidth: 530 }}>\n        <Transfer\n          titles={['Source', 'Target']}\n          footers={[renderFooter(), renderFooter()]}\n          data={data}\n          keygen='id'\n          operations={['To right', 'To left']}\n          listHeight={184}\n          renderItem='name'\n        ></Transfer>\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Loading",
        "description": "Set the `loading` property to display the loading state",
        "scenario": "basic",
        "code": "/**\n * cn - 加载中\n *    -- 设置`loading`属性可以显示加载中状态\n * en - Loading\n *    -- Set the `loading` property to display the loading state\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return <Transfer data={data} loading keygen='id' listHeight={232} renderItem='name'></Transfer>;\n};\n"
      },
      {
        "title": "*    -- The `loading` property supports array types, which can set different loading states for each list",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- `loading`属性支持数组类型，可以对每个列表设置不同的加载状态\n * en -\n *    -- The `loading` property supports array types, which can set different loading states for each list\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return (\n    <Transfer\n      data={data}\n      loading={[true, false]}\n      keygen='id'\n      listHeight={232}\n      renderItem='name'\n    ></Transfer>\n  );\n};\n"
      },
      {
        "title": "Controlled",
        "description": "The value of Transfer can be controlled",
        "scenario": "basic",
        "code": "/**\n * cn - 受控\n *    -- 支持组件受控\n *    -- 可以通过`format`属性指定最终获取的数据类型，默认返回选中的数据项\n * en - Controlled\n *    -- The value of Transfer can be controlled\n *   -- The data type of the final value can be specified by the `format` property. The default is to return the selected data item\n */\nimport { useState } from 'react';\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const [value, setValue] = useState([]);\n\n  const handleChange = (v: { id: string; name: string }, dataItem) => {\n    console.log('======================')\n    console.log('dataItem: >>', dataItem)\n    console.log('======================')\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <Transfer\n        data={data}\n        value={value}\n        onChange={handleChange}\n        keygen='id'\n        listHeight={232}\n        renderItem='name'\n      ></Transfer>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Selected control",
        "description": "The selected item supports controlled",
        "scenario": "basic",
        "code": "/**\n * cn - 勾选受控\n *    -- 勾选项支持受控\n *    -- 注意，勾选项返回值为`keygen`所组成的数组\n * en - Selected control\n *    -- The selected item supports controlled\n *    -- Note that the return value of the selected item is an array of `keygen`\n */\nimport { useState } from 'react';\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const [selectedKeys, setSelectedKeys] = useState([]);\n\n  const handleSelectedChange = (source, target) => {\n    setSelectedKeys([...source, ...target]);\n  };\n\n  return (\n    <div>\n      <Transfer\n        data={data}\n        selectedKeys={selectedKeys}\n        onSelectChange={handleSelectedChange}\n        keygen='id'\n        listHeight={232}\n        renderItem='name'\n      ></Transfer>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Big data",
        "description": "Transfer turns on virtual list by default, supports rendering of large data",
        "scenario": "basic",
        "code": "/**\n * cn - 大数据性能\n *    -- Transfer 默认开启虚拟列表，支持大数据渲染\n *    -- 本例数据量为10万\n * en - Big data\n *    -- Transfer turns on virtual list by default, supports rendering of large data\n *    -- The amount of data in this example is 100,000\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 100000; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return <Transfer data={data} keygen='id' listHeight={232} renderItem='name'></Transfer>;\n};\n"
      },
      {
        "title": "Different height",
        "description": "Transfer with different height",
        "scenario": "custom",
        "code": "/**\n * cn - 左右高度不同\n *    -- 左右高度不同的 Transfer\n * en - Different height\n *    -- Transfer with different height\n */\nimport { Transfer, Input } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\ninterface FilterProps {\n  text?: string;\n  disabled: boolean;\n  onFilter?: (text: string) => void;\n  placeholder?: string;\n  isSource?: boolean;\n}\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const handleFilter = (text: string, item: { id: string; name: string }) => {\n    return item.name.indexOf(text) > -1;\n  };\n\n  const renderFilter = (filterProps: FilterProps) => {\n    if(filterProps.isSource) {\n      return <div style={{width: 200}}>\n        <Input placeholder=\"请输入\" />\n        <Input placeholder=\"请输入\" />\n      </div>\n    }\n\n    return (\n      <div style={{ display: 'flex' }}>\n        <Input\n          placeholder='Custom filter'\n          onChange={filterProps.onFilter as (text?: string) => void}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <Transfer\n      data={data}\n      keygen='id'\n      listHeight={188}\n      renderItem='name'\n      searchPlaceholder='Input search text'\n      onFilter={handleFilter}\n      renderFilter={renderFilter}\n    ></Transfer>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 40,
      "requiredProps": 1,
      "propsWithWhen": 0,
      "examplesCount": 12
    }
  },
  "Tree": {
    "name": "Tree",
    "description": "用于承载有父子关系的结构化内容，提供内容层级的展示",
    "category": "other",
    "importPath": "import { Tree } from 'shineout'",
    "props": [
      {
        "name": "tiledData",
        "type": "DataItem[]",
        "required": false,
        "description": ""
      },
      {
        "name": "active",
        "type": "string | number",
        "required": false,
        "description": "激活节点的key"
      },
      {
        "name": "value",
        "type": "Value",
        "required": false,
        "description": "选中的 key （受控）"
      },
      {
        "name": "defaultValue",
        "type": "(string | number)[]",
        "required": false,
        "description": "默认选中的 key （非受控）"
      },
      {
        "name": "data",
        "type": "DataItem[]",
        "required": true,
        "description": "数据，子节点为 children，如果 children 值为 null 或 长度为 0 时，视为叶子节点"
      },
      {
        "name": "expanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "展开的节点 key(受控)"
      },
      {
        "name": "defaultExpanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "默认展开的节点 key（非受控）"
      },
      {
        "name": "defaultExpandAll",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "默认展开所有节点"
      },
      {
        "name": "disabled",
        "type": "boolean | ((item: DataItem) => boolean) | { disabled: (data: DataItem) => boolean, isRealtime: boolean }",
        "required": false,
        "defaultValue": "false",
        "description": "显示选择框时有效，为 true 时，所有节点禁用选择，为函数时，根据函数返回结果确定是否禁用"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index: string) => string | number)",
        "required": true,
        "defaultValue": "index",
        "description": "生成 key 的辅助方法, 为函数时，使用此函数返回值, 为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d) => d.id"
      },
      {
        "name": "childrenKey",
        "type": "ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "\\\"children\\\"",
        "description": "指定子数据的属性名"
      },
      {
        "name": "mode",
        "type": "0 | 1 | 2 | 3 | 4",
        "required": false,
        "defaultValue": "1",
        "description": "选中值模式，未设置值为单选 0: 只返回完全选中的节点，包含父节点 1: 返回全部选中的节点和半选中的父节点 2: 只返回选中的子节点 3: 如果父节点选中，只返回父节点 4: 所选即所得"
      },
      {
        "name": "dataUpdate",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否监听 data 变化更新数据"
      },
      {
        "name": "unmatch",
        "type": "boolean",
        "required": false,
        "description": "是否开启不匹配模式"
      },
      {
        "name": "onExpand",
        "type": "((value: (string | number)[]) => void)",
        "required": false,
        "description": "节点展开回调，参数为当前展开节点 key 数组"
      },
      {
        "name": "virtual",
        "type": "boolean",
        "required": false,
        "description": "虚拟列表",
        "version": "3.6.0"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "line",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示连接线"
      },
      {
        "name": "iconClass",
        "type": "string",
        "required": false,
        "description": "展开/收起按钮的类名"
      },
      {
        "name": "nodeClass",
        "type": "string | ((data: DataItem) => string)",
        "required": false,
        "description": "节点的class，如果是函数，参数为该节点数据"
      },
      {
        "name": "contentClass",
        "type": "string | ((data: DataItem) => string)",
        "required": false,
        "description": "内容样式"
      },
      {
        "name": "leafClass",
        "type": "string | ((data: DataItem) => string)",
        "required": false,
        "description": "叶子节点的 class, 函数的参数为该条叶子节点数据"
      },
      {
        "name": "leafIcon",
        "type": "boolean | ((d: T) => ReactNode) | ReactNode",
        "required": false,
        "description": "开启叶子节点前的图标，或者自定义函数渲染",
        "version": "3.7.0"
      },
      {
        "name": "expandIcons",
        "type": "(ReactNode | ((d: DataItem) => ReactNode))[]",
        "required": false,
        "description": "自定义展开/收起按钮"
      },
      {
        "name": "childrenClass",
        "type": "string | ((data: DataItem) => string)",
        "required": false,
        "description": "子节点 class, 函数的参数为该条叶子节点数据"
      },
      {
        "name": "onDrop",
        "type": "((data: DataItem[], key: string | number, targetKey: string | number, position: number) => void)",
        "required": false,
        "description": "设置 onDrop 属性时，为可拖动状态"
      },
      {
        "name": "setActive",
        "type": "((key: string | number , data?: DataItem ) => void)",
        "required": false,
        "description": "设置激活节点的key",
        "version": "3.4.0"
      },
      {
        "name": "doubleClickExpand",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "双击是否展开节点"
      },
      {
        "name": "parentClickExpand",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "点击父节点展开"
      },
      {
        "name": "actionOnClick",
        "type": "ActionOnClick | ActionOnClick[]",
        "required": false,
        "description": "点击节点展开是的操作: \\\"expand\\\" 展开节点，\\\"check\\\" 选中复选框",
        "version": "3.6.0"
      },
      {
        "name": "dragImageSelector",
        "type": "string | ((data?: DataItem ) => string)",
        "required": false,
        "description": "定义拖拽图片的选择器"
      },
      {
        "name": "renderItem",
        "type": "| ((item: DataItem, expanded: boolean, active: boolean, id: string | number) => ReactNode) | ObjectKey<DataItem>",
        "required": true,
        "defaultValue": "index",
        "description": "为 string 时，返回 d[string]。 为 function 时，返回函数结果"
      },
      {
        "name": "onChange",
        "type": "((value: Value, id: string | number) => void)",
        "required": false,
        "description": "设置 onChange 属性时，显示 选择框。参数为当前选中值，和 mode 属性相关"
      },
      {
        "name": "dragImageStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "拖拽图片的原生 style 样式"
      },
      {
        "name": "dragSibling",
        "type": "boolean",
        "required": false,
        "description": "是否只能平级拖拽"
      },
      {
        "name": "dragHoverExpand",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "拖拽时自动展开含有子节点的节点"
      },
      {
        "name": "inlineNode",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "节点是否内联"
      },
      {
        "name": "highlight",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "点击节点高亮"
      },
      {
        "name": "loader",
        "type": "((key: string | number, data: DataItem) => void)",
        "required": false,
        "description": "设置 loader 属性后，未定义 children 的节点视为动态加载节点，点击展开触发 loader事件，children 为 null 或者长度为 0 视为叶子节点"
      },
      {
        "name": "onClick",
        "type": "((data: DataItem, id: string | number, path?: { children: (string | number)[], path: (string | number)[], isDisabled: boolean, indexPath: number[], index: number } ) => void)",
        "required": false,
        "description": "节点点击事件"
      },
      {
        "name": "onDragStart",
        "type": "((e: DragEvent<Element>, data: DataItem) => void)",
        "required": false,
        "description": "拖拽开始事件"
      },
      {
        "name": "onDragEnd",
        "type": "((e: DragEvent<Element>, data: DataItem) => void)",
        "required": false,
        "description": "拖拽结束事件"
      },
      {
        "name": "onDragOver",
        "type": "((e: DragEvent<Element>, data: DataItem) => void)",
        "required": false,
        "description": "拖拽经过事件"
      },
      {
        "name": "onDragLeave",
        "type": "((e: DragEvent<Element>, data: DataItem) => void)",
        "required": false,
        "description": "拖拽离开事件"
      },
      {
        "name": "lineHeight",
        "type": "number",
        "required": false,
        "description": "列表项高度"
      },
      {
        "name": "height",
        "type": "number",
        "required": false,
        "description": "列表高度，仅开启virtual时生效",
        "version": "3.6.0"
      },
      {
        "name": "rowsInView",
        "type": "number",
        "required": false,
        "defaultValue": "20",
        "description": "同时展示的列表项数量",
        "version": "3.6.0"
      },
      {
        "name": "rootStyle",
        "type": "CSSProperties",
        "required": false,
        "description": ""
      },
      {
        "name": "ignoreSetFlat",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "size",
        "type": "\"small\" | \"default\" | \"large\"",
        "required": false,
        "defaultValue": "default",
        "description": "组件尺寸",
        "version": "3.7.0"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基础 Tree 组件用法，当配置 `children` 字段时，允许展开和收起节点\n * en - Base\n *    -- Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes\n */\n\nimport { Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n            },\n            {\n              id: '0-0-1',\n              children: [\n                {\n                  id: '0-0-1-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: '1',\n      children: [\n        {\n          id: '1-0',\n          children: [\n            {\n              id: '1-0-0',\n            },\n            {\n              id: '1-0-1',\n              children: [\n                {\n                  id: '1-0-1-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '1-1',\n          children: [\n            {\n              id: '1-1-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return `node ${node.id}`;\n  };\n\n  return (\n    <div>\n      <Tree data={data} keygen='id' renderItem={renderItem}></Tree>\n    </div>\n  );\n};\n"
      },
      {
        "title": "line",
        "description": "Set `line` to false to hide the connection line",
        "scenario": "basic",
        "code": "/**\n * cn - 无连接线\n *    -- 设置 `line` 为 false，不显示连接线\n * en - line\n *    -- Set `line` to false to hide the connection line\n */\n\nimport { Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data: DataItem[] = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n              children: [\n                {\n                  id: '0-0-0-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const renderItem: TreeProps['renderItem'] = (node: any) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  return (\n    <div>\n      <Tree\n        defaultExpanded={['0', '0-0']}\n        line={false}\n        data={data}\n        keygen='id'\n        renderItem={renderItem}\n      ></Tree>\n    </div>\n  );\n};\n"
      },
      {
        "title": "expand",
        "description": "Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes",
        "scenario": "basic",
        "code": "/**\n * cn - 控制展开\n *    -- 基础 Tree 组件用法，当配置 `children` 字段时，允许展开和收起节点\n * en - expand\n *    -- Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes\n *\n */\nimport { useState } from 'react';\nimport { Tree, Button, TYPE } from 'shineout';\nimport { createNestedArray, getIds } from './utils';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = createNestedArray([2, 2, 2]);\n\nexport default () => {\n  const [expanded, setExpanded] = useState<TreeProps['expanded']>([]);\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  const handleExpandAll = () => {\n    setExpanded(getIds(data));\n  };\n\n  const handleCloseAll = () => {\n    setExpanded([]);\n  };\n\n  const handleExpand: TreeProps['onExpand'] = (ids) => {\n    setExpanded([...ids]);\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Button size='small' mode='outline' type='secondary' onClick={handleExpandAll}>\n          Expand all\n        </Button>\n        <Button size='small' mode='outline' type='secondary' onClick={handleCloseAll}>\n          Collapse all\n        </Button>\n      </div>\n      <Tree\n        line={false}\n        data={data}\n        expanded={expanded}\n        onExpand={handleExpand}\n        keygen='id'\n        renderItem={renderItem}\n      ></Tree>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Default Expand all",
        "description": "Set the `defaultExpandAll` property to expand all nodes by default",
        "scenario": "basic",
        "code": "/**\n * cn - 默认展开全部\n *    -- 设置 `defaultExpandAll` 属性，可以默认展开所有节点\n * en - Default Expand all\n *    -- Set the `defaultExpandAll` property to expand all nodes by default\n *\n */\nimport { Tree, TYPE } from 'shineout';\nimport { createNestedArray } from './utils';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = createNestedArray([2, 2, 2]);\nexport default () => {\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  return (\n    <div>\n      <Tree defaultExpandAll line={false} data={data} keygen='id' renderItem={renderItem}></Tree>\n    </div>\n  );\n};\n"
      },
      {
        "title": "disabled",
        "description": "Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用状态\n *    -- 基础 Tree 组件用法，当配置 `children` 字段时，允许展开和收起节点\n * en - disabled\n *    -- Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes\n */\n\nimport { useState } from 'react';\nimport { Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data: DataItem[] = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n        {\n          id: '0-2',\n          children: [\n            {\n              id: '0-2-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [value, setValue] = useState<TreeProps['value']>([]);\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  const isDisabled: TreeProps['disabled'] = (node) => {\n    return node.id === '0-0';\n  };\n\n  const handleChange: TreeProps['onChange'] = (keys) => {\n    setValue(keys);\n  };\n\n  return (\n    <div>\n      <Tree\n        line={false}\n        value={value}\n        data={data}\n        keygen='id'\n        mode={0}\n        defaultExpanded={['0']}\n        onChange={handleChange}\n        disabled={isDisabled}\n        renderItem={renderItem}\n      ></Tree>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Selectable tree",
        "description": "Configure the `onChange` and `value` properties to enable data selection",
        "scenario": "basic",
        "code": "/**\n * cn - 可选择树\n *    -- 配置 `onChange` 以及 `value` 属性开启数据选择功能\n *    -- 配置 `mode` 属性返回不同结构的数据：\n *    -- 模式为 0 时，返回完全选中的节点，包含父节点\n *    -- 模式为 1 时，返回选中、半选中的节点\n *    -- 模式为 2 时，只返回叶子节点\n *    -- 模式为 3 时，只返回完全选中的父节点\n *    -- 模式为 4 时，所选即所得\n * en - Selectable tree\n *    -- Configure the `onChange` and `value` properties to enable data selection\n *    -- Configure the `mode` property to return different structures of data:\n *    -- When the mode is 0, it returns the fully selected node, including the parent node\n *    -- When the mode is 1, it returns the selected and half-selected nodes\n *    -- When the mode is 2, it only returns leaf nodes\n *    -- When the mode is 3, it only returns fully selected parent nodes\n *    -- When the mode is 4, it returns what you see is what you get\n */\n\nimport { useState } from 'react';\nimport { Tree, Radio, TYPE } from 'shineout';\nimport { createNestedArray } from './utils';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = createNestedArray([5, 1, 2]);\n\nexport default () => {\n  const radio = [\n    {\n      mode: 'full',\n      value: 0,\n    },\n    {\n      mode: 'half',\n      value: 1,\n    },\n    {\n      mode: 'child only',\n      value: 2,\n    },\n    {\n      mode: 'shallow',\n      value: 3,\n    },\n    {\n      mode: 'freedom',\n      value: 4,\n    },\n  ];\n\n  const [value, setValue] = useState<TreeProps['value']>([]);\n  const [mode, setMode] = useState<0 | 1 | 2 | 3 | 4>(0);\n\n  const renderItem = (node: any) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  const handleChange: TreeProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  const handleModeChange = (v: any) => {\n    setMode(v.value);\n    setValue([]);\n  };\n\n  return (\n    <div>\n      <Radio.Group\n        size='small'\n        keygen='value'\n        prediction={(item, v) => item === v.value}\n        value={mode}\n        onChange={handleModeChange}\n        renderItem={(item) => `模式 ${item.value}`}\n        data={radio}\n        style={{ marginBottom: 24 }}\n      />\n      <div style={{ display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          <Tree\n            key={mode}\n            line={false}\n            value={value}\n            data={data}\n            mode={mode}\n            keygen='id'\n            renderItem={renderItem}\n            onChange={handleChange}\n          ></Tree>\n        </div>\n        <pre\n          style={{\n            flex: 1,\n            margin: 10,\n            background: '#1d1d1d',\n            color: '#94d5fc',\n            borderRadius: 4,\n            padding: 10,\n          }}\n        >\n          <div style={{ marginBottom: 10 }}>\n            <code style={{ color: '#5D8E4E' }}>\n              <span>/</span>\n              <span>/</span> DataItem[]\n            </code>\n          </div>\n          {value && value.length > 0 && <code>{JSON.stringify(value, null, 2)}</code>}\n          {!value || (value.length === 0 && <code style={{ color: '#757575' }}>no data</code>)}\n        </pre>\n      </div>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Dynamic loading",
        "description": "Set the `loader` function to enable dynamic loading of nodes",
        "scenario": "basic",
        "code": "/**\n * cn - 动态加载\n *    -- 设置 `loader` 函数开启动态加载节点功能\n * en - Dynamic loading\n *    -- Set the `loader` function to enable dynamic loading of nodes\n */\nimport { useState } from 'react';\nimport { Tree, TYPE } from 'shineout';\nimport { produce } from 'immer';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const initData = ['0', '1', '2', '3', '4'].map((i) => ({ id: i }));\n  const [data, setData] = useState(initData);\n  const [value, setValue] = useState<TreeProps['value']>([]);\n\n  const renderItem = (node: any) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  const createRange = () => Array.from({ length: Math.round(Math.random() * 4) }, (_, i) => i);\n\n  const handleChange: TreeProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  const handleLoader: TreeProps['loader'] = (key) => {\n    setTimeout(() => setData(currentData => {\n      const nextData = produce(currentData, (draft) => {\n        const path: string[] = key.toString().split(',');\n        let target: any = draft;\n        path.forEach((pid, i) => {\n          target = target.find((d: any) => d.id === pid);\n          if (i < path.length - 1) target = target.children;\n        });\n        target.children = [...createRange().map((i) => ({ id: `${target.id}-${i}` }))];\n      });\n\n      return nextData\n    }), 1000);\n  };\n\n  return (\n    <div>\n      <Tree\n        value={value}\n        line={false}\n        onChange={handleChange}\n        loader={handleLoader}\n        data={data}\n        keygen={(node, parentKey) => `${parentKey},${node.id}`.replace(/^,/, '')}\n        renderItem={renderItem}\n      ></Tree>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Drag",
        "description": "Set the `onDrop` property to drag the node.",
        "scenario": "basic",
        "code": "/**\n * cn - 可拖拽\n *    -- 设置 `onDrop` 属性，可以拖拽节点\n *    -- 设置 `dragSibling` 属性，将限制节点拖拽范围至兄弟节点之间\n * en - Drag\n *    -- Set the `onDrop` property to drag the node.\n *    -- Set the `dragSibling` property to limit the node drag range to between sibling nodes\n */\n\nimport { useState } from 'react';\nimport { Tree, TYPE } from 'shineout';\nimport { createNestedArray } from './utils';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst d: DataItem[] = createNestedArray([4, 1, 1]);\n\nexport default () => {\n  const [data, setData] = useState(d);\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  const handleDrag: TreeProps['onDrop'] = (data) => {\n    setData(data);\n  };\n\n  return (\n    <div>\n      <Tree\n        line={false}\n        data={data}\n        onDragStart={(v) => console.log(v)}\n        keygen='id'\n        renderItem={renderItem}\n        onDrop={handleDrag}\n      ></Tree>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Drag Style",
        "description": "Set the `dragImageStyle` property to add style to the node that follows the mouse during dragging",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义拖拽样式\n *    -- 通过设置 `dragImageStyle` 属性为处于拖拽中跟随鼠标的节点添加样式\n * en - Drag Style\n *    -- Set the `dragImageStyle` property to add style to the node that follows the mouse during dragging\n */\n\nimport { useState } from 'react';\nimport { Tree, TYPE } from 'shineout';\nimport { createNestedArray } from './utils';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const [data, setData] = useState<TreeProps['data']>(createNestedArray([5, 2, 2]));\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  const handleDrag: TreeProps['onDrop'] = (data) => {\n    setData(data);\n  };\n\n  return (\n    <div>\n      <Tree\n        dragImageStyle={{ background: '#F1FAEB', border: '2px dashed #74D13D' }}\n        line={false}\n        data={data}\n        keygen='id'\n        renderItem={renderItem}\n        onDrop={handleDrag}\n      ></Tree>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Inline node",
        "description": "Set the `inlineNode` property to make the node not occupy the entire row",
        "scenario": "basic",
        "code": "/**\n * cn - 节点非占满一行\n *    -- 设置 `inlineNode` 属性可以让节点不占满整行（鼠标移动至节点上查看效果）。\n * en - Inline node\n *    -- Set the `inlineNode` property to make the node not occupy the entire row\n */\n\nimport { useState } from 'react';\nimport { Tree, Switch, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const [inlineNode, setInlineNode] = useState(true);\n  const data = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n            },\n            {\n              id: '0-0-1',\n              children: [\n                {\n                  id: '0-0-1-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: '1',\n      children: [\n        {\n          id: '1-0',\n          children: [\n            {\n              id: '1-0-0',\n            },\n            {\n              id: '1-0-1',\n              children: [\n                {\n                  id: '1-0-1-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '1-1',\n          children: [\n            {\n              id: '1-1-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return `node ${node.id}`;\n  };\n\n  return (\n    <div>\n      <Switch value={inlineNode} onChange={setInlineNode} style={{ marginBottom: 12 }} />\n      <Tree inlineNode={inlineNode} data={data} keygen='id' renderItem={renderItem} />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Action on click",
        "description": "Set `actionOnClick` to control the behavior when clicking a node, it can be 'expand', 'check', or both.",
        "scenario": "basic",
        "code": "/**\n * cn - 点击行为\n *    -- 设置 `actionOnClick` 设置点击节点的行为，可以是 'expand', 'check' 或者两者都有。\n * en - Action on click\n *    -- Set `actionOnClick` to control the behavior when clicking a node, it can be 'expand', 'check', or both.\n */\n\nimport { useState } from 'react';\nimport { Tree, Form, Checkbox, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n            },\n            {\n              id: '0-0-1',\n              children: [\n                {\n                  id: '0-0-1-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: '1',\n      children: [\n        {\n          id: '1-0',\n          children: [\n            {\n              id: '1-0-0',\n            },\n            {\n              id: '1-0-1',\n              children: [\n                {\n                  id: '1-0-1-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '1-1',\n          children: [\n            {\n              id: '1-1-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return `node ${node.id}`;\n  };\n\n  const [config, setConfig] = useState<{ actionOnClick: TreeProps['actionOnClick'] }>({\n    actionOnClick: ['check'],\n  });\n  const [value, setValue] = useState<TreeProps['value']>([]);\n\n  return (\n    <>\n      <Form value={config} onChange={setConfig}>\n        <Form.Item label='配置点击行为:' labelWidth='7em' labelAlign='left'>\n          <Checkbox.Group name='actionOnClick' keygen data={['check', 'expand']} />\n        </Form.Item>\n      </Form>\n      <Tree\n        data={data}\n        keygen='id'\n        renderItem={renderItem}\n        value={value}\n        onChange={setValue}\n        actionOnClick={config.actionOnClick}\n      />\n    </>\n  );\n};\n"
      },
      {
        "title": "Highlight",
        "description": "Set the `highlight` property to highlight the node when clicked",
        "scenario": "basic",
        "code": "/**\n * cn - 点击高亮\n *    -- 设置 `highlight` 属性后在点击节点时高亮\n * en - Highlight\n *    -- Set the `highlight` property to highlight the node when clicked\n */\n\nimport { Tree, TYPE } from 'shineout';\nimport { createNestedArray } from './utils';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data: DataItem[] = createNestedArray([5, 1, 1]);\n\n  const renderItem: TreeProps['renderItem'] = (node) => `node ${node.id}`;\n\n  return (\n    <Tree line={false} highlight data={data} keygen='id' renderItem={renderItem} />\n  );\n};\n"
      },
      {
        "title": "*    -- Highlight control: set `active` and `setActive`",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 受控高亮：设置 `active` 和 `setActive`\n * en -\n *    -- Highlight control: set `active` and `setActive`\n */\n\nimport { Button, Tree, TYPE } from 'shineout';\nimport { createNestedArray } from './utils';\nimport { useState } from 'react';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const [active, setActive] = useState<string | number | undefined>();\n  const data: DataItem[] = createNestedArray([5, 1, 1]);\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  const handleClearHighlight = () => {\n    setActive(undefined);\n  }\n\n  return (\n    <div>\n      <Tree\n        active={active}\n        setActive={setActive}\n        data={data}\n        keygen='id'\n        line={false}\n        renderItem={renderItem}\n      />\n\n      <br />\n\n      <Button onClick={handleClearHighlight}>Clear highlight</Button>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Virtual list",
        "description": "Set the `virtual` property to enable the virtual list function, this example has 100000 data",
        "scenario": "basic",
        "code": "/**\n * cn - 虚拟列表\n *    -- 设置 `virtual` 属性，开启虚拟列表功能，本例为 100000 条数据\n *    -- 设置虚拟列表后需要指定 `height` 属性或者将其设置在固定高度容器中\n *    -- *虚拟暂不支持高级筛选模式、节点拖拽\n * en - Virtual list\n *    -- Set the `virtual` property to enable the virtual list function, this example has 100000 data\n *\n */\nimport { Tree, TYPE } from 'shineout';\nimport { createNestedArray } from './utils';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = createNestedArray([100, 10, 10, 10]);\n\nexport default () => {\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  return (\n    <div style={{ height: 300 }}>\n      <Tree\n        virtual\n        line={true}\n        data={data}\n        defaultExpandAll\n        keygen='id'\n        parentClickExpand\n        mode={2}\n        size=\"small\"\n        onChange={(v) => console.log(v)}\n        renderItem={renderItem}\n      ></Tree>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Size",
        "description": "Set the `size` property to configure different sizes, with three options: `small`, `default`, and `large`",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性配置不同的尺寸，有 small、default、large 三种可选值\n * en - Size\n *    -- Set the `size` property to configure different sizes, with three options: `small`, `default`, and `large`\n */\nimport React from 'react';\nimport { Form, Radio, Switch, Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data: DataItem[] = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n              children: [\n                {\n                  id: '0-0-0-0',\n                },\n                {\n                  id: '0-0-0-1',\n                },\n              ],\n            },\n            {\n              id: '0-0-1',\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: '1',\n      children: [\n        {\n          id: '1-0',\n          children: [\n            {\n              id: '1-0-0',\n            },\n          ],\n        },\n        {\n          id: '1-1',\n          children: [\n            {\n              id: '1-1-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return `node ${node.id}`;\n  };\n\n  const [size, setSize] = React.useState<'small' | 'default' | 'large'>('small');\n  const [line, setLine] = React.useState(true);\n  const [checkbox, setCheckbox] = React.useState(false);\n  const [virtual, setVirtual] = React.useState(false);\n\n  return (\n    <div>\n      <Form inline style={{ marginBottom: 12 }} colon>\n        <Form.Item label='Size'>\n          <Radio.Group\n            keygen\n            data={['small', 'default', 'large']}\n            value={size}\n            onChange={setSize}\n          />\n        </Form.Item>\n        <Form.Item label='Line'>\n          <Switch size='small' value={line} onChange={setLine} style={{ marginTop: 8 }} />\n        </Form.Item>\n        <Form.Item label='Checkbox'>\n          <Switch size='small' value={checkbox} onChange={setCheckbox} style={{ marginTop: 8 }} />\n        </Form.Item>\n        {/* <Form.Item label='Virtual'>\n          <Switch size='small' value={virtual} onChange={setVirtual} style={{ marginTop: 8 }} />\n        </Form.Item> */}\n      </Form>\n      <Tree\n        data={data}\n        keygen='id'\n        height={300}\n        renderItem={renderItem}\n        size={size}\n        defaultExpandAll\n        line={line}\n        virtual={virtual}\n        value={checkbox ? [] : undefined}\n        onChange={checkbox ? (v) => console.log(v) : undefined}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Custom icons",
        "description": "Set the `expandIcons` property to configure custom expand/collapse icons",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义图标\n *    -- 设置 `expandIcons` 属性配置自定义的展开/收起图标\n *    -- 也可以设置 `expandIcons` 属性为函数，返回自定义的展开/收起图标\n * en - Custom icons\n *    -- Set the `expandIcons` property to configure custom expand/collapse icons\n *    -- You can also set the `expandIcons` property to a function that returns custom expand/collapse icons\n */\n\nimport { Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst collapseIcon = (\n  <svg viewBox='0 0 24 24' width='24px' height='24px'>\n    <path\n      d='M3 3H8.923C9.28928 3.00014 9.65067 3.08411 9.97948 3.24548C10.3083 3.40686 10.5958 3.64135 10.82 3.931L12.6 6.4H1V5C1 4.46957 1.21071 3.96086 1.58579 3.58579C1.96086 3.21071 2.46957 3 3 3Z'\n      fill='#F7BA1E'\n    ></path>\n    <path\n      d='M20.436 6.40005C21.328 6.40005 21.651 6.49305 21.976 6.66705C22.303 6.84105 22.559 7.09705 22.733 7.42305C22.907 7.74905 23 8.07305 23 8.96305V19.436C23 20.328 22.907 20.651 22.733 20.976C22.563 21.2988 22.2995 21.5627 21.977 21.733C21.651 21.907 21.327 22 20.437 22H3.563C2.671 22 2.348 21.907 2.023 21.733C1.70051 21.5627 1.43674 21.2993 1.266 20.977C1.093 20.65 1 20.327 1 19.437V6.39905L20.436 6.40005Z'\n      fill='#F9CC45'\n    ></path>\n  </svg>\n);\n\nconst expandIcon = (\n  <svg viewBox='0 0 24 24' width='24px' height='24px'>\n    <path\n      d='M20.625 20.75C20.625 21.5 20 22.125 19.25 22.125H3L5.438 11.75C5.438 11 6.063 10.375 6.813 10.375H21.625C22.375 10.375 23 11 23 11.75L20.625 20.75Z'\n      fill='#F9CC45'\n    ></path>\n    <path\n      d='M4.75 8.375H20.25V7C20.25 6.25 19.625 6 18.875 6H11.625L9.851 3.759C9.6637 3.52229 9.42525 3.33104 9.15353 3.19959C8.8818 3.06815 8.58385 2.99991 8.282 3H2.375C1.625 3 1 3.625 1 4.375V20.75L3.438 9.75C3.375 8.937 4 8.375 4.75 8.375Z'\n      fill='#F7BA1E'\n    ></path>\n  </svg>\n);\n\nconst leafIcon = (\n  <svg viewBox='0 0 44 44' width='24px' height='24px'>\n    <path\n      fill-rule='evenodd'\n      clip-rule='evenodd'\n      d='M3.63281 7.26578C3.63281 5.25935 5.25935 3.63281 7.26577 3.63281L18.3403 3.63281C18.9922 3.63281 19.5941 3.9821 19.9175 4.54807L22.5044 9.07524C22.8278 9.64121 23.4297 9.9905 24.0816 9.9905H34.513C36.5194 9.9905 38.146 11.617 38.146 13.6235V36.1383C38.146 38.2503 36.4338 39.9624 34.3218 39.9624H7.45698C5.34495 39.9624 3.63281 38.2503 3.63281 36.1383V7.26578Z'\n      fill='url(#paint0_linear_767_26603278315253)'\n    ></path>\n    <path\n      fill-rule='evenodd'\n      clip-rule='evenodd'\n      d='M4.86895 18.0921C5.00735 16.087 6.67422 14.5313 8.68405 14.5313H36.3297C38.4346 14.5313 40.099 16.3145 39.9541 18.4144L38.7125 36.4012C38.5741 38.4062 36.9072 39.962 34.8974 39.962H7.45661C5.24091 39.962 3.48894 38.0849 3.64152 35.8745L4.86895 18.0921Z'\n      fill='url(#paint1_linear_767_2660311446405)'\n    ></path>\n    <path\n      d='M23.7296 27.859L24.2549 27.8645L24.7238 27.8754L25.1422 27.8929L25.2396 27.8984L25.3343 27.9044L25.6879 27.9338C26.4132 28.0071 26.8863 28.1464 27.3763 28.4034C28.2101 28.8407 28.8951 29.5135 29.3522 30.3349L29.4617 30.5433L29.5473 30.7247L29.5671 30.7696L29.5864 30.8146L29.6572 30.9953L29.6735 31.0411L29.6892 31.0873L29.7466 31.2774L29.7958 31.479L29.8069 31.5318L29.8175 31.5856L29.8555 31.813L29.8869 32.0629L29.9123 32.3399L29.9321 32.6483L29.9472 32.9924L29.962 33.5853L29.9705 34.542L29.9714 35.6954C29.9714 36.1636 29.5963 36.549 29.1145 36.5983L29.0097 36.6036H14.5847C14.0889 36.6036 13.6809 36.2493 13.6287 35.7942L13.623 35.6952L13.6234 34.522L13.6261 33.9752L13.6382 33.2602L13.653 32.8459L13.6742 32.4751L13.7028 32.1426L13.7112 32.0649L13.7201 31.9891L13.7615 31.7039L13.7989 31.5066L13.8421 31.321L13.9095 31.0879C13.9706 30.8991 14.0442 30.7222 14.1328 30.5433C14.5862 29.6272 15.3148 28.8772 16.2182 28.4034C16.6537 28.1749 17.0759 28.0395 17.6737 27.9607L17.9065 27.9338L18.2601 27.9044L18.3548 27.8984L18.4522 27.8929L18.8706 27.8754L19.3395 27.8645L19.8648 27.859H23.7296ZM23.6933 29.6754H19.9028L19.7827 29.6761L19.6663 29.6771L19.0414 29.6882L18.6891 29.701L18.3822 29.7187L18.1159 29.742C18.0334 29.7507 17.9567 29.7604 17.8852 29.7712L17.7815 29.7883L17.5947 29.8275C17.4201 29.8704 17.28 29.9242 17.1519 29.9914C16.6681 30.2452 16.2601 30.638 15.9759 31.1254L15.8752 31.3125L15.8425 31.3816L15.7836 31.5271L15.7325 31.6866L15.7209 31.7292L15.7098 31.773L15.6697 31.9622L15.6363 32.177L15.6289 32.2353L15.622 32.2955L15.5976 32.5577L15.5786 32.8572L15.5646 33.1989L15.5549 33.5874L15.5491 34.0274L15.5464 34.7865H28.0471L28.0424 33.8982L28.0319 33.3193L28.0144 32.8398L27.9982 32.5684L27.9779 32.3305L27.9531 32.122L27.9233 31.9386L27.8883 31.7761L27.8475 31.6302L27.8364 31.5958L27.8249 31.5621L27.7749 31.4331L27.7193 31.3125C27.4351 30.7384 26.9868 30.2769 26.4425 29.9914C26.3464 29.941 26.2436 29.8981 26.1246 29.8618L25.9998 29.8275L25.813 29.7883L25.7621 29.7795L25.7094 29.7712L25.4787 29.742L25.4157 29.7356L25.3504 29.7296L25.0647 29.7092L24.736 29.694L24.3593 29.6835L23.6933 29.6754ZM21.7972 17.2559C24.3052 17.2559 26.3384 19.289 26.3384 21.7971C26.3384 24.3051 24.3052 26.3383 21.7972 26.3383C19.2892 26.3383 17.256 24.3051 17.256 21.7971C17.256 19.289 19.2892 17.2559 21.7972 17.2559ZM21.7972 19.0723C20.2924 19.0723 19.0725 20.2922 19.0725 21.7971C19.0725 23.3019 20.2924 24.5218 21.7972 24.5218C23.302 24.5218 24.5219 23.3019 24.5219 21.7971C24.5219 20.2922 23.302 19.0723 21.7972 19.0723Z'\n      fill='url(#paint2_linear_767_26603943154657)'\n    ></path>\n    <defs>\n      <linearGradient\n        id='paint0_linear_767_26603278315253'\n        x1='-33.0435'\n        y1='4.66394'\n        x2='7.5637'\n        y2='40.76'\n        gradientUnits='userSpaceOnUse'\n      >\n        <stop stop-color='#FFDF81'></stop>\n        <stop offset='1' stop-color='#FFBB4A'></stop>\n      </linearGradient>\n      <linearGradient\n        id='paint1_linear_767_2660311446405'\n        x1='3.35938'\n        y1='14.5312'\n        x2='3.35938'\n        y2='39.962'\n        gradientUnits='userSpaceOnUse'\n      >\n        <stop stop-color='#FFDF81'></stop>\n        <stop offset='1' stop-color='#FFBB4A'></stop>\n      </linearGradient>\n      <linearGradient\n        id='paint2_linear_767_26603943154657'\n        x1='28.7165'\n        y1='36.6036'\n        x2='11.9215'\n        y2='21.5717'\n        gradientUnits='userSpaceOnUse'\n      >\n        <stop stop-color='#A96A00'></stop>\n        <stop offset='1' stop-color='#D28400' stop-opacity='0.7'></stop>\n      </linearGradient>\n    </defs>\n  </svg>\n);\n\nexport default () => {\n  const data: DataItem[] = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n              children: [\n                {\n                  id: '0-0-0-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const renderItem: TreeProps['renderItem'] = (node: any) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  return (\n    <div>\n      <Tree\n        defaultExpanded={['0', '0-0', '0-1']}\n        line={false}\n        data={data}\n        keygen='id'\n        renderItem={renderItem}\n        expandIcons={[collapseIcon, expandIcon]}\n        leafIcon={leafIcon}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "*    -- Set the `expandIcons` property to configure custom expand/collapse icons",
        "description": "You can also set the `leafIcon` property to a function to return a custom leaf node icon",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 设置 `leafIcon` 属性为true，显示默认的叶子节点图标\n *    -- 也可以设置 `leafIcon` 属性为函数，返回自定义的叶子节点图标\n * en -\n *    -- Set the `expandIcons` property to configure custom expand/collapse icons\n *    -- You can also set the `leafIcon` property to a function to return a custom leaf node icon\n */\n\nimport { Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data: DataItem[] = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n              children: [\n                {\n                  id: '0-0-0-0',\n                },\n                {\n                  id: '0-0-0-1',\n                },\n              ],\n            },\n            {\n              id: '0-0-1',\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: '1',\n      children: [\n        {\n          id: '1-0',\n          children: [\n            {\n              id: '1-0-0',\n            },\n          ],\n        },\n        {\n          id: '1-1',\n          children: [\n            {\n              id: '1-1-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const renderItem: TreeProps['renderItem'] = (node: any) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  return (\n    <div>\n      <Tree\n        defaultExpanded={['0', '0-0', '0-0-0']}\n        line={false}\n        data={data}\n        keygen='id'\n        renderItem={renderItem}\n        leafIcon\n      />\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 51,
      "requiredProps": 3,
      "propsWithWhen": 0,
      "examplesCount": 17
    }
  },
  "TreeSelect": {
    "name": "TreeSelect",
    "description": "用清晰的层级结构来展示层级信息，便于用户根据数据之间的关系来逐级找到相应的节点及数据",
    "category": "other",
    "importPath": "import { TreeSelect } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "innerTitle",
        "type": "ReactNode",
        "required": false,
        "description": "内嵌标题"
      },
      {
        "name": "filterSameChange",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "当两次选择的值相同时不触发 onChange"
      },
      {
        "name": "absolute",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1000",
        "description": "选项列表 z-index 值, 需要配合 absolute"
      },
      {
        "name": "actionOnClick",
        "type": "ActionOnClick | ActionOnClick[]",
        "required": false,
        "description": "点击节点展开是的操作: \\\"expand\\\" 展开节点，\\\"check\\\" 选中复选框",
        "version": "3.6.0"
      },
      {
        "name": "value",
        "type": "Value",
        "required": false,
        "description": "选中的 key （受控），多选时必须为array。注意，请勿将 undefined 和 null 作为有意义的选项值，当 value 类型为 undefined 和 null 时，组件将不处理数据和渲染"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认值  和 value 类型相同"
      },
      {
        "name": "data",
        "type": "DataItem[]",
        "required": false,
        "defaultValue": "[]",
        "description": "数据源"
      },
      {
        "name": "expanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "展开的节点 key(受控)"
      },
      {
        "name": "defaultExpanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "默认展开的节点 key（非受控）"
      },
      {
        "name": "defaultExpandAll",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "默认展开全部子节点, 仅树形数据下有效"
      },
      {
        "name": "disabled",
        "type": "boolean | ((item: DataItem) => boolean) | { disabled: (data: DataItem) => boolean, isRealtime: boolean }",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，所有节点禁用选择，为函数时，根据函数返回结果确定是否禁用"
      },
      {
        "name": "keygen",
        "type": "ObjectKey<DataItem> | ((data: DataItem, parentKey: string | number) => string | number)",
        "required": true,
        "description": "生成 key 的辅助方法, 为函数时，使用此函数返回值, 为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d) => d.id"
      },
      {
        "name": "childrenKey",
        "type": "ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "\\\"children\\\"",
        "description": "指定子数据的属性名"
      },
      {
        "name": "mode",
        "type": "0 | 1 | 2 | 3 | 4",
        "required": false,
        "defaultValue": "1",
        "description": "选中值模式，未设置值为单选 0: 只返回完全选中的节点，包含父节点 1: 返回全部选中的节点和半选中的父节点 2: 只返回选中的子节点 3: 如果父节点选中，只返回父节点 4: 所选即所得"
      },
      {
        "name": "unmatch",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示data中不存在的值"
      },
      {
        "name": "onExpand",
        "type": "((value: (string | number)[]) => void)",
        "required": false,
        "description": "节点展开回调，参数为当前展开节点 key 数组"
      },
      {
        "name": "virtual",
        "type": "boolean",
        "required": false,
        "description": "虚拟列表"
      },
      {
        "name": "noCache",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启数据缓存，如果数据存在动态更新的情况建议开启"
      },
      {
        "name": "emptyText",
        "type": "string",
        "required": false,
        "description": "自定义 empty 文案"
      },
      {
        "name": "loading",
        "type": "boolean | ReactNode",
        "required": false,
        "defaultValue": "false",
        "description": "数据加载中，为true时会展示一个默认的 [Spin](/components/Spin) 组件，可以传入一个自定义的Spin代替"
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": "value 为空时的占位符"
      },
      {
        "name": "compressedBound",
        "type": "number",
        "required": false,
        "description": "开启多选后，指定允许展示标签数量，超过后将折叠"
      },
      {
        "name": "compressedClassName",
        "type": "string",
        "required": false,
        "description": "多选合并展示弹出框的类名"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可清除值"
      },
      {
        "name": "renderUnmatched",
        "type": "((data: Value extends (infer U)[] ? U : Value) => ReactNode)",
        "required": false,
        "description": "渲染未匹配值的方式"
      },
      {
        "name": "getComponentRef",
        "type": "((ref: ComponentRef<DataItem, Value>) => void) | { current?: ComponentRef<DataItem, Value> ; }",
        "required": false,
        "description": "获取组件的一些方法 目前只支持 getDataByValues"
      },
      {
        "name": "onFilter",
        "type": "((text: string, from?: string ) => void | ((data: DataItem) => boolean) )",
        "required": false,
        "description": "onFilter 不为空时，可以输入过滤数据。 onFilter 如果返回一个函数，使用这个函数做前端过滤。 如果不返回，可以自行做后端过滤"
      },
      {
        "name": "empty",
        "type": "ReactNode",
        "required": false,
        "description": "无数据时的占位内容"
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否是多选"
      },
      {
        "name": "onBlur",
        "type": "((e?: any) => void)",
        "required": false,
        "description": "blur 事件回调函数"
      },
      {
        "name": "onFocus",
        "type": "((e?: any) => void)",
        "required": false,
        "description": "focus 事件回调函数"
      },
      {
        "name": "renderResult",
        "type": "((data: DataItem) => ReactNode)",
        "required": false,
        "defaultValue": "renderItem",
        "description": "选中后在结果中显示的内容，默认和 renderItem 相同"
      },
      {
        "name": "height",
        "type": "number",
        "required": false,
        "defaultValue": "300",
        "description": "列表高度"
      },
      {
        "name": "onCollapse",
        "type": "((collapse: boolean) => void)",
        "required": false,
        "description": "下拉列表展开/收起回调"
      },
      {
        "name": "showHitDescendants",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "筛选后是否展示命中节点的后代节点"
      },
      {
        "name": "position",
        "type": "\"auto\" | \"bottom-left\" | \"top-left\"",
        "required": false,
        "description": "弹出位置"
      },
      {
        "name": "onEnterExpand",
        "type": "((e: KeyboardEvent<HTMLDivElement>) => boolean)",
        "required": false,
        "description": "回车触发下拉框展开的时候调用"
      },
      {
        "name": "onChange",
        "type": "((value: Value, selected?: DataItem | { IS_NOT_MATCHED_VALUE: boolean, value: any } , path?: (string | number)[] ) => void)",
        "required": false,
        "description": "参数 为 当前选中值"
      },
      {
        "name": "onChangeAddition",
        "type": "((params: { current?: DataItem | UnMatchedData | (DataItem | UnMatchedData)[] ; checked?: 0 | 1 | 2 ; data?: DataItem | UnMatchedData | (DataItem | UnMatchedData)[] | null ; }) => void)",
        "required": false,
        "description": "onChange 额外参数 (current 为点击的节点的数据， data 为当前选中的数据， checked 为多选状态下是选中还是取消)"
      },
      {
        "name": "compressed",
        "type": "boolean | \"no-repeat\" | \"hide-popover\"",
        "required": false,
        "defaultValue": "false",
        "description": "将选中值合并，只在多选模式下有效；为 \\\"no-repeat\\\" 时弹出框中不重复展示值"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "控制浮层显隐"
      },
      {
        "name": "line",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示连接线"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "输入框宽度"
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否只展示下边框"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否展示边框"
      },
      {
        "name": "showArrow",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示箭头"
      },
      {
        "name": "focusSelected",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "onFilter 在多选情况下点击选项后是否选中过滤文本"
      },
      {
        "name": "resultClassName",
        "type": "string | ((value: DataItem) => string)",
        "required": false,
        "description": "选中结果内容容器的className"
      },
      {
        "name": "loader",
        "type": "((key: string | number, data: DataItem) => void)",
        "required": false,
        "description": "设置 loader 属性后，未定义 children 的节点视为动态加载节点，点击展开触发 loader事件，children 为 null 或者长度为 0 视为叶子节点"
      },
      {
        "name": "parentClickExpand",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "点击父节点展开"
      },
      {
        "name": "trim",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "trim 为 true 时，失去焦点时会自动删除空白字符"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((data: DataItem, expanded: boolean, active: boolean, id: string | number) => ReactNode)",
        "required": true,
        "defaultValue": "index",
        "description": "为 string 时，返回 d[string]。 为 function 时，返回函数结果"
      },
      {
        "name": "onAdvancedFilter",
        "type": "((text: string) => (data: DataItem) => boolean)",
        "required": false,
        "description": "高级筛选模式，可针对当前层级在筛选结果和原始数据间切换"
      },
      {
        "name": "adjust",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启自动调整面板位置功能。当面板被窗口遮挡时，自动调整位置"
      },
      {
        "name": "filterDelay",
        "type": "number",
        "required": false,
        "defaultValue": "400",
        "description": "毫秒。用户输入触发 fitler 事件的延时"
      },
      {
        "name": "reFocus",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "存在 onFilter 和 onCreate，选中 Option，自动 focus Input"
      },
      {
        "name": "contentClass",
        "type": "string | ((data: DataItem) => string)",
        "required": false,
        "description": "内容样式"
      },
      {
        "name": "renderCompressed",
        "type": "((options: { data: DataItem[], onRemove: (item: DataItem) => void }) => ReactNode)",
        "required": false,
        "description": "自定义渲染折叠内容，其中 data 为选中的数据，onRemove 为删除事件",
        "version": "3.7.0"
      },
      {
        "name": "highlight",
        "type": "boolean",
        "required": false,
        "description": "开启搜索关键字高亮功能",
        "version": "3.7.0"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Basic",
        "description": "Basic usage of TreeSelect",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基础的 TreeSelect 用法\n *    -- 默认`childrenKey`属性值为 'children'\n *    -- 单选模式下 TreeSelect 遵循`mode`属性规则，详见mode属性说明\n * en - Basic\n *    -- Basic usage of TreeSelect\n *    -- The default value of the `childrenKey` property is 'children'\n *    -- In single selection `mode`, TreeSelect follows the mode attribute rules, see the mode attribute description for details\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string[]>;\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>([]);\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        width={300}\n        value={value}\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Multiple",
        "description": "Set `multiple` to true, you can select multiple nodes",
        "scenario": "basic",
        "code": "/**\n * cn - 多选\n *    -- 开启`multiple`属性后，可以选择多个节点\n *    -- 注意，开启多选模式后，最终数据结果遵循`mode`属性规则，详见mode属性说明\n * en - Multiple\n *    -- Set `multiple` to true, you can select multiple nodes\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string[]>;\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>([]);\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        multiple\n        width={300}\n        value={value}\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Compressed",
        "description": "Set `compressed` to true, you can merge the selected results",
        "scenario": "basic",
        "code": "/**\n * cn - 合并选项\n *    -- 使用`compressed`属性可以合并选中结果\n * en - Compressed\n *    -- Set `compressed` to true, you can merge the selected results\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string[]>;\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>([\"1-1-1\",\"1-1-2\",\"1-1\",\"1-2\",\"1\",\"2-1\",\"2-2\",\"2\",\"3-1\",\"3\"]);\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        multiple\n        width={300}\n        value={value}\n        compressed\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Compressed no-repeat",
        "description": "When the value of the `compressed` property is 'no-repeat', the repeated content in the merged options will not appear in the result box",
        "scenario": "basic",
        "code": "/**\n * cn - 合并选项去重\n *    -- 当`compressed`属性值为 \"no-repeat\" 时，合并的选项中不会出现结果框中的重复内容\n * en - Compressed no-repeat\n *    -- When the value of the `compressed` property is 'no-repeat', the repeated content in the merged options will not appear in the result box\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string[]>;\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>([\n    '1-1-1',\n    '1-1-2',\n    '1-1',\n    '1-2',\n    '1',\n    '2-1',\n    '2-2',\n    '2',\n    '3-1',\n    '3',\n  ]);\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        multiple\n        width={300}\n        value={value}\n        compressed='no-repeat'\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Only merge options",
        "description": "Set the `compressed` property to `hide-popover` to merge the selected results, only display the number of merged options, and no longer display the merged options in the pop-up layer",
        "scenario": "basic",
        "code": "/**\n * cn - 隐藏合并选项\n *    -- 使用 `compressed` 属性并设置值为 \"hide-popover\" 可以合并选中结果，仅展示合并后的选项数量，不再弹出层中展示合并的选项\n *    -- 建议数据量较大的情况下开启该功能，配合固定数值的 `compressedBound` 属性可降额外的低性能开销\n * en - Only merge options\n *    -- Set the `compressed` property to `hide-popover` to merge the selected results, only display the number of merged options, and no longer display the merged options in the pop-up layer\n *    -- It is recommended to enable this function when the data volume is large\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\nimport { createNestedArray } from '../../tree/__example__/utils';\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string[]>;\n\nconst data: DataItem[] = createNestedArray([10, 10, 10]);\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>([\n    '0-0-0',\n    '0-0-1',\n    '0-0-2',\n    '0-0-3',\n    '0-0-4',\n    '0-0-5',\n    '0-0-6',\n    '0-0-7',\n    '0-0-8',\n    '0-0-9',\n    '0-0',\n    '0',\n    '2-0-0',\n    '2-0-1',\n    '2-0-2',\n    '2-0-3',\n    '2-0-4',\n    '2-0-5',\n    '2-0-6',\n    '2-0-7',\n    '2-0-8',\n    '2-0-9',\n    '2-0',\n    '2',\n    '4-0-0',\n    '4-0-1',\n    '4-0-2',\n    '4-0-3',\n    '4-0-4',\n    '4-0-5',\n    '4-0-6',\n    '4-0-7',\n    '4-0-8',\n    '4-0-9',\n    '4-0',\n    '4-1-0',\n    '4-1-1',\n    '4-1-2',\n    '4-1-3',\n    '4-1-4',\n    '4-1-5',\n    '4-1-6',\n    '4-1-7',\n    '4-1-8',\n    '4-1-9',\n    '4-1',\n    '4-3-0',\n    '4-3-1',\n    '4-3-2',\n    '4-3-3',\n    '4-3-4',\n    '4-3-5',\n    '4-3-6',\n    '4-3-7',\n    '4-3-8',\n    '4-3-9',\n    '4-3',\n    '4-5-0',\n    '4-5-1',\n    '4-5-2',\n    '4-5-3',\n    '4-5-4',\n    '4-5-5',\n    '4-5-6',\n    '4-5-7',\n    '4-5-8',\n    '4-5-9',\n    '4-5',\n    '4',\n  ]);\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        multiple\n        clearable\n        width={300}\n        value={value}\n        compressed='hide-popover'\n        compressedBound={2}\n        onChange={handleChange}\n        keygen='id'\n        renderItem={(node) => `node ${node.id}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Custom rendering of compressed content",
        "description": "Support custom rendering of compressed content by configuring `renderCompressed`, and customize optimized rendering for large data",
        "scenario": "custom",
        "code": "/**\n * cn - 自定义渲染合并内容\n *    -- 通过配置 `renderCompressed` 支持自定义折叠内容渲染，大体量数据可自定义优化渲染\n *    -- `renderCompressed` 参数为一个对象，包含 `data` 和 `onRemove` 两个属性，`data` 为折叠内容数据，`onRemove` 为删除事件\n *    -- 该示例演示使用Table组件的虚拟列表特性渲染大体量的结果\n * en - Custom rendering of compressed content\n *    -- Support custom rendering of compressed content by configuring `renderCompressed`, and customize optimized rendering for large data\n *    -- The `renderCompressed` parameter is an object containing two properties, `data` and `onRemove`, `data` is the compressed content data, and `onRemove` is the delete event\n *    -- This example demonstrates using the virtual list feature of the Table component to render large amounts of results\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, Popover, Table, Link, TYPE } from 'shineout';\nimport { createNestedArray } from '../../tree/__example__/utils';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    item: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      padding: '5px 8px',\n      '&:hover': {\n        borderRadius: 2,\n        backgroundColor: 'var(---Neutral-fill-2-, #F4F5F8)',\n      },\n    },\n    table: {\n      borderRadius: 4,\n      overflow: 'hidden',\n      '& td': {\n        padding: '0 8px',\n        border: 'none !important',\n      },\n      '& tr:first-child td': {\n        paddingTop: '8px',\n      },\n      '& tr:last-child td': {\n        paddingBottom: '8px',\n      },\n      '& [data-soui-role=\"scroll\"]': {\n        scrollbarColor: '#c0c0c0 transparent',\n      },\n    },\n  },\n);\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<DataItem>;\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string[]>;\n\nconst data: DataItem[] = createNestedArray([10, 10, 10]);\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>([]);\n  const classNames = useStyles();\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  const renderCompressed: TreeSelectProps['renderCompressed'] = (options) => {\n    const { data, onRemove } = options;\n\n    const columns: TableColumnItem[] = [\n      {\n        render: (item) => (\n          <div className={classNames.item}>\n            <span>node-{item.id}</span>\n            <Link type='primary' onClick={() => onRemove(item)}>\n              删除\n            </Link>\n          </div>\n        ),\n      },\n    ];\n\n    return (\n      <span\n        style={{\n          fontSize: 12,\n          color: '#fff',\n          margin: '2px 0',\n          borderRadius: 4,\n          padding: '0 4px',\n          background: 'var(--soui-brand-6)',\n        }}\n      >\n        +{value ? value.length : ''}\n        <Popover position='bottom'>\n          <Table\n            data={data}\n            keygen='id'\n            virtual\n            columns={columns}\n            hideHeader\n            width={200}\n            hover={false}\n            style={{ maxHeight: 160 }}\n            className={classNames.table}\n          />\n        </Popover>\n      </span>\n    );\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        multiple\n        clearable\n        width={300}\n        value={value}\n        compressed='hide-popover'\n        compressedBound={2}\n        renderCompressed={renderCompressed}\n        onChange={handleChange}\n        keygen='id'\n        renderItem={(node) => `node ${node.id}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Filter data (local)",
        "description": "Set the `onFilter` property and return the content as a function, the local data will be filtered according to the returned filter function",
        "scenario": "basic",
        "code": "/**\n * cn - 过滤数据（本地）\n *    -- 设置`onFilter`属性且返回内容为函数时，会根据返回的过滤函数对本地数据进行过滤\n *    -- 如果`onFilter`不返回函数，可根据输入内容自行进行远程查询数据\n * en - Filter data (local)\n *    -- Set the `onFilter` property and return the content as a function, the local data will be filtered according to the returned filter function\n */\nimport React, { useState } from 'react';\nimport { Form, Switch, TreeSelect, TYPE } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string>;\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>('');\n  const [highlight, setHighlight] = useState(true);\n\n  const handleFilter = (text: string) => (d: DataItem) => `node ${d.title}`.indexOf(text) > -1;\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <Form>\n        <Form.Item label='高亮关键字' labelWidth={72}>\n          <Switch value={highlight} onChange={setHighlight} />\n        </Form.Item>\n      </Form>\n\n      <TreeSelect\n        width={300}\n        multiple\n        onFilter={handleFilter}\n        mode={1}\n        value={value}\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node?.title}`}\n        data={data}\n        placeholder='Please select content'\n        highlight={highlight}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Advanced Filter",
        "description": "In the advanced filter mode, you can switch between the filter results and the original data for the current level by pressing the button",
        "scenario": "basic",
        "code": "/**\n * cn - 高级筛选\n *    -- 高级筛选模式下，可针对当前层级在筛选结果和原始数据间切换\n *    -- 设置 onAdvancedFilter 属性开启高级筛选，仅支持前端筛选\n * en - Advanced Filter\n *    -- In the advanced filter mode, you can switch between the filter results and the original data for the current level by pressing the button\n *    -- Set the onAdvancedFilter property to enable advanced filtering, only front-end filtering is supported\n */\n\nimport React from 'react';\nimport { TreeSelect } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'gulou',\n          },\n        ],\n      },\n      {\n        value: 'suzhou',\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n          {\n            value: 'feixi',\n          },\n        ],\n      },\n      {\n        value: 'maanshan',\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <TreeSelect\n        width={300}\n        showHitDescendants\n        placeholder='Please select content'\n        onAdvancedFilter={(text) => (d) => d.value.indexOf(text) > -1}\n        clearable\n        keygen='value'\n        renderItem='value'\n        data={data}\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Loader",
        "description": "Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes",
        "scenario": "basic",
        "code": "/**\n * cn - 动态加载\n *    -- 通过设置`loader`函数实现动态加载节点\n * en - Loader\n *    -- Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes\n */\nimport React from 'react';\nimport { produce } from 'immer';\nimport { TreeSelect } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst initData: DataItem[] = ['0', '1', '2', '3', '4'].map((i) => ({ id: i }));\n\nlet index = 0;\nconst App = () => {\n  const [data, setData] = React.useState(initData);\n  const loader = (key: any) => {\n    setTimeout(() => {\n      const nextData = produce(data, (d: DataItem[]) => {\n        d[parseInt(key, 10)].children = Array(6)\n          .fill(0)\n          .map(() => ({ id: `-${index++}`, children: [] }));\n      });\n      setData(nextData);\n    }, 500);\n  };\n\n  return (\n    <TreeSelect\n      placeholder='Please select content'\n      width={300}\n      multiple\n      loader={loader}\n      keygen='id'\n      renderItem={(node) => `node ${node.id}`}\n      data={data}\n    />\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "Set the disabled property to disable the component",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用\n *      -- 设置`disabled`属性禁用组件\n * en - Disabled\n *     -- Set the disabled property to disable the component\n */\nimport React from 'react';\nimport { TreeSelect } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  {\n    id: '3',\n    title: '3',\n    children: [\n      { id: '3-1', title: '3-1' },\n      { id: '3-2', title: '3-2' },\n    ],\n  },\n];\nexport default () => {\n  return (\n    <div>\n      <TreeSelect\n        width={300}\n        disabled\n        clearable\n        style={{ width: 250 }}\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      />\n\n      <TreeSelect\n        style={{ marginInlineStart: 24 }}\n        width={300}\n        disabled={(v) => v.title.startsWith('2-')}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      />\n    </div>\n  );\n};\n"
      },
      {
        "title": "Inner title",
        "description": "Set `innerTitle` to render inner title",
        "scenario": "basic",
        "code": "/**\n * cn - 内嵌标题\n *    -- 通过配置`innerTitle`可以渲染内嵌标题\n * en - Inner title\n *    -- Set `innerTitle` to render inner title\n */\nimport React from 'react';\nimport { TreeSelect, Gap } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  return (\n    <Gap style={{ flexDirection: 'column', gap: 24 }}>\n      <TreeSelect\n        innerTitle='Please select content'\n        width={300}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        size=\"small\"\n      />\n      <TreeSelect\n        innerTitle='Please select content'\n        width={300}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n      />\n      <TreeSelect\n        innerTitle='Please select content'\n        width={300}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        size=\"large\"\n      />\n    </Gap>\n  );\n};\n"
      },
      {
        "title": "renderUnmatched",
        "description": "The unmatched value can be rendered through the `renderUnmatched` property",
        "scenario": "basic",
        "code": "/**\n * cn - 渲染未匹配值\n *    -- 通过`renderUnmatched`属性可以渲染未匹配的值\n * en - renderUnmatched\n *    -- The unmatched value can be rendered through the `renderUnmatched` property\n */\nimport React from 'react';\nimport { TreeSelect } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const renderUnmatched = (item: any) => {\n    return `I'm unmatched ${item}`;\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        width={300}\n        data={data}\n        defaultValue='item'\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        renderUnmatched={renderUnmatched}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Size",
        "description": "There are three sizes: small, default, and large. The default value is small",
        "scenario": "basic",
        "code": "/**\n * cn - 尺寸\n *    -- 有 small, default, large 三种尺寸，默认为 small\n * en - Size\n *    -- There are three sizes: small, default, and large. The default value is small\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string>;\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>();\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div style={{ width: '100%', display: 'flex', alignItems: 'center', gap: 24 }}>\n      <TreeSelect\n        size='small'\n        width={300}\n        value={value}\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n      <TreeSelect\n        width={300}\n        value={value}\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n      <TreeSelect\n        size='large'\n        width={300}\n        value={value}\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n"
      },
      {
        "title": "Action on click",
        "description": "Set the `actionOnClick` property to trigger the corresponding behavior when clicking the node",
        "scenario": "basic",
        "code": "/**\n * cn - 节点点击行为\n *    -- 设置 `actionOnClick` 属性可以在点击节点时触发相应的行为\n *    -- 属性说明：`check` 选中复选框，`expand` 展开/收起节点\n * en - Action on click\n *    -- Set the `actionOnClick` property to trigger the corresponding behavior when clicking the node\n *    -- Property description: `check` check the checkbox, `expand` expand/collapse the node\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, Form, Checkbox, TYPE } from 'shineout';\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string>;\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>();\n  const [config, setConfig] = useState<{ actionOnClick: TreeSelectProps['actionOnClick'] }>({\n      actionOnClick: ['check'],\n    });\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <>\n      <Form value={config} onChange={setConfig}>\n        <Form.Item label='配置点击行为:' labelWidth='7em' labelAlign='left'>\n          <Checkbox.Group name='actionOnClick' keygen data={['check', 'expand']} />\n        </Form.Item>\n      </Form>\n      <TreeSelect\n        keygen='id'\n        multiple\n        value={value}\n        onChange={handleChange}\n        width={300}\n        data={data}\n        compressed\n        renderItem={(node) => `node ${node.title}`}\n        clearable\n        actionOnClick={config.actionOnClick}\n        placeholder='Please select content'\n      />\n    </>\n  );\n};\n"
      },
      {
        "title": "Virtual list",
        "description": "Set the `virtual` property to enable the virtual list function, this example has 100000 data",
        "scenario": "basic",
        "code": "/**\n * cn - 虚拟列表\n *    -- 设置 `virtual` 属性，开启虚拟列表功能，本例为 100000 条数据\n * en - Virtual list\n *    -- Set the `virtual` property to enable the virtual list function, this example has 100000 data\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\nimport { createNestedArray } from '../../tree/__example__/utils';\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = createNestedArray([10, 10, 10]);\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>();\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    console.log(v);\n    setValue(v);\n  };\n\n  const handleFilter = (text: string) => (d: DataItem) => d.id === text;\n\n  return (\n    <div style={{ width: '100%', display: 'flex', alignItems: 'center', gap: 24 }}>\n      <TreeSelect\n        width={300}\n        value={value}\n        mode={2}\n        multiple\n        onChange={handleChange}\n        clearable\n        onFilter={handleFilter}\n        virtual\n        keygen='id'\n        renderItem={(node) => `node ${node.id}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n"
      },
      {
        "title": "tip",
        "description": "test tip",
        "scenario": "basic",
        "code": "/**\n * cn - tip\n *    -- test tip\n * en - tip\n *    -- test tip\n */\nimport React from 'react';\nimport { TreeSelect } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\nexport default () => {\n  return (\n    <div>\n      <TreeSelect\n        tip='i am a tip'\n        width={300}\n        data={data}\n        renderItem={'title'}\n        keygen='id'\n        placeholder='Select Color'\n      />\n      <TreeSelect\n        status='error'\n        width={300}\n        data={data}\n        renderItem={'title'}\n        keygen='id'\n        placeholder='Select Color'\n      />\n      <TreeSelect\n        error={'error'}\n        popover\n        width={300}\n        renderItem={'title'}\n        data={data}\n        keygen='id'\n        placeholder='Select Color'\n      />\n    </div>\n  );\n};\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 72,
      "requiredProps": 2,
      "propsWithWhen": 0,
      "examplesCount": 16
    },
    "subComponentApis": {}
  },
  "Upload": {
    "name": "Upload",
    "description": "用户可传输文件或提交相应的内容 (本页中的示例服务端限制为 10 KB，大于此限制的文件会上传失败)",
    "category": "other",
    "importPath": "import { Upload } from 'shineout'",
    "props": [
      {
        "name": "onChange",
        "type": "((value: T[]) => void)",
        "required": false,
        "description": "值改变回调(上传成功，删除)。values: 数组, 其每个值是 onSuccess 的返回值"
      },
      {
        "name": "value",
        "type": "any[]",
        "required": false,
        "description": "defaultValue 和 value 可以同时设置，defaultValue 会被value覆盖 在 Form 中，value会被表单接管，value 无效"
      },
      {
        "name": "accept",
        "type": "string",
        "required": false,
        "description": "上传文件类型, 和标准一致, 详见[accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)"
      },
      {
        "name": "action",
        "type": "string | ((file: File) => string)",
        "required": false,
        "description": "上传地址"
      },
      {
        "name": "beforeUpload",
        "type": "((file: File) => Promise<any>)",
        "required": false,
        "description": "上传前的回调"
      },
      {
        "name": "validatorHandle",
        "type": "boolean | ((error: any, file: File) => boolean)",
        "required": false,
        "defaultValue": "true",
        "description": "是否处理校验失败的情况, 如果提供一个函数, 则以函数的返回值判断是否处理此 error"
      },
      {
        "name": "headers",
        "type": "object",
        "required": false,
        "description": "请求头部信息"
      },
      {
        "name": "htmlName",
        "type": "string",
        "required": false,
        "description": "服务端接收的 filename，不填使用 name"
      },
      {
        "name": "limit",
        "type": "number",
        "required": false,
        "defaultValue": "100",
        "description": "最大上传文件数"
      },
      {
        "name": "responseType",
        "type": "XMLHttpRequestResponseType",
        "required": false,
        "description": "设置 xhr.responseType"
      },
      {
        "name": "request",
        "type": "(options: UploadOptions) => Xhr | void",
        "required": false,
        "description": "自定义上传方法。 options: 上传的配置"
      },
      {
        "name": "params",
        "type": "object",
        "required": false,
        "description": "上传参数"
      },
      {
        "name": "withCredentials",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否携带 cookie"
      },
      {
        "name": "onStart",
        "type": "((file: File) => void)",
        "required": false,
        "description": "开始上传的回调函数"
      },
      {
        "name": "onProgress",
        "type": "false | ((fileInfo: FileRecord) => any)",
        "required": false,
        "description": "上传中进度"
      },
      {
        "name": "onSuccess",
        "type": "((res: any, file: File, data?: any, xhr?: XhrResult ) => ValueItem | Error)",
        "required": false,
        "description": "上传成功事件\\nres: 上传接口返回结果\\nfile: 选择的文件\\ndata: 请求的数据\\nxhr: 返回的 response"
      },
      {
        "name": "onHttpError",
        "type": "((xhr: XhrResult, file: File) => string )",
        "required": false,
        "description": "上传出错事件(props 中为 onHttpError)"
      },
      {
        "name": "filesFilter",
        "type": "((fileList: File[]) => File[])",
        "required": false,
        "description": "文件选中后的筛选，用户可自定义最终需要上传的文件列表。需返回一个新的文件列表"
      },
      {
        "name": "validator",
        "type": "Validator",
        "required": false,
        "description": "上传前文件校验，详见下方 Validator"
      },
      {
        "name": "forceAccept",
        "type": "string",
        "required": false,
        "description": "在使用时关闭了 accept 提供的文件类型过滤后，强制对文件类型进行校验（值同accept)"
      },
      {
        "name": "onErrorRemove",
        "type": "((xhr: XhrResult, file: File, fileInfo?: any) => void)",
        "required": false,
        "description": "上传失败图片删除之后的回调"
      },
      {
        "name": "beforeCancel",
        "type": "((file: FileRecord) => void)",
        "required": false,
        "description": "取消文件上传前的回调"
      },
      {
        "name": "recoverAble",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可以恢复已删除的value"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "beforeRemove",
        "type": "((value: ValueItem) => Promise<any>)",
        "required": false,
        "description": "删除前的确认，返回一个Promise用于最终确定是否删除"
      },
      {
        "name": "ignorePreview",
        "type": "boolean",
        "required": false,
        "description": "是否忽略上传图片预览"
      },
      {
        "name": "functionalOnChange",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "设置为true后，组件的onChange参数会返回函数，即回调函数方式的setState",
        "version": "3.6.5"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "showUploadList",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示上传列表"
      },
      {
        "name": "drop",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启拖拽上传文件"
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "文件多选"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "上传占位内容"
      },
      {
        "name": "webkitdirectory",
        "type": "string | boolean",
        "required": false,
        "description": "同原生 input 标签的 webkitdirectory 属性"
      },
      {
        "name": "defaultValue",
        "type": "T[]",
        "required": false,
        "description": "默认值"
      },
      {
        "name": "renderResult",
        "type": "((data: any) => ReactNode)",
        "required": false,
        "defaultValue": "a => a",
        "description": "结果展示"
      },
      {
        "name": "canDelete",
        "type": "boolean | ((item: T, index: number) => boolean)",
        "required": false,
        "defaultValue": "true",
        "description": "文件是否可以删除"
      },
      {
        "name": "customResult",
        "type": "((options: { value: any; files: any; onValueRemove: (index: number) => void; onFileRemove: (id: string) => void; filesInstances: ReactNode; valueInstances: ReactNode; recoverValue: any; onValueRecover: (index: number) => void; handler: ReactNode; }) => ReactNode)",
        "required": false,
        "description": "自定义Result 组件"
      },
      {
        "name": "forceAcceptErrorMsg",
        "type": "string",
        "required": false,
        "description": "forceAccept 类型校验失败后自定义错误提示"
      },
      {
        "name": "removeConfirm",
        "type": "string | PopoverConfirmProps",
        "required": false,
        "description": "是否在删除文件和图片前弹出确认"
      },
      {
        "name": "listType",
        "type": "\"text\" | \"image\"",
        "required": false,
        "defaultValue": "\\\"text\\\"",
        "description": "展示类型"
      },
      {
        "name": "hideHandler",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否隐藏图片上传触发器。注意，开启该属性后不会影响 customResult 中的 handler 返回，只会隐藏默认的触发器",
        "version": "3.6.0"
      },
      {
        "name": "beforeDrop",
        "type": "((e: DragEvent<Element>) => Promise<FileList>)",
        "required": false,
        "description": "拖拽释放前的回调。允许用户自行处理拖拽事件以及读取文件列表，要求返回值必须为 Promise<FileList> 类型",
        "version": "3.7.0"
      },
      {
        "name": "leftHandler",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "添加图片视图是否在左侧展示"
      },
      {
        "name": "imageStyle",
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{width: 80, height: 80}",
        "description": "图片选择框的样式"
      },
      {
        "name": "renderContent",
        "type": "((res: any, item: T, index: number, values: T[]) => ReactNode)",
        "required": false,
        "description": "自定义渲染上传的图片"
      },
      {
        "name": "onPreview",
        "type": "((url: string, value: T, index: number, values: T[], fun: { preview: () => void; }) => void)",
        "required": false,
        "description": "自定义预览图片操作，默认为画廊展示"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "title": "Base",
        "description": "Basic usage for uploading file, the onSuccess's returns will be the onChange params",
        "scenario": "basic",
        "code": "/**\n * cn - 基本用法\n *    -- 基础的文件上传, onSuccess 的返回值会作为 value 传给 onChange\n * en - Base\n *    -- Basic usage for uploading file, the onSuccess's returns will be the onChange params\n\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\n\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<string[]>([]);\n\n  return (\n    <Upload\n      action='//jsonplaceholder.typicode.com/posts'\n      accept='image/*'\n      value={value}\n      htmlName='file'\n      onSuccess={(_res, file) => file.name}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  );\n};\nexport default App;\n"
      },
      {
        "title": "Upload Image",
        "description": "Basic usage for uploading file, the onSuccess's returns will be the onChange params",
        "scenario": "basic",
        "code": "/**\n * cn - 上传图片\n *    -- 使用 Upload.Image 处理带预览的图片上\n * en - Upload Image\n *    -- Basic usage for uploading file, the onSuccess's returns will be the onChange params\n\n */\nimport React from 'react';\nimport { Upload } from 'shineout';\nimport { mockRquest } from './request';\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<string[]>([]);\n\n  return (\n    <Upload.Image\n      request={mockRquest({\n        uploadTime: 5000,\n        success: true,\n      })}\n      accept='image/*'\n      value={value}\n      htmlName='file'\n      recoverAble\n      leftHandler\n      removeConfirm='Are you sure to delete it ?'\n      limit={3}\n      onSuccess={(_res, filem, data) => {\n        return data;\n      }}\n      onChange={(v) => {\n        setValue(v);\n      }}\n    />\n  );\n};\nexport default App;\n"
      },
      {
        "title": "Button",
        "description": "Use Upload.Button to show the upload progress of individual files",
        "scenario": "basic",
        "code": "/**\n * cn - 按钮上传\n *    -- 使用 Upload.Button 展示单个文件的上传进度\n * en - Button\n *    -- Use Upload.Button to show the upload progress of individual files\n */\nimport React from 'react';\nimport { Upload } from 'shineout';\nimport { mockRquest } from './request';\n\nconst App: React.FC = () => {\n\n  return (\n  <Upload.Button\n    type={'primary'}\n    request={mockRquest({\n      uploadTime: 5000,\n      success: true\n    })}\n    name='file'\n    onSuccess={(_res, file) => file.name}\n    loading='Uploading...'\n    placeholder='Click to upload'\n  />\n)\n};\n\nexport default App;\n"
      },
      {
        "title": "Custom result",
        "description": "The result of the default display is the same as the value stored in the value. If there is a need, you can use the renderResult to handle it yourself",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义结果\n *    -- 默认展示的结果和 value 里面所存储的值是一样的, 如果有需求需要, 可以用 renderResult 自行处理\n * en - Custom result\n *    -- The result of the default display is the same as the value stored in the value. If there is a need, you can use the renderResult to handle it yourself\n\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\nimport { mockRquest } from './request';\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<{ name: string }[]>([]);\n\n  return (\n    <Upload\n      request={mockRquest({\n        uploadTime: 5000,\n        // 随机成功或失败\n        success: Math.random() > 0.5,\n      })}\n      accept='image/*'\n      value={value}\n      htmlName='file'\n      renderResult={(f) => f.name}\n      onSuccess={(_res, file) => ({\n        name: file.name,\n      })}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      limit={3}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "*    -- Set the `customResult` property to customize the upload result display",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 设置 `customResult` 属性可以自定义上传结果展示\n * en -\n *    -- Set the `customResult` property to customize the upload result display\n\n */\nimport React from 'react';\nimport { Button, Upload, Link, icons } from 'shineout';\nimport { UploadIcon, FilePdfIcon, FielWordIcon, FileIcon, ImageIcon } from './static/icon';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    item: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: '4px 8px',\n      gap: 4,\n      marginTop: 2,\n      '&:hover': {\n        borderRadius: 2,\n        backgroundColor: 'var(---Neutral-fill-2-, #F4F5F8)',\n      },\n    },\n    btn: {\n      marginLeft: 'auto',\n    }\n  },\n  { name: 'upload-custom' },\n);\n\n\ninterface FileItem {\n  name: string;\n}\nconst df = [\n  {\n    name: '文件名称.doc',\n  },\n  {\n    name: '文件名称.pdf',\n  },\n  {\n    name: '文件名称.txt',\n  },\n  {\n    name: '文件名称.png',\n  },\n  {\n    name: '文件名称.gif',\n  },\n];\n\n// 根据文件名获取文件图标\nconst renderFileIcon = (name: string) => {\n  const ext = name.split('.').pop();\n  if (ext === 'pdf') {\n    return <FilePdfIcon fontSize={14} />;\n  }\n  if (ext === 'doc') {\n    return <FielWordIcon fontSize={14} />;\n  }\n  if(ext === 'png' || ext === 'gif') {\n    return <ImageIcon fontSize={14} />\n  }\n  return <FileIcon fontSize={14} />;\n}\n\ninterface CustomResultProps {\n  value: FileItem[];\n  files: any;\n  onValueRemove: (index: number) => void;\n  onFileRemove: (id: string) => void;\n  recoverValue: any;\n  onValueRecover: (index: number) => void;\n}\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<FileItem[]>(df);\n\n  const classnames = useStyles();\n\n  const customResult = (options: CustomResultProps) => {\n    const { value, onValueRemove } = options;\n    return value.map((item, index) => {\n\n      return <div key={item.name} className={classnames.item} style={index === 0 ? { marginTop: 12 } : {}}>\n        {renderFileIcon(item.name)}\n        {item.name}\n        <Link type=\"secondary\" onClick={() => onValueRemove(index)} style={{width: 14, height: 14}} className={classnames.btn}>\n          {icons.Delete}\n        </Link>\n      </div>\n    }) as any;\n  }\n  return (\n    <Upload\n      accept='*'\n      value={value}\n      htmlName='file'\n      customResult={customResult}\n      onSuccess={(_res, file) => ({\n        name: file.name,\n      })}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  );\n};\n\nexport default App;\n"
      },
      {
        "title": "Custom Image",
        "description": "Use renderContent to customize the image results after uploading",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义图片\n *    -- 使用  renderContent 可以自定义上传之后的图片结果.\n * en - Custom Image\n *    -- Use renderContent to customize the image results after uploading\n */\nimport React from 'react';\nimport { Message, Upload } from 'shineout';\n\n\nconst App: React.FC = () => (\n  <Upload.Image\n    action='//jsonplaceholder.typicode.com/posts'\n    accept='image/*'\n    name='file'\n    leftHandler\n    onSuccess={(_res, _file, data) => ({ data })}\n    renderResult={(f) => f.data}\n    limit={3}\n    renderContent={(d, v, i, values) => {\n      console.log(d, v, i, values);\n      return (\n        <div onClick={() => Message.info('i am click')}>\n          <img width='100%' src={d} alt='not found' />\n        </div>\n      );\n    }}\n  />\n);\n\nexport default App;\n"
      },
      {
        "title": "Remove Confirm",
        "description": "Set the removeConfirm property to enable confirmation before deleting",
        "scenario": "basic",
        "code": "/**\n * cn - 删除确认\n *    -- 设置 removeConfirm 属性来开启删除前确认\n * en - Remove Confirm\n *    -- Set the removeConfirm property to enable confirmation before deleting\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\n\nconst df = [\n  {\n    name: 'mountain.png',\n    data: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  },\n];\n\nconst App: React.FC = () => (\n  <div>\n    <Upload\n      defaultValue={df}\n      action='//jsonplaceholder.typicode.com/posts'\n      renderResult={(d) => d.name}\n      onSuccess={(_res, file) => ({ name: file.name })}\n      removeConfirm='Are you sure to delete it ?'\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n    <Upload.Image\n      leftHandler\n      style={{ marginTop: 24 }}\n      defaultValue={df}\n      action='//jsonplaceholder.typicode.com/posts'\n      renderResult={(d) => d.data}\n      onSuccess={(_res, file, data) => ({ data })}\n      removeConfirm='Are you sure to delete it ?'\n    />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Recover Delete",
        "description": "Set the recoverAble property to enable recover delete",
        "scenario": "basic",
        "code": "/**\n * cn - 撤销删除\n *    -- 设置 recoverAble 属性来开启撤销删除\n * en - Recover Delete\n *    -- Set the recoverAble property to enable recover delete\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\n\nconst df = [\n  {\n    name: 'mountain.png',\n    data: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  },\n];\nconst App: React.FC = () => (\n  <div>\n    <Upload\n      defaultValue={df}\n      action='//jsonplaceholder.typicode.com/posts'\n      recoverAble\n      renderResult={(d) => d.name}\n      onSuccess={(_res, file) => ({ name: file.name })}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n    <Upload.Image\n      leftHandler\n      style={{ marginTop: 24 }}\n      defaultValue={df}\n      action='//jsonplaceholder.typicode.com/posts'\n      renderResult={(d) => d.data}\n      onSuccess={(_res, file, data) => ({ data, name: file.name })}\n      recoverAble\n    />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Validator Image Size",
        "description": "Set validator.imageSize to validate the width and height of the image",
        "scenario": "basic",
        "code": "/**\n * cn - 校验尺寸\n *    -- 通过 validator.imageSize 校验图片长宽，本例为 200px * 100px\n * en - Validator Image Size\n *    -- Set validator.imageSize to validate the width and height of the image\n */\nimport React from 'react';\nimport { Upload } from 'shineout';\nimport { AddIcon } from './static/icon';\n\nconst App: React.FC = () => (\n  <Upload.Image\n    action='//jsonplaceholder.typicode.com/posts'\n    accept='image/*'\n    name='file'\n    leftHandler\n    onSuccess={(_res, _file, data) => ({ data })}\n    width={400}\n    height={200}\n    renderResult={(f) => f.data}\n    validator={{\n      imageSize: (img) =>\n        img.width !== 200 || img.height !== 100 ? new Error('only allow 200px * 100px') : undefined,\n      ext: (ext) =>\n        ['jpg', 'png'].includes(ext) ? undefined : new Error('File extension must be jpg or png'),\n    }}\n  >\n    <div style={{ padding: '50px 16px' }}>\n      <div style={{ margin: 'auto', fontSize: 12, textAlign: 'center', lineHeight: '16px' }}>\n        <AddIcon />\n        <div style={{ marginTop: 16, color: '#666c7c' }}>Upload Image</div>\n        <div style={{ marginTop: 4, color: '#999DA8' }}>Allow size 200 * 100</div>\n      </div>\n    </div>\n  </Upload.Image>\n);\nexport default App;\n"
      },
      {
        "title": "*    -- Set validator.size to validate the size of the file. This example is 10KB",
        "description": "文件大小校验，本例为 10KB",
        "scenario": "basic",
        "code": "/**\n * cn - 文件大小\n *    -- 文件大小校验，本例为 10KB\n * en -\n *    -- Set validator.size to validate the size of the file. This example is 10KB\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\n\nconst App: React.FC = () => (\n  <div>\n    <Upload\n      action='//jsonplaceholder.typicode.com/posts'\n      accept='image/*'\n      multiple\n      name='file'\n      onSuccess={(_res, file) => file.name}\n      validator={{\n        size: (s) => (s > 10240 ? new Error('max file size is 10KB') : undefined),\n      }}\n      validatorHandle={(error, file) => {\n        console.log(error, file);\n        return true;\n      }}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  </div>\n);\nexport default App;\n"
      },
      {
        "title": "Error",
        "description": "Set onHttpError to handle exceptions returned by uploading to the server",
        "scenario": "basic",
        "code": "/**\n * cn - 异常处理\n *    -- onHttpError 用来处理上传到服务器返回的异常\n * en - Error\n *    -- Set onHttpError to handle exceptions returned by uploading to the server\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\n\nconst App: React.FC = () => (\n  <div>\n    <Upload\n      action='/path-no-exist'\n      accept='image/*'\n      name='file'\n      onSuccess={(_res, file) => file.name}\n      onHttpError={(xhr) => {\n        console.log(xhr);\n        if (xhr.status === 404) return 'Url not found.';\n        return 'Upload Fail.';\n      }}\n      limit={3}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Custom Request",
        "description": "Set request property to use your own XMLHttpRequest",
        "scenario": "basic",
        "code": "/**\n * cn - 自定义上传\n *    -- 通过 request 函数，替代默认上传方法\n * en - Custom Request\n *    -- Set request property to use your own XMLHttpRequest\n */\nimport React from 'react';\nimport { Button, TYPE, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\n\ntype ValueItem = { name: string };\ntype UploadProps = TYPE.Upload.Props<ValueItem>;\n\nconst request: UploadProps['request'] = (options) => {\n  const { file, onLoad, onError, onProgress } = options;\n  const xhr = new XMLHttpRequest();\n  xhr.open('post', '//jsonplaceholder.typicode.com/posts');\n\n  const data = new FormData();\n  data.append('test', file);\n  xhr.upload.onprogress = onProgress;\n  xhr.onload = () => onLoad(xhr);\n  xhr.onerror = () => onError({ statusText: 'error message' });\n  xhr.send(data);\n\n  return xhr;\n};\n\nconst App: React.FC = () => (\n  <Upload\n    accept='image/*'\n    onSuccess={(_res, file) => ({ name: `upload ${file.name}` })}\n    limit={3}\n    request={request}\n    renderResult={(d) => d.name}\n    style={{ width: 400 }}\n  >\n    <Button mode={'outline'}>\n      <UploadIcon style={{ marginInlineEnd: 4 }} />\n      Upload file\n    </Button>\n  </Upload>\n);\n\nexport default App;\n"
      },
      {
        "title": "*    -- ignore request with request",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 使用 request 略过上传过程\n * en -\n *    -- ignore request with request\n */\nimport React from 'react';\nimport { Button, TYPE, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\n\ntype ValueItem = { name: string; src: string };\ntype UploadProps = TYPE.Upload.Props<ValueItem>;\nconst request: UploadProps['request'] = (options) => {\n  const { file, onLoad, onError } = options;\n  const reader = new FileReader();\n  reader.addEventListener('load', () => {\n    onLoad({ status: 200, response: reader.result });\n  });\n  reader.addEventListener('error', () => {\n    onError({ statusText: 'Oops, something went wrong' });\n  });\n  reader.readAsDataURL(file);\n};\n\nconst App: React.FC = () => (\n  <Upload\n    accept='image/*'\n    onSuccess={(dataURL, file) => ({ name: file.name, src: dataURL })}\n    request={request}\n    renderResult={(d) => d.name}\n    limit={3}\n    style={{ width: 400 }}\n  >\n    <Button mode={'outline'}>\n      <UploadIcon style={{ marginInlineEnd: 4 }} />\n      Upload file\n    </Button>\n  </Upload>\n);\nexport default App;\n"
      },
      {
        "title": "*    -- Zip file and upload",
        "description": "",
        "scenario": "basic",
        "code": "/**\n * cn -\n *    -- 此事例演示通过自定义函数压缩文件后上传\n * en -\n *    -- Zip file and upload\n */\nimport React from 'react';\nimport { Button, TYPE, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\nimport JSZip from 'jszip';\n\ntype ValueItem = { name: string };\ntype UploadProps = TYPE.Upload.Props<ValueItem>;\nconst request: UploadProps['request'] = (options) => {\n  const { file, onLoad, onError, onProgress } = options;\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('post', '//jsonplaceholder.typicode.com/posts');\n\n  // @ts-ignore\n  const zip = new JSZip();\n  zip.file(file.name, file);\n  zip\n    .generateInternalStream({ type: 'blob' })\n    .accumulate((e) => {\n      // @ts-ignore\n      onProgress(e, 'zipping...');\n    })\n    .then((content: Blob) => {\n      const zipFile = new File([content], `${file.name}.zip`);\n      const data = new FormData();\n      data.append('file', zipFile);\n      xhr.upload.onprogress = (m) => onProgress(m, 'sending...');\n      xhr.onload = () => onLoad(xhr);\n      xhr.onerror = () => onError({ statusText: 'error message' });\n      xhr.send(data);\n    });\n\n  return xhr;\n};\n\nconst App: React.FC = () => (\n  <Upload\n    onSuccess={(_res, file) => ({ name: `upload ${file.name}` })}\n    limit={3}\n    style={{ width: 400 }}\n    request={request}\n    renderResult={(d) => d.name}\n  >\n    <Button mode={'outline'}>\n      <UploadIcon style={{ marginInlineEnd: 4 }} />\n      Upload file\n    </Button>\n  </Upload>\n);\nexport default App;\n"
      },
      {
        "title": "defaultValue",
        "description": "defaultValue example",
        "scenario": "basic",
        "code": "/**\n * cn - 默认值\n *    -- 默认值示例\n * en - defaultValue\n *    -- defaultValue example\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\n\nconst defaultValue = [\n  {\n    name: 'test file.png',\n    url: '../../../images/1_s.jpg',\n  },\n];\nconst App: React.FC = () => (\n  <div>\n    <Upload\n      action='//jsonplaceholder.typicode.com/posts'\n      accept='image/*'\n      multiple\n      limit={2}\n      name='file'\n      onSuccess={(_res, file) => ({ name: file.name })}\n      style={{ width: 400 }}\n      defaultValue={defaultValue}\n      renderResult={(f) => f.name}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Drag and Drop",
        "description": "set drop to Drag files to upload",
        "scenario": "basic",
        "code": "/**\n * cn - 拖拽上传\n *    -- 设置 drop 来支持拖拽上传\n * en - Drag and Drop\n *    -- set drop to Drag files to upload\n */\nimport React from 'react';\nimport { Upload } from 'shineout';\nimport { AddIcon, ImageIcon } from './static/icon';\n\nconst DraggerImage: React.FC = () => (\n  <Upload.Image\n    action='//jsonplaceholder.typicode.com/posts'\n    multiple\n    name='file'\n    onSuccess={(_res, _file, data) => data}\n    width={200}\n    height={156}\n    leftHandler\n    drop\n  >\n    <div style={{ textAlign: 'center', padding: '50px 16px', fontSize: 12, lineHeight: '16px' }}>\n      <ImageIcon style={{ fontSize: 20, marginBottom: 16 }} />\n      <p style={{ margin: '0' }}>Click or drag image to upload</p>\n    </div>\n  </Upload.Image>\n);\n\nconst DraggerFile: React.FC = () => (\n  <Upload\n    action='//jsonplaceholder.typicode.com/posts'\n    multiple\n    name='file'\n    onSuccess={(_res, file) => file.name}\n    limit={3}\n    style={{ width: 400 }}\n    drop\n  >\n    <div\n      style={{\n        height: 200,\n        boxSizing: 'border-box',\n        padding: '50px 16px',\n        fontSize: 12,\n        lineHeight: '16px',\n        textAlign: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <AddIcon style={{ fontSize: 20, marginBottom: 16 }} />\n      <p style={{ margin: '0' }}>Click or drag file to this area to upload</p>\n    </div>\n  </Upload>\n);\n\nconst App: React.FC = () => (\n  <div>\n    <DraggerFile />\n    <div style={{ marginTop: 24 }} />\n    <DraggerImage />\n  </div>\n);\n\nexport default App;\n"
      },
      {
        "title": "Before Upload",
        "description": "After selecting a file, you can use beforeUpload to process the file",
        "scenario": "basic",
        "code": "/**\n * cn - 上传前处理\n *    -- 选择文件后可以使用beforeUpload对文件进行处理\n * en - Before Upload\n *    -- After selecting a file, you can use beforeUpload to process the file\n */\nimport React from 'react';\nimport { Upload } from 'shineout';\n\nconst App: React.FC = () => {\n\n  return (\n    <Upload.Image\n      leftHandler\n      multiple\n      limit={2}\n      // beforeUpload需要返回Promise\n      beforeUpload={async(file) => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            console.log('beforeUpload file: >>', file)\n            resolve(true)\n          })\n        })\n      }}\n      request={(options) => {\n        const f = options.file\n        if (f) {\n          setTimeout(() => {\n            options.onLoad({ status: 200 })\n          }, 100)\n        }\n      }}\n      onSuccess={(_res, file) => {\n        return file instanceof File ? URL.createObjectURL(file) : file\n      }}\n    />\n  );\n}\n\nexport default App;\n"
      },
      {
        "title": "Image Disabled",
        "description": "Set `disabled` to disable upload",
        "scenario": "basic",
        "code": "/**\n * cn - 图片禁用\n *    -- 设置 `disabled` 禁用上传\n * en - Image Disabled\n *    -- Set `disabled` to disable upload\n\n */\nimport React from 'react';\nimport { Upload } from 'shineout';\n\nconst df = [\n  {\n    name: 'mountain.png',\n    data: 'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  },\n];\nconst App: React.FC = () => {\n  return (\n    <Upload.Image\n      action='//jsonplaceholder.typicode.com/posts'\n      leftHandler\n      accept='image/*'\n      defaultValue={df}\n      renderResult={(d) => d.data}\n      htmlName='file'\n      disabled\n      onSuccess={(_res, file, data) => {\n        return {\n          name: file.name,\n          data: data,\n        };\n      }}\n      style={{ width: 400 }}\n    />\n  );\n};\nexport default App;\n"
      },
      {
        "title": "Disabled",
        "description": "Set `disabled` to disable upload",
        "scenario": "basic",
        "code": "/**\n * cn - 禁用\n *    -- 设置 `disabled` 禁用上传\n * en - Disabled\n *    -- Set `disabled` to disable upload\n\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\n\nconst App: React.FC = () => {\n  return (\n    <Upload\n      action='//jsonplaceholder.typicode.com/posts'\n      defaultValue={['1.png']}\n      accept='image/*'\n      htmlName='file'\n      disabled\n      onSuccess={(_res, file) => file.name}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'} disabled>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  );\n};\nexport default App;\n"
      },
      {
        "title": "Form validate",
        "description": "当有文件正在上传或者上传失败的时候会阻止提交",
        "scenario": "form",
        "code": "/**\n * cn - 提交校验\n *    -- 当有文件正在上传或者上传失败的时候会阻止提交\n * en - Form validate\n *    --\n\n */\nimport React from 'react';\nimport { Button, Form, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\nimport { mockRquest } from './request';\n\nconst App: React.FC = () => {\n  return (\n    <Form\n      onSubmit={(d) => {\n        console.log('onSubmit', d);\n      }}\n    >\n      <Upload\n        request={mockRquest({\n          uploadTime: 3000,\n          success: Math.random() > 0.5,\n        })}\n        defaultValue={['1.png']}\n        showUploadList={true}\n        accept='image/*'\n        name='file'\n        onSuccess={(_res, file) => file.name}\n        onHttpError={(xhr) => {\n          if (xhr.status === 404) return 'Url not found.';\n          return 'Upload Fail.';\n        }}\n        style={{ width: 400 }}\n      >\n        <Button mode={'outline'}>\n          <UploadIcon style={{ marginInlineEnd: 4 }} />\n          Upload file\n        </Button>\n      </Upload>\n      <Button mode={'outline'} htmlType={'submit'} style={{ marginTop: 8 }}>\n        Submit\n      </Button>\n    </Form>\n  );\n};\nexport default App;\n"
      }
    ],
    "subComponents": [],
    "version": "3.7.10-beta.3",
    "notes": {},
    "apiSummary": {
      "totalProps": 53,
      "requiredProps": 0,
      "propsWithWhen": 0,
      "examplesCount": 20
    },
    "subComponentApis": {}
  }
}