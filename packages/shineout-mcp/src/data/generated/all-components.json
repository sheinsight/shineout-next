{
  "Alert": {
    "name": "Alert",
    "description": "Alert 用于承载显示用户需要关注的关键信息",
    "category": "feedback",
    "importPath": "import { Alert } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "type",
        "type": "\"success\" | \"info\" | \"warning\" | \"danger\" | \"confirmwarning\" | \"error\"",
        "required": false,
        "defaultValue": "\\\"warning",
        "description": "类型"
      },
      {
        "name": "closeItem",
        "type": "ReactNode",
        "required": false,
        "description": "自定义关闭按钮"
      },
      {
        "name": "icon",
        "type": "ReactNode",
        "required": false,
        "description": "为 true 时，根据 type 属性显示状态图标。如果需要显示自定义图标，传入 ReactElement"
      },
      {
        "name": "iconSize",
        "type": "number",
        "required": false,
        "defaultValue": "14",
        "description": "icon 的尺寸"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "标题模式"
      },
      {
        "name": "titleStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "标题样式"
      },
      {
        "name": "closable",
        "type": "boolean | \"only\"",
        "required": false,
        "description": "是否可以关闭Alert，当设置为only的时候，点击按钮不会自动隐藏Alert"
      },
      {
        "name": "onClose",
        "type": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "关闭事件"
      },
      {
        "name": "bordered",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示边框"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "内容，文字或 react 组件"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 提示框基本用法，在页面内用于展示重要提示信息\n * en - Basic\n *    -- The basic usage of Alert, used to display important prompt information in the page\n */\nimport React from 'react';\nimport { Alert } from 'shineout';\n\nexport default () => {\n  return (\n    <Alert icon type='info'>\n      This is a line of important text for alerting purposes\n    </Alert>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-type",
        "title": "cn - 不同类型",
        "code": "/**\n * cn - 不同类型\n *    -- 通过设置 `type` 属性切换不同的提示框类型，支持 4 种不同的类型：`success`、`info`、`warning`、`danger`\n * en - Type\n *    -- Set the `type` property to switch between different types of alert boxes. Support 4 different types: `success`, `info`, `warning`, `danger`\n */\nimport React from 'react';\nimport { Alert } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', flexWrap: 'wrap', gap: 24 }}>\n      <Alert icon type='info' style={{ width: 'calc(50% - 16px)' }}>\n        This is informative text.\n      </Alert>\n      <Alert icon type='success' style={{ width: 'calc(50% - 16px)' }}>\n        This is success text.\n      </Alert>\n      <Alert icon type='warning' style={{ width: 'calc(50% - 16px)' }}>\n        This is warning text.\n      </Alert>\n      <Alert icon type='danger' style={{ width: 'calc(50% - 16px)' }}>\n        This is danger text.\n      </Alert>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-closeable",
        "title": "cn - 允许关闭",
        "code": "/**\n * cn - 允许关闭\n *    -- 通过设置 `closable` 属性可以展示关闭按钮。通过 `onClose` 属性可以设置关闭回调函数\n *    -- 注意 `onClose` 属性未来不再支持 boolean 类型，`hideClose` 属性即将弃用，请使用 `closable`\n * en - Basic\n *    -- The basic usage of Alert, used to display important prompt information in the page\n */\nimport React, { useState } from 'react';\nimport { Alert, Button } from 'shineout';\n\nexport default () => {\n  const [reset, setReset] = useState(true);\n  const handleReset = () => {\n    setReset(true);\n  };\n\n  const handleClose = () => {\n    setTimeout(() => {\n      setReset(false);\n    }, 300);\n  };\n\n  return (\n    <div>\n      {!reset && (\n        <Button onClick={handleReset} mode='text' type='primary'>\n          重置\n        </Button>\n      )}\n      {reset && (\n        <Alert icon closable type='info' onClose={handleClose}>\n          This is informative text.\n        </Alert>\n      )}\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-title",
        "title": "cn - 标题模式",
        "code": "/**\n * cn - 标题模式\n *    -- 通过设置 `title` 属性可以展示标题模式的提示框\n * en - Title\n *    -- Set the `title` property to display the title mode alert box\n */\nimport React from 'react';\nimport { Alert } from 'shineout';\n\nexport default () => {\n  return (\n    <Alert type='info' icon title='Heading' closable>\n      This is a line of important text for alerting purposes\n    </Alert>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "05-bordered",
        "title": "cn - 无边框",
        "code": "/**\n * cn - 无边框\n *    -- 设置 `bordered` 属性为 false 可以隐藏提示框的边框\n * en - No border\n *    -- Set the `bordered` property to false to hide the border of the alert box\n */\nimport React from 'react';\nimport { Alert } from 'shineout';\n\nexport default () => {\n  return (\n    <Alert icon type='info' bordered={false}>\n      This is a line of important text for alerting purposes\n    </Alert>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 12,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Avatar": {
    "name": "Avatar",
    "description": "用图标、图片、字符的形式展示用户或事物信息",
    "category": "other",
    "importPath": "import { Avatar } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": "图像无法显示时的替代文本"
      },
      {
        "name": "src",
        "type": "ReactNode",
        "required": false,
        "description": "图片类头像的资源地址或者图片元素"
      },
      {
        "name": "icon",
        "type": "ReactNode",
        "required": false,
        "description": "设置头像的自定义图标"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "\\\"circle\\\"",
        "description": "指定头像的形状"
      },
      {
        "name": "shape",
        "type": "\"circle\" | \"square\"",
        "required": false,
        "description": "头像文本内容，会根据内容尺寸自适应计算缩放比例"
      },
      {
        "name": "srcSet",
        "type": "string",
        "required": false,
        "description": "设置图片类头像响应式资源地址"
      },
      {
        "name": "gap",
        "type": "number",
        "required": false,
        "description": "字符类型距离左右两侧边界单位像素"
      },
      {
        "name": "draggable",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "图片是否允许拖动"
      },
      {
        "name": "crossOrigin",
        "type": "\"anonymous\" | \"use-credentials\"",
        "required": false,
        "description": "CORS 属性设置"
      },
      {
        "name": "onError",
        "type": "(() => boolean)",
        "required": false,
        "description": "图片加载失败的事件，返回 false 会关闭组件默认的 fallback 行为"
      },
      {
        "name": "onClick",
        "type": "(() => void)",
        "required": false,
        "description": "头像点击事件"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 头像的基础使用\n * en - Basic\n *    -- The basic usage of Avatar\n */\nimport React from 'react';\nimport { Avatar } from 'shineout';\n\nconst userIcon = (\n  <svg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M7.99992 8.66667C10.2091 8.66667 11.9999 6.87581 11.9999 4.66667C11.9999 2.45753 10.2091 0.666672 7.99992 0.666672C5.79078 0.666672 3.99992 2.45753 3.99992 4.66667C3.99992 6.87581 5.79078 8.66667 7.99992 8.66667Z'\n      fill='#B3B7C1'\n    />\n    <path\n      d='M5.44625 10C3.1747 10 1.33325 11.8415 1.33325 14.113C1.33325 14.4188 1.58114 14.6667 1.88693 14.6667H14.1129C14.4187 14.6667 14.6666 14.4188 14.6666 14.113C14.6666 11.8415 12.8251 10 10.5536 10H5.44625Z'\n      fill='#B3B7C1'\n    />\n  </svg>\n);\n\nexport default () => {\n  return (\n    <div>\n      <Avatar icon={userIcon} />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-icon",
        "title": "cn - 类型",
        "code": "/**\n * cn - 类型\n *    -- 支持三种类型：图片、Icon 以及字符，其中 Icon 和字符型可以自定义图标颜色及背景色\n * en - Basic\n *    -- The basic usage of Avatar\n */\nimport React from 'react';\nimport { Avatar, Badge } from 'shineout';\n\nconst userIcon = (\n  <svg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M7.99992 8.66667C10.2091 8.66667 11.9999 6.87581 11.9999 4.66667C11.9999 2.45753 10.2091 0.666672 7.99992 0.666672C5.79078 0.666672 3.99992 2.45753 3.99992 4.66667C3.99992 6.87581 5.79078 8.66667 7.99992 8.66667Z'\n      fill='#B3B7C1'\n    />\n    <path\n      d='M5.44625 10C3.1747 10 1.33325 11.8415 1.33325 14.113C1.33325 14.4188 1.58114 14.6667 1.88693 14.6667H14.1129C14.4187 14.6667 14.6666 14.4188 14.6666 14.113C14.6666 11.8415 12.8251 10 10.5536 10H5.44625Z'\n      fill='#B3B7C1'\n    />\n  </svg>\n);\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', gap: 24 }}>\n      <Avatar icon={userIcon}></Avatar>\n      <Avatar>J</Avatar>\n      <Avatar src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/avatar/01.png'></Avatar>\n      <Badge count={<div style={{ fontSize: 16, transform: 'rotate(45deg)' }}>🌱</div>}>\n        <Avatar style={{ background: 'linear-gradient(135deg, #ff7e5f, #feb47b)', color: '#fff' }}>\n          🍊\n        </Avatar>\n      </Badge>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-shape",
        "title": "cn - 尺寸和形状",
        "code": "/**\n * cn - 尺寸和形状\n *    -- 头像尺寸支持三种：小、中、大，默认为中\n *    -- 头像形状支持两种：`circle` | `square`，默认为`circle`\n * en - Size\n *    -- Avatar supports three sizes: large, medium, and small\n *    -- Avatar supports two shapes: `circle` | `square`, default is `circle`\n */\nimport React from 'react';\nimport { Avatar } from 'shineout';\n\nfunction UserIcon(props:any){\n  return <svg width={props.size || '16'} height={props.size || '16'} viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M7.99992 8.66667C10.2091 8.66667 11.9999 6.87581 11.9999 4.66667C11.9999 2.45753 10.2091 0.666672 7.99992 0.666672C5.79078 0.666672 3.99992 2.45753 3.99992 4.66667C3.99992 6.87581 5.79078 8.66667 7.99992 8.66667Z'\n      fill='#B3B7C1'\n    />\n    <path\n      d='M5.44625 10C3.1747 10 1.33325 11.8415 1.33325 14.113C1.33325 14.4188 1.58114 14.6667 1.88693 14.6667H14.1129C14.4187 14.6667 14.6666 14.4188 14.6666 14.113C14.6666 11.8415 12.8251 10 10.5536 10H5.44625Z'\n      fill='#B3B7C1'\n    />\n  </svg>\n}\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', gap: 24, flexDirection: 'column' }}>\n      <div style={{ display: 'flex', gap: 24, alignItems: 'center' }}>\n        <Avatar icon={<UserIcon size={12} />} size='small'></Avatar>\n        <Avatar icon={<UserIcon size={16} />}></Avatar>\n        <Avatar icon={<UserIcon size={20} />} size='large'></Avatar>\n      </div>\n      <div style={{ display: 'flex', gap: 24, alignItems: 'center' }}>\n        <Avatar icon={<UserIcon size={12} />} size='small' shape='square'></Avatar>\n        <Avatar icon={<UserIcon size={16} />} shape='square'></Avatar>\n        <Avatar icon={<UserIcon size={20} />} size='large' shape='square'></Avatar>\n      </div>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-autotext",
        "title": "cn - 字符大小自适应",
        "code": "/**\n * cn - 字符大小自适应\n *    -- 头像支持字符自适应，即字符长度过长时，头像可自动调整字符以便呈现完整内容,也可使用 `gap` 来设置字符距离左右两侧边界单位像素\n * en - Auto text size\n *    -- Avatar supports character adaptation, that is, when the character length is too long, the avatar can automatically adjust the character to present the complete content\n */\nimport React from 'react';\nimport { Avatar } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', gap: 24 }}>\n      <Avatar>J</Avatar>\n      <Avatar>Jay</Avatar>\n      <Avatar>Janny</Avatar>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "05-group",
        "title": "cn - 头像组",
        "code": "/**\n * cn - 头像组\n *    -- 通过配置 `max` 属性设置最大展示个数，超过则隐藏显示，如果需要个性化展示超出内容，可以使用 `renderMax` 属性\n * en - Group\n *    -- Set the maximum number of avatars displayed by configuring the `max` property. If it exceeds, it will be hidden. If you need to display the content beyond the personalized display, you can use the `renderMax` property\n */\nimport React from 'react';\nimport { Avatar, Popover, icons } from 'shineout';\n\nconst url =\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/avatar';\n\nconst avatarImgIndex = [1, 2, 3, 4, 5, 6, 7, 8];\n\nexport default () => {\n  const renderAvatars = () => {\n    return avatarImgIndex.map((item, index) => {\n      return <Avatar key={index} src={`${url}/0${item}.png`}></Avatar>;\n    });\n  };\n\n  const renderMax = (dom: React.ReactNode[]) => {\n    return (\n      <div>\n        <Avatar><div style={{ width: 16, height: 16, display: 'flex' }}>{icons.More}</div></Avatar>\n        <Popover style={{ padding: 16, display: 'flex', gap: 8 }}>{dom}</Popover>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Avatar.Group>{renderAvatars()}</Avatar.Group>\n      </div>\n      <div style={{ marginBottom: 24 }}>\n        <Avatar.Group max={3}>{renderAvatars()}</Avatar.Group>\n      </div>\n      <div>\n        <Avatar.Group max={3} renderMax={renderMax}>\n          {renderAvatars()}\n        </Avatar.Group>\n      </div>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [
      "Group"
    ],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 14,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {
      "Group": {
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "size",
            "type": "\"small\" | \"large\" | \"default\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "不同尺寸"
          },
          {
            "name": "shape",
            "type": "\"circle\" | \"square\"",
            "required": false,
            "description": "头像文本内容，会根据内容尺寸自适应计算缩放比例"
          },
          {
            "name": "max",
            "type": "number",
            "required": false,
            "description": "设置头像组展示头像的最大数量"
          },
          {
            "name": "renderMax",
            "type": "((hideAvatarNodes: ReactNode[], max: number) => ReactNode)",
            "required": false,
            "description": "自定义渲染隐藏的头像节点，hideAvatarNodes 为隐藏的节点 dom 数组，max 为隐藏的节点数量"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true,
            "description": "头像节点"
          },
          {
            "name": "popover",
            "type": "Pick<PopoverProps, \"position\" | \"zIndex\" | \"getPopupContainer\" | \"adjust\">",
            "required": false,
            "description": "用于展示隐藏头像的 Popover 相关配置，配置属性为 Popover 部分属性: position、zIndex、getPopupContainer、adjust"
          }
        ]
      }
    }
  },
  "Badge": {
    "name": "Badge",
    "description": "图标右上角的圆形徽标数字，一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理",
    "category": "other",
    "importPath": "import { Badge } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "内容"
      },
      {
        "name": "color",
        "type": "string",
        "required": false,
        "description": "自定义徽标颜色"
      },
      {
        "name": "count",
        "type": "ReactNode",
        "required": false,
        "description": "展示的数字，大于 overflowCount 时显示 ${overflowCount}+，为 0 时隐藏"
      },
      {
        "name": "dot",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "小点模式，开启后不展示数字"
      },
      {
        "name": "offset",
        "type": "[number, number]",
        "required": false,
        "description": "偏移量"
      },
      {
        "name": "overflowCount",
        "type": "number",
        "required": false,
        "description": "封顶数值"
      },
      {
        "name": "showZero",
        "type": "boolean",
        "required": false,
        "description": "当数值为 0 时，是否展示 Badge"
      },
      {
        "name": "status",
        "type": "\"default\" | \"processing\" | \"error\" | \"warning\" | \"success\"",
        "required": false,
        "description": "徽标状态"
      },
      {
        "name": "text",
        "type": "ReactNode",
        "required": false,
        "description": "状态点文本，仅在配置了 status 属性后生效"
      },
      {
        "name": "size",
        "type": "\"default\" | \"small\"",
        "required": false,
        "description": "尺寸，仅在非 dot 模式下生效，支持 small 和 default 两种尺寸"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基础的徽标展示。当 `count` 为0时默认不展示，可以通过配置 `showZero` 修改为展示。\n * en - Basic\n *    -- The basic badge display, the badge is not displayed by default when `count` is 0. You can modify it to display by configuring `showZero`\n */\nimport React, { useState } from 'react';\nimport { Badge, Switch } from 'shineout';\nimport Avatar from './static/avatar';\n\nexport default () => {\n  const [showZero, setShowZero] = useState(false);\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 32 }}>\n      <Badge count={1}>\n        <Avatar></Avatar>\n      </Badge>\n      <Badge count={0} showZero={showZero}>\n        <Switch onChange={setShowZero} value={showZero}></Switch>\n      </Badge>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-nochildren",
        "title": "cn - 独立使用",
        "code": "/**\n * cn - 独立使用\n *    -- 不包裹任何元素即是独立使用，可自定样式展现\n * en - No children\n *    -- Independent use, no wrapping elements is independent use, you can customize the style\n */\nimport React from 'react';\nimport { Badge } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 42 }}>\n      <Badge count={1}></Badge>\n      <Badge count={100} overflowCount={99} color='#faad14'></Badge>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-overflowcount",
        "title": "cn - 封顶数字",
        "code": "/**\n * cn - 封顶数字\n *    -- 设置`overflowCount`属性，当数字大于该值时显示 $\\{overflowCount\\}+\n * en - Overflow count\n *    -- Set the `overflowCount` property, when the number is greater than this value, display $\\{overflowCount\\}+\n */\nimport React from 'react';\nimport { Badge } from 'shineout';\nimport Avatar from './static/avatar';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 32 }}>\n      <Badge count={99}>\n        <Avatar></Avatar>\n      </Badge>\n      <Badge count={100} overflowCount={9}>\n        <Avatar></Avatar>\n      </Badge>\n      <Badge count={100} overflowCount={99}>\n        <Avatar></Avatar>\n      </Badge>\n      <Badge count={1000} overflowCount={999}>\n        <Avatar></Avatar>\n      </Badge>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-small-size",
        "title": "cn - 尺寸",
        "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性为 `small` 可以显示小尺寸的徽标。支持的尺寸有 `small` 和 `default`。\n * en - Size\n *    -- Set the `size` property to `small` to display a small badge. The supported sizes are `small` and `default`.\n */\nimport React from 'react';\nimport { Badge } from 'shineout';\nimport Avatar from './static/avatar';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 24 }}>\n      <Badge count={99} size='small'>\n        <Avatar></Avatar>\n      </Badge>\n      <Badge count={99}>\n        <Avatar></Avatar>\n      </Badge>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-dot",
        "title": "cn - 小点模式",
        "code": "/**\n * cn - 小点模式\n *    -- 开启 `dot` 小点模式，不展示数字\n * en - Dot\n *    -- Open `dot` dot mode, do not display numbers\n */\nimport React from 'react';\nimport { Badge } from 'shineout';\nimport Avatar from './static/avatar';\n\nexport default () => {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 32 }}>\n      <Badge dot>\n        <Avatar></Avatar>\n      </Badge>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 12,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Breadcrumb": {
    "name": "Breadcrumb",
    "description": "显示页面在系统中的层级结构和当前所在位置，并可以快速返回之前的任意页面",
    "category": "navigation",
    "importPath": "import { Breadcrumb } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "data",
        "type": "any[]",
        "required": false,
        "defaultValue": "[]",
        "description": "面包屑对象数组,见 data"
      },
      {
        "name": "separator",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "\\\"/\\\"",
        "description": "面包屑分隔符,可以是字符串或自定义的元素"
      },
      {
        "name": "keygen",
        "type": "true | ObjectKey<Item> | (data: Item, index?: number ) => string | number",
        "required": false,
        "description": "生成每一项key的辅助方法。为 true 时，以数据项本身作为key，相当于 (d => d)；为函数时，使用此函数返回值；为string时，使用这个string对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
      },
      {
        "name": "renderItem",
        "type": "((value: Item) => ReactNode)",
        "required": false,
        "description": "自定义渲染"
      },
      {
        "name": "max",
        "type": "number",
        "required": false,
        "description": "最大显示个数"
      },
      {
        "name": "maxHeight",
        "type": "string | number",
        "required": false,
        "defaultValue": "50vh",
        "description": "下拉框最大高度，超出可以内滚"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 组件调用通过 json 数据配置\n * en - Base\n *    -- The basic usage\n */\n\nimport React from 'react';\nimport { Breadcrumb, Message, TYPE } from 'shineout';\n\ntype BreadcrumbData = TYPE.Breadcrumb.Data;\n\ntype BreadcrumbProps<data> = TYPE.Breadcrumb.Props<data>;\n\nconst data: BreadcrumbProps<BreadcrumbData>['data'] = [\n  { title: 'Home', url: '/' },\n  { title: 'Button', url: '/#/cn/component/shineout/Button?tab=examples' },\n  { title: 'Handler', onClick: () => Message.info('clicked') },\n  { title: 'Self' },\n];\nconst App: React.FC = () => <Breadcrumb data={data} />;\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "01-size",
        "title": "cn - 尺寸",
        "code": "/**\n * cn - 尺寸\n *    -- 通过设置 fontSize 设置尺寸\n * en - Size\n *    -- set fontSize to change size\n */\n\nimport React from 'react';\nimport { Breadcrumb, Message, TYPE } from 'shineout';\n\ntype BreadcrumbData = TYPE.Breadcrumb.Data;\n\ntype BreadcrumbProps<data> = TYPE.Breadcrumb.Props<data>;\n\nconst data: BreadcrumbProps<BreadcrumbData>['data'] = [\n  { title: 'Home', url: '/' },\n  { title: 'Button', url: '/#/cn/component/shineout/Button?tab=examples' },\n  { title: 'Handler', onClick: () => Message.info('clicked') },\n  { title: 'Self' },\n];\nconst App: React.FC = () => (\n  <div>\n    <Breadcrumb data={data} style={{ fontSize: 12 }} />\n    <Breadcrumb data={data} style={{ fontSize: 14, marginTop: 24 }} />\n    <Breadcrumb data={data} style={{ fontSize: 16, marginTop: 24 }} />\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-separator",
        "title": "cn - 自定义分隔符",
        "code": "/**\n * cn - 自定义分隔符\n *    -- 默认的分隔符为 '/'，可以通过 `separator` 属性自定义\n * en - separator\n *    -- The default `separator` is '/'\n */\n\nimport React from 'react';\nimport { Breadcrumb, TYPE } from 'shineout';\n\nfunction Separator() {\n  const str = '>';\n  return <span>{str}</span>;\n}\n\ntype BreadcrumbData = TYPE.Breadcrumb.Data;\n\ntype BreadcrumbProps<data> = TYPE.Breadcrumb.Props<data>;\n\nconst data: BreadcrumbProps<BreadcrumbData>['data'] = [\n  { title: 'Home', url: '/' },\n  { title: 'Self' },\n];\n\nconst App: React.FC = () => (\n  <div>\n    <Breadcrumb data={data} separator='/' style={{ marginBottom: '24px' }} />\n    <Breadcrumb data={data} separator={<Separator />} />\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-icon",
        "title": "cn - 自定义图标",
        "code": "/**\n * cn - 自定义图标\n *    -- 带图标的面包屑\n * en - icon\n *    -- Breadcrumbs with icons\n */\n\nimport React from 'react';\nimport { Breadcrumb, TYPE } from 'shineout';\n\ntype BreadcrumbData = TYPE.Breadcrumb.Data;\n\ntype BreadcrumbProps<data> = TYPE.Breadcrumb.Props<data>;\n\nconst home = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <g clipPath='url(#clip0_423_8269715856220)'>\n      <path\n        fill='currentColor'\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M18.9474 21.9669H5.69595C5.14367 21.9669 4.69595 21.5192 4.69595 20.9669L3.70144 11.0946C2.64017 11.5005 1.82062 10.1075 2.70137 9.38964L11.4079 2.29327C11.7893 1.94652 12.3719 1.94652 12.7533 2.29327L21.9668 9.45261C22.8386 10.13 22.131 11.5127 21.0716 11.2018L20.7063 11.0946L19.9474 20.9669C19.9474 21.5192 19.4997 21.9669 18.9474 21.9669ZM18.0221 19.0479C17.9799 19.5671 17.5462 19.9669 17.0253 19.9669H13.0806V14.6818C13.0806 14.1295 12.6328 13.6818 12.0806 13.6818C11.5283 13.6818 11.0806 14.1295 11.0806 14.6818V19.9669H7.59441C7.08341 19.9669 6.65462 19.5817 6.60012 19.0736L5.67412 10.441C5.63896 10.1132 5.76763 9.78907 6.01809 9.57466L11.456 4.91934C11.8189 4.60865 12.3509 4.59806 12.7259 4.89405L18.3633 9.34372C18.626 9.55108 18.7675 9.8761 18.7404 10.2097L18.0221 19.0479Z'\n      ></path>\n    </g>\n    <defs>\n      <clipPath>\n        <rect width='24' height='24' transform='translate(0.00195312)'></rect>\n      </clipPath>\n    </defs>\n  </svg>\n);\n\nconst tag = (\n  <svg width='1em' height='1em' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      fill='currentColor'\n      d='M13.9193 1.90465H19.7103C20.7498 1.90465 21.8711 2.77051 21.843 3.90296L22.0771 10.0559C22.1229 10.6391 21.9111 11.2131 21.4975 11.6268L11.6121 21.5121C10.831 22.2932 9.5647 22.2932 8.78365 21.5121L2.50571 15.2342C1.72466 14.4532 1.72466 13.1868 2.50571 12.4058L12.4227 2.48874C12.8181 2.09344 13.3608 1.88163 13.9193 1.90465ZM13.837 3.90296L4.62703 13.1129C4.2365 13.5034 4.2365 14.1366 4.62703 14.5271L9.49076 19.3908C9.88128 19.7814 10.5144 19.7814 10.905 19.3908L20.0833 10.2125L19.9054 4.60225C19.9054 4.17159 19.4508 3.80356 18.9364 3.80356L13.837 3.90296ZM15.3053 5.73973C16.686 5.73973 17.8053 6.85902 17.8053 8.23973C17.8053 9.62044 16.686 10.7397 15.3053 10.7397C13.9246 10.7397 12.8053 9.62044 12.8053 8.23973C12.8053 6.85902 13.9246 5.73973 15.3053 5.73973ZM15.3053 7.73973C15.0292 7.73973 14.8053 7.96359 14.8053 8.23973C14.8053 8.51587 15.0292 8.73973 15.3053 8.73973C15.5815 8.73973 15.8053 8.51587 15.8053 8.23973C15.8053 7.96359 15.5815 7.73973 15.3053 7.73973Z'\n    ></path>\n  </svg>\n);\n\nconst data: BreadcrumbProps<BreadcrumbData>['data'] = [\n  { icon: home, url: '#home' },\n  { icon: tag, title: 'Custom', url: 'https://www.google.com' },\n  { icon: tag, title: 'Demo' },\n];\n\nconst style = { display: 'flex', alignItems: 'center' };\nconst data2: BreadcrumbProps<BreadcrumbData>['data'] = [\n  {\n    title: (\n      <a style={style} href='#home'>\n        Home&nbsp;{home}{' '}\n      </a>\n    ),\n  },\n  {\n    title: (\n      <a style={style} href='https://www.google.com'>\n        Custom&nbsp;{tag}\n      </a>\n    ),\n  },\n  { title: <span style={style}>Custom&nbsp;{tag}</span> },\n];\n\nconst App: React.FC = () => (\n  <div>\n    <Breadcrumb data={data} style={{ marginBottom: 24 }} />\n    <Breadcrumb data={data2} />\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-renderItem",
        "title": "cn - 自定义渲染",
        "code": "/**\n * cn - 自定义渲染\n *    -- 自定义渲染面包屑中的内容\n * en - Base\n *    -- Custom render content in Breadcrumb\n */\n\nimport React, { ReactNode } from 'react';\nimport { Breadcrumb, TYPE } from 'shineout';\n\nconst data = [\n  { name: 'home', link: '#home' },\n  { name: 'menu', link: 'https://www.google.com' },\n  { name: 'self' },\n];\ntype BreadcrumbProps = TYPE.Breadcrumb.Props<typeof data[0]>;\n\nconst renderItem: BreadcrumbProps['renderItem'] = (value) => {\n  let BreadcrumbItem: ReactNode = value.name;\n\n  if (value.link) BreadcrumbItem = <a href={value.link}>{value.name}</a>;\n\n  return BreadcrumbItem;\n};\nexport default function () {\n  return <Breadcrumb renderItem={renderItem} data={data} />;\n}\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 8,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Button": {
    "name": "Button",
    "description": "使用按钮触发操作和链接",
    "category": "general",
    "importPath": "import { Button } from 'shineout'",
    "props": [
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "onClick",
        "type": "MouseEventHandler<Element>",
        "required": false,
        "description": "按钮点击回调"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "禁用"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "按钮里面的内容, 可以是文字图标等"
      },
      {
        "name": "renderLoading",
        "type": "((buttonEl: ReactNode) => ReactElement)",
        "required": false,
        "description": "自定义loading"
      },
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "loading 状态"
      },
      {
        "name": "mode",
        "type": "\"text\" | \"outline\" | \"dashed\"",
        "required": false,
        "description": "按钮风格"
      },
      {
        "name": "type",
        "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "按钮类型"
      },
      {
        "name": "size",
        "type": "\"default\" | \"small\" | \"large\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "按钮尺寸"
      },
      {
        "name": "space",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "仅有2个汉字的按钮，是否在2个汉字中间插入空格"
      },
      {
        "name": "href",
        "type": "string",
        "required": false,
        "description": "如果设置了 href 属性，将会用 <a> 代替 <button>"
      },
      {
        "name": "target",
        "type": "string",
        "required": false,
        "description": "当设置了 href 属性时，target 会被设置到 <a> 元素上"
      },
      {
        "name": "shape",
        "type": "\"circle\" | \"round\" | \"square\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "设置按钮形状"
      },
      {
        "name": "htmlType",
        "type": "\"button\" | \"submit\" | \"reset\"",
        "required": false,
        "defaultValue": "\\\"button\\\"",
        "description": "按钮原生type属性"
      }
    ],
    "examples": [
      {
        "name": "s-001-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 按钮分为主要按钮、次要按钮、线框按钮、虚框按钮、文字按钮五种，主按钮在同一个操作区域最多出现一次\n * en - Base\n *    -- Button is divided into five types: primary, secondary, outline, dash, and text. The primary button can only appear once in the same operation area\n */\n\nimport { Button } from 'shineout';\nexport default () => {\n  const buttonStyle = {\n    margin: 0,\n  };\n\n  return (\n    <div style={{ display: 'flex', gap: 24, flexWrap: 'wrap' }}>\n      <Button type='primary' style={buttonStyle}>\n        Primary\n      </Button>\n\n      <Button type='secondary' style={buttonStyle}>\n        Secondary\n      </Button>\n\n      <Button type='secondary' mode='outline' style={buttonStyle}>\n        Outline\n      </Button>\n\n      <Button type='secondary' mode='dashed' style={buttonStyle}>\n        Dashed\n      </Button>\n\n      <Button type='primary' mode='text' style={buttonStyle}>\n        Text\n      </Button>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-002-icon",
        "title": "cn - 图标按钮",
        "code": "/**\n * cn - 图标按钮\n *    -- Button 可以嵌入图标\n * en - Button with icon\n *    -- Button can embed icons\n */\n\nimport { Button } from 'shineout';\nimport { Icon01 } from './static/icon';\n\nexport default () => {\n  const buttonStyle = {\n    margin: 0,\n  };\n\n  return (\n    <div style={{ display: 'flex', gap: 24, flexWrap: 'wrap' }}>\n      <Button type='primary' style={buttonStyle}>\n        <Icon01 style={{ marginInlineEnd: 4 }}></Icon01>\n        Primary\n      </Button>\n      <Button type='primary' style={buttonStyle}>\n        Primary\n        <Icon01 style={{ marginInlineStart: 4 }}></Icon01>\n      </Button>\n      <Button type='primary' shape='square' style={buttonStyle}>\n        <Icon01></Icon01>\n      </Button>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-003-shape",
        "title": "cn - 按钮形状",
        "code": "/**\n * cn - 按钮形状\n *    -- 按钮分为矩形、全圆角、方形、圆形四种\n * en - Button shape\n *    -- Button is divided into square, circle, round, and rectangle\n */\n\nimport { Button } from 'shineout';\nimport { Icon01 } from './static/icon';\n\nexport default () => {\n  const buttonStyle = {\n    margin: 0,\n  };\n\n  const iconWarpperStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 4,\n  };\n\n  return (\n    <div style={{ display: 'flex', gap: 24, flexWrap: 'wrap' }}>\n      <Button type='primary' style={buttonStyle}>\n        Primary\n      </Button>\n      <Button type='primary' shape='round' style={buttonStyle}>\n        Primary\n      </Button>\n      <Button type='primary' shape='square' style={buttonStyle}>\n        <span style={iconWarpperStyle}>\n          <Icon01></Icon01>\n        </span>\n      </Button>\n      <Button type='primary' shape='circle' style={buttonStyle}>\n        <span style={iconWarpperStyle}>\n          <Icon01></Icon01>\n        </span>\n      </Button>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-004-size",
        "title": "cn - 按钮尺寸",
        "code": "/**\n * cn - 按钮尺寸\n *    -- 按钮分为小、中、大三种尺寸，推荐及默认为尺寸「中」，可在不同场景及不同业务需求选择适合尺寸\n * en - Button size\n *    -- Button is divided into small, medium, and large. The recommended and default size is medium. You can choose the appropriate size in different scenarios and different business needs\n */\n\nimport { Button } from 'shineout';\nexport default () => {\n  const buttonStyle = {\n    margin: 0,\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 24, flexWrap: 'wrap' }}>\n      <Button type='primary' size='small' style={buttonStyle}>\n        Primary\n      </Button>\n      <Button type='primary' style={buttonStyle}>\n        Primary\n      </Button>\n      <Button type='primary' size='large' style={buttonStyle}>\n        Primary\n      </Button>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-005-status",
        "title": "cn - 按钮状态",
        "code": "/**\n * cn - 按钮状态\n *    -- 按钮状态分为危险、警告、成功三种，可以与按钮类型同时生效，优先级高于按钮类型\n * en - Button status\n *    -- Button status is divided into danger, warning, and success. It can take effect at the same time as the button type, and the priority is higher than the button type\n */\n\nimport { Button } from 'shineout';\n\nconst buttonStyle = {\n  margin: 0,\n  width: 72,\n} as React.CSSProperties;\n\nconst wrapperStyle = {\n  gap: 24,\n  display: 'flex',\n  flexWrap: 'wrap',\n  flexDirection: 'column',\n} as React.CSSProperties;\n\nconst buttonWrapperStyle = {\n  gap: 24,\n  display: 'flex',\n  flexWrap: 'wrap',\n  alignItems: 'center',\n} as React.CSSProperties;\nexport default () => {\n  return (\n    <div style={wrapperStyle}>\n      <div style={buttonWrapperStyle}>\n        <Button type='default' style={buttonStyle}>\n          Default\n        </Button>\n        <Button type='default' mode='outline' style={buttonStyle}>\n          Default\n        </Button>\n        <Button type='default' mode='dashed' style={buttonStyle}>\n          Default\n        </Button>\n        <Button type='default' mode='text' style={buttonStyle}>\n          Default\n        </Button>\n      </div>\n      <div style={buttonWrapperStyle}>\n        <Button type='primary' style={buttonStyle}>\n          Primary\n        </Button>\n        <Button type='primary' mode='outline' style={buttonStyle}>\n          Primary\n        </Button>\n        <Button type='primary' mode='dashed' style={buttonStyle}>\n          Primary\n        </Button>\n        <Button type='primary' mode='text' style={buttonStyle}>\n          Primary\n        </Button>\n      </div>\n      <div style={buttonWrapperStyle}>\n        <Button type='danger' style={buttonStyle}>\n          Danger\n        </Button>\n        <Button type='danger' mode='outline' style={buttonStyle}>\n          Danger\n        </Button>\n        <Button type='danger' mode='dashed' style={buttonStyle}>\n          Danger\n        </Button>\n        <Button type='danger' mode='text' style={buttonStyle}>\n          Danger\n        </Button>\n      </div>\n      <div style={buttonWrapperStyle}>\n        <Button type='warning' style={buttonStyle}>\n          Warning\n        </Button>\n        <Button type='warning' mode='outline' style={buttonStyle}>\n          Warning\n        </Button>\n        <Button type='warning' mode='dashed' style={buttonStyle}>\n          Warning\n        </Button>\n        <Button type='warning' mode='text' style={buttonStyle}>\n          Warning\n        </Button>\n      </div>\n      <div style={buttonWrapperStyle}>\n        <Button type='success' style={buttonStyle}>\n          Success\n        </Button>\n        <Button type='success' mode='outline' style={buttonStyle}>\n          Success\n        </Button>\n        <Button type='success' mode='dashed' style={buttonStyle}>\n          Success\n        </Button>\n        <Button type='success' mode='text' style={buttonStyle}>\n          Success\n        </Button>\n      </div>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [
      "Group"
    ],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 15,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {
      "Group": {
        "props": [
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "size",
            "type": "\"small\" | \"large\" | \"default\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "不同尺寸"
          },
          {
            "name": "shape",
            "type": "\"round\"",
            "required": false,
            "description": "设置按钮形状"
          },
          {
            "name": "mode",
            "type": "\"text\" | \"outline\" | \"dashed\"",
            "required": false,
            "description": "按钮风格;如果Button和Group同时设置mode,以Group为准"
          },
          {
            "name": "type",
            "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "按钮类型;如果Button和Group同时设置type,以Button为准"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true,
            "defaultValue": "index",
            "description": "由 Button 组成的 array"
          },
          {
            "name": "id",
            "type": "string",
            "required": false,
            "description": "按钮组id"
          }
        ]
      }
    }
  },
  "Card": {
    "name": "Card",
    "description": "最基础的卡片容器，能够创建清晰的视觉单元，让信息更具逻辑性",
    "category": "other",
    "importPath": "import { Card } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "collapsible",
        "type": "boolean | \"bottom\"",
        "required": false,
        "defaultValue": "false",
        "description": "是否可折叠，\\\"bottom\\\" 表示从下方点击折叠"
      },
      {
        "name": "collapsed",
        "type": "boolean",
        "required": false,
        "description": "是否折叠，用于受控状态"
      },
      {
        "name": "defaultCollapsed",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "初始折叠状态（仅在 collapsible 为 true 时有效）"
      },
      {
        "name": "onCollapse",
        "type": "((collapsed: boolean) => void)",
        "required": false,
        "description": "折叠状态改变时回调事件"
      },
      {
        "name": "shadow",
        "type": "boolean | \"hover\"",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示阴影\\n \\\"hover\\\" - 鼠标移到元素上显示;\\n true - 总是显示;\\n false - 从不显示"
      },
      {
        "name": "id",
        "type": "any",
        "required": false,
        "description": "手风琴下控制展开的值"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素"
      },
      {
        "name": "forwardedRef",
        "type": "((el: HTMLDivElement) => void)",
        "required": false,
        "description": "获取 Card dom"
      },
      {
        "name": "resizable",
        "type": "boolean | \"x\" | \"y\" | \"xy\"",
        "required": false,
        "defaultValue": "false",
        "description": "是否可以拖动大小"
      },
      {
        "name": "moveable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可以拖拽移动"
      },
      {
        "name": "split",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否分割头部和主体"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- Card 内部由 Header, Body, Footer 三个自组件组成，可以组合或单独使用\n * en - Base\n *    -- The card is composed of three components: Header, Body, and Footer. It can be combined or used separately\n */\nimport React from 'react';\nimport { Card, TYPE, Button, icons } from 'shineout';\n\ntype CardProps = TYPE.Card.Props;\n\ntype CardStyle = CardProps['style'];\n\nconst cardStyle: CardStyle = {\n  width: 360,\n};\n\nconst iconStyle = {\n  width: 32,\n  height: 32,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  cursor: 'pointer',\n};\n\nconst App: React.FC = () => (\n  <div>\n    <Card style={cardStyle} split>\n      <Card.Header\n        extra={\n          <Button mode='text' type='primary'>\n            Text Button\n          </Button>\n        }\n      >\n        Card title\n      </Card.Header>\n      <Card.Body>\n        Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n        bird in the open.\n      </Card.Body>\n      <Card.Footer>\n        <div style={{ display: 'flex' }}>\n          <div\n            style={{\n              marginInlineEnd: 8,\n              ...iconStyle,\n            }}\n          >\n            <svg viewBox='0 0 24 24' width='14px' height='14px'>\n              <path\n                fill='#666C7C'\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M2.13086 12.0313L2.13086 19.8967C2.13086 21.0013 3.02629 21.8967 4.13086 21.8967H17.82C18.8497 21.8967 19.6753 20.922 19.9251 20.1414L21.7909 13.0313C22.1943 11.2058 21.1563 9.0314 18.9662 9.0314L17.1948 9.0267L15.9702 9.0314C15.9702 9.0314 16.1695 8.63356 16.1695 6.00363C16.1695 3.37371 14.5167 2.10327 12.5332 2.10327C10.5498 2.10327 9.16804 4.02533 9.16804 6.00363L8.92932 8.35131C8.84757 8.89355 8.29867 10.0052 7.07103 10.0313H4.13086C3.02629 10.0313 2.13086 10.9268 2.13086 12.0313ZM6.13086 13.0313V18.8967C6.13086 19.449 5.68314 19.8967 5.13086 19.8967C4.57857 19.8967 4.13086 19.449 4.13086 18.8967V13.0313C4.13086 12.479 4.57857 12.0313 5.13086 12.0313C5.68314 12.0313 6.13086 12.479 6.13086 13.0313ZM18.1258 11.0197C19.4353 11.0197 19.9251 11.7337 19.4509 13.4116L18.0256 18.7959C17.8971 19.2813 17.5216 19.5991 17.0451 19.5991H8.90474C8.35246 19.5991 7.90474 19.1514 7.90474 18.5991V11.7337C8.55706 11.7337 10.8301 10.7338 10.9409 8.0492L11.1446 5.706C11.1446 4.82715 11.6544 4.1147 12.5332 4.1147C13.4121 4.1147 14.105 4.32596 14.1245 5.706C14.1441 7.08605 14.0885 7.18361 14.0362 8.0492C14.0123 8.44433 13.8523 9.09771 13.6855 9.69123C13.5006 10.349 13.985 11.0197 14.6682 11.0197H18.1258Z'\n              ></path>\n            </svg>\n          </div>\n          <div\n            style={{\n              marginInlineEnd: 8,\n              ...iconStyle,\n            }}\n          >\n            <svg viewBox='0 0 24 24' width='14px' height='14px' fill='#666C7C'>\n              <path d='M6.80237 19.0674C6.5783 19.0674 6.36073 19.1427 6.18454 19.2811L3.61977 21.2963C2.96365 21.8118 2.00195 21.3444 2.00195 20.51V4.03613C2.00195 3.05649 3.01528 2.03613 4.00195 2.03613H20.002C20.9855 2.03613 22.002 3.0505 22.002 4.03613V17.0674C22.002 18.0792 21.1558 19.0674 20.002 19.0674H6.80237ZM5.49281 17.2811C5.669 17.1427 5.88657 17.0674 6.11064 17.0674H20.002V5.03613C20.002 4.48385 19.5542 4.03613 19.002 4.03613H5.00195C4.44967 4.03613 4.00195 4.48385 4.00195 5.03613V18.4525L5.49281 17.2811Z'></path>\n              <path d='M9.54688 10.7754C9.54688 11.6038 8.8753 12.2754 8.04688 12.2754C7.21845 12.2754 6.54688 11.6038 6.54688 10.7754C6.54688 9.94696 7.21845 9.27539 8.04688 9.27539C8.8753 9.27539 9.54688 9.94696 9.54688 10.7754Z'></path>\n              <path d='M13.4883 10.7754C13.4883 11.6038 12.8167 12.2754 11.9883 12.2754C11.1599 12.2754 10.4883 11.6038 10.4883 10.7754C10.4883 9.94696 11.1599 9.27539 11.9883 9.27539C12.8167 9.27539 13.4883 9.94696 13.4883 10.7754Z'></path>\n              <path d='M17.4297 10.7754C17.4297 11.6038 16.7581 12.2754 15.9297 12.2754C15.1013 12.2754 14.4297 11.6038 14.4297 10.7754C14.4297 9.94696 15.1013 9.27539 15.9297 9.27539C16.7581 9.27539 17.4297 9.94696 17.4297 10.7754Z'></path>\n            </svg>\n          </div>\n          <div style={iconStyle}>\n            <svg viewBox='0 0 24 24' width='14px' height='14px'>\n              <path\n                fill='#666C7C'\n                d='M20.3911 2.55892C20.591 2.52313 20.7844 2.55061 20.9545 2.62457C20.9606 2.62853 20.9676 2.63161 20.9746 2.63478C21.0778 2.68129 21.1714 2.74566 21.2522 2.82324C21.2574 2.8281 21.2625 2.8331 21.2675 2.83816L21.2824 2.85339C21.36 2.93425 21.4243 3.02782 21.4717 3.13031C21.4741 3.13803 21.4771 3.14503 21.4801 3.15205C21.5747 3.36663 21.5939 3.61952 21.5042 3.87561L21.5235 3.81524C21.5196 3.82903 21.5155 3.84275 21.511 3.85639L21.5042 3.87561L14.8542 21.3083C14.555 22.1632 13.3644 22.2118 12.9965 21.3841L9.35236 14.7523L2.6017 11.1091C1.81349 10.7588 1.82001 9.66213 2.56086 9.30003L2.67749 9.25141L20.23 2.60141C20.2367 2.59907 20.2434 2.59681 20.25 2.59462C20.2629 2.59022 20.2766 2.58607 20.2904 2.58221C20.3191 2.57409 20.3471 2.56739 20.3751 2.56192C20.3779 2.56196 20.3809 2.5614 20.384 2.56086L20.3911 2.55892ZM18.1683 7.35134L11.3023 14.2173L13.7994 18.267L18.1683 7.35134ZM16.7553 5.93433L5.71784 10.3053L9.88733 12.8023L16.7553 5.93433Z'\n              ></path>\n            </svg>\n          </div>\n          <div style={{ ...iconStyle, marginInlineStart: 'auto', color: '#666C7C' }}>\n            <div style={{ width: 14 }}>{icons.More}</div>\n          </div>\n        </div>\n      </Card.Footer>\n    </Card>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-shadow",
        "title": "cn - 阴影",
        "code": "/**\n * cn - 阴影\n *    -- 可以通过 `shadow` 属性控制阴影\n * en - BoxShadow\n *    -- Set the `shadow` property to determined how to display the shadow\n */\nimport React from 'react';\nimport { Card, TYPE } from 'shineout';\n\ntype CardProps = TYPE.Card.Props;\n\ntype CardStyle = CardProps['style'];\n\nconst cardStyle: CardStyle = {\n  width: 140,\n  display: 'inline-flex',\n  marginInlineEnd: 20,\n};\n\nconst App: React.FC = () => (\n  <div>\n    <Card style={cardStyle}>\n      <Card.Body>Never</Card.Body>\n    </Card>\n\n    <Card style={cardStyle} shadow='hover'>\n      <Card.Body>Hover</Card.Body>\n    </Card>\n\n    <Card style={cardStyle} shadow>\n      <Card.Body>Always</Card.Body>\n    </Card>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-hover",
        "title": "cn - 悬浮样式",
        "code": "/**\n * cn - 悬浮样式\n *    -- 可以设置 `shadow` = 'hover'，让卡片在鼠标移入时显示阴影，同时你可以通过样式覆盖来自定义悬浮样式\n * en - Hover\n *    -- Set shadow to hover to show shadow when the mouse is over the card, and you can customize the hover style by overriding the style\n */\nimport React from 'react';\nimport { Card, TYPE, Button } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\ntype CardProps = TYPE.Card.Props;\n\ntype CardStyle = CardProps['style'];\n\nconst cardStyle: CardStyle = {\n  width: 360,\n  display: 'inline-flex',\n};\n\nconst iconStyle = {\n  width: 32,\n  height: 32,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  cursor: 'pointer',\n};\n\nconst HoverCard: React.FC<{ className?: string }> = (props) => (\n  <Card\n    style={{...cardStyle, margin: '16px'}}\n    split\n    className={props.className}\n    shadow='hover'\n  >\n    <Card.Header\n      extra={\n        <Button mode='text' type='primary'>\n          Text Button\n        </Button>\n      }\n    >\n      Card title\n    </Card.Header>\n    <Card.Body>\n      Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n      bird in the open.\n    </Card.Body>\n    <Card.Footer>\n      <div style={{ display: 'flex' }}>\n        <div\n          style={{\n            marginInlineEnd: 8,\n            ...iconStyle,\n          }}\n        >\n          <svg\n            width='14'\n            height='14'\n            viewBox='0 0 14 14'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <path\n              d='M11.6084 4.76308C11.5697 4.75817 11.5308 4.75559 11.4917 4.75534L9.33165 4.74819C9.42966 4.30236 9.48157 3.85177 9.48157 3.43331C9.48157 3.00474 9.43549 2.57319 9.34507 2.14938C9.33827 2.11717 9.3285 2.08568 9.31591 2.05534C9.0814 1.1845 8.32423 0.583313 7.4434 0.583313C6.40039 0.583313 5.61348 1.45653 5.61348 2.61427L5.61289 2.64403C5.61127 2.6823 5.61127 2.72063 5.61289 2.75891C5.56739 3.96546 4.59497 5.01843 3.38338 5.1732L1.67654 5.20117C1.39501 5.17907 1.11723 5.27806 0.910387 5.4742C0.703543 5.67034 0.586463 5.94578 0.587457 6.23391L0.583374 12.3869C0.583374 12.9541 1.03429 13.4166 1.58904 13.4166H3.46213L10.5794 13.4041C10.9737 13.4041 11.2211 13.2911 11.5145 13.097C11.805 12.9041 12.0409 12.6369 12.1987 12.322C12.253 12.2327 12.2932 12.1375 12.3189 12.0381L12.3236 12.0184L13.3841 7.13748C13.4074 7.04224 13.4173 6.94462 13.4133 6.847C13.4372 6.4303 13.3361 6.01604 13.1233 5.6595C12.7891 5.09879 12.2792 4.7976 11.6084 4.76308ZM2.18914 6.2391L2.30975 6.23731C2.63189 6.23254 2.89681 6.49515 2.90149 6.82385C2.90153 6.82673 2.90155 6.82961 2.90155 6.83249V11.7738C2.90155 12.1025 2.64038 12.369 2.31821 12.369H2.19338C1.87121 12.3695 1.61004 12.103 1.61004 11.7743L1.6105 11.7738L1.61426 6.83381C1.61451 6.50862 1.87048 6.24381 2.18914 6.2391ZM12.3831 6.90296L11.3255 11.7714C11.3129 11.7904 11.3016 11.8103 11.2917 11.8309C11.2162 11.989 11.0998 12.123 10.9551 12.2184C10.7672 12.3428 10.713 12.3565 10.5742 12.3565L4.51258 12.3674C4.19041 12.368 3.92879 12.1019 3.92822 11.7732L3.92822 11.7722V6.13272C5.46006 5.7476 6.59581 4.37141 6.63898 2.76367C6.63993 2.74442 6.63954 2.72513 6.63781 2.70593V2.67617L6.63956 2.61367C6.63956 2.12558 6.91548 1.63034 7.4434 1.63034C7.87098 1.63034 8.2379 1.93748 8.3359 2.37736C8.34123 2.40165 8.34825 2.42552 8.3569 2.44879C8.42131 2.77265 8.45394 3.10226 8.45432 3.43272C8.45432 3.95058 8.3499 4.55772 8.16848 5.09939C8.11461 5.25914 8.13966 5.43562 8.23573 5.57322C8.3318 5.71082 8.48708 5.79261 8.65265 5.79284L11.4912 5.80296C11.5087 5.80534 11.5256 5.80712 11.5425 5.80772C11.8791 5.822 12.0891 5.93986 12.2466 6.20355C12.354 6.38442 12.4031 6.59508 12.3872 6.80593C12.3854 6.8321 12.3856 6.85837 12.3877 6.8845L12.3837 6.90236L12.3831 6.90296Z'\n              fill='#666C7C'\n            />\n          </svg>\n        </div>\n        <div\n          style={{\n            marginInlineEnd: 8,\n            ...iconStyle,\n          }}\n        >\n          <svg\n            width='14'\n            height='14'\n            viewBox='0 0 14 14'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <path\n              d='M11.6666 1.75C12.311 1.75 12.8333 2.26557 12.8333 2.90155V11.5382C12.8333 11.9313 12.5104 12.25 12.1121 12.25C12.0002 12.25 11.8898 12.2243 11.7897 12.1749L8.41102 11.0839C8.24907 11.004 8.0705 10.9624 7.88944 10.9624H2.33329C1.68896 10.9624 1.16663 10.4468 1.16663 9.81085V2.90155C1.16663 2.26557 1.68896 1.75 2.33329 1.75H11.6666ZM11.0833 2.90155H2.91663C2.59446 2.90155 2.33329 3.15933 2.33329 3.47733V9.23508C2.33329 9.55307 2.59446 9.81085 2.91663 9.81085H7.88944C8.19982 9.81085 8.50655 9.87197 8.79183 9.99006L8.9326 10.0538L11.2947 10.7214C11.4495 10.7652 11.611 10.6767 11.6554 10.5239C11.6628 10.4981 11.6666 10.4714 11.6666 10.4446V3.47733C11.6666 3.15933 11.4055 2.90155 11.0833 2.90155ZM7.5832 6.93198C7.90533 6.93202 8.16645 7.18979 8.16645 7.50775C8.16645 7.82571 7.90533 8.08348 7.5832 8.08353H4.0832C3.76107 8.08348 3.49996 7.82571 3.49996 7.50775C3.49996 7.18979 3.76107 6.93202 4.0832 6.93198H7.5832ZM9.91654 4.62888C10.125 4.62884 10.3176 4.73858 10.4218 4.91674C10.526 5.0949 10.526 5.3144 10.4218 5.49256C10.3176 5.67072 10.125 5.78046 9.91654 5.78043H4.0832C3.76107 5.78038 3.49996 5.52261 3.49996 5.20465C3.49996 4.88669 3.76107 4.62892 4.0832 4.62888H9.91654Z'\n              fill='#666C7C'\n            />\n          </svg>\n        </div>\n        <div style={iconStyle}>\n          <svg\n            width='14'\n            height='14'\n            viewBox='0 0 14 14'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <path\n              d='M12.1513 0.592407C12.2679 0.571526 12.3807 0.587559 12.48 0.6307C12.4836 0.633009 12.4876 0.634808 12.4917 0.636657C12.5519 0.663785 12.6065 0.701338 12.6537 0.746589C12.6566 0.749428 12.6596 0.752341 12.6626 0.755292L12.6712 0.764178C12.7165 0.811346 12.754 0.865931 12.7817 0.925713C12.7831 0.930218 12.7849 0.9343 12.7866 0.938397C12.8418 1.06357 12.8529 1.21109 12.8006 1.36048L12.8119 1.32526C12.8096 1.3333 12.8072 1.34131 12.8046 1.34926L12.8006 1.36048L8.92148 12.4438C8.74695 12.9425 8.05241 12.9708 7.83784 12.488L5.71206 7.70519L0.929811 5.58C0.470019 5.37564 0.473825 4.73594 0.905988 4.52472L0.974021 4.49635L12.0574 0.617187C12.0613 0.615824 12.0651 0.614504 12.069 0.613227C12.0766 0.610661 12.0846 0.608239 12.0926 0.605992C12.1093 0.601251 12.1257 0.597343 12.142 0.594157C12.1436 0.594178 12.1454 0.593853 12.1472 0.593537L12.1513 0.592407ZM10.8547 3.38798L6.84954 7.39315L8.30614 10.6697L10.8547 3.38798ZM10.0305 2.5614L2.74756 5.1111L6.02412 6.56773L10.0305 2.5614Z'\n              fill='#666C7C'\n            />\n          </svg>\n        </div>\n        <div style={{ ...iconStyle, marginInlineStart: 'auto' }}>\n          <svg\n            width='14'\n            height='14'\n            viewBox='0 0 14 14'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <path\n              d='M2.91667 5.83331C3.561 5.83331 4.08333 6.35565 4.08333 6.99998C4.08333 7.64431 3.561 8.16665 2.91667 8.16665C2.27233 8.16665 1.75 7.64431 1.75 6.99998C1.75 6.35565 2.27233 5.83331 2.91667 5.83331ZM7 5.83331C7.64433 5.83331 8.16667 6.35565 8.16667 6.99998C8.16667 7.64431 7.64433 8.16665 7 8.16665C6.35567 8.16665 5.83333 7.64431 5.83333 6.99998C5.83333 6.35565 6.35567 5.83331 7 5.83331ZM11.0833 5.83331C11.7277 5.83331 12.25 6.35565 12.25 6.99998C12.25 7.64431 11.7277 8.16665 11.0833 8.16665C10.439 8.16665 9.91667 7.64431 9.91667 6.99998C9.91667 6.35565 10.439 5.83331 11.0833 5.83331Z'\n              fill='#666C7C'\n            />\n          </svg>\n        </div>\n      </div>\n    </Card.Footer>\n  </Card>\n);\n\nconst useStyle = createUseStyles(\n  {\n    customCard: {\n      transitionProperty: 'all',\n      '&:hover': {\n        transform: 'translateY(-4px)',\n      },\n    },\n  },\n\n  { name: 'custom-card' },\n);\n\nconst App = () => {\n  const classes = useStyle();\n  return (\n    <div style={{display: 'flex', flexWrap: 'wrap', margin:'-16px'}}>\n      <HoverCard />\n      <HoverCard className={classes?.customCard} />\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-border",
        "title": "cn - 无边框卡片",
        "code": "/**\n * cn - 无边框卡片\n *    -- 通过设置 border 样式，可以去掉卡片的边框\n * en - Hover\n *    -- Set shadow to hover to show shadow when the mouse is over the card, and you can customize the hover style by overriding the style\n */\nimport React from 'react';\nimport { Card, TYPE, Button } from 'shineout';\n\ntype CardProps = TYPE.Card.Props;\n\ntype CardStyle = CardProps['style'];\n\nconst cardStyle: CardStyle = {\n  width: 360,\n  border: 'none',\n};\n\nconst App: React.FC = () => (\n  <div style={{ padding: 32, background: '#f4f5f8' }}>\n    <Card style={cardStyle} split>\n      <Card.Header\n        extra={\n          <Button mode='text' type='primary'>\n            Text Button\n          </Button>\n        }\n      >\n        Card title\n      </Card.Header>\n      <Card.Body>\n        Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n        bird in the open.\n      </Card.Body>\n    </Card>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "05-split",
        "title": "cn - 无分割线",
        "code": "/**\n * cn - 无分割线\n *    -- 通过设置 `split` = false 属性，可以去掉卡片的分割线\n * en - No split\n *    -- Set `split` = false to remove the split line of the card\n */\nimport React from 'react';\nimport { Card, TYPE, Button } from 'shineout';\n\ntype CardProps = TYPE.Card.Props;\n\ntype CardStyle = CardProps['style'];\n\nconst cardStyle: CardStyle = {\n  width: 360,\n};\n\nconst iconStyle = {\n  width: 32,\n  height: 32,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  cursor: 'pointer',\n};\n\nconst App: React.FC = () => (\n  <div>\n    <Card style={cardStyle} split={false}>\n      <Card.Header\n        extra={\n          <Button mode='text' type='primary'>\n            Text Button\n          </Button>\n        }\n      >\n        Card title\n      </Card.Header>\n      <Card.Body>\n        Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n        bird in the open.\n      </Card.Body>\n      <Card.Footer>\n        <div style={{ display: 'flex' }}>\n          <div\n            style={{\n              marginInlineEnd: 8,\n              ...iconStyle,\n            }}\n          >\n            <svg\n              width='14'\n              height='14'\n              viewBox='0 0 14 14'\n              fill='none'\n              xmlns='http://www.w3.org/2000/svg'\n            >\n              <path\n                d='M11.6084 4.76308C11.5697 4.75817 11.5308 4.75559 11.4917 4.75534L9.33165 4.74819C9.42966 4.30236 9.48157 3.85177 9.48157 3.43331C9.48157 3.00474 9.43549 2.57319 9.34507 2.14938C9.33827 2.11717 9.3285 2.08568 9.31591 2.05534C9.0814 1.1845 8.32423 0.583313 7.4434 0.583313C6.40039 0.583313 5.61348 1.45653 5.61348 2.61427L5.61289 2.64403C5.61127 2.6823 5.61127 2.72063 5.61289 2.75891C5.56739 3.96546 4.59497 5.01843 3.38338 5.1732L1.67654 5.20117C1.39501 5.17907 1.11723 5.27806 0.910387 5.4742C0.703543 5.67034 0.586463 5.94578 0.587457 6.23391L0.583374 12.3869C0.583374 12.9541 1.03429 13.4166 1.58904 13.4166H3.46213L10.5794 13.4041C10.9737 13.4041 11.2211 13.2911 11.5145 13.097C11.805 12.9041 12.0409 12.6369 12.1987 12.322C12.253 12.2327 12.2932 12.1375 12.3189 12.0381L12.3236 12.0184L13.3841 7.13748C13.4074 7.04224 13.4173 6.94462 13.4133 6.847C13.4372 6.4303 13.3361 6.01604 13.1233 5.6595C12.7891 5.09879 12.2792 4.7976 11.6084 4.76308ZM2.18914 6.2391L2.30975 6.23731C2.63189 6.23254 2.89681 6.49515 2.90149 6.82385C2.90153 6.82673 2.90155 6.82961 2.90155 6.83249V11.7738C2.90155 12.1025 2.64038 12.369 2.31821 12.369H2.19338C1.87121 12.3695 1.61004 12.103 1.61004 11.7743L1.6105 11.7738L1.61426 6.83381C1.61451 6.50862 1.87048 6.24381 2.18914 6.2391ZM12.3831 6.90296L11.3255 11.7714C11.3129 11.7904 11.3016 11.8103 11.2917 11.8309C11.2162 11.989 11.0998 12.123 10.9551 12.2184C10.7672 12.3428 10.713 12.3565 10.5742 12.3565L4.51258 12.3674C4.19041 12.368 3.92879 12.1019 3.92822 11.7732L3.92822 11.7722V6.13272C5.46006 5.7476 6.59581 4.37141 6.63898 2.76367C6.63993 2.74442 6.63954 2.72513 6.63781 2.70593V2.67617L6.63956 2.61367C6.63956 2.12558 6.91548 1.63034 7.4434 1.63034C7.87098 1.63034 8.2379 1.93748 8.3359 2.37736C8.34123 2.40165 8.34825 2.42552 8.3569 2.44879C8.42131 2.77265 8.45394 3.10226 8.45432 3.43272C8.45432 3.95058 8.3499 4.55772 8.16848 5.09939C8.11461 5.25914 8.13966 5.43562 8.23573 5.57322C8.3318 5.71082 8.48708 5.79261 8.65265 5.79284L11.4912 5.80296C11.5087 5.80534 11.5256 5.80712 11.5425 5.80772C11.8791 5.822 12.0891 5.93986 12.2466 6.20355C12.354 6.38442 12.4031 6.59508 12.3872 6.80593C12.3854 6.8321 12.3856 6.85837 12.3877 6.8845L12.3837 6.90236L12.3831 6.90296Z'\n                fill='#666C7C'\n              />\n            </svg>\n          </div>\n          <div\n            style={{\n              marginInlineEnd: 8,\n              ...iconStyle,\n            }}\n          >\n            <svg\n              width='14'\n              height='14'\n              viewBox='0 0 14 14'\n              fill='none'\n              xmlns='http://www.w3.org/2000/svg'\n            >\n              <path\n                d='M11.6666 1.75C12.311 1.75 12.8333 2.26557 12.8333 2.90155V11.5382C12.8333 11.9313 12.5104 12.25 12.1121 12.25C12.0002 12.25 11.8898 12.2243 11.7897 12.1749L8.41102 11.0839C8.24907 11.004 8.0705 10.9624 7.88944 10.9624H2.33329C1.68896 10.9624 1.16663 10.4468 1.16663 9.81085V2.90155C1.16663 2.26557 1.68896 1.75 2.33329 1.75H11.6666ZM11.0833 2.90155H2.91663C2.59446 2.90155 2.33329 3.15933 2.33329 3.47733V9.23508C2.33329 9.55307 2.59446 9.81085 2.91663 9.81085H7.88944C8.19982 9.81085 8.50655 9.87197 8.79183 9.99006L8.9326 10.0538L11.2947 10.7214C11.4495 10.7652 11.611 10.6767 11.6554 10.5239C11.6628 10.4981 11.6666 10.4714 11.6666 10.4446V3.47733C11.6666 3.15933 11.4055 2.90155 11.0833 2.90155ZM7.5832 6.93198C7.90533 6.93202 8.16645 7.18979 8.16645 7.50775C8.16645 7.82571 7.90533 8.08348 7.5832 8.08353H4.0832C3.76107 8.08348 3.49996 7.82571 3.49996 7.50775C3.49996 7.18979 3.76107 6.93202 4.0832 6.93198H7.5832ZM9.91654 4.62888C10.125 4.62884 10.3176 4.73858 10.4218 4.91674C10.526 5.0949 10.526 5.3144 10.4218 5.49256C10.3176 5.67072 10.125 5.78046 9.91654 5.78043H4.0832C3.76107 5.78038 3.49996 5.52261 3.49996 5.20465C3.49996 4.88669 3.76107 4.62892 4.0832 4.62888H9.91654Z'\n                fill='#666C7C'\n              />\n            </svg>\n          </div>\n          <div style={iconStyle}>\n            <svg\n              width='14'\n              height='14'\n              viewBox='0 0 14 14'\n              fill='none'\n              xmlns='http://www.w3.org/2000/svg'\n            >\n              <path\n                d='M12.1513 0.592407C12.2679 0.571526 12.3807 0.587559 12.48 0.6307C12.4836 0.633009 12.4876 0.634808 12.4917 0.636657C12.5519 0.663785 12.6065 0.701338 12.6537 0.746589C12.6566 0.749428 12.6596 0.752341 12.6626 0.755292L12.6712 0.764178C12.7165 0.811346 12.754 0.865931 12.7817 0.925713C12.7831 0.930218 12.7849 0.9343 12.7866 0.938397C12.8418 1.06357 12.8529 1.21109 12.8006 1.36048L12.8119 1.32526C12.8096 1.3333 12.8072 1.34131 12.8046 1.34926L12.8006 1.36048L8.92148 12.4438C8.74695 12.9425 8.05241 12.9708 7.83784 12.488L5.71206 7.70519L0.929811 5.58C0.470019 5.37564 0.473825 4.73594 0.905988 4.52472L0.974021 4.49635L12.0574 0.617187C12.0613 0.615824 12.0651 0.614504 12.069 0.613227C12.0766 0.610661 12.0846 0.608239 12.0926 0.605992C12.1093 0.601251 12.1257 0.597343 12.142 0.594157C12.1436 0.594178 12.1454 0.593853 12.1472 0.593537L12.1513 0.592407ZM10.8547 3.38798L6.84954 7.39315L8.30614 10.6697L10.8547 3.38798ZM10.0305 2.5614L2.74756 5.1111L6.02412 6.56773L10.0305 2.5614Z'\n                fill='#666C7C'\n              />\n            </svg>\n          </div>\n          <div style={{ ...iconStyle, marginInlineStart: 'auto' }}>\n            <svg\n              width='14'\n              height='14'\n              viewBox='0 0 14 14'\n              fill='none'\n              xmlns='http://www.w3.org/2000/svg'\n            >\n              <path\n                d='M2.91667 5.83331C3.561 5.83331 4.08333 6.35565 4.08333 6.99998C4.08333 7.64431 3.561 8.16665 2.91667 8.16665C2.27233 8.16665 1.75 7.64431 1.75 6.99998C1.75 6.35565 2.27233 5.83331 2.91667 5.83331ZM7 5.83331C7.64433 5.83331 8.16667 6.35565 8.16667 6.99998C8.16667 7.64431 7.64433 8.16665 7 8.16665C6.35567 8.16665 5.83333 7.64431 5.83333 6.99998C5.83333 6.35565 6.35567 5.83331 7 5.83331ZM11.0833 5.83331C11.7277 5.83331 12.25 6.35565 12.25 6.99998C12.25 7.64431 11.7277 8.16665 11.0833 8.16665C10.439 8.16665 9.91667 7.64431 9.91667 6.99998C9.91667 6.35565 10.439 5.83331 11.0833 5.83331Z'\n                fill='#666C7C'\n              />\n            </svg>\n          </div>\n        </div>\n      </Card.Footer>\n    </Card>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [
      "Header",
      "Body",
      "Footer",
      "Submit",
      "Accordion"
    ],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 13,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {
      "Header": {
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "align",
            "type": "\"left\" | \"center\" | \"right\"",
            "required": false,
            "description": "对齐方式"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "子元素"
          },
          {
            "name": "extra",
            "type": "ReactNode",
            "required": false,
            "description": "额外元素"
          }
        ]
      },
      "Body": {
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "子元素"
          }
        ]
      },
      "Footer": {
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "align",
            "type": "\"left\" | \"center\" | \"right\"",
            "required": false,
            "description": "对齐方式"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "子元素"
          }
        ]
      }
    }
  },
  "Carousel": {
    "name": "Carousel",
    "description": "轮播视图容器",
    "category": "other",
    "importPath": "import { Carousel } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "animation",
        "type": "\"slide\" | \"slide-y\" | \"fade\"",
        "required": false,
        "defaultValue": "\\\"slide\\\"",
        "description": "动画效果，可选值为 slide - 横向滑动 ，slide-y - 垂直滑动 ，fade - 淡入淡出"
      },
      {
        "name": "indicatorPosition",
        "type": "\"left\" | \"center\" | \"right\" | \"outer\"",
        "required": false,
        "defaultValue": "\\\"center\\\"",
        "description": "指示标示位置"
      },
      {
        "name": "indicatorType",
        "type": "\"number\" | ((current: number, moveTo: (index: number) => void) => ReactNode) | \"circle\" | \"line\" | \"bar\"",
        "required": false,
        "defaultValue": "\\\"circle\\\"",
        "description": "指示标示样式, 函数则可以自定义样式: (current, moveTo) => (<Component />)",
        "version": "3.6.0 新增bar类型"
      },
      {
        "name": "interval",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "动画间隔时间，为 0 时，不自动播放"
      },
      {
        "name": "onMove",
        "type": "((current: number, extra: { prev: number; direction: \"forward\" | \"backward\"; moveTo: (n: number) => void; }) => void)",
        "required": false,
        "description": "轮播后的回调"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素"
      },
      {
        "name": "showArrow",
        "type": "\"always\" | \"hover\"",
        "required": false,
        "description": "切换箭头显示时机"
      },
      {
        "name": "showIndicator",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示指示器",
        "version": "3.7.0"
      },
      {
        "name": "arrowClassName",
        "type": "string",
        "required": false,
        "description": "箭头扩展 class"
      },
      {
        "name": "itemClassName",
        "type": "string",
        "required": false,
        "description": "轮播项的 class"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的使用\n * en - Base\n *    -- The basic usage\n */\nimport React from 'react';\nimport { Carousel } from 'shineout';\n\nconst images = [\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n];\nconst App: React.FC = () => {\n  return (\n    <Carousel\n      style={{ width: 600, height: 280 }}\n      showArrow={'hover'}\n      interval={5000}\n      onMove={console.log}\n    >\n      {images.map((src) => (\n        <img key={src} src={src} />\n      ))}\n    </Carousel>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-indicator",
        "title": "cn - 指示器",
        "code": "/**\n * cn - 指示器\n *    -- 可以指定指示器类型和位置\n * en - Indicator\n *    -- You can set indicator type and position\n */\nimport React, { useState } from 'react';\nimport { Carousel, Radio, TYPE } from 'shineout';\n\ntype CarouselProps = TYPE.Carousel.Props;\ntype CarouselIndicatorType = CarouselProps['indicatorType'];\ntype CarouselIndicatorPosition = CarouselProps['indicatorPosition'];\n\nconst images = [\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n];\nconst App: React.FC = () => {\n  const [indicatorType, setIndicatorType] = useState<CarouselIndicatorType>('circle');\n  const [indicatorPosition, setIndicatorPosition] = useState<CarouselIndicatorPosition>('center');\n\n  const rowStyle = { display: 'flex', marginBottom: 16, alignItems: 'center' };\n  return (\n    <div>\n      <div style={rowStyle}>\n        <div style={{ width: 150 }}>indicator position:</div>\n        <Radio.Group\n          keygen\n          value={indicatorPosition}\n          data={['left', 'center', 'right', 'outer']}\n          onChange={(v) => setIndicatorPosition(v)}\n        />\n      </div>\n      <div style={rowStyle}>\n        <div style={{ width: 150 }}>indicator type:</div>\n        <Radio.Group\n          keygen\n          value={indicatorType}\n          data={['circle', 'line', 'bar', 'number']}\n          onChange={(v) => setIndicatorType(v)}\n        />\n      </div>\n\n      <Carousel\n        style={{ width: 600, height: 280 }}\n        indicatorPosition={indicatorPosition}\n        indicatorType={indicatorType}\n        interval={3000}\n      >\n        {images.map((src) => (\n          <img key={src} src={src} />\n        ))}\n      </Carousel>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-animation",
        "title": "cn - 切换方向",
        "code": "/**\n * cn - 切换方向\n *    -- 轮播组件提供了三种动画过渡方式，可以切换选项查看效果\n * en - Animation\n *    -- The carousel component provides three animation transition modes, you can switch options to see the effect\n */\nimport React, { useState } from 'react';\nimport { Carousel, Radio, TYPE } from 'shineout';\n\ntype CarouselProps = TYPE.Carousel.Props;\n\nconst images = [\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-02.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-03.png',\n  'https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-04.png',\n];\nconst App: React.FC = () => {\n  const [animationType, setAnimation] = useState<CarouselProps['animation']>('slide');\n\n  const rowStyle = { display: 'flex', marginBottom: 16, alignItems: 'center' };\n  return (\n    <div>\n      <div style={rowStyle}>\n        <div style={{ width: 150 }}>animation type:</div>\n        <Radio.Group\n          keygen\n          value={animationType}\n          data={['slide', 'slide-y', 'fade']}\n          onChange={(v) => setAnimation(v)}\n        />\n      </div>\n\n      <Carousel style={{ width: 600, height: 280 }} interval={3000} animation={animationType}>\n        {images.map((src) => (\n          <img key={src} src={src} />\n        ))}\n      </Carousel>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-custom",
        "title": "cn - 自定义 Indicator",
        "code": "/**\n * cn - 自定义 Indicator\n *    -- 当 indicatorType 为函数时，可以自定义 Indicator\n * en - Custom Indicator\n *    -- Indicators can be customized when indicatorType is a function\n */\nimport React from 'react';\nimport { Carousel, TYPE } from 'shineout';\nimport classnames from 'classnames';\n\nrequire('./style-2-custom-indicator.css');\n\ntype CarouselProps = TYPE.Carousel.Props;\ntype CarouselInterval = CarouselProps['interval'];\ntype CarouselIndicatorType = CarouselProps['indicatorType'];\n\nconst containerStyle = {\n  fontSize: 40,\n  color: '#fff',\n  display: 'flex',\n  margin: 'auto',\n};\nconst items = ['S', 'H', 'I', 'N', 'E'];\nconst duration: CarouselInterval = 5000;\n\nconst App: React.FC = () => {\n  const indicatorSwitch: CarouselIndicatorType = (current, moveTo) => (\n    <div className='indicator'>\n      {items.map((item, index) => {\n        const isActive = current === index;\n        const itemClassname = classnames('indicator-item', isActive && 'active');\n        const animationStyle = isActive\n          ? { animation: `indicator-rise ${duration / 1000}s linear` }\n          : {};\n        return (\n          <div key={item} onClick={() => moveTo(index)} className={itemClassname}>\n            <span>{item}</span>\n            <div className='indicator-progress'>\n              <div className='fg' style={animationStyle} />\n              <div className='bg' />\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  return (\n    <Carousel\n      indicatorType={indicatorSwitch}\n      style={{ width: 600, height: 280 }}\n      interval={duration}\n    >\n      {items.map((item) => (\n        <div key={item} style={{ background: '#2e97f1', display: 'flex' }}>\n          <div style={containerStyle}>{item}</div>\n        </div>\n      ))}\n    </Carousel>\n  );\n};\n\nexport default App;\n\n/* style-2-custom-indicator.css\n@keyframes indicator-rise {\n  from {\n    width: 0;\n  }\n  to {\n    width: 100%;\n  }\n}\ndiv.indicator {\n  text-align: center;\n  user-select: none;\n  float: left;\n}\ndiv.indicator-item {\n  margin-right: 10px;\n  float: left;\n  width: 36px;\n  height: 30px;\n  font-size: 20px;\n  color: #ffffff50;\n  cursor: pointer;\n}\ndiv.indicator-item.active {\n  color: #fff;\n}\ndiv.indicator .indicator-progress {\n  position: relative;\n}\ndiv.indicator .indicator-progress > div {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  border-radius: 1000px;\n}\ndiv.indicator .indicator-progress .bg {\n  width: 100%;\n  background: #ffffff50;\n}\ndiv.indicator .indicator-progress .fg {\n  width: 0;\n  background: #ffffff;\n}\n*/\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 12,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Cascader": {
    "name": "Cascader",
    "description": "对于相关联的数据集，可采用多级分类的级联选择方式",
    "category": "other",
    "importPath": "import { Cascader } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "innerTitle",
        "type": "ReactNode",
        "required": false,
        "description": "内嵌标题"
      },
      {
        "name": "filterSameChange",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "当两次选择的值相同时不触发 onChange"
      },
      {
        "name": "absolute",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1000",
        "description": "选项列表 z-index 值, 需要配合 absolute"
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "开启多选"
      },
      {
        "name": "mode",
        "type": "0 | 1 | 2 | 3 | 4",
        "required": false,
        "description": "选中值模式，未设置值为单选 0: 只返回完全选中的节点，包含父节点 1: 返回全部选中的节点和半选中的父节点 2: 只返回选中的子节点 3: 如果父节点选中，只返回父节点 4: 所选即所得"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "输入框宽度"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "控制浮层显隐"
      },
      {
        "name": "value",
        "type": "Value",
        "required": false,
        "description": "选中的 key （受控)。注意，请勿将 undefined 和 null 作为有意义的选项值，当 value 类型为 undefined 和 null 时，组件将不处理数据和渲染"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认选中的 key"
      },
      {
        "name": "data",
        "type": "any[]",
        "required": false,
        "description": "数据，子节点为children，如果 children 值为 null 或 长度为 0 时，视为叶子节点"
      },
      {
        "name": "childrenKey",
        "type": "ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "\\\"children\\\"",
        "description": "指定子数据的属性名"
      },
      {
        "name": "final",
        "type": "boolean",
        "required": false,
        "description": "单选只支持选末级节点"
      },
      {
        "name": "filterDelay",
        "type": "number",
        "required": false,
        "defaultValue": "\\\"children\\\"",
        "description": "用户输入触发 fitler 事件的延时，单位为毫秒。"
      },
      {
        "name": "renderOptionList",
        "type": "((list: ReactElement, info: { loading: boolean; }) => ReactElement)",
        "required": false,
        "description": "自定义渲染下拉列表"
      },
      {
        "name": "renderUnmatched",
        "type": "((data: any) => ReactNode)",
        "required": false,
        "description": "渲染未匹配值的方式"
      },
      {
        "name": "height",
        "type": "number",
        "required": false,
        "defaultValue": "300",
        "description": "下拉列表高度"
      },
      {
        "name": "unmatch",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示data中不存在的值"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示清除数据图标"
      },
      {
        "name": "wideMatch",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "开启 wideMatch 后，将筛选出所有可能的匹配项目"
      },
      {
        "name": "showArrow",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示下拉箭头，仅针对单选情况"
      },
      {
        "name": "finalDismiss",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "选择末级节点后是否关闭选项列表"
      },
      {
        "name": "singleRemove",
        "type": "boolean",
        "required": false,
        "description": "支持单个节点删除"
      },
      {
        "name": "compressedBound",
        "type": "number",
        "required": false,
        "description": "开启多选后，指定允许展示标签数量，超过后将折叠"
      },
      {
        "name": "loading",
        "type": "boolean | ReactNode",
        "required": false,
        "description": "下拉列表加载状态"
      },
      {
        "name": "compressed",
        "type": "boolean | \"no-repeat\" | \"hide-popover\"",
        "required": false,
        "defaultValue": "false",
        "description": "将选中值合并。为\\\"no-repeat\\\"时弹出框中不重复展示值"
      },
      {
        "name": "renderCompressed",
        "type": "((options: { data: DataItem[], onRemove: (item: DataItem) => void }) => ReactNode)",
        "required": false,
        "description": "自定义渲染折叠内容，其中 data 为选中的数据，onRemove 为删除事件",
        "version": "3.5.0"
      },
      {
        "name": "onCollapse",
        "type": "((collapse: boolean) => void)",
        "required": false,
        "description": "下拉列表展开/收起回调"
      },
      {
        "name": "loader",
        "type": "((key: string | number, data: DataItem) => void)",
        "required": false,
        "description": "设置 loader 属性后，未定义 children 的节点视为动态加载节点，点击展开触发 loader 事件，children 为 null 或者长度为 0 视为叶子节点"
      },
      {
        "name": "disabled",
        "type": "boolean | ((data: DataItem) => boolean) | { disabled: (data: DataItem) => boolean, isRealtime: boolean }",
        "required": false,
        "defaultValue": "false",
        "description": "当 disabled 为 true 时，禁用整个选择框。如果 disabled 为函数，根据函数反回结果禁用选项。出于性能考虑，默认情况下 disabled 只会在初始化时调用一次，如果 disabled 为函数且内部依赖外部状态，可以使用配置模式，将 disabled 设置为对象，对象中包含 disabled 函数 和 isRealtime 属性，当 isRealtime 为 true 时，每次状态更新都会调用 disabled 函数重新计算禁用状态"
      },
      {
        "name": "expandTrigger",
        "type": "\"click\" | \"hover\" | \"hover-only\"",
        "required": false,
        "defaultValue": "\\\"click\\\"",
        "description": "节点展开触发方式"
      },
      {
        "name": "onChange",
        "type": "((value: Value, selected?: DataItem ) => void)",
        "required": false,
        "description": "设置 onChange 属性时，显示 选择框。参数为当前选中值，和 mode 属性相关"
      },
      {
        "name": "onFilter",
        "type": "((text: string) => void | ((data: DataItem) => boolean) )",
        "required": false,
        "description": "onFilter 不为空时，可以输入过滤数据;onFilter 如果返回一个函数，使用这个函数做前端过滤;如果不返回，可以自行做后端过滤;单选状态下支持"
      },
      {
        "name": "keygen",
        "type": "ObjectKey<DataItem> | ((data: DataItem, parentKey?: string | number ) => string | number)",
        "required": true,
        "defaultValue": "index",
        "description": "生成 key 的辅助方法, 为函数时，使用此函数返回值, 为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d) => d.id"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((data: DataItem, active?: boolean , id?: string | number ) => ReactNode)",
        "required": true,
        "defaultValue": "d => d",
        "description": "当 renderItem 为 string 时，返回 DataItem\\\\[string]。 若为函数时，则返回函数结果"
      },
      {
        "name": "renderResult",
        "type": "ObjectKey<DataItem> | ((data: DataItem, row: DataItem[]) => ReactNode)",
        "required": false,
        "defaultValue": "renderItem",
        "description": "选中后在结果中显示的内容，默认和 renderItem 相同"
      },
      {
        "name": "onBlur",
        "type": "((e?: KeyboardEvent<HTMLDivElement> ) => void)",
        "required": false,
        "description": "失焦事件"
      },
      {
        "name": "onFocus",
        "type": "((e?: KeyboardEvent<HTMLDivElement> ) => void)",
        "required": false,
        "description": "聚焦事件"
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": "占位符"
      },
      {
        "name": "emptyAfterSelect",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "选中后是否清空输入框内容"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示边框"
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "description": "是否只展示下边框"
      },
      {
        "name": "resultClassName",
        "type": "string | ((value: DataItem) => string)",
        "required": false,
        "description": "选中结果内容容器的className"
      },
      {
        "name": "compressedClassName",
        "type": "string",
        "required": false,
        "description": "多选合并展示弹出框的类名"
      },
      {
        "name": "focusSelected",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "onFilter 在多选情况下点击选项后是否选中过滤文本"
      },
      {
        "name": "hideTag",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "隐藏标签样式，默认情况下展示结果以标签模式分割，隐藏标签样式后可通过自定义 renderResult 渲染分割结果"
      },
      {
        "name": "getComponentRef",
        "type": "((comp: CascaderRef) => void) | { current: CascaderRef ; }",
        "required": false,
        "description": "绑定组件的引用, 可以调用某些组件的方法"
      },
      {
        "name": "adjust",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启自动调整面板位置功能。当面板被窗口遮挡时，自动调整位置"
      },
      {
        "name": "virtual",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否使用虚拟列表",
        "version": "3.5.0"
      },
      {
        "name": "emptyText",
        "type": "ReactNode",
        "required": false,
        "description": "自定义 empty 文案。与 renderOptionList 搭配使用时，emptyText 设置为 false 后将忽略该功能，如需渲染空内容可在 renderOptionList 中处理",
        "version": "3.6.0"
      },
      {
        "name": "highlight",
        "type": "boolean",
        "required": false,
        "description": "开启搜索关键字高亮功能",
        "version": "3.7.0"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "01-01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基础级联选择器的用法\n * en - Basic\n *    -- Basic usage of cascader\n */\nimport React from 'react';\nimport { Cascader } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Cascader\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "01-02-base",
        "title": "cn -",
        "code": "/**\n * cn -\n *    -- 通过`renderResult`支持自定义渲染结果\n * en -\n *    -- Support custom rendering results through `renderResult`\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const renderResult: CascaderProps['renderResult'] = (node) => {\n    return node.value.toLocaleUpperCase();\n  };\n\n  return (\n    <div>\n      <Cascader\n        width={300}\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        renderResult={renderResult}\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "01-03-base",
        "title": "cn -",
        "code": "/**\n * cn -\n *    -- 通过`hideTag`取消默认的标签分割样式，配合`renderResult`自定义渲染实现丰富的展示效果\n * en -\n *    -- Cancel the default tag split style through `hideTag`, and customize the rendering to achieve a rich display effect\n */\nimport React from 'react';\nimport { Cascader, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const renderResult: CascaderProps['renderResult'] = (node) => {\n    return node.value;\n  };\n\n  return (\n    <div>\n      <Cascader\n        width={300}\n        hideTag\n        clearable\n        placeholder='Please select city'\n        data={data}\n        keygen='value'\n        onChange={v=>console.log(v)}\n        renderResult={renderResult}\n        renderItem={(n) => `${n?.value}`}\n      />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-01-multiple",
        "title": "cn - 多选",
        "code": "/**\n * cn - 多选\n *    -- 开启 `multiple` 属性或者设置 `mode` 属性可以选择多个值\n *    -- 模式为 0 时，返回完全选中的节点，包含父节点\n *    -- 模式为 1 时，返回选中、半选中的节点\n *    -- 模式为 2 时，只返回叶子节点\n *    -- 模式为 3 时，只返回完全选中的父节点\n *    -- 模式为 4 时，所选即所得，没有上下级关系\n * en - Basic\n *    --\n */\nimport React, { useState } from 'react';\nimport { Cascader, Radio, TYPE } from 'shineout';\n\ntype CascaderProps = TYPE.Cascader.Props<DataItem, string[]>;\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n          {\n            value: 'yuhuatai',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst radio = [\n  {\n    mode: 'full',\n    value: 0,\n  },\n  {\n    mode: 'half',\n    value: 1,\n  },\n  {\n    mode: 'child only',\n    value: 2,\n  },\n  {\n    mode: 'shallow',\n    value: 3,\n  },\n  {\n    mode: 'freedom',\n    value: 4,\n  },\n];\n\nexport default () => {\n  const [value, setValue] = useState<CascaderProps['value']>([]);\n  const [mode, setMode] = useState<0 | 1 | 2 | 3 | 4>(0);\n\n  const handleModeChange = (v: any) => {\n    setMode(v.value);\n    setValue([]);\n  };\n\n  const handleChange: CascaderProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <Radio.Group\n        size='small'\n        keygen='value'\n        prediction={(item, v) => item === v.value}\n        value={mode}\n        onChange={handleModeChange}\n        renderItem={(item) => `模式 ${item.value}`}\n        data={radio}\n        style={{ marginBottom: 24 }}\n      />\n\n      <div style={{ display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          <Cascader\n            clearable\n            multiple\n            singleRemove\n            mode={mode}\n            width={300}\n            placeholder='Please select city'\n            data={data}\n            keygen='value'\n            value={value}\n            onChange={handleChange}\n            renderItem={(n) => `${n?.value}`}\n          />\n        </div>\n        <pre\n          style={{\n            flex: 1,\n            margin: 10,\n            background: '#1d1d1d',\n            color: '#94d5fc',\n            borderRadius: 4,\n            padding: 10,\n          }}\n        >\n          <div style={{ marginBottom: 10 }}>\n            <code style={{ color: '#5D8E4E' }}>\n              <span>/</span>\n              <span>/</span> DataItem[]\n            </code>\n          </div>\n          {value && value.length > 0 && <code>{JSON.stringify(value, null, 2)}</code>}\n          {!value || (value.length === 0 && <code style={{ color: '#757575' }}>no data</code>)}\n        </pre>\n      </div>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-02-multiple-all",
        "title": "cn - 全选",
        "code": "/**\n * cn - 全选\n *    -- 使用 `renderOptionList` 属性自定义下拉面板，可以自定义实现全选功能\n * en - Custom dropdown panel\n *    -- Use the `renderOptionList` property to customize the dropdown panel, and you can customize the implementation of the select all function\n */\nimport React from 'react';\nimport { Cascader, Checkbox } from 'shineout';\n\ninterface DataItem {\n  value: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = [\n  {\n    value: 'jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        children: [\n          {\n            value: 'jiangning',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'anhui',\n    children: [\n      {\n        value: 'hefei',\n        children: [\n          {\n            value: 'feidong',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const [full, setFull] = React.useState<'indeterminate' | boolean | undefined>();\n  const [checked, setChecked] = React.useState<string[]>([]);\n  const rootIds = data.map((d) => d.value);\n\n  React.useEffect(() => {\n    setFull(\n      rootIds.every((id) => checked.includes(id))\n        ? true\n        : checked.length > 0\n        ? 'indeterminate'\n        : false,\n    );\n  }, [checked]);\n\n  React.useEffect(() => {\n    if (full === true) {\n      setChecked(rootIds);\n    } else if (!full) {\n      setChecked([]);\n    }\n  }, [full]);\n\n  return (\n    <Cascader\n      width={300}\n      mode={3}\n      clearable\n      multiple\n      value={checked}\n      onChange={(v) => {\n        setChecked(v);\n      }}\n      placeholder='Please select city'\n      data={data}\n      keygen='value'\n      renderItem={(n) => `${n?.value}`}\n      renderOptionList={(list) => (\n        <div>\n          <div\n            style={{\n              padding: '5px 12px',\n              borderBottom:\n                '1px solid var(--soui-cascader-list-border-color,var(--soui-neutral-border-1,#E8EBF0))',\n            }}\n          >\n            <Checkbox checked={full} onChange={setFull} style={{ display: 'flex' }}>\n              全选\n            </Checkbox>\n          </div>\n          {list}\n        </div>\n      )}\n    />\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 63,
      "requiredProps": 2,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Checkbox": {
    "name": "Checkbox",
    "description": "在一组数据中，用户可通过复选框选择一个或多个数据",
    "category": "other",
    "importPath": "import { Checkbox } from 'shineout'",
    "props": [
      {
        "name": "onChange",
        "type": "((value: T , checked: boolean, raw: T) => void)",
        "required": false,
        "description": "值改变回调函数"
      },
      {
        "name": "checked",
        "type": "boolean | \"indeterminate\" | ((d: T) => boolean | \"indeterminate\")",
        "required": false,
        "description": "checked 传入时为受控组件"
      },
      {
        "name": "defaultChecked",
        "type": "boolean | \"indeterminate\"",
        "required": false,
        "description": "默认选中状态"
      },
      {
        "name": "onClick",
        "type": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void)",
        "required": false,
        "description": "勾选框点击回调"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "inputRef",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "获取input dom"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "内容"
      },
      {
        "name": "htmlValue",
        "type": "any",
        "required": false,
        "defaultValue": "true",
        "description": "选中后返回的值"
      },
      {
        "name": "onRawChange",
        "type": "((value: T , checked: boolean, raw: T) => void)",
        "required": false,
        "description": "值改变回调函数"
      },
      {
        "name": "value",
        "type": "any",
        "required": false,
        "description": "如果 checked 未设置，checked 状态为 value === htmlValue"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认值和 value 类型相同"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "001-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基本的 Checkbox\n * en - Base\n *    -- Basic Checkbox\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => <Checkbox>Checkbox</Checkbox>;\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "001-size",
        "title": "cn - 尺寸",
        "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性改变组件的尺寸大小, 内置三种尺寸：small、default、large\n * en - Base\n *    -- Set the size property to change the size of the component. There are three built-in sizes: small, default, and large\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', alignItems: 'center' }}>\n    <Checkbox size={'small'}>Checkbox</Checkbox>\n    <Checkbox>Checkbox</Checkbox>\n    <Checkbox size={'large'}>Checkbox</Checkbox>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "002-checked-1",
        "title": "cn - 状态",
        "code": "/**\n * cn - 状态\n *    -- checked 有三个值，选中(true)、未选中(false)、半选中('indeterminate')，checked 设置时为受控组件（此示例没有处理 onChange 事件）\n * en - Checked\n *    -- The checked has three values: true(checked), false(not checked), 'indeterminate'(half-checked)\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <div style={{ marginBottom: 12, lineHeight: 0 }}>\n      <Checkbox checked={false}>not checked</Checkbox>\n      <Checkbox checked>checked</Checkbox>\n      <Checkbox checked='indeterminate'>indeterminate</Checkbox>\n    </div>\n\n    <div style={{ lineHeight: 0 }}>\n      <Checkbox checked={false} disabled>\n        not checked\n      </Checkbox>\n      <Checkbox checked disabled>\n        checked\n      </Checkbox>\n      <Checkbox checked='indeterminate' disabled>\n        indeterminate\n      </Checkbox>\n    </div>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "002-checked-2",
        "title": "cn - 全选/半选",
        "code": "/**\n * cn - 全选/半选\n *    -- 通过设置 checked = 'indeterminate' 属性，可以实现半选效果\n * en - Check all\n *    -- Set checked = 'indeterminate' to achieve half-check effect\n */\nimport React, { useState } from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = ['Option1', 'Option2', 'Option3'];\nconst getChecked = (value: string[], num: number) => {\n  if (value.length === num) return true;\n  if (value.length === 0) return false;\n  return 'indeterminate';\n};\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<string[]>([]);\n  return (\n    <div>\n      <Checkbox\n        checked={getChecked(value, data.length)}\n        onChange={(v) => {\n          if (v) {\n            setValue(data);\n          } else {\n            setValue([]);\n          }\n        }}\n      >\n        {getChecked(value, data.length) === true ? 'UnCheckAll' : 'CheckAll'}\n      </Checkbox>\n      <Checkbox.Group\n        style={{ marginTop: 12 }}\n        data={data}\n        keygen\n        value={value}\n        onChange={setValue}\n      />\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "003-value",
        "title": "cn - 选中值",
        "code": "/**\n * cn - 选中值\n *    -- 未设置htmlValue的状态下，checkbox选中时返回true，如果设置 htmlValue，返回 htmlValue。未选中状态都是返回 undefined\n * en - Value\n *    -- When the htmlValue is set, the checkbox return the htmlValue (checked) and undefined (not checked)\n *    -- When the htmlValue is not set, the checkbox selected return true (checked) and undefined (not checked)\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <Checkbox htmlValue='ok' onChange={console.log}>\n    {'value is \"ok\"'}\n  </Checkbox>\n);\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 20,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Collapse": {
    "name": "Collapse",
    "description": "对内容进行分组和归类，将次要信息隐藏",
    "category": "other",
    "importPath": "import { Collapse } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "expandIcon",
        "type": "ReactNode",
        "required": false,
        "description": "展开图标"
      },
      {
        "name": "triggerRegion",
        "type": "\"icon\" | \"header\" | \"disabled\"",
        "required": false,
        "description": "触发展开折叠的区域"
      },
      {
        "name": "active",
        "type": "string | string[]",
        "required": false,
        "description": "当前展开的面板,受控"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示边框"
      },
      {
        "name": "expandIconPosition",
        "type": "\"left\" | \"right\"",
        "required": false,
        "defaultValue": "\\\"left\\\"",
        "description": "折叠图标位置"
      },
      {
        "name": "extraPosition",
        "type": "\"left\" | \"right\"",
        "required": false,
        "defaultValue": "\\\"right\\\"",
        "description": "扩展内容位置"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "折叠面板内的内容"
      },
      {
        "name": "animation",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启折叠动画",
        "version": "3.6.0"
      },
      {
        "name": "defaultActive",
        "type": "string | string[]",
        "required": false,
        "description": "默认展开的面板"
      },
      {
        "name": "accordion",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启手风琴模式"
      },
      {
        "name": "onChange",
        "type": "((active: string, actives: string[], e: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "展开面板改变时触发回调"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基础折叠面板，可自定义面板内容\n * en - Basic\n *    -- Basic collapse, you can customize the content of the panel\n */\nimport React from 'react';\nimport { Collapse } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Collapse defaultActive={['1', '3']} style={{ maxWidth: 1180 }}>\n        <Collapse.Item title='This is panel header 1' keygen='0'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item title='This is panel header 2' keygen='1'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 3' keygen='2' disabled>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 4' keygen='3' disabled>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-accordion",
        "title": "cn - 手风琴模式",
        "code": "/**\n * cn - 手风琴模式\n *    -- 手风琴模式，每次只能展开一个面板\n * en - accordion\n *    -- Accordion mode, only one panel can be expanded at a time\n */\nimport React from 'react';\nimport { Collapse } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Collapse accordion style={{ maxWidth: 1180 }}>\n        <Collapse.Item title='This is panel header 1' keygen='0'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item title='This is panel header 2' keygen='1'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 3' keygen='2'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 4' keygen='3'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-nestedPanels",
        "title": "cn - 嵌套面板",
        "code": "/**\n * cn - 嵌套面板\n *    -- 嵌套面板\n * en - Nested panels\n *    -- Nested panels\n */\nimport React from 'react';\nimport { Collapse } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Collapse style={{ maxWidth: 1180 }} defaultActive={['0']}>\n        <Collapse.Item title='This is panel header 1' keygen='0'>\n          <Collapse defaultActive={['1']}>\n            <Collapse.Item title='This is panel nest header 2' keygen='1'>\n              Joy in living comes from having fine emotions, trusting them, giving them the freedom\n              of a bird in the open. Joy in living can never be assumed as a pose, or put on from\n              the outside as a mask. People who have this joy do not need to talk about it; they\n              radiate it. They just live out their joy and let it splash its sunlight and glow into\n              other lives as naturally as bird sings.\n            </Collapse.Item>\n\n            <Collapse.Item title='This is panel nest header 3' keygen='2'>\n              Joy in living comes from having fine emotions, trusting them, giving them the freedom\n              of a bird in the open. Joy in living can never be assumed as a pose, or put on from\n              the outside as a mask. People who have this joy do not need to talk about it; they\n              radiate it. They just live out their joy and let it splash its sunlight and glow into\n              other lives as naturally as bird sings.\n            </Collapse.Item>\n          </Collapse>\n        </Collapse.Item>\n        <Collapse.Item title='This is panel header 2' keygen='3'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 3' keygen='4'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n\n        <Collapse.Item title='This is panel header 4' keygen='5'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-simplePanel",
        "title": "cn - 简洁面板",
        "code": "/**\n * cn - 简洁面板\n *    -- 无边框的简洁模式\n * en - Simple panel\n *    -- Simple mode without border\n */\nimport React from 'react';\nimport { Collapse } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Collapse defaultActive={['0']} style={{ maxWidth: 1180 }} border={false}>\n        <Collapse.Item title='This is panel header 1' keygen='0'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item title='This is panel header 2' keygen='1'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item title='This is panel header 3' keygen='2'>\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "05-customize",
        "title": "cn - 自定义面板样式",
        "code": "/**\n * cn - 自定义面板样式\n *    -- 可自定义标题背景色、内容背景色、折叠图标等\n * en - Customize\n *    -- You can customize the title background color, content background color, collapse icon, etc\n */\nimport React from 'react';\nimport { Collapse } from 'shineout';\n\nexport default () => {\n  const arrowIcon = (\n    <svg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'>\n      <path\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M10.6957 5.75207L16.2694 11.3386C16.6589 11.7289 16.6589 12.3609 16.2694 12.7512L10.7576 18.2751C10.3675 18.6661 9.73435 18.6668 9.3434 18.2767C9.15675 18.0904 9.05121 17.838 9.04974 17.5744L8.98776 6.46395C8.98467 5.91168 9.42988 5.46147 9.98216 5.45839C10.2497 5.4569 10.5067 5.56268 10.6957 5.75207Z'\n        fill='#666C7C'\n      />\n    </svg>\n  );\n\n  return (\n    <div>\n      <Collapse defaultActive={['1']} style={{ maxWidth: 1180 }} expandIcon={arrowIcon}>\n        <Collapse.Item\n          title='This is panel header 1'\n          keygen='0'\n          style={{ background: '#F4F5F8' }}\n          contentStyle={{ background: '#FFFFFF' }}\n        >\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item\n          title='This is panel header 2'\n          keygen='1'\n          style={{ background: '#F4F5F8' }}\n          contentStyle={{ background: '#FFFFFF' }}\n        >\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n        <Collapse.Item\n          title='This is panel header 3'\n          keygen='2'\n          disabled\n          style={{ background: '#F4F5F8' }}\n          contentStyle={{ background: '#FFFFFF' }}\n        >\n          Joy in living comes from having fine emotions, trusting them, giving them the freedom of a\n          bird in the open. Joy in living can never be assumed as a pose, or put on from the outside\n          as a mask. People who have this joy do not need to talk about it; they radiate it. They\n          just live out their joy and let it splash its sunlight and glow into other lives as\n          naturally as bird sings.\n        </Collapse.Item>\n      </Collapse>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 13,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "DatePicker": {
    "name": "DatePicker",
    "description": "选择日期。支持年、月、季度、周、日类型，支持范围选择等",
    "category": "other",
    "importPath": "import { DatePicker } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "innerTitle",
        "type": "ReactNode",
        "required": false,
        "description": "内嵌标题"
      },
      {
        "name": "placeTitle",
        "type": "ReactNode",
        "required": false,
        "description": "占位标题，需要配合 innerTitle 一起使用"
      },
      {
        "name": "absolute",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1000",
        "description": "选项列表 z-index 值, 需要配合 absolute"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "额外渲染的节点"
      },
      {
        "name": "disabled",
        "type": "boolean | ((date: Date, type?: \"start\" | \"end\" , value0?: Date , value1?: Date ) => boolean) | (boolean | ((date: Date) => boolean))[]",
        "required": false,
        "defaultValue": "false",
        "description": "如果 disabled 为 true，禁用全部选项，如果 disabled 为函数，根据函数反回结果禁用选项"
      },
      {
        "name": "disabledTime",
        "type": "string | ((time: string, type?: \"start\" | \"end\" , value0?: Date , value1?: Date ) => boolean)",
        "required": false,
        "description": "禁用指定 Time。"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "控制浮层显隐"
      },
      {
        "name": "onCollapse",
        "type": "((collapse: boolean) => void)",
        "required": false,
        "description": "下拉列表展开/收起回调"
      },
      {
        "name": "align",
        "type": "\"left\" | \"right\" | \"center\"",
        "required": false,
        "defaultValue": "\\\"center\\\"",
        "description": "值水平排布方式"
      },
      {
        "name": "timeZone",
        "type": "string",
        "required": false,
        "description": "设置默认时区,格式为/^([+-]\\\\d{2})$/ 支持 \\\"-12\\\" 到 \\\"+13\\\""
      },
      {
        "name": "position",
        "type": "\"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"",
        "required": false,
        "description": "弹出框位置"
      },
      {
        "name": "type",
        "type": "\"date\" | \"time\" | \"datetime\" | \"month\" | \"week\" | \"quarter\" | \"year\"",
        "required": false,
        "defaultValue": "\\\"date\\\"",
        "description": "时间类型"
      },
      {
        "name": "format",
        "type": "string",
        "required": false,
        "description": "不同type对应的默认值。\\\"date\\\": \\\"YYYY-MM-DD\\\"; \\\"time\\\": \\\"HH:mm:ss\\\"; \\\"week\\\": \\\"GGGG WW\\\"; \\\"month\\\": \\\"YYYY-MM\\\"; \\\"quarter\\\": \\\"YYYY-\\\\[Q]Q\\\";  \\\"year\\\": \\\"YYYY\\\"; \\\"datetime\\\": \\\"YYYY-MM-DD HH:mm:ss\\\""
      },
      {
        "name": "formatResult",
        "type": "string | ((date?: Date ) => string)",
        "required": false,
        "defaultValue": "props.format",
        "description": "对选中时间进行格式化"
      },
      {
        "name": "range",
        "type": "number | boolean",
        "required": false,
        "description": "范围跨度，单位 秒，为 true 时表示不限制选择范围"
      },
      {
        "name": "value",
        "type": "Value",
        "required": false,
        "description": "值为 string 时，需要和 format 属性匹配。非 string 会格式化为 string。range 属性为 true 时，值为长度为2的数组"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认值  和 value 类型相同"
      },
      {
        "name": "onChange",
        "type": "((value: Value extends any[] ? string[] : string) => void)",
        "required": false,
        "description": "值改变回调函数"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示清除数据图标"
      },
      {
        "name": "clearWithUndefined",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "清空值时抛出 undefined"
      },
      {
        "name": "clearToUndefined",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "点击清除按钮后数据变为 undefined",
        "version": "3.4.0"
      },
      {
        "name": "allowSingle",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否允许单选, 仅在 range 模式下有效"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示边框"
      },
      {
        "name": "defaultRangeMonth",
        "type": "(Date | number | string )[]",
        "required": false,
        "description": "使用 defaultPickerValue 代替"
      },
      {
        "name": "defaultPickerValue",
        "type": "Date | number | string | (Date | number | string )[]",
        "required": false,
        "description": "面板默认时间，在未选择日期时生效"
      },
      {
        "name": "placeholder",
        "type": "string | string[]",
        "required": false,
        "description": "占位文字。range 属性不为空时，为长度为2的数组"
      },
      {
        "name": "defaultTime",
        "type": "DateTimeType | DateTimeType[]",
        "required": false,
        "description": "选择日期时默认的时间, 格式为: \\\"HH:mm:ss\\\""
      },
      {
        "name": "min",
        "type": "Date | number | string",
        "required": false,
        "description": "可选最小值"
      },
      {
        "name": "max",
        "type": "Date | number | string",
        "required": false,
        "description": "可选最大值"
      },
      {
        "name": "hourStep",
        "type": "number",
        "required": false,
        "description": "小时选项步长"
      },
      {
        "name": "minuteStep",
        "type": "number",
        "required": false,
        "description": "分钟选项步长"
      },
      {
        "name": "secondStep",
        "type": "number",
        "required": false,
        "description": "秒选项步长"
      },
      {
        "name": "quickSelect",
        "type": "{name: string, value: Value}[]",
        "required": false,
        "description": "快速选择, 仅在 range 模式下有效, name: 文字提示, value: 时间范围, immediate: 选择后是否立刻关闭面板",
        "version": "3.4.4 新增 immediate 配置项"
      },
      {
        "name": "showSelNow",
        "type": "boolean",
        "required": false,
        "description": "是否展示今天或者此刻按钮"
      },
      {
        "name": "inputable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "可输入"
      },
      {
        "name": "onPickerChange",
        "type": "((value: DateTimeType | DateTimeType[], quickSelectItem: void | { name: ReactNode, immediate?: boolean , value: DateTimeType | DateTimeType[] | (() => DateTimeType | DateTimeType[]) } , areaType: \"year\" | \"month\" | \"week\" | \"day\" | \"time\" | \"quick\" | \"quarter\") => void)",
        "required": false,
        "description": "值改变回调，有别于 onChange, onPickerChange会在每项值改变的时候执行"
      },
      {
        "name": "onBlur",
        "type": "((e: FocusEvent<HTMLInputElement, Element>, index?: number ) => void)",
        "required": false,
        "description": "blur 事件回调"
      },
      {
        "name": "onFocus",
        "type": "((e: FocusEvent<HTMLInputElement, Element>) => void)",
        "required": false,
        "description": "focus 事件回调"
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否只展示下边框"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "自定义宽度"
      },
      {
        "name": "adjust",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启自动调整面板位置功能。当面板被窗口遮挡时，自动调整位置"
      },
      {
        "name": "needConfirm",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启手动确认按钮，开启后只有点击确认按钮才会提交选择的值。",
        "version": "3.4.0"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的用法\n * en - Base\n *    -- The basic usage\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => <DatePicker showSelNow />\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-datetime",
        "title": "cn - 选择日期时间",
        "code": "/**\n * cn - 选择日期时间\n *    -- 设置 type 为 datetime，选择日期 + 时间\n * en - Datetime Mode\n *    -- Set type to be datetime to select date and time\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => <DatePicker type='datetime' />;\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-size",
        "title": "cn - 尺寸",
        "code": "/**\n * cn - 尺寸\n *    -- 内置了三种尺寸，small、default、large\n * en - Size\n *    -- There are three built-in size: small、default、large\n */\nimport React from 'react';\nimport { DatePicker, TYPE, Radio } from 'shineout';\n\ntype DatePickerProps = TYPE.DatePicker.Props;\ntype DatePickerSize = DatePickerProps['size'];\n\nconst Size: DatePickerSize[] = ['small', 'default', 'large'];\n\nconst App: React.FC = () => {\n  const [size, setSize] = React.useState<DatePickerSize>('default');\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n      <Radio.Group button={'outline'} data={Size} value={size} onChange={setSize} keygen />\n      <DatePicker size={size} type='date' showSelNow />\n      <DatePicker size={size} type='datetime' showSelNow />\n      <DatePicker size={size} type='date' range showSelNow />\n      <DatePicker size={size} type='datetime' range showSelNow />\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-week",
        "title": "cn - 选择星期",
        "code": "/**\n * cn - 选择星期\n *    -- 设置 type 为 week，选择星期\n * en - Week Mode\n *    -- Set type to be week to select week\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => <DatePicker type='week' />;\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "05-month",
        "title": "cn - 选择月",
        "code": "/**\n * cn - 选择月\n *    -- 设置 type 为 month，选择月\n * en - Month Mode\n *    -- Set type to be month to select month\n */\nimport React from 'react';\nimport { DatePicker } from 'shineout';\n\nconst App: React.FC = () => <DatePicker type='month' />;\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 55,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Descriptions": {
    "name": "Descriptions",
    "description": "一般用于详情页的信息展示",
    "category": "other",
    "importPath": "import { Descriptions } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示边框"
      },
      {
        "name": "extra",
        "type": "ReactNode",
        "required": false,
        "description": "扩展内容"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "描述标题"
      },
      {
        "name": "layout",
        "type": "\"horizontal\" | \"vertical\" | \"inlineHorizontal\" | \"inlineVertical\"",
        "required": false,
        "defaultValue": "\\\"inlineHorizontal\\\"",
        "description": "排列方式"
      },
      {
        "name": "colon",
        "type": "ReactNode",
        "required": false,
        "description": "标签后面的内容"
      },
      {
        "name": "tableLayout",
        "type": "\"auto\" | \"fixed\"",
        "required": false,
        "defaultValue": "\\\"auto\\\"",
        "description": "表格样式的layout-fixed,当设置为fixed时,宽度会被均分"
      },
      {
        "name": "items",
        "type": "ItemType[]",
        "required": false,
        "description": "描述项数组,描述项对象结构见下"
      },
      {
        "name": "labelStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "标签样式"
      },
      {
        "name": "valueStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "值样式"
      },
      {
        "name": "column",
        "type": "number | { xs?: number ; sm?: number ; md?: number ; lg?: number ; xl?: number ; xxl?: number ; xxxl?: number ; }",
        "required": false,
        "defaultValue": "3",
        "description": "每行放置的列的数量，一个数据为一列，可配置为数字或对象，当配置为对象格式时，支持响应式排列"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 描述列表的基本样式\n * en - Basic\n *    -- Basic usage of Descriptions\n */\nimport React from 'react';\nimport { Descriptions } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n];\n\nexport default () => {\n  return (\n    <div style={{ marginBottom: '-12px' }}>\n      <Descriptions\n        items={data}\n        title='User Info'\n        colon={' :'}\n      />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-colums",
        "title": "cn - 单列样式",
        "code": "/**\n * cn - 单列样式\n *    -- 单列的描述列表样式\n * en - One Colums\n *    -- One colums style of Descriptions\n */\nimport React from 'react';\nimport { Descriptions } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n];\n\nexport default () => {\n  return (\n    <>\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        column={1}\n        style={{ marginBottom: '12px' }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        column={1}\n        labelStyle={{ textAlign: 'end' }}\n      />\n    </>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-alignment",
        "title": "cn - 标签文本对齐",
        "code": "/**\n * cn - 标签文本对齐\n *    -- 标签文本可以设置左对齐、右对齐，也可以设置垂直的样式排列\n * en - Label text alignment\n *    -- The label text can be set to left-aligned, right-aligned, and can also be set to vertical style arrangement\n */\nimport React from 'react';\nimport { Descriptions } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n];\n\nexport default () => {\n  return (\n    <div style={{ marginBottom: '-12px' }}>\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        colon={<span style={{ paddingInlineStart: '4px' }}>:</span>}\n        style={{ marginBottom: '12px' }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        colon={<span style={{ paddingInlineStart: '4px' }}>:</span>}\n        labelStyle={{ textAlign: 'end' }}\n        style={{ marginBottom: '12px' }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='vertical'\n        colon={<span style={{ paddingInlineStart: '4px' }}>:</span>}\n      />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-border",
        "title": "cn - 带边框展示",
        "code": "/**\n * cn - 带边框展示\n *    -- 带边框和背景颜色的列表\n * en - Show With Border\n *    -- List with border and background color\n */\nimport React from 'react';\nimport { Descriptions } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building,Zhichun Road,Beijing',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        border\n        tableLayout='fixed'\n        style={{ marginBottom: 24 }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='horizontal'\n        border\n        tableLayout='fixed'\n        labelStyle={{ textAlign: 'end' }}\n        style={{ marginBottom: 24 }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        layout='vertical'\n        border\n        tableLayout='fixed'\n        column={4}\n      />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "05-arrangement",
        "title": "cn - 不同排列模式",
        "code": "/**\n * cn - 不同排列模式\n *    -- 可以通过tableLayout='fixed'设置等宽，通过layout设置不同的排列方式，设置border是否显示边框\n * en - Arrangement\n *    -- You can set the same width by tableLayout='fixed', and set different arrangement by layout, set border to show border\n */\nimport React from 'react';\nimport { Descriptions, Radio } from 'shineout';\n\nconst data = [\n  {\n    label: 'Name',\n    value: 'Mai Mai',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building',\n  },\n  {\n    label: 'Mobile',\n    value: '187-2323-9834',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n];\n\ntype layoutType = 'horizontal' | 'vertical' | 'inlineHorizontal' | 'inlineVertical';\nconst layouts: layoutType[] = ['horizontal', 'vertical', 'inlineHorizontal', 'inlineVertical'];\n\ntype tableLayoutType = 'fixed' | 'auto';\nconst tableLayouts: tableLayoutType[] = ['auto', 'fixed'];\n\ninterface borderType {\n  label: string;\n  value: boolean;\n}\nconst borders: borderType[] = [\n  { label: 'no border', value: false },\n  { label: 'border', value: true },\n];\n\nexport default () => {\n  const [layout, setLayout] = React.useState<layoutType>('horizontal');\n  const [tableLayout, setTableLayout] = React.useState<tableLayoutType>('auto');\n  const [border, setBorder] = React.useState<boolean>(false);\n  return (\n    <div style={{ marginBottom: '-12px' }}>\n      <Radio.Group\n        data={layouts}\n        value={layout}\n        onChange={setLayout}\n        keygen\n        style={{ marginBottom: 24 }}\n      />\n      <Radio.Group\n        data={tableLayouts}\n        value={tableLayout}\n        onChange={setTableLayout}\n        keygen\n        style={{ marginBottom: 24 }}\n      />\n      <Radio.Group\n        data={borders}\n        format={'value'}\n        renderItem={'label'}\n        value={border}\n        onChange={setBorder}\n        keygen={'label'}\n        style={{ marginBottom: 24 }}\n      />\n      <Descriptions\n        items={data}\n        title='User Info'\n        colon={<span style={{ paddingInlineStart: '4px' }}>:</span>}\n        layout={layout}\n        tableLayout={tableLayout}\n        border={border}\n        labelStyle={{\n          marginBottom: layout === 'inlineVertical' ? '2px' : '',\n          paddingBottom: layout === 'vertical' && !border ? '2px' : '',\n        }}\n      />\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 13,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Divider": {
    "name": "Divider",
    "description": "分割线是一个呈线状的轻量化组件，起到分割、组织、细化的作用，用于有逻辑的组织元素内容和页面结构",
    "category": "layout",
    "importPath": "import { Divider } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "分割线中文字内容"
      },
      {
        "name": "mode",
        "type": "\"horizontal\" | \"vertical\"",
        "required": false,
        "defaultValue": "\\\"horizontal\\\"",
        "description": "分割线排布模式"
      },
      {
        "name": "orientation",
        "type": "\"center\" | \"left\" | \"right\"",
        "required": false,
        "defaultValue": "\\\"center\\\"",
        "description": "水平分割线的文字排布位置"
      },
      {
        "name": "type",
        "type": "\"solid\" | \"dashed\"",
        "required": false,
        "defaultValue": "\\\"solid\\\"",
        "description": "线段类型"
      }
    ],
    "examples": [
      {
        "name": "01-01-base-solid",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    --默认为水平分割线\n * en - Base\n *    --Divider is horizontal by default. You can add text within Divider\n */\nimport React from 'react';\nimport { Divider } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ fontSize: 12 }}>\n    <p>A design is a plan or specification for the construction of an object.</p>\n    <Divider />\n    <p>A design is a plan or specification for the construction of an object.</p>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "01-02-base-dashed",
        "title": "cn - 虚线分割",
        "code": "/**\n * cn - 虚线分割\n *    --使用 `type`=\"dashed\" 设置为虚线分割线\n * en - Dashed\n *    --Use type=\"dashed\" make it dashed\n */\nimport React from 'react';\nimport { Divider } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ fontSize: 12 }}>\n    <p>A design is a plan or specification for the construction of an object.</p>\n    <Divider type='dashed' />\n    <p>A design is a plan or specification for the construction of an object.</p>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-text",
        "title": "cn - 带文字的分割线",
        "code": "/**\n * cn - 带文字的分割线\n *    -- 分割线中带有文字，可以用 orientation 指定文字位置\n * en - Divider with title\n *    --Divider with inner title, set orientation=\"left/right\" to align it\n */\nimport React from 'react';\nimport { Divider } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ fontSize: 12 }}>\n    <p>A design is a plan or specification for the construction of an object.</p>\n    <Divider>Center</Divider>\n    <p>A design is a plan or specification for the construction of an object.</p>\n    <Divider orientation={'left'}>Left</Divider>\n    <p>A design is a plan or specification for the construction of an object.</p>\n    <Divider orientation={'right'}>Right</Divider>\n    <p>A design is a plan or specification for the construction of an object.</p>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-vertical",
        "title": "cn - 垂直分割线",
        "code": "/**\n * cn - 垂直分割线\n *    -- 使用 mode=\"vertical\" 设置为行内的垂直分割线\n * en - Vertical\n *    --Use type=\"vertical\" make it vertical\n */\nimport React from 'react';\nimport { Divider } from 'shineout';\n\nconst inlineStyle = {\n  display: 'inline-block',\n  lineHeight: '22px',\n  fontSize: 14,\n};\n\nconst App: React.FC = () => (\n  <>\n    <span style={inlineStyle}>Item 1</span>\n    <Divider mode='vertical'>H</Divider>\n    <span style={inlineStyle}>Item 2</span>\n    <Divider mode='vertical' />\n    <span style={inlineStyle}>Item 3</span>\n  </>\n);\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 6,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Drawer": {
    "name": "Drawer",
    "description": "屏幕边缘滑出的浮层面板, 通常位于页面的侧栏或顶部菜单中，用于存储和显示交互的相关信息和菜单选项",
    "category": "feedback",
    "importPath": "import { Drawer } from 'shineout'",
    "props": [
      {
        "name": "position",
        "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
        "required": false,
        "defaultValue": "\\\"right\\\"",
        "description": "Pop-up position"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "defaultValue": "auto",
        "description": "the width of the Drawer"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "defaultValue": "auto",
        "description": "the height of the Drawer"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "hideMask",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否隐藏遮罩"
      },
      {
        "name": "forceMask",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否强制设置遮罩透明度（多层Modal中，除第一层外的其他弹出层遮罩透明度会被调整为0.01）"
      },
      {
        "name": "top",
        "type": "string | number",
        "required": false,
        "defaultValue": "10vh",
        "description": "弹框距离顶部距离"
      },
      {
        "name": "fullScreen",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否全屏展示"
      },
      {
        "name": "bodyStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "扩展弹出层 body 的样式"
      },
      {
        "name": "footer",
        "type": "ReactNode",
        "required": false,
        "description": "底部内容"
      },
      {
        "name": "maskCloseAble",
        "type": "boolean | null",
        "required": false,
        "defaultValue": "true",
        "description": "点击遮罩层是否关闭对话框, 设置为 null 右上角关闭图标会保留"
      },
      {
        "name": "padding",
        "type": "string | number",
        "required": false,
        "description": "内容内边距"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "弹出层的标题"
      },
      {
        "name": "visible",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1050",
        "description": "弹出层 z-index 值，注意：如果嵌套 Select 组件，并且 Select 组件含有 absolute 字段，需要修改 Select 的 z-index 的值"
      },
      {
        "name": "rootClassName",
        "type": "string",
        "required": false,
        "description": "弹出层的根元素类名, 为遮罩层的父元素"
      },
      {
        "name": "container",
        "type": "(() => HTMLElement | null) | HTMLElement | null",
        "required": false,
        "defaultValue": "document.body",
        "description": "渲染的目标节点"
      },
      {
        "name": "maskBackground",
        "type": "string",
        "required": false,
        "description": "遮罩背景色，设置后透明度将失效"
      },
      {
        "name": "onClose",
        "type": "(() => void)",
        "required": false,
        "description": "弹出层关闭回调"
      },
      {
        "name": "destroy",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "关闭时是否销毁元素"
      },
      {
        "name": "hideClose",
        "type": "boolean",
        "required": false,
        "description": "是否隐藏关闭按钮"
      },
      {
        "name": "type",
        "type": "\"success\" | \"info\" | \"warning\" | \"error\"",
        "required": false,
        "description": "弹出层 title 显示状态 icon，drawer模式下需配合title使用"
      },
      {
        "name": "zoom",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启 zoom 动画效果"
      },
      {
        "name": "esc",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否支持 esc 键关闭"
      },
      {
        "name": "events",
        "type": "object",
        "required": false,
        "defaultValue": "{}",
        "description": "外层元素所接受的事件列表，可用于在 createPortal 场景中阻止冒泡"
      },
      {
        "name": "resizable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可调整大小"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "弹出层内容"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的组件用法\n *    -- Drawer 会在 document.body 中创建一个新的层显示弹出内容\n *    -- 关闭 Drawer 时默认没有对组件进行销毁, 只是隐藏, 组件的状态会被保留。 如果不需要保留组件之前的状态, 可以设置 destroy 属性\n * en - Base\n *    -- The basic usage for component\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerVisible = DrawerProps['visible'];\ntype DrawerOnClose = DrawerProps['onClose'];\n\nconst App: React.FC = () => {\n  const [content, setContent] = useState(1);\n  const [visible, setVisible] = useState<DrawerVisible>(false);\n\n  const handleCancel: DrawerOnClose = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked cancel');\n  };\n\n  const handleOk = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked ok!');\n  };\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  return (\n    <div>\n      <Button onClick={show} mode=\"outline\">click me</Button>\n      <Drawer\n        width={400}\n        visible={visible}\n        title='Drawer Title'\n        onClose={handleCancel}\n        footer={[\n          <Button key='cancel' onClick={handleCancel} mode='outline'>\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleOk}>\n            Ok\n          </Button>,\n        ]}\n      >\n        {`you are visited ${content}`}\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-position",
        "title": "cn - 位置",
        "code": "/**\n * cn - 位置\n *    -- 通过 position 可设置 Drawer 弹出的位置, 现支持 top、right、bottom 和 left 四个位置配置\n * en - Position\n *    -- Set position property to specify the pop-up position\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Form, Input, Radio, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerPosition = DrawerProps['position'];\n\nconst positionList: DrawerPosition[] = ['right', 'top', 'bottom', 'left'];\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [position, setPosition] = useState<DrawerPosition>('right');\n\n  const toggle = (v: boolean) => {\n    setVisible(v);\n  };\n\n  const footer = () => (\n    <div>\n      <Button mode='outline' onClick={() => toggle(false)}>\n        Cancel\n      </Button>\n      <Drawer.Submit>Submit</Drawer.Submit>\n    </div>\n  );\n  return (\n    <div>\n      <Radio.Group\n        keygen\n        value={position}\n        data={positionList}\n        onChange={(p) => setPosition(p)}\n        style={{ marginBottom: 24 }}\n      />\n\n      <Button onClick={() => toggle(true)} mode=\"outline\">click me</Button>\n\n      <Drawer\n        title='Form'\n        key={position}\n        footer={footer()}\n        visible={visible}\n        position={position}\n        onClose={() => toggle(false)}\n      >\n        <Form\n          labelWidth={100}\n          labelAlign='right'\n          style={{ width: 500 }}\n          onSubmit={() => toggle(false)}\n        >\n          <Form.Item required label='Email'>\n            <Input name='email' />\n          </Form.Item>\n\n          <Form.Item required label='Password'>\n            <Input name='password' type='password' />\n          </Form.Item>\n        </Form>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-container",
        "title": "cn - 指定目标",
        "code": "/**\n * cn - 指定目标\n *    -- 使用 container 来指定 Drawer 渲染的目标节点\n * en - Target\n *    -- set container to render target node\n */\nimport React, { useState } from 'react';\nimport { Button, Drawer, TYPE } from 'shineout';\n\ntype DrawerProps = TYPE.Drawer.Props;\ntype DrawerContainer = DrawerProps['container'];\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [wrapper, setWrapper] = useState<DrawerContainer>();\n\n  const handleDismiss = () => {\n    setVisible(false);\n  };\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  return (\n    <div ref={(ref) => setWrapper(ref!)}>\n      <Button onClick={show} mode=\"outline\">click me</Button>\n      <Drawer\n        width={400}\n        visible={visible}\n        container={wrapper}\n        title='Drawer Title'\n        onClose={handleDismiss}\n        footer={[\n          <Button key='cancel' onClick={handleDismiss} mode='outline'>\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleDismiss}>\n            Ok\n          </Button>,\n        ]}\n      >\n        Drawer mount after Button\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-form",
        "title": "cn - 表单",
        "code": "/**\n * cn - 表单\n *    -- Drawer 支持 Form 表单，并且支持 Form 的所有特性，表单提交可以使用 Drawer.Submit 来代替 Button[type=submit]\n * en - Form\n *    --The internal form of Drawer can use Drawer.Submit to trigger submit\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Form, Input, Message, TYPE } from 'shineout';\n\ninterface FormValue {\n  email?: string;\n  password?: string;\n}\n\ntype FormProps = TYPE.Form.Props<FormValue>;\ntype FormRules = FormProps['rules'];\n\nconst rules: FormRules = {\n  email: [\n    { required: true, message: 'Please enter your email.' },\n    { type: 'email', message: 'Please enter a valid email.' },\n  ],\n  password: [\n    { required: true, message: 'Please enter password.' },\n    { min: 7, message: 'Password must be at least {min} characters.' },\n    { regExp: /[a-z]+/i, message: 'Password at least has one letter.' },\n    (value: string, _formData: any, callback: any) => {\n      if (/\\d+/.test(value)) callback(true);\n      else callback(new Error('Password at least has one numeral.'));\n    },\n  ],\n};\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const handleClose = () => {\n    setVisible(false);\n  };\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  const handleSubmit = (data: FormValue) => {\n    setVisible(false);\n    Message.success(JSON.stringify(data));\n  };\n\n  const renderFooter = () => (\n    <div>\n      <Button onClick={handleClose} mode='outline'>Cancel</Button>\n      <Drawer.Submit>Submit</Drawer.Submit>\n    </div>\n  );\n\n  return (\n    <div>\n      <Button onClick={show} mode=\"outline\">Drawer Form</Button>\n\n      <Drawer\n        visible={visible}\n        width={456}\n        title='Form'\n        onClose={handleClose}\n        footer={renderFooter()}\n      >\n        <Form\n          labelWidth={85}\n          rules={rules}\n          labelAlign='right'\n          onSubmit={handleSubmit}\n        >\n          <Form.Item required label='Email'>\n            <Input name='email' />\n          </Form.Item>\n\n          <Form.Item required label='Password'>\n            <Input name='password' type='password' />\n          </Form.Item>\n        </Form>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "05-close",
        "title": "cn - 点击空白关闭",
        "code": "/**\n * cn - 点击空白关闭\n *    -- 默认点击对话框外部空白页面会关闭对话框\n *    -- 设置 maskCloseAble 属性为 false，禁用点击空白关闭，同时右上角的关闭图标也会隐藏\n *    -- 设置 maskCloseAble 属性为 null，禁用点击空白关闭，右上角的关闭图标会保留\n * en - Close\n *    -- By default, clicking on the blank page outside the Modal box will closes the Modal box\n *    -- Set maskCloseAble to false to disable the function that click mask to close and the close icon in the upper right corner will be hidden at the same time\n *    -- Set maskCloseAbel to null to disable the function that click mask to close and the close icon in the upper right corner will be preserved\n */\nimport React, { useState } from 'react';\nimport { Drawer, Button, Radio } from 'shineout';\n\nconst list: { title: string; value: boolean | null }[] = [\n  {\n    title: 'false',\n    value: false,\n  },\n  {\n    title: 'true',\n    value: true,\n  },\n  {\n    title: 'null',\n    value: null,\n  },\n];\n\nconst App: React.FC = () => {\n  const [selected, setSelected] = useState(list[0]);\n  const [visible, setVisible] = useState(false);\n\n  const footer = () => (\n    <Button mode='outline' onClick={() => setVisible(false)}>\n      Close\n    </Button>\n  );\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 24 }}>\n        <Radio.Group\n          data={list}\n          keygen='title'\n          value={selected}\n          renderItem='title'\n          onChange={(c) => setSelected(c)}\n          prediction={(v, d) => v.title === d.title}\n          style={{ marginInlineEnd: 20 }}\n        />\n      </div>\n\n      <Button onClick={() => setVisible(true)} mode=\"outline\">Open</Button>\n\n      <Drawer\n        width={400}\n        visible={visible}\n        footer={footer()}\n        title='Modal Title'\n        maskCloseAble={selected.value}\n        onClose={() => setVisible(false)}\n      >\n        The prop maskCloseAble is &nbsp;\n        {selected.title}\n        .\n        <br />\n        You must click the button to close the Modal.\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [
      "Submit"
    ],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 28,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Dropdown": {
    "name": "Dropdown",
    "description": "通常用于展示用户可供选择的选项，在操作选项较多时，可以将这些选项收纳起来",
    "category": "navigation",
    "importPath": "import { Dropdown } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "absolute",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
      },
      {
        "name": "type",
        "type": "| \"default\" | \"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\" | \"link\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "按钮类型"
      },
      {
        "name": "mode",
        "type": "\"text\" | \"outline\" | \"dashed\"",
        "required": false,
        "description": "按钮风格"
      },
      {
        "name": "shape",
        "type": "\"circle\" | \"round\" | \"square\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "设置按钮形状"
      },
      {
        "name": "onClick",
        "type": "((data: any) => void)",
        "required": false,
        "description": "点击事件。参数为渲染的数据,注: 如果数据内设置了onClick，会忽略此方法，调用data.onClick"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "禁用"
      },
      {
        "name": "placeholder",
        "type": "ReactNode",
        "required": false,
        "description": "按钮显示内容"
      },
      {
        "name": "adjust",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启自动调整面板位置功能。当面板被窗口遮挡时，自动调整位置"
      },
      {
        "name": "columns",
        "type": "number",
        "required": false,
        "description": "页面多元素展示,此属性需要依赖width属性,请合理的设置列数和宽度"
      },
      {
        "name": "animation",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启动画"
      },
      {
        "name": "data",
        "type": "object[]",
        "required": true,
        "defaultValue": "[]",
        "description": "下拉数据 详见 DropdownData"
      },
      {
        "name": "trigger",
        "type": "\"click\" | \"hover\"",
        "required": false,
        "defaultValue": "\\\"click\\\"",
        "description": "触发方式"
      },
      {
        "name": "width",
        "type": "number",
        "required": false,
        "description": "弹出选项层的宽度"
      },
      {
        "name": "position",
        "type": "| \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"left\" | \"right\" | \"top\" | \"bottom\" | \"auto\"",
        "required": false,
        "defaultValue": "\\\"bottom-left\\\"",
        "description": "弹出的方向和位置"
      },
      {
        "name": "renderItem",
        "type": "string | ((data: any) => ReactNode)",
        "required": false,
        "description": "设置显示的内容,如果是字符串,则为对应的值。如果是函数,则返回值为显示的内容,参数为当条数据"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "控制浮层显隐"
      },
      {
        "name": "onCollapse",
        "type": "((collapse: boolean) => void)",
        "required": false,
        "description": "下拉列表展开/收起回调"
      },
      {
        "name": "hideArrow",
        "type": "boolean",
        "required": false,
        "description": "隐藏箭头"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "description": "面板的 zIndex 值，默认为 1051",
        "version": "3.4.0"
      }
    ],
    "examples": [
      {
        "name": "001-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- Dropdown 通过数据来渲染，支持 json 格式数据、React 组件\n * en - Base\n *   -- Dropdown is rendered through data and supports json formatted data and React components\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\nconst data: DropdownItem[] = [\n  {\n    content: 'Submenu',\n    children: [\n      {\n        content: 'Link to Google',\n        target: '_blank',\n        url: 'https://google.com',\n      },\n      {\n        content: <div style={{cursor: 'not-allowed'}}>Disabled</div>,\n        disabled: true,\n        children: [\n          { content: 'Child 1' },\n          { content: 'Child 2' },\n        ],\n      },\n    ],\n  },\n  <a key={'link'} href='/'>\n    Home\n  </a>,\n  {\n    content: 'Message',\n    onClick: () => {\n      console.info('Some message.');\n    },\n  },\n];\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Dropdown placeholder='Click me' data={data} onClick={console.log} />\n      <Dropdown placeholder='Click me' data={data} disabled />\n    </>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "002-hover",
        "title": "cn - 触发方式",
        "code": "/**\n * cn - 触发方式\n *    -- Dropdown 默认通过点击触发下拉行为，设置 trigger=\"hover\" 属性可以改为移入触发\n * en - Trigger\n *    -- By default, Dropdown toggled clicking, setting trigger=\"hover\" can toggled by mouse move in\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\n\nconst menu: DropdownItem[] = [\n  { content: 'America' },\n  { content: 'Germany' },\n  { content: 'United Kingdom' },\n  { content: 'France' },\n  { content: 'Russia' },\n];\n\nconst App: React.FC = () => (\n  <>\n    <Dropdown trigger='click' placeholder='Click me' data={menu} />\n    <Dropdown trigger='hover' placeholder='Hover me' data={menu} />\n  </>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "003-position",
        "title": "cn - 弹出位置",
        "code": "/**\n * cn - 弹出位置\n *    -- 设置 position 属性可以控制下拉菜单弹出的方向和位置\n * en - Position\n *    -- Set position property can control the direction and position of the drop-down menu\n */\nimport React from 'react';\nimport { Dropdown, TYPE } from 'shineout';\n\ntype DropdownItem = TYPE.Dropdown.Item;\n\nconst menu: DropdownItem[] = [\n  {\n    content: 'First',\n    children: [\n      {\n        content: 'link1',\n      },\n      {\n        content: 'link2',\n      },\n    ],\n  },\n  {\n    content: 'Second',\n    children: [\n      {\n        content: 'link3',\n      },\n      {\n        content: 'link4',\n        children: [\n          {\n            content: 'link5',\n          },\n          {\n            content: 'link6',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App: React.FC = () => (\n  <div style={{ display: 'inline-flex', flexDirection: 'column', gap: 12 }}>\n    <div style={{ display: 'flex', justifyContent: 'center', gap: 12, padding: '0 120px' }}>\n      <Dropdown placeholder='Bottom left' position='bottom-left' data={menu} />\n      <Dropdown placeholder='Bottom' position='bottom' data={menu} />\n      <Dropdown placeholder='Bottom right' position='bottom-right' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <Dropdown placeholder='Right Top' position='right-top' data={menu} />\n      <Dropdown placeholder='Left Top' position='left-top' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <Dropdown placeholder='Right' position='right' data={menu} />\n      <Dropdown placeholder='Left' position='left' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <Dropdown placeholder='Right Bottom' position='right-bottom' data={menu} />\n      <Dropdown placeholder='Left Bottom' position='left-bottom' data={menu} />\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'center', gap: 12 }}>\n      <Dropdown placeholder='Top Left' position='top-left' data={menu} />\n      <Dropdown placeholder='Top' position='top' data={menu} />\n      <Dropdown placeholder='Top right' position='top-right' data={menu} />\n    </div>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "004-button",
        "title": "cn - 按钮下拉",
        "code": "/**\n * cn - 按钮下拉\n *    -- 和 Button 属性相同, 支持 type text outline\n * en - Button\n *    -- Same as Button, support type text outline\n */\nimport React from 'react';\nimport { Dropdown } from 'shineout';\n\nconst menu: {\n  id: string;\n  content: string;\n}[] = [];\n\nfor (let i = 1; i <= 3; i++) {\n  menu.push({\n    id: `${i}`,\n    content: `item${i}`,\n  });\n}\n\nconst columnStyle: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'flex-start',\n  gap: 24,\n};\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', gap: 24 }}>\n    <div style={columnStyle}>\n      <Dropdown data={menu} type={'primary'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'secondary'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'danger'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'warning'} placeholder={'Default'} />\n      <Dropdown data={menu} type={'success'} placeholder={'Default'} />\n    </div>\n    <div style={columnStyle}>\n      <Dropdown data={menu} type={'primary'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'secondary'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'danger'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'warning'} placeholder={'Outline'} outline />\n      <Dropdown data={menu} type={'success'} placeholder={'Outline'} outline />\n    </div>\n    <div style={columnStyle}>\n      <Dropdown data={menu} type={'primary'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'secondary'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'danger'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'warning'} placeholder={'Text'} text />\n      <Dropdown data={menu} type={'success'} placeholder={'Text'} text />\n    </div>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "005-children",
        "title": "cn - 多级菜单",
        "code": "/**\n * cn - 多级菜单\n *    -- 带有多个下钻层级菜单的下拉框, 在 data 中设置 children 属性即可\n * en - Multi-level\n *   -- Dropdown with multiple levels of menu, set the children property in data\n */\nimport React from 'react';\nimport { Dropdown } from 'shineout';\n\nconst menu = new Array(5).fill(null).map((_, index) => ({\n  id: `${index}`,\n  content: `item${index}`,\n  children: new Array(5).fill(null).map((_, i) => ({\n    id: `${index}-${i}`,\n    content: `item${index}-${i}`,\n  })),\n}));\n\nconst App: React.FC = () => <Dropdown data={menu} placeholder={'Click me'} />;\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 22,
      "requiredProps": 1,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Empty": {
    "name": "Empty",
    "description": "空状态时的展示占位图",
    "category": "other",
    "importPath": "import { Empty } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "imgSrc",
        "type": "string",
        "required": false,
        "description": "空状态图片地址,优先级高于icon"
      },
      {
        "name": "icon",
        "type": "ReactNode",
        "required": false,
        "description": "空状态图标"
      },
      {
        "name": "description",
        "type": "ReactNode",
        "required": false,
        "description": "描述,若为false则不显示描述"
      }
    ],
    "examples": [
      {
        "name": "001-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 空状态组件的基础用法\n * en - Basic\n *    -- The basic usage of Empty\n */\nimport React from 'react';\nimport { Empty } from 'shineout';\n\nexport default () => {\n  return <Empty></Empty>;\n};\n",
        "language": "tsx"
      },
      {
        "name": "002-icon",
        "title": "cn - 自定义图标和文案",
        "code": "/**\n * cn - 自定义图标和文案\n *    -- 设置`icon`和`description`属性可以自定义图标和文案\n * en - Custom icon and description\n *    -- Set the `icon` and `description` property to customize the icon and description\n */\nimport React from 'react';\nimport { Empty } from 'shineout';\nimport { customIcon } from './static/icon';\n\nexport default () => {\n  return <Empty icon={customIcon} description='No network'></Empty>;\n};\n",
        "language": "tsx"
      },
      {
        "name": "003-imge",
        "title": "cn - 自定义图片",
        "code": "/**\n * cn - 自定义图片\n *    -- 设置`imgSrc`参数传入图片的Url\n * en - Custom image\n *    -- Set the `imgSrc` parameter to the Url of the image\n */\nimport React from 'react';\nimport { Empty, Button } from 'shineout';\n\nexport default () => {\n  const renderDescription = () => {\n    return <Button type='primary'>Refresh</Button>;\n  };\n  return (\n    <Empty\n      imgSrc='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n      description={renderDescription()}\n    ></Empty>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "004-status",
        "title": "cn - 推荐状态",
        "code": "/**\n * cn - 推荐状态\n *    -- 推荐空状态的类型\n * en - Status\n *    -- The recommended status type of Empty\n */\nimport React from 'react';\nimport { Message } from 'shineout';\nimport {\n  noData,\n  noResult,\n  noAuth,\n  noInternet,\n  web404,\n  error,\n  noDataColorful,\n  noResultColorful,\n  noAuthColorful,\n  noInternetColorful,\n  web404Colorful,\n  errorColorful,\n} from './static/icon';\n\nexport default () => {\n  const handleCopy = (id: string) => {\n    const icon = document.getElementById(id)!.innerHTML;\n    navigator?.clipboard?.writeText(icon);\n    Message.success('svg copied successfully', 1, {\n      hideClose: true,\n    });\n  };\n\n  const renderIcon = (icon: React.ReactNode, id: string, name: string) => {\n    return (\n      <div style={{ width: 100, cursor: 'pointer' }} onClick={() => handleCopy(id)}>\n        <div id={id}>{icon}</div>\n        <div\n          style={{\n            fontSize: 14,\n            color: '#999DA8',\n            lineHeight: '20px',\n            textAlign: 'center',\n            marginTop: 8,\n          }}\n        >\n          {name}\n        </div>\n      </div>\n    );\n  };\n  return (\n    <div>\n      <div\n        style={{\n          marginBottom: 32,\n          display: 'flex',\n          gap: 32,\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n        }}\n      >\n        {renderIcon(noData, 'noData', 'No data')}\n        {renderIcon(noResult, 'noResult', 'Search results are empty')}\n        {renderIcon(noAuth, 'noAuth', 'No permission yet')}\n        {renderIcon(noInternet, 'noInternet', 'No network')}\n        {renderIcon(web404, 'web404', '404')}\n        {renderIcon(error, 'error', 'Failed to load')}\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          gap: 32,\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n        }}\n      >\n        {renderIcon(noDataColorful, 'noDataColorful', 'No data')}\n        {renderIcon(noResultColorful, 'noResultColorful', 'Search results are empty')}\n        {renderIcon(noAuthColorful, 'noAuthColorful', 'No permission yet')}\n        {renderIcon(noInternetColorful, 'noInternetColorful', 'No network')}\n        {renderIcon(web404Colorful, 'web404Colorful', '404')}\n        {renderIcon(errorColorful, 'errorColorful', 'Failed to load')}\n      </div>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 5,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Form": {
    "name": "Form",
    "description": "用以收集、校验和提交数据，一般由输入框、单选框、复选框、选择器等控件组成",
    "category": "other",
    "importPath": "import { Form } from 'shineout'",
    "props": [
      {
        "name": "value",
        "type": "object",
        "required": false,
        "description": "设置后表单变为受控组件，需要配合 onChange 使用。适用于需要外部管理表单状态的场景，如跨组件共享表单数据、实时同步表单数据到状态管理器等"
      },
      {
        "name": "onChange",
        "type": "((value: T) => void)",
        "required": false,
        "description": "在受控模式下必须设置此函数来更新外部状态。每当表单内任意字段值改变时都会触发，参数为整个表单的最新数据"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "Form 内容"
      },
      {
        "name": "labelWidth",
        "type": "string | number",
        "required": false,
        "defaultValue": "140px",
        "description": "标签宽度，labelAlign 为 \\\"top\\\" 时无效。统一设置表单项标签的宽度。可以是具体像素值（如 \\\"140px\\\"）或百分比（如 \\\"30%\\\"）。当标签顶部对齐时此配置无效。用于保持表单整齐的视觉效果，确保所有表单项的输入区域左对齐"
      },
      {
        "name": "labelAlign",
        "type": "\"left\" | \"right\" | \"top\"",
        "required": false,
        "description": "默认为空，跟随主题样式。标签的对齐方式。\\\"left\\\" 左对齐，\\\"right\\\" 右对齐，\\\"top\\\" 顶部对齐。不同的对齐方式适用于不同的表单布局需求：\\\"right\\\" 适合传统表单布局，\\\"top\\\" 适合移动端或紧凑布局，\\\"left\\\" 适合特殊设计需求"
      },
      {
        "name": "labelVerticalAlign",
        "type": "\"top\" | \"bottom\" | \"middle\"",
        "required": false,
        "defaultValue": "\\\"top\\\"",
        "description": "默认顶部对齐。标签的垂直对齐方式。当标签和输入框在同一行时（labelAlign 为 \\\"left\\\" 或 \\\"right\\\"），控制标签相对于输入框的垂直位置。\\\"top\\\" 与输入框顶部对齐，\\\"middle\\\" 居中对齐，\\\"bottom\\\" 与输入框底部对齐"
      },
      {
        "name": "keepErrorHeight",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "单行错误提示不撑开页面高度。保持错误提示高度固定，避免错误信息出现/消失时页面抖动。开启后会预留错误信息的显示空间，确保表单高度稳定。适用于对布局稳定性要求较高的场景，如表单项较多的长表单。注意：当 keepErrorBelow 为 true 时，此配置会失效"
      },
      {
        "name": "keepErrorBelow",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否保持错误信息在提示信息下方。控制错误信息的显示位置。开启后错误信息始终显示在表单项的 tip 属性下方，保持布局的一致性。关闭时错误信息可能会覆盖 tip 信息。适用于同时需要显示提示信息和错误信息的场景。注意：开启后会使 keepErrorHeight 失效",
        "version": "3.7.0"
      },
      {
        "name": "inline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否水平布局。将表单项横向排列，适用于简单的单行表单或筛选表单。开启后表单项会在同一行显示，自动换行。通常用于搜索条件、筛选器等需要节省垂直空间的场景"
      },
      {
        "name": "colon",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "false",
        "description": "统一控制所有表单项标签后是否显示冒号。可以是布尔值（true 显示默认冒号 \\\":\\\"）或自定义的 ReactNode（如 \\\"：\\\"、\\\"->\\\"等）。Form.Item 上的 colon 属性优先级更高，可以覆盖此全局设置",
        "version": "3.6.0"
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": "表单的唯一标识名称。设置后会作为所有表单字段 id 的前缀，确保多个表单共存时 id 不冲突。同时启用 formRef.scrollToField 方法，可以通过字段名称快速定位到指定字段",
        "version": "3.5.3"
      },
      {
        "name": "defaultValue",
        "type": "T",
        "required": false,
        "description": "非受控模式下的表单初始值。仅在组件首次渲染时生效，后续修改不会影响表单内部数据。适用于表单数据由组件内部管理的场景，如新建表单、独立表单等"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "设置为 true 时，表单内所有组件的 reserveAble 都为 true : 卸载后不自动删除数据。控制表单项卸载时是否保留数据。适用于标签页切换、条件渲染等场景，避免用户填写的数据丢失。开启后即使表单项被隐藏或卸载，其数据仍会保留在表单中。可在 Form.Field 组件或支持的表单组件（如 Input、Select、DatePicker 等）上单独设置覆盖此全局配置",
        "version": "3.5.0"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "表单级别的校验规则配置。支持嵌套对象的规则定义，可以为表单的任意字段设置校验规则。规则对象的 key 对应表单字段路径（如 \\\"name\\\"、\\\"user.email\\\"、\\\"list[0].id\\\"），value 为该字段的校验规则数组（FormItemRule）。这些规则会与 Form.Field 组件上设置的 rules 属性合并，Form 级别的规则会先执行。规则类型请参考 Rule 组件文档"
      },
      {
        "name": "onError",
        "type": "((error: Error) => void)",
        "required": false,
        "description": "校验规则触发时的错误回调函数。当任意字段校验失败时调用，参数为错误对象。可用于统一处理校验错误，如记录日志、显示全局通知、上报错误等"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用，为 true 时，表单内所有元素 disabled 都为 true。全局控制表单的禁用状态。适用于查看详情、提交中等需要临时禁用整个表单的场景。表单内所有受控组件（如 Input、Select、DatePicker 等）都会继承此属性"
      },
      {
        "name": "size",
        "type": "\"small\" | \"default\" | \"large\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "表单元素的尺寸。统一设置表单内所有组件的尺寸。支持 \\\"small\\\"、\\\"default\\\"、\\\"large\\\" 三种规格，影响输入框高度、字体大小等。表单内的受控组件会继承此属性，也可以在具体组件上单独覆盖"
      },
      {
        "name": "initValidate",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "当表单 value 发生变化时，是否自动触发校验。开启后可以在数据变化时实时显示校验结果，适用于需要即时反馈的场景。注意：仅在受控模式下有效"
      },
      {
        "name": "onSubmit",
        "type": "((value: T) => void)",
        "required": false,
        "description": "表单提交时的回调函数。只有当所有字段校验通过后才会调用，参数为完整的表单数据。通常用于处理表单数据的提交逻辑，如发送请求到服务器。可配合 Form.Submit 按钮或 formRef.submit() 方法触发"
      },
      {
        "name": "onReset",
        "type": "(() => void)",
        "required": false,
        "description": "表单重置时的回调函数。在表单被重置为初始值（defaultValue 或空值）后触发。可用于执行额外的重置逻辑，如清除关联状态、重置相关组件等。配合 Form.Reset 按钮或 formRef.reset() 方法使用"
      },
      {
        "name": "scrollToError",
        "type": "number | boolean",
        "required": false,
        "defaultValue": "false",
        "description": "校验失败时是否滚动到第一个校验失败组件，该值为数字时，表示相对于顶部的偏移量"
      },
      {
        "name": "removeUndefined",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "提交表单时是否自动移除值为 undefined 的字段。开启后可以避免提交无意义的空值，保持数据整洁。特别适用于与后端 API 对接时，避免传递不必要的 undefined 值"
      },
      {
        "name": "throttle",
        "type": "number",
        "required": false,
        "defaultValue": "1000",
        "description": "防止用户频繁点击提交按钮的节流时间。在此时间内重复点击提交将被忽略，有效避免重复提交问题。适用于网络请求较慢或处理时间较长的场景"
      },
      {
        "name": "scrollParent",
        "type": "(() => HTMLElement | null)",
        "required": false,
        "description": "指定滚动容器元素。当表单不在 document.body 直接滚动时（如在弹窗、抽屉中），需要指定实际的滚动容器以确保正确滚动到错误位置。返回 null 时使用默认滚动行为"
      },
      {
        "name": "formRef",
        "type": "((form: FormRef<V>) => void) | { current?: FormRef<V> ; }",
        "required": false,
        "description": "获取表单实例的引用。支持函数回调和 ref 对象两种方式。通过 formRef 可以调用表单的各种方法，如手动触发校验（validate、validateFields）、提交（submit）、重置（reset）、获取/设置值（getValue、set）等。FormRef<V> 中的泛型 V 表示表单数据的类型"
      },
      {
        "name": "setForm",
        "type": "((form: FormRef<V>) => void)",
        "required": false,
        "description": "在使用 Form.useForm() hooks 时，用于设置表单引用的回调函数。通常不需要手动设置，Form 组件会自动处理。但在某些特殊场景（如跨组件通信）可能需要使用"
      }
    ],
    "examples": [
      {
        "name": "001-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 表单内置了类似双向绑定的机制，根据表单元素的 name 属性自动下发、收集数据\n * en - Basic usage\n *    -- The form has built-in two-way binding mechanism, which automatically issues and collects data based on the name attribute of the form element\n */\n\nimport { Form, Input, Upload, Radio, Checkbox, DatePicker, Rate, Textarea } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nexport default () => {\n  return (\n    <div>\n      <Form\n        defaultValue={{ name: 'zhangsan', email: 'zhangsan@qq.com', score: 3 }}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='Name'>\n          <Input name={'name'} placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Password'>\n          <Input name={'password'} placeholder='please input password' clearable />\n        </Form.Item>\n        <Form.Item label='Email'>\n          <Input name={'email'} clearable placeholder='please input email' />\n        </Form.Item>\n        <Form.Item label='Gendar'>\n          <Radio.Group name='gendar' data={['male', 'female']} keygen />\n        </Form.Item>\n        <Form.Item label='Course'>\n          <Checkbox.Group name='course' data={['chinese', 'maths', 'english', 'physics']} keygen />\n        </Form.Item>\n        <Form.Item label='Enrollment date'>\n          <DatePicker name='date' placeholder={'please select date'} clearable showSelNow />\n        </Form.Item>\n        <Form.Item label='Score'>\n          <StarRate name='score'></StarRate>\n        </Form.Item>\n        <Form.Item label='upload avatar'>\n          <Upload.Image\n            action='/api/upload'\n            accept='image/*'\n            name='file'\n            htmlName='file'\n            recoverAble\n            leftHandler\n            removeConfirm='Are you sure to delete it ?'\n            limit={3}\n            onSuccess={(_res, filem, data) => {\n              return data;\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='Name'>\n          <Input placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Address'>\n          <Textarea name='address' placeholder='please enter' />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "002-control",
        "title": "cn - 表单方法",
        "code": "/**\n * cn - 表单方法\n *    -- 可以通过 formRef 去获得表单的一些方法集, 包含校验, 清空校验, 提交等\n * en - Form Methods\n *    -- You can use formRef to get some methods of the form, including validation, clear validation, submission, etc\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Form, Input, TYPE, Button, Select, Rate, DatePicker } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\ntype ValueType = {\n  name?: string;\n};\ntype FormRef = TYPE.Form.Ref<any>;\n\nconst App: React.FC = () => {\n  const form = useRef<FormRef>();\n  const [value, setValue] = useState<ValueType>({});\n\n  useEffect(() => {}, []);\n\n  return (\n    <Form\n      value={value}\n      formRef={(formRef) => {\n        form.current = formRef;\n      }}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      onSubmit={(data) => {\n        console.log(data);\n      }}\n    >\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px 12px', marginBottom: 12 }}>\n        <div><Button mode=\"outline\" onClick={() => form.current?.reset()}>Reset</Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.submit()}>Submit</Button></div>\n        <div><Button mode=\"outline\"\n          onClick={() =>\n            form.current?.validate()\n            .then((values) => {\n              console.log('validate success', values);\n              // TODO: 校验成功处理逻辑\n            })\n            .catch((errorInfo) => {\n              console.log('validate failed errorInfo: >>', errorInfo)\n              // TODO: 校验失败处理逻辑\n            })\n          }\n        >\n          Validate\n        </Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.clearValidate()}>Clear validate</Button></div>\n        <div><Button mode=\"outline\" onClick={() => console.log(form.current?.getValue())}>Get value</Button></div>\n        <div><Button mode=\"outline\" onClick={() => {\n          form.current?.set({\n            name: 'Tom',\n            password: '123456',\n            holiday: {\n              startDate: '2024-10-01',\n              endDate: '2024-10-07',\n            },\n            hobby: ['Football', 'Movie']\n          })\n        }}>Set value</Button></div>\n        <div><Button mode=\"outline\" onClick={() => form.current?.submit(false)}>Submit without validate</Button></div>\n      </div>\n\n      <Form.Item label='Name' required>\n        <Input name='name' rules={[{ required: true, message: 'name is required' }]} clearable />\n      </Form.Item>\n\n      <Form.Item label='Rate' required>\n        <StarRate name=\"rate\" allowHalf defaultValue={3.5} />\n      </Form.Item>\n\n      <Form.Item label='Password' required>\n        <Input.Password\n          clearable\n          name='password'\n          rules={[{ required: true, message: 'password is required' }]}\n        />\n      </Form.Item>\n\n      <Form.Item label='Holiday'>\n        <Form.FieldSet name='holiday'>\n          <DatePicker range name={['startDate', 'endDate']} />\n        </Form.FieldSet>\n      </Form.Item>\n      <Form.Item label='Hobby'>\n        <Select multiple keygen data={['Football', 'Movie', 'Barbecue']} name='hobby'></Select>\n      </Form.Item>\n\n      <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n        <Form.Submit>Submit</Form.Submit>\n        <Form.Reset>Reset</Form.Reset>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "003-label-1",
        "title": "cn - 标签对齐方式",
        "code": "/**\n * cn - 标签对齐方式\n *    -- 通过 labelWidth 和 labelAlign 改变标签宽度和水平对齐方式\n * en -\n *    --\n */\n\nimport { useState } from 'react';\nimport { Form, Input, TYPE, Radio } from 'shineout';\n\ntype FormProps = TYPE.Form.Props<any>;\n\nconst alignArr: FormProps['labelAlign'][] = ['left', 'top', 'right'];\nexport default () => {\n  const [align, setAlign] = useState<FormProps['labelAlign']>('right');\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Radio.Group value={align} data={alignArr} keygen onChange={setAlign} />\n      </div>\n      <Form labelWidth={65} labelAlign={align} style={{ maxWidth: 500 }}>\n        <Form.Item label='Email'>\n          <Input name='email' clearable />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' clearable />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: align === 'top' ? -10 : 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "003-label-2",
        "title": "cn -",
        "code": "/**\n * cn -\n *    -- 当 label 文字存在换行时，可使用 labelVerticalAlign 来控制垂直方向对齐方式\n * en -\n *    -- When the label text has a line break, you can use labelVerticalAlign to control the vertical alignment\n */\n\nimport { useState } from 'react';\nimport { Form, Input, TYPE, Radio, Textarea } from 'shineout';\n\ntype FormProps = TYPE.Form.Props<any>;\n\nconst alignArr: FormProps['labelVerticalAlign'][] = ['bottom', 'top', 'middle'];\n\nexport default () => {\n  const [align, setAlign] = useState<FormProps['labelVerticalAlign']>('top');\n  return (\n    <>\n      <div style={{ marginBottom: 24 }}>\n        <Radio.Group value={align} data={alignArr} keygen onChange={setAlign} />\n      </div>\n      <Form labelWidth={65} labelVerticalAlign={align} style={{ maxWidth: 500 }}>\n        <Form.Item label='Your Email'>\n          <Input name='email' clearable />\n        </Form.Item>\n\n        <Form.Item label='Password'>\n          <Input name='password' type='password' clearable />\n        </Form.Item>\n        <Form.Item label='Your Address'>\n          <Textarea name='address' />\n        </Form.Item>\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "003-label-3",
        "title": "cn - 标签冒号",
        "code": "/**\n * cn - 标签冒号\n *    -- 设置 `Form` 的 `colon` 属性，开启所有label的冒号显示。\n *    -- 也可单独设置 `Form.Item` 的 `colon` 属性，优先级高于 `Form` 的 `colon` 属性。\n *    -- `colon` 的格式也可以是自定义的ReactNode。\n * en - Label colon\n *    -- Set the colon property of Form to enable the colon display of all labels.\n *    -- You can also set the colon property of FormItem separately, which has higher priority than the colon property of Form.\n *    -- The format of `colon` can also be a custom ReactNode.\n */\n\nimport { useState } from 'react';\nimport { Form, Input, Switch, Textarea } from 'shineout';\n\nexport default () => {\n  const [colonVisible, setColonVisible] = useState(true);\n  return (\n    <Form labelWidth={120} style={{ maxWidth: 500 }} colon={colonVisible}>\n      <Form.Item label='Show Colon'>\n        <Switch value={colonVisible} onChange={setColonVisible} content={['ON', 'OFF']} />\n      </Form.Item>\n      <Form.Item label='Your Email'>\n        <Input name='email' clearable />\n      </Form.Item>\n      <Form.Item label='Password'>\n        <Input name='password' type='password' clearable />\n      </Form.Item>\n      <Form.Item label='Your Address'>\n        <Textarea name='address' />\n      </Form.Item>\n    </Form>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [
      "Item",
      "Field",
      "FieldSet",
      "Button",
      "Submit",
      "Reset",
      "Flow",
      "useForm",
      "useFormInstance"
    ],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 28,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {
      "Item": {
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "label",
            "type": "ReactNode | LabelConfig",
            "required": false,
            "description": "未定义时，标签不会 render，也不会占位。如果无内容需要占位，使用空字符串 \\\"\\\"。"
          },
          {
            "name": "tip",
            "type": "ReactNode",
            "required": false,
            "description": "提示文案"
          },
          {
            "name": "required",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "必填标记，纯展示用，不会触发校验"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "表单元素"
          },
          {
            "name": "labelWidth",
            "type": "string | number",
            "required": false,
            "defaultValue": "140px",
            "description": "标签宽度，labelAlign 为 \\\"top\\\" 时无效。统一设置表单项标签的宽度。可以是具体像素值（如 \\\"140px\\\"）或百分比（如 \\\"30%\\\"）。当标签顶部对齐时此配置无效。用于保持表单整齐的视觉效果，确保所有表单项的输入区域左对齐"
          },
          {
            "name": "labelAlign",
            "type": "\"left\" | \"right\" | \"top\"",
            "required": false,
            "description": "默认为空，跟随主题样式。标签的对齐方式。\\\"left\\\" 左对齐，\\\"right\\\" 右对齐，\\\"top\\\" 顶部对齐。不同的对齐方式适用于不同的表单布局需求：\\\"right\\\" 适合传统表单布局，\\\"top\\\" 适合移动端或紧凑布局，\\\"left\\\" 适合特殊设计需求"
          },
          {
            "name": "labelVerticalAlign",
            "type": "\"top\" | \"bottom\" | \"middle\"",
            "required": false,
            "defaultValue": "\\\"top\\\"",
            "description": "默认顶部对齐。标签的垂直对齐方式。当标签和输入框在同一行时（labelAlign 为 \\\"left\\\" 或 \\\"right\\\"），控制标签相对于输入框的垂直位置。\\\"top\\\" 与输入框顶部对齐，\\\"middle\\\" 居中对齐，\\\"bottom\\\" 与输入框底部对齐"
          },
          {
            "name": "keepErrorHeight",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "单行错误提示不撑开页面高度。保持错误提示高度固定，避免错误信息出现/消失时页面抖动。开启后会预留错误信息的显示空间，确保表单高度稳定。适用于对布局稳定性要求较高的场景，如表单项较多的长表单。注意：当 keepErrorBelow 为 true 时，此配置会失效"
          },
          {
            "name": "keepErrorBelow",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "是否保持错误信息在提示信息下方。控制错误信息的显示位置。开启后错误信息始终显示在表单项的 tip 属性下方，保持布局的一致性。关闭时错误信息可能会覆盖 tip 信息。适用于同时需要显示提示信息和错误信息的场景。注意：开启后会使 keepErrorHeight 失效",
            "version": "3.7.0"
          },
          {
            "name": "inline",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "是否水平布局。将表单项横向排列，适用于简单的单行表单或筛选表单。开启后表单项会在同一行显示，自动换行。通常用于搜索条件、筛选器等需要节省垂直空间的场景"
          },
          {
            "name": "colon",
            "type": "ReactNode",
            "required": false,
            "defaultValue": "false",
            "description": "统一控制所有表单项标签后是否显示冒号。可以是布尔值（true 显示默认冒号 \\\":\\\"）或自定义的 ReactNode（如 \\\"：\\\"、\\\"->\\\"等）。Form.Item 上的 colon 属性优先级更高，可以覆盖此全局设置",
            "version": "3.6.0"
          }
        ]
      },
      "Field": {
        "props": [
          {
            "name": "name",
            "type": "string | string[]",
            "required": true,
            "description": "绑定到表单数据的字段名称。支持点表示法访问嵌套对象（如 \\\"user.name\\\"）或数组语法（如 [\\\"user\\\", \\\"name\\\"]）。用于标识和管理特定的表单字段数据"
          },
          {
            "name": "reserveAble",
            "type": "boolean",
            "required": false,
            "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
          },
          {
            "name": "defaultValue",
            "type": "T",
            "required": false,
            "description": "表单首次渲染时字段的初始值。仅在组件初始化时生效，后续更改不会更新。常用于为新记录设置初始状态或提供默认值"
          },
          {
            "name": "rules",
            "type": "RuleItem[]",
            "required": false,
            "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
          },
          {
            "name": "children",
            "type": "((opts: object) => ReactNode) | ReactNode",
            "required": true,
            "description": "要渲染的表单控件。可以是具有 value/onChange 属性的 React 元素，或渲染函数。使用渲染函数时，会接收包含以下属性的对象：value（当前字段值）、onChange（值变更处理器）、error（校验错误）、disabled（继承自表单）、status（字段状态）。适用于自定义组件、第三方控件或复杂输入场景"
          },
          {
            "name": "onError",
            "type": "((error?: Error ) => void)",
            "required": false,
            "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
          },
          {
            "name": "bind",
            "type": "string[]",
            "required": false,
            "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
          }
        ]
      },
      "FieldSet": {
        "props": [
          {
            "name": "name",
            "type": "string",
            "required": true,
            "description": "绑定到表单数据的字段集名称。用于标识和管理一组相关的表单字段或数组数据。支持点表示法访问嵌套对象（如 \\\"users\\\"、\\\"company.employees\\\"）"
          },
          {
            "name": "children",
            "type": "((opts: object) => ReactNode) |ReactNode",
            "required": true,
            "description": "在字段集内渲染的内容。支持两种模式：\\n\\n**对象模式**（React 元素）：用于管理嵌套对象字段。子字段名称会自动加上字段集名称前缀。适用于分组相关表单字段，如地址、联系信息或用户资料等部分。\\n\\n**数组模式**（渲染函数）：用于管理动态数组数据。函数接收包含以下属性的对象：\\n- `list`：该字段集的完整数组数据\\n- `value`：当前索引位置的数据项\\n- `index`：当前数据项在数组中的索引\\n- `error`：当前数据项的校验错误\\n- `onChange`：更新当前数据项\\n- `onInsert`：在当前位置之前插入新数据项\\n- `onAppend`：在当前位置之后插入新数据项\\n- `onRemove`：从数组中移除当前数据项\\n\\n适用于动态列表、可重复表单部分或可编辑表格。"
          },
          {
            "name": "empty",
            "type": "((insert: (val: any) => void) => ReactNode)",
            "required": false,
            "description": "数组为空时显示的内容。仅在数组模式下（children 为函数时）有效。渲染函数接收 `insert` 回调来添加第一个数据项。适用于显示“添加第一个项目”按钮、空状态提示或动态列表的引导信息"
          },
          {
            "name": "defaultValue",
            "type": "T",
            "required": false,
            "description": "默认值"
          },
          {
            "name": "reserveAble",
            "type": "boolean",
            "required": false,
            "description": "设置为 true 组件卸载后表单不自动删除数据"
          },
          {
            "name": "rules",
            "type": "RuleItem[]",
            "required": false,
            "description": "校验规则 详见 Rule"
          }
        ]
      },
      "Flow": {
        "props": [
          {
            "name": "children",
            "type": "(datum: FormDatum) => ReactNode",
            "required": true,
            "description": "渲染函数，接收表单数据管理器（datum）并返回 React 节点。datum 对象提供了动态获取/设置表单值的方法。适用于创建表单字段依赖关系、基于表单状态的条件渲染，或执行需要访问多个表单值的操作"
          },
          {
            "name": "names",
            "type": "string[]",
            "required": false,
            "description": "要监听变化的字段名称数组。为空或未定义时，表单内任意值变化都会触发重新渲染。指定后，仅这些字段的变化会触发更新。支持嵌套路径如 \\\"user.name\\\" 或 \\\"items[0].price\\\"。通过限制不必要的重新渲染来优化性能"
          },
          {
            "name": "strict",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "设为 true 时，使用缓存机制防止重新渲染，除非监听的字段值真正发生变化。在严格模式下，只有指定的 names 字段值（而非仅引用）改变时才重新渲染子组件。适用于包含昂贵渲染操作的复杂表单的性能优化",
            "version": "3.6.0"
          }
        ]
      }
    }
  },
  "Gap": {
    "name": "Gap",
    "description": "设置组件之间的间距",
    "category": "layout",
    "importPath": "import { Gap } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "column",
        "type": "string | number",
        "required": false,
        "defaultValue": "8",
        "description": "水平方向的列间距"
      },
      {
        "name": "row",
        "type": "string | number",
        "required": false,
        "defaultValue": "8",
        "description": "垂直方向的行间距"
      },
      {
        "name": "itemStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "子元素自定义样式"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 为子元素设置水平和垂直间距\n * en - Base\n *    -- Set horizontal and vertical spacing for child elements\n */\nimport React from 'react';\nimport { Gap, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <Gap style={{ width: 400 }}>\n    {Array.from({ length: 10 }).map((_, i) => (\n      <Button key={i} type='primary'>\n        Button\n      </Button>\n    ))}\n  </Gap>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-custom",
        "title": "cn - 自定义间距",
        "code": "/**\n * cn - 自定义间距\n *    -- 通过 row 和 column 分别来调整垂直和水平间距\n *    -- 推荐优先考虑4px、8px、12px、16px、24px的间距值\n * en - Custom\n *    -- custom the vertical and horizontal spacing by row and column\n *    -- It is recommended to consider the spacing values of 4px, 8px, 12px, 16px, 24px first\n */\nimport React, { useState } from 'react';\nimport { Gap, Button, Slider } from 'shineout';\n\nconst App: React.FC = () => {\n  const [row, setRow] = useState(8);\n  const [column, setColumn] = useState(8);\n  return (\n    <>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 16 }}>\n        <div style={{ width: 80 }}>column:</div>\n        <Slider\n          style={{ flex: 1 }}\n          scale={[0, 100]}\n          formatScale={false}\n          defaultValue={column}\n          onChange={setColumn}\n        />\n      </div>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 24 }}>\n        <div style={{ width: 80 }}>row:</div>\n        <Slider\n          style={{ flex: 1 }}\n          scale={[0, 100]}\n          formatScale={false}\n          defaultValue={row}\n          onChange={setRow}\n        />\n      </div>\n      <div style={{ width: 500, border: '1px solid #e8ebf0', borderRadius: '4px', padding: 10 }}>\n        <Gap row={row} column={column}>\n          {Array.from({ length: 10 }).map((_, i) => (\n            <Button key={i} type='primary'>\n              Button\n            </Button>\n          ))}\n        </Gap>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-vertical",
        "title": "cn - 垂直方向",
        "code": "/**\n * cn - 垂直方向\n *    -- 设置  flexDirection 样式来改变方向\n * en - Vertical\n *    -- Set flexDirection to change the direction\n */\nimport React from 'react';\nimport { Gap, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <Gap style={{ width: 400, flexDirection: 'column' }} row={10}>\n    {Array.from({ length: 4 }).map((_, i) => (\n      <Button key={i} type='primary'>\n        Button\n      </Button>\n    ))}\n  </Gap>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-align",
        "title": "cn - 对齐方式",
        "code": "/**\n * cn - 对齐方式\n *    -- 通过 alignItem 设置对齐方式\n * en - Align\n *    -- Set align to change the alignment\n */\nimport React, { useState } from 'react';\nimport { Gap, Button, Radio } from 'shineout';\n\nconst App: React.FC = () => {\n  const [align, setAlign] = useState('flex-start');\n  return (\n    <>\n      <Radio.Group\n        value={align}\n        onChange={setAlign}\n        data={['flex-start', 'center', 'flex-end', 'baseline']}\n        keygen\n        defaultValue='flex-start'\n      />\n\n      <Gap\n        style={{\n          width: 160,\n          marginTop: 16,\n          border: '1px solid #e8ebf0',\n          borderRadius: '4px',\n          alignItems: align,\n          padding: 12,\n        }}\n        row={20}\n      >\n        <span>start</span>\n        <Button type='primary'>Button</Button>\n        <div\n          style={{\n            fontSize: 14,\n            background: '#f4f5f8',\n            height: 120,\n            lineHeight: '24px',\n            borderRadius: '4px',\n            padding: '12px',\n          }}\n        >\n          end\n        </div>\n      </Gap>\n    </>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 6,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Grid": {
    "name": "Grid",
    "description": "动态栅格体系，用于某些不适合使用 flex 的地方",
    "category": "layout",
    "importPath": "import { Grid } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "gutter",
        "type": "number",
        "required": false,
        "description": "栅格之间间距"
      },
      {
        "name": "offset",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "左偏移百分比，0 <= offset < 1"
      },
      {
        "name": "width",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "宽度百分比，0 < number <= 1"
      },
      {
        "name": "responsive",
        "type": "\"sm\" | \"md\" | \"lg\" | \"xl\"",
        "required": false,
        "defaultValue": "\\\"md\\\"",
        "description": "激活响应式的最小尺寸。sm: 568px; md: 768px; lg: 992px; xl: 1200px;\\n例如：设置为 sm 时，屏幕尺寸若低于568px，栅格系统的响应性将不会生效。"
      },
      {
        "name": "stretch",
        "type": "boolean",
        "required": false,
        "description": "是否撑满容器高度"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 任意等分",
        "code": "/**\n * cn - 任意等分\n *    -- Grid 的栅格体系是动态生成，可以实现任意等份\n * en - Arbitrary\n *    -- Grid system is dynamic generated and can be any number\n */\nimport React, { useState } from 'react';\nimport { Grid, Slider, TYPE } from 'shineout';\n\ntype SliderProps = TYPE.Slider.Props<number>;\ntype SliderOnChange = SliderProps['onChange'];\n\nconst gridStyle: React.CSSProperties = {\n  color: '#fff',\n  paddingInlineStart: 8,\n  background: '#197afa',\n  fontSize: 14,\n};\nconst style: React.CSSProperties = { background: '#e8ebf0', marginBottom: 4, lineHeight: '30px' };\n\nconst App: React.FC = () => {\n  const [count, setCount] = useState(5);\n\n  const handleCountChange: SliderOnChange = (v) => {\n    setCount(v);\n  };\n  return (\n    <div>\n      <Slider\n        step={0}\n        value={count}\n        formatValue={false}\n        onChange={handleCountChange}\n        scale={[1, 2, 3, 5, 8, 13, 21, 34, 55]}\n      />\n\n      <div style={{ height: 20 }} />\n\n      {Array.from({ length: count }).map((_n, i) => (\n        <div key={i} style={style}>\n          <Grid width={(i + 1) / count} style={gridStyle}>\n            {`${i + 1}/${count}`}\n          </Grid>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-offset",
        "title": "cn - 偏移",
        "code": "/**\n * cn - 偏移\n *    -- offset 属性可以设置偏移，取值方式和宽度相同\n * en - Offset\n *    -- The offset property set the offset in the same way as the width\n */\nimport React from 'react';\nimport { Grid } from 'shineout';\n\nconst style: React.CSSProperties = {\n  background: '#e8ebf0',\n};\nconst gridStyle: React.CSSProperties = {\n  color: '#fff',\n  lineHeight: '60px',\n  textAlign: 'center',\n  background: '#197afa',\n  fontSize: 14,\n};\n\nconst App: React.FC = () => (\n  <div style={style}>\n    <Grid width={1 / 3} offset={1 / 3} style={gridStyle}>\n      With 1/3, Offset 1/3\n    </Grid>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-nested",
        "title": "cn - 嵌套",
        "code": "/**\n * cn - 嵌套\n *    -- 嵌套的栅格\n * en - Nested\n *    -- Nested grids\n */\nimport React from 'react';\nimport { Grid } from 'shineout';\n\nconst style: React.CSSProperties = {\n  color: '#fff',\n  lineHeight: '30px',\n  textAlign: 'center',\n  background: '#197afa',\n  fontSize: 14,\n};\n\nconst App: React.FC = () => (\n  <Grid style={{ textAlign: 'center' }}>\n    <Grid width={1 / 2} style={style}>\n      1/2\n    </Grid>\n\n    <Grid width={1 / 2} style={{ lineHeight: '30px' }}>\n      <div style={{ fontSize: 14 }}>1/2</div>\n      <div>\n        <Grid style={style} width={1 / 3}>\n          1/3\n        </Grid>\n        <Grid\n          style={{ ...style, background: '#6bb5ff', color: '#fff', fontSize: 14 }}\n          width={1 / 3}\n        >\n          1/3\n        </Grid>\n        <Grid style={style} width={1 / 3}>\n          1/3\n        </Grid>\n      </div>\n    </Grid>\n  </Grid>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-gutter",
        "title": "cn - 间距",
        "code": "/**\n * cn - 间距\n *    -- 通过 gutter 属性设置栅格间距\n * en - Gutter\n *    -- Set grid spacing through the gutter property\n */\nimport React from 'react';\nimport { Grid } from 'shineout';\n\nconst style: React.CSSProperties = {\n  background: '#e8ebf0',\n};\nconst gridStyle: React.CSSProperties = {\n  color: '#fff',\n  lineHeight: '30px',\n  textAlign: 'center',\n  background: '#197afa',\n  fontSize: 14,\n};\nconst gridStyle2: React.CSSProperties = {\n  color: '#fff',\n  lineHeight: '30px',\n  textAlign: 'center',\n  background: '#6bb5ff',\n  fontSize: 14,\n};\n\nconst App: React.FC = () => (\n  <div style={style}>\n    <Grid gutter={8}>\n      {Array.from({ length: 8 })\n        .map((_, i) => i + 1)\n        .map((i) => (\n          <Grid key={i} width={1 / 8}>\n            <div style={i % 2 === 0 ? gridStyle2 : gridStyle}>1/8</div>\n          </Grid>\n        ))}\n    </Grid>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 8,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Image": {
    "name": "Image",
    "description": "用于图片展示及预览",
    "category": "other",
    "importPath": "import { Image } from 'shineout'",
    "props": [
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "onClick",
        "type": "MouseEventHandler<Element>",
        "required": false,
        "description": "点击图片的回调"
      },
      {
        "name": "onError",
        "type": "((e: Event, type: number) => void)",
        "required": false,
        "description": "src或alt 地址请求出错回调"
      },
      {
        "name": "placeholder",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "\\\"loading",
        "description": "图加载时的占位内容"
      },
      {
        "name": "title",
        "type": "string",
        "required": false,
        "description": "原生 title 属性"
      },
      {
        "name": "renderHoverMask",
        "type": "((options: { preview: () => void }) => ReactElement)",
        "required": false,
        "description": "自定义渲染 hover 时的遮罩层内容，options参数中有一个 preview 方法，调用 preview 方法可以预览图片",
        "version": "3.6.0"
      },
      {
        "name": "fit",
        "type": "\"fill\" | \"center\" | \"fit\" | \"stretch\"",
        "required": false,
        "defaultValue": "-",
        "description": "图片填充方式"
      },
      {
        "name": "container",
        "type": "string | HTMLElement",
        "required": false,
        "defaultValue": "-",
        "description": "懒加载容器"
      },
      {
        "name": "error",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "-",
        "description": "自定义错误内容"
      },
      {
        "name": "href",
        "type": "string",
        "required": false,
        "description": "原始图片地址"
      },
      {
        "name": "lazy",
        "type": "number | boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否延迟加载，如果为数字则表示懒加载偏移量"
      },
      {
        "name": "inViewOnly",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否仅在视图内加载",
        "version": "3.4.5"
      },
      {
        "name": "noImgDrag",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁止 img 元素原生 draggable 属性"
      },
      {
        "name": "shape",
        "type": "\"rounded\" | \"circle\" | \"thumbnail\"",
        "required": false,
        "defaultValue": "\\\"rounded\\\"",
        "description": "图片形状"
      },
      {
        "name": "target",
        "type": "\"_self\" | \"_blank\" | \"_modal\" | \"_download\"",
        "required": false,
        "defaultValue": "\\\"_modal\\\"",
        "description": "图片打开方式"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "defaultValue": "100%",
        "description": "图片宽度"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "defaultValue": "100%",
        "description": "图片高度"
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": "图片地址"
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": "备用地址，src无效时会应用"
      },
      {
        "name": "autoSSL",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否根据页面自动转换协议"
      }
    ],
    "examples": [
      {
        "name": "s-001-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    --基础 Image 用法\n * en - Base\n *    --Base Image\n */\n\nimport React from 'react';\nimport { Image } from 'shineout';\n\nexport default () => {\n  return (\n    <div\n      style={{\n        gap: 8,\n        display: 'flex',\n      }}\n    >\n      <Image\n        fit='fill'\n        width={128}\n        height={128}\n        target='_modal'\n        src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n        href='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n      ></Image>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-002-status",
        "title": "cn - 不同状态",
        "code": "/**\n * cn - 不同状态\n *    -- 图片在加载过程中，会有不同的状态。不同状态下的 Image 展现形式不同\n * en - Status\n *    -- Image has different status when loading\n */\n\nimport React from 'react';\nimport { Image, Button } from 'shineout';\n\nexport default () => {\n  const [key, setKey] = React.useState(0);\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setKey(key + 1);\n        }}\n        style={{marginBottom: 12}}\n      >\n        reload\n      </Button>\n      <div\n        key={key}\n        style={{\n          gap: 8,\n          display: 'flex',\n        }}\n      >\n        <Image\n          fit='fill'\n          width={128}\n          height={128}\n          target='_modal'\n          src={`https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png?v=${key}`}\n          href={`https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png?v=${key}`}\n        />\n        <Image fit='fill' width={128} height={128} src='error' />\n      </div>\n    </>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-003-custom",
        "title": "cn -",
        "code": "/**\n * cn -\n *    -- 支持自定义渲染不同状态下的内容：\n *    -- 1、通过设置 `error` 属性自定义渲染加载失败时的内容\n *    -- 2、通过设置 `placeholder` 属性用于自定义渲染加载中时的占位符内容\n * en -\n *    -- Custom rendering of content in different states:\n *    -- 1. `error` is used to customize the content when loading fails\n *    -- 2. `placeholder` is used to customize the placeholder content when loading\n */\n\nimport React from 'react';\nimport { Image, Button } from 'shineout';\n\nexport default () => {\n  const [key, setKey] = React.useState(0);\n  const renderIcon = () => {\n    return (\n      <svg\n        width='16'\n        height='16'\n        viewBox='0 0 16 16'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          fillRule='evenodd'\n          clipRule='evenodd'\n          d='M6.67122 2C7.4076 2 8.00456 2.59695 8.00456 3.33333C8.00456 3.50839 7.97008 3.68173 7.90311 3.84347L7.42418 5L8.6665 6.91387L7.18965 9.80933L8.04044 12.2235C8.2852 12.918 7.92059 13.6794 7.22608 13.9242C7.08371 13.9744 6.93386 14 6.78291 14H1.99984C1.26346 14 0.666504 13.403 0.666504 12.6667V3.33333C0.666504 2.59695 1.26346 2 1.99984 2H6.67122ZM13.9998 2C14.7362 2 15.3332 2.59695 15.3332 3.33333V12.6667C15.3332 13.403 14.7362 14 13.9998 14H10.7806C10.2061 14 9.69625 13.6321 9.51521 13.0869L8.42684 9.80933L9.81843 6.66667L8.6665 5L9.10115 3.04409C9.23672 2.43404 9.7778 2 10.4027 2H13.9998ZM4.13693 9.53628L1.99984 11.664V12C1.99984 12.3682 2.29831 12.6667 2.6665 12.6667H5.84111C6.2093 12.6667 6.50778 12.3682 6.50778 12C6.50778 11.9245 6.49497 11.8496 6.46988 11.7784L5.86317 10.058L5.1383 9.48081C4.83888 9.24225 4.40817 9.26611 4.13693 9.53628ZM10.2945 8.88333L9.95912 9.64247C9.89202 9.79403 9.88378 9.96515 9.93601 10.1225L10.6292 12.2101C10.7197 12.4827 10.9747 12.6667 11.2619 12.6667H13.3332C13.7014 12.6667 13.9998 12.3682 13.9998 12V11.7053L10.2945 8.88333ZM13.3332 3.33333H10.9377C10.6251 3.33333 10.3545 3.55045 10.2868 3.85556L10.1579 4.43666C10.1177 4.61775 10.1548 4.8074 10.2602 4.96002L11.1278 6.21597C11.2597 6.40688 11.2829 6.65263 11.1889 6.86479L10.8145 7.70933L13.9998 10.1347V4C13.9998 3.63181 13.7014 3.33333 13.3332 3.33333ZM5.69471 3.33333H2.6665C2.29831 3.33333 1.99984 3.63181 1.99984 4V10.0933L4.13693 7.96532C4.40817 7.69516 4.83888 7.6713 5.1383 7.90986L6.03493 8.62424C6.0979 8.67442 6.16629 8.71346 6.23767 8.7416L6.95367 7.33688C7.06186 7.1247 7.04864 6.87093 6.919 6.67114L6.11482 5.43183C5.99536 5.24774 5.97415 5.01664 6.05812 4.81387L6.29761 4.23555C6.43549 3.90258 6.27735 3.52087 5.94438 3.38298C5.86522 3.3502 5.78038 3.33333 5.69471 3.33333ZM3.99984 4C4.73621 4 5.33317 4.59696 5.33317 5.33333C5.33317 6.0697 4.73621 6.66667 3.99984 6.66667C3.26347 6.66667 2.6665 6.0697 2.6665 5.33333C2.6665 4.59696 3.26347 4 3.99984 4ZM3.99984 5.14286C3.89463 5.14286 3.80936 5.22813 3.80936 5.33333C3.80936 5.43854 3.89463 5.52381 3.99984 5.52381C4.10504 5.52381 4.19031 5.43854 4.19031 5.33333C4.19031 5.22813 4.10504 5.14286 3.99984 5.14286Z'\n          fill='#B3B7C1'\n        />\n      </svg>\n    );\n  };\n  const renderError = () => {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexDirection: 'column',\n          fontSize: 12,\n          color: '#666C7C',\n        }}\n      >\n        <div>{renderIcon()}</div>\n        <div>Error</div>\n      </div>\n    );\n  };\n\n  const renderPlaceholder = () => {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 12,\n          color: '#666C7C',\n        }}\n      >\n        <div>疯狂加载中...</div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setKey(key + 1);\n        }}\n        style={{ marginBottom: 12 }}\n      >\n        reload\n      </Button>\n\n      <div\n        key={key}\n        style={{\n          gap: 8,\n          display: 'flex',\n        }}\n      >\n        <Image\n          fit='fill'\n          width={128}\n          height={128}\n          target='_modal'\n          placeholder={renderPlaceholder()}\n          src={`https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png?v=${key}`}\n        />\n        <Image fit='fill' width={128} height={128} src='error' error={renderError()} />\n      </div>\n    </>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-004-shape",
        "title": "cn - 图片形状",
        "code": "/**\n * cn - 图片形状\n *    -- Image 可以设置不同的形状\n *    -- 内置三种不同的形状：圆角模式 rounded、圆形模式 circle、带边框模式 thumbnail\n * en - Shape\n *    -- Image can be set to different shapes\n */\n\nimport React from 'react';\nimport { Image } from 'shineout';\n\nexport default () => {\n  return (\n    <div\n      style={{\n        gap: 8,\n        display: 'flex',\n      }}\n    >\n      <Image\n        shape='rounded'\n        fit='fill'\n        width={128}\n        height={128}\n        src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n      ></Image>\n      <Image\n        shape='circle'\n        fit='fill'\n        width={128}\n        height={128}\n        src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n      ></Image>\n      <Image\n        shape='thumbnail'\n        fit='fill'\n        width={128}\n        height={128}\n        src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n      ></Image>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-005-fit",
        "title": "cn - 填充方式",
        "code": "/**\n * cn - 填充方式\n *    -- Image 四种不同的图片填充方式：\n *    -- fill 填充整个容器、center 居中、fit 原图、stretch 拉伸；默认推荐使用「填充」\n * en - Fit\n *    -- Image has four different fill modes:\n *    -- fill, center, fit, stretch ; fill is recommended by default\n */\n\nimport React from 'react';\nimport { Image } from 'shineout';\n\nexport default () => {\n  const fit = ['fill', 'center', 'fit', 'stretch'];\n\n  return (\n    <div\n      style={{\n        gap: 8,\n        display: 'flex',\n      }}\n    >\n      {fit.map((item, index) => {\n        return (\n          <div key={index} style={{ display: 'flex', flexDirection: 'column' }}>\n            <Image\n              fit={item as any}\n              width={128}\n              height={128}\n              src='https://raw.githubusercontent.com/sheinsight/shineout-static/main/shineout-next/images/image/s-01.png'\n            ></Image>\n            <div style={{ textAlign: 'center', color: '#141737', fontSize: 12, marginTop: 5 }}>\n              {item}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [
      "Group"
    ],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 21,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {
      "Group": {
        "props": [
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "showCount",
            "type": "boolean",
            "required": false,
            "description": "显示图片数量"
          },
          {
            "name": "target",
            "type": "\"_self\" | \"_blank\" | \"_modal\" | \"_download\"",
            "required": false,
            "defaultValue": "\\\"_modal\\\"",
            "description": "图片打开方式"
          },
          {
            "name": "shape",
            "type": "\"rounded\" | \"circle\" | \"thumbnail\"",
            "required": false,
            "defaultValue": "\\\"rounded\\\"",
            "description": "图片形状"
          },
          {
            "name": "lazy",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "是否延迟加载"
          },
          {
            "name": "pile",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "是否堆叠"
          },
          {
            "name": "fit",
            "type": "\"fill\" | \"center\" | \"fit\" | \"stretch\"",
            "required": false,
            "description": "图片填充方式"
          },
          {
            "name": "width",
            "type": "string | number",
            "required": false,
            "defaultValue": "100%",
            "description": "图片宽度"
          },
          {
            "name": "height",
            "type": "string | number",
            "required": false,
            "defaultValue": "100%",
            "description": "图片高度"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true,
            "description": "子元素"
          }
        ]
      }
    }
  },
  "Input": {
    "name": "Input",
    "description": "通常用于承载用户信息录入的文本框，常用于表单、对话框、表格等场景，在输入框基础样式上可以根据需求拓展出多种信息录入形式",
    "category": "other",
    "importPath": "import { Input } from 'shineout'",
    "props": [
      {
        "name": "value",
        "type": "string",
        "required": false,
        "description": "输入值"
      },
      {
        "name": "onChange",
        "type": "(value: string) => void",
        "required": false,
        "description": "值改变回调"
      },
      {
        "name": "defaultValue",
        "type": "string",
        "required": false,
        "description": "默认值"
      },
      {
        "name": "clearable",
        "type": "boolean | (() => void)",
        "required": false,
        "defaultValue": "false",
        "description": "可点击清空图标删除输入框内容，为函数式表示清空回调"
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "onBlur",
        "type": "FocusEventHandler<HTMLInputElement>",
        "required": false,
        "description": "失去焦点后的回调"
      },
      {
        "name": "onFocus",
        "type": "FocusEventHandler<HTMLInputElement>",
        "required": false,
        "description": "聚焦后的回调"
      },
      {
        "name": "onClick",
        "type": "MouseEventHandler<Element>",
        "required": false,
        "description": "点击回调"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "禁用组件"
      },
      {
        "name": "autoSelect",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否自动获得焦点"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "prefix",
        "type": "ReactNode",
        "required": false,
        "description": "前缀"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "宽度"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "clearIcon",
        "type": "ReactNode",
        "required": false,
        "description": "自定义清除图标"
      },
      {
        "name": "suffix",
        "type": "ReactNode",
        "required": false,
        "description": "后缀"
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "仅仅展示下边框"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示边框"
      },
      {
        "name": "onEnterPress",
        "type": "((value: string, e: KeyboardEvent<Element>) => void)",
        "required": false,
        "description": "回车键回调函数"
      },
      {
        "name": "trim",
        "type": "boolean",
        "required": false,
        "description": "是否去除前后空格"
      },
      {
        "name": "numType",
        "type": "\"non-negative\" | \"positive\"",
        "required": false,
        "description": "设置数字类型 支持 \\\"positive\\\" 和 \\\"non-negative\\\", 仅在 type = number 下生效"
      },
      {
        "name": "coin",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "以千位分隔符展示,仅当 type 为 number 时有效"
      },
      {
        "name": "integerLimit",
        "type": "number",
        "required": false,
        "description": "整数位数限制, 仅在 type = number 下生效"
      },
      {
        "name": "digits",
        "type": "number",
        "required": false,
        "description": "小数位数限制, 仅在 type = number 下生效"
      },
      {
        "name": "autoFix",
        "type": "boolean",
        "required": false,
        "description": "是否自动补全小数位数, 仅在 type = number 下生效"
      },
      {
        "name": "tip",
        "type": "ReactNode",
        "required": false,
        "description": "提示信息"
      },
      {
        "name": "forwardRef",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "获取input dom元素"
      },
      {
        "name": "innerTitle",
        "type": "ReactNode",
        "required": false,
        "description": "内嵌标题"
      },
      {
        "name": "placeTitle",
        "type": "ReactNode",
        "required": false,
        "description": "占位标题，需要配合 innerTitle 一起使用"
      },
      {
        "name": "htmlName",
        "type": "string",
        "required": false,
        "description": "原生 html 属性"
      },
      {
        "name": "clearToUndefined",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "点击清除按钮后数据变为 undefined"
      },
      {
        "name": "info",
        "type": "number | ((value: string | undefined) => string)",
        "required": false,
        "description": "提示信息"
      },
      {
        "name": "delay",
        "type": "number",
        "required": false,
        "description": "用户输入触发 onChange 和校验间隔时间，单位 毫秒"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- Input 通常需要和其他的组件配合使用，所以默认的宽度是 100%，默认 display 为 block\n *    -- 如果设置了 style.width，默认 display 为 inline-flex\n * en - Base\n *    -- Input usually needs to be used with other components, so the default width is 100% and the default display is block\n *    -- If the style.width is set, the default display is inline-flex\n */\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => <Input width={300} placeholder='input something' clearable />;\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-size",
        "title": "cn - 尺寸大小",
        "code": "/**\n * cn - 尺寸大小\n *    -- 设置 `size` 属性改变输入框组件的尺寸大小。内置三种尺寸：small、default、large\n * en - Size\n *    -- Set the size property to change the size of the input box component. There are three built-in sizes available: small, default, and large\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ width: '100%', display: 'flex', alignItems: 'center', gap: 24, flexWrap: 'wrap' }}>\n    <Input size='small' width={240} placeholder='small size' clearable />\n    <Input width={240} placeholder='default size' clearable />\n    <Input size='large' width={240} placeholder='large size' clearable />\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-number-0",
        "title": "cn - 数字",
        "code": "/**\n * cn - 数字\n *    -- 设置 `type` 为 number，输入时会做一次校验，禁止输入非数字类型字符\n *    -- 设置 `digits` 限制小数位数\n *    -- 设置 `integerLimit` 限制整数位数\n *    -- 设置 `numType` 限制数字格式, 支持 'positive' 和 'non-negative'\n * en - Number\n *    -- Set `type` to number, the input will be verified once when inputting, and non-numeric characters are not allowed to be entered\n *    -- Set `digits` to limit the number of decimal places\n *    -- Set `integerLimit` to limit the number of integers\n *    -- Set `numType` to limit the number format, support 'positive' and 'non-negative'\n */\n\nimport React from 'react';\nimport { Input } from 'shineout';\n\nconst style: React.CSSProperties = { marginBottom: 24 };\n\nconst App: React.FC = () => (\n  <div style={{ width: 300 }}>\n    <Input style={style} type='number' placeholder='digits undefined' clearable />\n    <Input style={style} digits={0} type='number' placeholder='digits 0' clearable />\n    <Input style={style} digits={1} type='number' placeholder='digits 1' clearable />\n    <Input style={style} digits={2} type='number' placeholder='digits 2' clearable />\n    <Input style={style} numType='non-negative' type='number' placeholder='non-negative' clearable />\n    <Input style={style} type='number' integerLimit={3} placeholder='integerLimit 3' clearable />\n    <Input\n      style={style}\n      autoFix\n      digits={3}\n      type='number'\n      placeholder='digits 3; autoFix'\n      clearable\n    />\n    <Input\n      style={style}\n      numType='positive'\n      integerLimit={3}\n      type='number'\n      placeholder='positive;integerLimit 3'\n      clearable\n    />\n    <Input.Number numType='positive' integerLimit={3} placeholder='positive; integerLimit 3' clearable />\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-number-1",
        "title": "cn -",
        "code": "/**\n * cn -\n *    -- Input.Number 组件，可以通过鼠标和上下键辅助输入\n *    -- 需要注意在输入的过程中 value 是 string 类型；blur 时会转换为 number 类型\n * en -\n *    -- Input.Number component, can be assisted by mouse and up and down keys to input\n *    -- Note that the value is a string type during input; it will be converted to a number type when blur\n */\n\nimport React from 'react';\nimport { Input, Gap, Link, icons } from 'shineout';\n\nconst btnStyle: React.CSSProperties = {\n  cursor: 'pointer',\n  padding: '0 8px',\n  background: 'var(--soui-input-group-font-background-color,var(--soui-neutral-fill-2,#F4F5F8))',\n};\n\nconst leftBtnStyle: React.CSSProperties = {\n  ...btnStyle,\n  borderLeft: 'none',\n  borderRadius: '4px 0 0 4px',\n};\nconst rightBtnStyle: React.CSSProperties = {\n  ...btnStyle,\n  borderRight: 'none',\n  borderRadius: '0 4px 4px 0',\n};\n\nconst iconStyle: React.CSSProperties = {\n  width: 16,\n  height: 16,\n};\n\nconst App: React.FC = () => {\n  const [number, setNumber] = React.useState<string | undefined>();\n\n  const onMinus = () => {\n    setNumber((Number(number || 0) - 1).toString());\n  };\n\n  const onPlus = () => {\n    setNumber((Number(number || 0) + 1).toString());\n  };\n\n  return (\n    <Gap style={{ flexDirection: 'column', gap: 24 }}>\n      <Input.Group width={300}>\n        <Link onClick={onMinus} style={leftBtnStyle} type='secondary'>\n          <div style={iconStyle}>{icons.Minus}</div>\n        </Link>\n        <Input\n          type='number'\n          value={number}\n          onChange={(v) => setNumber(v)}\n          placeholder='please enter'\n        />\n        <Link onClick={onPlus} style={rightBtnStyle} type='secondary'>\n          <div style={iconStyle}>{icons.Add}</div>\n        </Link>\n      </Input.Group>\n\n      <Input.Number\n        width={300}\n        onChange={(v) => {\n          console.log('🚀outter Input.Number onChange', v);\n        }}\n        placeholder='please enter'\n      />\n    </Gap>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-01-group",
        "title": "cn - 前后标签",
        "code": "/**\n * cn - 前后标签\n *    -- 利用内置的 group 组件可以在前后增加标签\n * en - Front and rear tags\n *    -- Use the built-in group component to add tags before and after\n */\n\nimport React from 'react';\nimport { Input, Select, DatePicker, Button } from 'shineout';\n\nconst style: React.CSSProperties = { width: 300, marginBottom: 24 };\n\nconst App: React.FC = () => (\n  <div>\n    <Input.Group style={style}>\n      <b>http://</b>\n      <Input placeholder='please enter' />\n    </Input.Group>\n    <Input.Group style={style}>\n      <Input placeholder='please enter' />\n      <b>.com</b>\n    </Input.Group>\n    <Input.Group style={style}>\n      <b>http://</b>\n      <Input placeholder='please enter' />\n      <b>.com</b>\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Input placeholder='please enter' />\n      <div style={{ lineHeight: '30px' }}>-</div>\n      <Input placeholder='please enter' />\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Select keygen data={['Option1', 'Option2']} style={{width: 100, flex: 'none'}} defaultValue='Option1' />\n      <Input placeholder='please enter' />\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Select keygen data={['Option1', 'Option2']} style={{width: 100, flex: 'none'}} defaultValue='Option1' />\n      <DatePicker placeholder='please select' />\n    </Input.Group>\n\n    <Input.Group style={style}>\n      <Select keygen data={['Option1', 'Option2']} style={{width: 100, flex: 'none'}} defaultValue='Option1' />\n      <Input placeholder='please enter' />\n      <Button type='primary'>Search</Button>\n    </Input.Group>\n\n    <h3 style={{ marginBottom: 12, fontSize: 16 }}>Other Size</h3>\n    <Input.Group style={style} size=\"small\">\n      <b>http://</b>\n      <Input placeholder='email' />\n      <b>.com</b>\n    </Input.Group>\n\n    <Input.Group style={style} size=\"large\">\n      <b>http://</b>\n      <Input placeholder='email' />\n      <b>.com</b>\n    </Input.Group>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [
      "Group"
    ],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 42,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {
      "Group": {
        "props": [
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": ""
          },
          {
            "name": "status",
            "type": "\"error\"",
            "required": false,
            "description": "组件状态"
          },
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "size",
            "type": "\"small\" | \"large\" | \"default\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "不同尺寸"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": false,
            "description": "子元素"
          },
          {
            "name": "width",
            "type": "string | number",
            "required": false,
            "description": "宽度"
          },
          {
            "name": "disabled",
            "type": "boolean",
            "required": false,
            "description": "是否禁用 Input.Group 区域内容"
          },
          {
            "name": "onBlur",
            "type": "FocusEventHandler<HTMLInputElement>",
            "required": false,
            "description": "失去焦点后的回调"
          },
          {
            "name": "separate",
            "type": "boolean",
            "required": false,
            "defaultValue": "false",
            "description": "是否分离边框",
            "version": "3.7.0"
          }
        ]
      }
    }
  },
  "Link": {
    "name": "Link",
    "description": "链接是具有导航属性的文本，点击后跳转到某个页面",
    "category": "general",
    "importPath": "import { Link } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "href",
        "type": "string",
        "required": false,
        "description": "链接地址"
      },
      {
        "name": "target",
        "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\"",
        "required": false,
        "description": "链接打开方式"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "是否禁用"
      },
      {
        "name": "underline",
        "type": "boolean | \"hover\"",
        "required": false,
        "description": "是否常驻显示下划线, 设置为 \\\"hover\\\" 时鼠标悬浮时显示下划线"
      },
      {
        "name": "type",
        "type": "\"primary\" | \"secondary\" | \"danger\" | \"warning\" | \"success\"",
        "required": false,
        "defaultValue": "primary",
        "description": "链接类型"
      },
      {
        "name": "size",
        "type": "\"small\" | \"default\" | \"large\"",
        "required": false,
        "defaultValue": "default",
        "description": "链接图标大小"
      },
      {
        "name": "icon",
        "type": "ReactNode",
        "required": false,
        "description": "显示图标，设置为 true 时展示默认图标"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n* cn - 基本用法\n*    -- 链接的基本用法，设置 `href` 属性即可。\n* en - Basic\n*    -- Basic usage of link\n */\nimport React from 'react';\nimport { Link } from 'shineout';\n\nexport default () => <Link href=\"#\">Link</Link>;\n",
        "language": "tsx"
      },
      {
        "name": "02-type",
        "title": "cn - 链接状态",
        "code": "/**\n* cn - 链接状态\n*    -- 设置`type`属性可以改变链接的状态，包括 primary, secondary, danger, warning, success。\n* en - Link type\n*    -- Set the `type` property to change the style of the link, including primary, secondary, danger, warning, success.\n */\nimport React from 'react';\nimport { Gap, Link } from 'shineout';\n\nexport default () => {\n  return (\n    <Gap column={24}>\n      <Link href=\"#\" type=\"primary\">Link</Link>\n      <Link href=\"#\" type=\"secondary\">Link</Link>\n      <Link href=\"#\" type=\"danger\">Link</Link>\n      <Link href=\"#\" type=\"warning\">Link</Link>\n      <Link href=\"#\" type=\"success\">Link</Link>\n    </Gap>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-disabled",
        "title": "cn - 禁用状态",
        "code": "/**\n* cn - 禁用状态\n*    -- 设置 `disabled` 属性可以禁用链接。\n* en - Disabled\n*    -- Set the disabled property to disable the link.\n */\nimport React from 'react';\nimport { Gap, Link } from 'shineout';\n\nexport default () => {\n  return (\n    <Gap column={24}>\n      <Link href=\"#\" type=\"primary\" disabled>Link</Link>\n      <Link href=\"#\" type=\"secondary\" disabled>Link</Link>\n      <Link href=\"#\" type=\"danger\" disabled>Link</Link>\n      <Link href=\"#\" type=\"warning\" disabled>Link</Link>\n      <Link href=\"#\" type=\"success\" disabled onClick={() => {console.log('不触触发的log')}}>Link</Link>\n    </Gap>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-underline",
        "title": "cn - 链接样式",
        "code": "/**\n* cn - 链接样式\n*    -- 链接样式包含三种，无下划线、常驻下划线、鼠标悬停显示下划线。\n* en - Link style\n*    -- Link style includes two types, text link and underline link.\n */\nimport React from 'react';\nimport { Gap, Link } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Gap column={24}>\n        <Link href=\"#\">Link</Link>\n        <Link href=\"#\" underline>Link</Link>\n        <Link href=\"#\" underline=\"hover\">Link</Link>\n      </Gap>\n\n      {/* <br />\n\n      <Gap column={36}>\n        <Link type=\"secondary\" href=\"#\">Link</Link>\n        <Link type=\"secondary\" href=\"#\" underline>Link</Link>\n        <Link type=\"secondary\" href=\"#\" underline=\"hover\">Link</Link>\n      </Gap>\n\n      <br />\n\n      <Gap column={36}>\n        <Link type=\"danger\" href=\"#\">Link</Link>\n        <Link type=\"danger\" href=\"#\" underline>Link</Link>\n        <Link type=\"danger\" href=\"#\" underline=\"hover\">Link</Link>\n      </Gap>\n\n      <br />\n\n      <Gap column={36}>\n        <Link type='warning' href=\"#\">Link</Link>\n        <Link type='warning' href=\"#\" underline>Link</Link>\n        <Link type='warning' href=\"#\" underline=\"hover\">Link</Link>\n      </Gap>\n\n      <br />\n\n      <Gap column={36}>\n        <Link type=\"success\" href=\"#\">Link</Link>\n        <Link type=\"success\" href=\"#\" underline>Link</Link>\n        <Link type=\"success\" href=\"#\" underline=\"hover\">Link</Link>\n      </Gap> */}\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "05-icon",
        "title": "cn - 图标",
        "code": "/**\n* cn - 图标\n*    -- 通过 `Icon` 属性设置带图标的链接，设置为 true时候显示默认图标。\n* en - Icon\n*    -- Set the link with an icon by the Icon property. Set to true to display the default icon.\n */\nimport React from 'react';\nimport { Gap, Link } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  icon: {\n    color: 'var(--soui-link-primary-font-color,var(--soui-brand-6,#197AFA))',\n    '&:hover': {\n      color: 'var(--soui-link-primary-hover-font-color,var(--soui-brand-5,#429AFF))',\n    },\n    '& > svg': {\n      fill: 'currentColor',\n      width: '1em',\n      height: '1em',\n      verticalAlign: '-2px',\n    }\n  },\n},\n  { name: 'link-example-icon' },\n);\n\nconst customIcon = (\n  <svg viewBox=\"0 0 24 24\">\n    <path d=\"M3.52359 19.0799H20.483C20.7482 19.0799 21.0025 19.1853 21.19 19.3728C21.3775 19.5604 21.4828 19.8147 21.4828 20.0799C21.4828 20.3451 21.3775 20.5994 21.19 20.7869C21.0025 20.9745 20.7482 21.0798 20.483 21.0799H3.52359C3.39226 21.0799 3.2622 21.054 3.14086 21.0038C3.01952 20.9536 2.90926 20.8799 2.81638 20.787C2.72351 20.6942 2.64984 20.5839 2.59957 20.4626C2.54931 20.3413 2.52344 20.2112 2.52344 20.0799C2.52344 19.9485 2.54931 19.8185 2.59957 19.6972C2.64984 19.5758 2.72351 19.4656 2.81638 19.3727C2.90926 19.2799 3.01952 19.2062 3.14086 19.156C3.2622 19.1057 3.39226 19.0799 3.52359 19.0799ZM15.6007 8.67711L14.0274 7.22256L8.14408 13.3933L7.08039 15.3728L9.71839 14.8478L15.6007 8.67711ZM17.0097 7.26711L18.8077 5.47011L17.2344 4.01556L15.4364 5.81356L17.0097 7.26811V7.26711ZM18.6424 2.60656L20.2157 4.06111C20.9937 4.83911 20.9937 6.10111 20.2157 6.87911L11.1264 16.2568C10.8478 16.5354 10.4928 16.725 10.1064 16.8018L5.27639 17.7628C5.1961 17.7788 5.11309 17.7748 5.03472 17.7511C4.95635 17.7274 4.88503 17.6847 4.82709 17.6269C4.76914 17.569 4.72635 17.4978 4.70251 17.4195C4.67867 17.3411 4.6745 17.2581 4.69039 17.1778L6.19008 13.0053C6.26708 12.6183 6.45708 12.2633 6.73608 11.9853L15.8254 2.60756C16.199 2.23402 16.7056 2.02417 17.2339 2.02417C17.7622 2.02417 18.2689 2.23302 18.6424 2.60656Z\"></path>\n  </svg>\n)\n\n\n\nexport default () => {\n  const classes = useStyles();\n\n  const customIcon2 = (\n    <span className={classes.icon} style={{ marginLeft: 4 }}>\n      <svg viewBox=\"0 0 24 24\" width=\"1em\" height=\"1em\">\n        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M11.002 2C11.5542 2 12.002 2.44772 12.002 3C12.002 3.51284 11.6159 3.93551 11.1186 3.99327L11.002 4H5.00195L4.88533 4.00673C4.38799 4.06449 4.00195 4.48716 4.00195 5V19L4.00868 19.1166C4.06645 19.614 4.48912 20 5.00195 20H19.002C19.5542 20 20.002 19.5523 20.002 19V13C20.002 12.4477 20.4497 12 21.002 12C21.5148 12 21.9375 12.386 21.9952 12.8834L22.002 13V20C22.002 21.1046 21.1065 22 20.002 22H4.00195C2.89738 22 2.00195 21.1046 2.00195 20V4C2.00195 2.89543 2.89738 2 4.00195 2H11.002ZM21.002 2C21.5542 2 22.002 2.44772 22.002 3V9C22.002 9.55228 21.5542 10 21.002 10C20.4497 10 20.002 9.55228 20.002 9L20.0017 5.383L13.9579 11.4272C13.5673 11.8177 12.9342 11.8177 12.5436 11.4272C12.1531 11.0367 12.1531 10.4035 12.5436 10.013L18.5557 4H15.002C14.4497 4 14.002 3.55228 14.002 3C14.002 2.44772 14.4497 2 15.002 2H21.002Z\"></path>\n      </svg>\n    </span>\n  )\n  return (\n    <Gap column={24}>\n      <Link href=\"#\" icon>Link</Link>\n\n      <Link href=\"#\" icon={customIcon}>Link{customIcon2}</Link>\n    </Gap>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 9,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "List": {
    "name": "List",
    "description": "最基础的列表展示，可承载文字、列表、图片、段落",
    "category": "other",
    "importPath": "import { List } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "striped",
        "type": "boolean",
        "required": false,
        "description": "是否显示交错斑马底纹"
      },
      {
        "name": "pagination",
        "type": "PaginationProps",
        "required": false,
        "defaultValue": "PaginationProps",
        "description": "分页展示, 详见 Pagination"
      },
      {
        "name": "itemStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "列表容器样式"
      },
      {
        "name": "colNum",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "多列展示"
      },
      {
        "name": "data",
        "type": "any[]",
        "required": true,
        "description": "渲染数据"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number) | true",
        "required": true,
        "description": "生成每一项key的辅助方法\\n为 true 时，以数据项本身作为 key，相当于 (d => d)\\n为函数时，使用此函数返回值\\n为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((d: DataItem, index: number) => ReactNode)",
        "required": false,
        "description": "需要渲染成列表的数据"
      },
      {
        "name": "fixed",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否启用虚拟列表"
      },
      {
        "name": "height",
        "type": "number",
        "required": false,
        "description": "列表高度"
      },
      {
        "name": "bordered",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示边框"
      },
      {
        "name": "lineHeight",
        "type": "number",
        "required": false,
        "defaultValue": "32",
        "description": "列表项高度"
      },
      {
        "name": "rowsInView",
        "type": "number",
        "required": false,
        "defaultValue": "10",
        "description": "同时展示的列表项数量"
      },
      {
        "name": "empty",
        "type": "ReactNode",
        "required": false,
        "description": "无数据时展示的内容"
      },
      {
        "name": "scrollLoading",
        "type": "(() => void)",
        "required": false,
        "description": "滚动到底部时触发"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "尺寸"
      },
      {
        "name": "loading",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "false",
        "description": "加载中"
      },
      {
        "name": "loadingPosition",
        "type": "\"center\" | \"bottom\"",
        "required": false,
        "defaultValue": "\\\"center\\\"",
        "description": "loading 图标位置， 如果设置了fixed=true，则bottom位置无效",
        "version": "3.7.0"
      },
      {
        "name": "footer",
        "type": "ReactNode | (() => ReactNode)",
        "required": false,
        "description": "底部内容"
      },
      {
        "name": "rowClassName",
        "type": "string | ((rowData: DataItem, index: number) => string )",
        "required": false,
        "description": "自定义行 className"
      },
      {
        "name": "value",
        "type": "any[]",
        "required": false,
        "description": "当前选中值，格式和 onChange 返回值一致"
      },
      {
        "name": "onChange",
        "type": "((value: Value, data: DataItem, checked: boolean) => void)",
        "required": false,
        "description": "选择行。rowData 为选中的数据，rowIndex 为选中行号。如果需要数据需要格式化的处理，建议配置 format。"
      },
      {
        "name": "prediction",
        "type": "((value: Value extends (infer U)[] ? U : Value, data: DataItem) => boolean)",
        "required": false,
        "defaultValue": "(val, d) => val===format(d)",
        "description": "默认使用 format 函数执行的结果来比较是否匹配，在某些情况下（例如返回原始数据的对象，更新数据时，生成了一个值相同，非同一个对象的选项），需要借助 prediction 函数来判断是否匹配"
      },
      {
        "name": "disabled",
        "type": "((data: Item) => boolean) | boolean",
        "required": false,
        "defaultValue": "false",
        "description": "如果 disabled 为 true，禁用全部选项，如果 disabled 为函数，根据函数反回结果禁用选项"
      },
      {
        "name": "format",
        "type": "ObjectKey<DataItem> | ((data: DataItem) => Value extends (infer U)[] ? U : Value)",
        "required": false,
        "defaultValue": "d => d",
        "description": "格式化 value, 默认值，返回原始数据。 为 string 时，会作为 key 从原始数据中获取值，相当于 (d) => d\\\\[format]; 为函数时，以函数返回结果作为 value。"
      }
    ],
    "examples": [
      {
        "name": "01-01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基础的列表展示，可承载文字、列表、图片、段落\n * en - Base\n *    -- Basic list display, can carry text, list, image, paragraph\n */\nimport React from 'react';\nimport { List } from 'shineout';\n\nconst data = [\n  'This is a long list of contents',\n  'This is a long list of contents',\n  'This is a long list of contents',\n  'This is a long list of contents',\n]\n\nconst App: React.FC = () => {\n  return <List keygen bordered data={data} />;\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "01-02-size",
        "title": "cn - 不同尺寸",
        "code": "/**\n * cn - 不同尺寸\n *    -- 通过设置 size 为 `large` `small` 分别把按钮设为大、小尺寸。若不设置 size，则尺寸为中\n * en - Size\n *    -- Set size to `large` or `small` to change the size of button\n */\nimport React, { useState } from 'react';\nimport { List, Radio, TYPE } from 'shineout';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListData = ListProps['data'];\ntype ListRenderItem = ListProps['renderItem'];\n\nconst data: ListData = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst renderItem: ListRenderItem = (rowData) => (\n  <div>{`Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n);\n\nconst sizeList = ['small', 'default', 'large'];\nconst App: React.FC = () => {\n  const [size, setSize] = useState('default');\n\n  return (\n    <>\n      <Radio.Group\n        style={{ marginBottom: 24 }}\n        keygen\n        data={sizeList}\n        value={size}\n        onChange={setSize}\n      />\n      <List keygen='id' bordered data={data} renderItem={renderItem} size={size} />\n    </>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "01-03-border",
        "title": "cn - 自定义边框",
        "code": "/**\n * cn - 自定义边框\n *    -- 设置 bordered 为 false 关闭默认边框\n * en - custom border\n *    -- Set bordered to false to close the default border\n */\nimport React from 'react';\nimport { List, TYPE } from 'shineout';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListData = ListProps['data'];\ntype ListRenderItem = ListProps['renderItem'];\n\nconst data: ListData = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst renderItem: ListRenderItem = (rowData) => (\n  <div>{`Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n);\n\nconst App: React.FC = () => {\n  return (\n    <div style={{ padding: '0 16px', border: '1px solid #E8EBF0' }}>\n      <List\n        itemStyle={{ paddingLeft: 0, paddingRight: 0 }}\n        keygen='id'\n        bordered={false}\n        data={data}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-fixed",
        "title": "cn - 大数据列表",
        "code": "/**\n * cn - 大数据列表\n *    -- 设置 fixed 属性来启用虚拟列表，本例加载了10000条数据\n *    -- 支持自动高度，默认跟随父元素高度\n *    -- lineHeight 用来设置列表项高度\n *    -- rowsInView 用来设置同时所展示的列表项数量，默认为10个\n * en - Big data list\n *    -- Set the fixed property to enable the virtual list, which in this case loads 10,000 pieces of data\n *    -- support automatic height, and follow the height of parent element by default\n *    -- lineheight is used to set the height of list items\n *    -- rowsinview is used to set the number of list items displayed on a page. The default is 10\n */\nimport React from 'react';\nimport { List, TYPE, Avatar} from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, any>;\ntype ListRenderItem = ListProps['renderItem'];\n\nconst names: ListItem[] = user.fetchSync(10000);\n\n// eslint-disable-next-line react/prop-types\nconst renderItem: ListRenderItem = ({ id, firstName }) => (\n  <div style={{ height: 30, display: 'flex', alignItems: 'center' }}>\n    <Avatar shape=\"circle\" icon={firstName.slice(0, 1)} style={{ marginRight: 8 }} />\n    <span style={{ flex: 1 }}>{firstName}</span>\n    <span>-{id}</span>\n  </div>\n);\n\nconst App: React.FC = () => (\n  <List\n    height={300}\n    lineHeight={54}\n    fixed\n    keygen='id'\n    bordered\n    colNum={2}\n    data={names}\n    renderItem={renderItem}\n  />\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-pagination",
        "title": "cn - 分页",
        "code": "/**\n * cn - 分页\n *    -- 前端分页的情况下, 设置 pagination 显示分页，没有设置 onChange 处理数据的情况下，会自动对数据进行分页\n *    -- pagination 的参数和 Pagination 组件一致\n * en - Pagination\n *   -- Set the pagination property to show the pagination and if not set onChange property, the data is automatically paged\n *    -- The parameters of pagination are consistent with the Pagination component\n */\nimport React, { useState, useEffect } from 'react';\nimport { List, TYPE } from 'shineout';\nimport { user } from '@sheinx/mock';\n\ninterface ListItem {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype ListProps = TYPE.List.Props<ListItem, ListItem>;\ntype ListRenderItem = ListProps['renderItem'];\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [current, setCurrent] = useState<number>(1);\n  const [data, setData] = useState<ListItem[]>([]);\n\n  const fetchData = (c: number) => {\n    setLoading(true);\n    user.fetch\n      .get('List', { current, pageSize: 10, sorter: {}, username: '' })\n      .then((_data: { data: any }) => {\n        setData(_data.data);\n        setLoading(false);\n        setCurrent(c);\n      });\n  };\n\n  useEffect(() => {\n    fetchData(1);\n  }, []);\n\n  const renderItem: ListRenderItem = (rowData) => (\n    <div>{`Name: ${rowData.firstName}-${rowData.lastName}`}</div>\n  );\n\n  const handlePageChange = (index: number) => {\n    if (index > 10) return;\n    fetchData(index);\n  };\n\n  const pagination = {\n    current,\n    total: 100,\n    pageSize: 10,\n    align: 'right',\n    onChange: handlePageChange,\n  };\n\n  return (\n    <List\n      keygen='id'\n      format='id'\n      bordered\n      data={data}\n      loading={loading}\n      renderItem={renderItem}\n      pagination={pagination}\n    />\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 26,
      "requiredProps": 2,
      "propsWithWhen": 0
    }
  },
  "Menu": {
    "name": "Menu",
    "description": "用于承载网站的架构，并提供跳转的菜单列表",
    "category": "navigation",
    "importPath": "import { Menu } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "mode",
        "type": "\"inline\" | \"vertical\" | \"horizontal\" | \"vertical-auto\"",
        "required": false,
        "defaultValue": "\\\"inline\\\"",
        "description": "菜单样式"
      },
      {
        "name": "data",
        "type": "object[]",
        "required": false,
        "defaultValue": "[]",
        "description": "需要渲染成菜单的数据"
      },
      {
        "name": "theme",
        "type": "\"dark\" | \"light\"",
        "required": false,
        "description": "主题"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": "菜单高度"
      },
      {
        "name": "openKeys",
        "type": "(string | number)[]",
        "required": false,
        "defaultValue": "[]",
        "description": "展开的菜单(受控)"
      },
      {
        "name": "caretColor",
        "type": "string",
        "required": false,
        "description": "三角展开符颜色"
      },
      {
        "name": "frontCaret",
        "type": "boolean",
        "required": false,
        "description": "前置实心三角展开符"
      },
      {
        "name": "inlineIndent",
        "type": "number",
        "required": false,
        "defaultValue": "24",
        "description": "每一层缩进宽度"
      },
      {
        "name": "looseChildren",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "如果 children 有设置则菜单项可展开"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number) | true",
        "required": true,
        "defaultValue": "true",
        "description": "生成每一项key的辅助方法。为 true 时，以数据项本身作为key，相当于 (d => d)。为函数时，使用此函数返回值。为string时，使用这个string对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
      },
      {
        "name": "defaultOpenKeys",
        "type": "(string | number)[]",
        "required": false,
        "defaultValue": "[]",
        "description": "初始展开的菜单;如果需要设置此值,则需要设置keygen,此值为一个包含key的数组"
      },
      {
        "name": "parentSelectable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "父级菜单是否可选中"
      },
      {
        "name": "onClick",
        "type": "((data: DataItem) => void)",
        "required": false,
        "description": "子菜单点击事件,参数为当条数据"
      },
      {
        "name": "active",
        "type": "((data: DataItem) => boolean)",
        "required": false,
        "description": "验证是否激活,参数为对应的数据对象,返回true则代表该菜单激活"
      },
      {
        "name": "disabled",
        "type": "((data: DataItem) => boolean)",
        "required": false,
        "defaultValue": "d => d.disabled",
        "description": "是否禁用选项"
      },
      {
        "name": "frontCaretType",
        "type": "\"hollow\" | \"solid\"",
        "required": false,
        "defaultValue": "\\\"solid\\\"",
        "description": "前置三角展开符类型"
      },
      {
        "name": "onOpenChange",
        "type": "((keys: Key[]) => void)",
        "required": false,
        "description": "菜单展开/收起回调"
      },
      {
        "name": "linkKey",
        "type": "((d: DataItem) => string) | ObjectKey<DataItem>",
        "required": false,
        "description": "需要注入子菜单的链接键值"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((data: DataItem, index: number) => ReactNode)",
        "required": false,
        "defaultValue": "\\\"title\\\"",
        "description": "元素渲染方式,如果为字符串,则会以对应的值作为显示内容;如果为函数,则以函数返回的结果作为显示内容,函数参数为对应的数据对象"
      },
      {
        "name": "renderIcon",
        "type": "((data: DataItem) => ReactNode)",
        "required": false,
        "description": "渲染Icon"
      },
      {
        "name": "collapse",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否折叠"
      },
      {
        "name": "header",
        "type": "ReactNode",
        "required": false,
        "description": "头部内容， 仅在 mode为 \\\"inline\\\" 时生效"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- Menu 通过数据来生成菜单项\n * en - Base\n *    -- Menu generates menu items through data\n */\n\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n  {\n    id: '11',\n    title: 'This is a very very very very long menu title',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState('1');\n\n  const handleClick = (d: MenuItem) => setActive(d.id);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkActive: MenuActive = (d: MenuItem) => active === d.id;\n\n  return (\n    <div>\n      <Menu\n        keygen='id'\n        data={data}\n        inlineIndent={14}\n        active={checkActive}\n        onClick={handleClick}\n        style={{ width: 256, border: '1px solid #e8ebf0' }}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-01-link",
        "title": "cn - 链接",
        "code": "/**\n * cn - 链接\n *    --  可以通过设置 linkKey 来渲染出对应的链接\n * en - link\n *    -- Can render the corresponding link by setting linkKey\n */\nimport React from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  link: string;\n  title: string;\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Google',\n    link: 'https://www.google.com',\n  },\n  {\n    id: '2',\n    title: 'Strackoverflow',\n    link: 'https://stackoverflow.com/',\n  },\n  {\n    id: '3',\n    title: 'Github',\n    link: 'https://github.com/',\n  },\n];\n\nconst App: React.FC = () => {\n  const renderItem: MenuRenderItem = (d: MenuItem) => <a href={d.link} target=\"_blank\" rel=\"noreferrer\">{d.title}</a>;\n\n  return (\n    <Menu\n      keygen='id'\n      linkKey='link'\n      data={data}\n      renderItem={renderItem}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      inlineIndent={14}\n    />\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-click",
        "title": "cn - 父菜单可选中",
        "code": "/**\n * cn - 父菜单可选中\n *    -- 设置 parentSelectable 使父级菜单支持单独选中 <br /> 此时父级菜单左侧区域用于选中，偏右侧区域用于展开和收起子菜单\n * en - Parent Selectable\n *    -- Setting the parentSelectable property can make the parent menu trigger the onClick of the Menu after clicking\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Parent 1',\n    children: [\n      {\n        id: '2',\n        title: 'Option 2',\n      },\n      {\n        id: '3',\n        title: 'Option 3',\n      },\n    ],\n  },\n  {\n    id: '4',\n    title: 'Parent 4',\n    children: [\n      {\n        id: '5',\n        title: 'Option 5',\n      },\n      {\n        id: '6',\n        title: 'Option 6',\n      },\n    ],\n  },\n  {\n    id: '7',\n    title: 'Option 7',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState('1');\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkActive: MenuActive = (d: MenuItem) => active === d.id;\n\n  const handleClick = (d: MenuItem) => {\n    setActive(d.id);\n  };\n\n  return (\n    <Menu\n      keygen='id'\n      inlineIndent={14}\n      data={data}\n      parentSelectable\n      active={checkActive}\n      onClick={handleClick}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      renderItem={renderItem}\n    />\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-front",
        "title": "cn - 前置展开符",
        "code": "/**\n * cn - 前置展开符\n *    -- 使用 frontCaret 来前置展开符\n *    -- 使用 frontCaretType 来设置展开图标类型\n * en - put the expander in front\n *    -- use frontCaret to put the expander in front\n *    -- Use frontCaretType to set the Icon type\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState('1');\n\n  const handleClick = (d: MenuItem) => setActive(d.id);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkActive: MenuActive = (d: MenuItem) => active === d.id;\n\n  return (\n    <div style={{ display: 'flex', gap: 24 }}>\n      <Menu\n        keygen='id'\n        frontCaret\n        frontCaretType='solid'\n        data={data}\n        inlineIndent={14}\n        active={checkActive}\n        onClick={handleClick}\n        style={{ width: 256, border: '1px solid #e8ebf0' }}\n        renderItem={renderItem}\n      />\n      <Menu\n        keygen='id'\n        frontCaret\n        frontCaretType='hollow'\n        data={data}\n        inlineIndent={14}\n        active={checkActive}\n        onClick={handleClick}\n        style={{ width: 256, border: '1px solid #e8ebf0' }}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "05-disabled",
        "title": "cn - 禁用菜单",
        "code": "/**\n * cn - 禁用菜单\n *    -- 通过 disabled 属性可以禁用选项\n * en - Disabled\n *    --Disable the option by the disabled property\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  disabled?: boolean;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuOnClick = MenuProps['onClick'];\ntype MenuDisabled = MenuProps['disabled'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n        disabled: true,\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n    disabled: true,\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState(['1']);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkDisabled: MenuDisabled = (d: MenuItem) => !!d.disabled;\n\n  const handleClick: MenuOnClick = (d: MenuItem) => setActive([d.id]);\n\n  const checkActive: MenuActive = (d: MenuItem) => active.includes(d.id);\n\n  return (\n    <Menu\n      data={data}\n      keygen='id'\n      mode='inline'\n      inlineIndent={14}\n      active={checkActive}\n      onClick={handleClick}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      renderItem={renderItem}\n      disabled={checkDisabled}\n    />\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 24,
      "requiredProps": 1,
      "propsWithWhen": 0
    }
  },
  "Message": {
    "name": "Message",
    "description": "用户进行操作后，系统对该操作行为内容作出的反馈",
    "category": "feedback",
    "importPath": "import { Message } from 'shineout'",
    "props": [
      {
        "name": "content",
        "type": "ReactNode",
        "required": true,
        "description": "消息内容"
      },
      {
        "name": "duration",
        "type": "number",
        "required": false,
        "defaultValue": "3",
        "description": "消息持续时间，单位秒；如果设置为 0，必须手动关闭"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- Message 封装了一组全局函数，方便在任意地方调用，包括常规（不带/带icon）、Success、Warn、Error和关闭所有消息提醒\n * en - Base\n *    -- Message has 6 static functions that are convenient to call anywhere, includes normal(with/without icon)、success、warn、error and close all messages\n */\nimport React from 'react';\nimport { Button, Message } from 'shineout';\n\nconst commonStyle = { margin: 0 };\nconst App: React.FC = () => (\n  <div style={{display: 'flex', flexWrap: 'wrap', gap: 24}}>\n    <Button\n      onClick={() => {\n        Message.show('Some message.');\n      }}\n    >\n      Show\n    </Button>\n    <Button\n      style={commonStyle}\n      onClick={() => {\n        Message.info('This is a message of info.');\n      }}\n      type='primary'\n    >\n      Info\n    </Button>\n    <Button\n      type='success'\n      style={commonStyle}\n      onClick={() => {\n        Message.success('This is a message of success.');\n      }}\n    >\n      Success\n    </Button>\n    <Button\n      style={commonStyle}\n      type='warning'\n      onClick={() => {\n        Message.warn('This is a message of warning.');\n      }}\n    >\n      Warn\n    </Button>\n    <Button\n      type='danger'\n      style={commonStyle}\n      onClick={() => {\n        Message.error('This is a message of error.');\n      }}\n    >\n      Error\n    </Button>\n\n    <Button\n      style={commonStyle}\n      onClick={() => {\n        Message.close();\n      }}\n    >\n      Close All\n    </Button>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-duration",
        "title": "cn - 显示时长",
        "code": "/**\n * cn - 显示时长\n *    -- 通过 duration 属性可以控制消息显示的时长，默认为3秒；当设定为 0s 时，则需要用户手动关闭 Message\n * en - Duration\n *    -- Set duration property to control the duration of the message display. The default value is 3 seconds\n *    -- When duration is set to 0, the message will not hide automatically\n */\nimport React from 'react';\nimport { Button, Message } from 'shineout';\n\nconst s10 = () => Message.info('This message will close after 10 seconds.', 10);\nconst s0 = () => Message.error('This message will not close utill click the close icon.', 0);\n\nconst commonStyle = { marginInlineStart: '24px' };\nconst App: React.FC = () => (\n  <div>\n    <Button onClick={s10}>Duration 10 s.</Button>\n    <Button onClick={s0} style={commonStyle}>\n      Manually close\n    </Button>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-position",
        "title": "cn - 弹出位置",
        "code": "/**\n * cn - 弹出位置\n *    -- 设置 positoin 参数，修改显示位置，可以实现消息提醒展示位置，可选值：top, middle, top-left, top-right, bottom-left, bottom-right\n * en - Notification\n *    -- Set position property to specify the pop-up layer location, optional value: top, middle, top-left, top-right, bottom-left, bottom-right\n */\nimport React, { useState } from 'react';\nimport { Button, Message, Radio, TYPE } from 'shineout';\n\ntype MessageOptions = TYPE.Message.Options;\n\nconst App: React.FC = () => {\n  const [position, setPosition] = useState<MessageOptions['position']>('top-right');\n\n  const show = () => {\n    Message.info(<div style={{ width: 240 }}>some message.</div>, 3, {\n      position,\n      title: 'notify title',\n    });\n  };\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 24 }}>\n        <Radio.Group\n          keygen\n          value={position}\n          onChange={setPosition}\n          data={['top', 'middle', 'top-left', 'top-right', 'bottom-left', 'bottom-right']}\n        />\n      </div>\n      <Button onClick={show}>Show message.</Button>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-close",
        "title": "cn - 关闭回调",
        "code": "/**\n * cn - 关闭回调\n *    -- 通过第三个参数[options]的 onClose 属性处理消息关闭回调。以下用例将在 Message 关闭后弹出新的 Message\n * en - Close\n *    -- Set onClose to handle close event\n */\nimport React from 'react';\nimport { Button, Message } from 'shineout';\n\nconst App: React.FC = () => {\n  const close = () => {\n    Message.warn('Close this message will display another message.', 0, {\n      onClose: () => {\n        Message.info('You can close the message now.');\n      },\n    });\n  };\n\n  return <Button onClick={close}>Close callback</Button>;\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "05-manual-close",
        "title": "cn - 手动关闭",
        "code": "/**\n * cn - 手动关闭\n *    -- Message 会异步返回一个关闭函数，调用它来关闭当前 Messsage\n * en - Close\n *    -- Message return close func async\n */\nimport React from 'react';\nimport { Button, Message, Link } from 'shineout';\n\nconst App: React.FC = () => {\n  const msg = async () => {\n    const close = await Message.success(\n      <div>\n        I will always show until &nbsp;\n        <Link onClick={() => close()}>manually closed</Link>\n      </div>,\n      0,\n      {\n        title: 'Manual Close',\n      },\n    );\n  };\n\n  return <Button onClick={msg}>Manual Close</Button>;\n};\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 2,
      "requiredProps": 1,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Modal": {
    "name": "Modal",
    "description": "Modal 对话框是一种临时窗口，通常在不想跳转页面的前提下，使用 Modal 展示次要内容或者操作",
    "category": "feedback",
    "importPath": "import { Modal } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "hideMask",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否隐藏遮罩"
      },
      {
        "name": "forceMask",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否强制设置遮罩透明度（多层Modal中，除第一层外的其他弹出层遮罩透明度会被调整为0.01）"
      },
      {
        "name": "top",
        "type": "string | number",
        "required": false,
        "defaultValue": "10vh",
        "description": "弹框距离顶部距离"
      },
      {
        "name": "fullScreen",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否全屏展示"
      },
      {
        "name": "bodyStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "扩展弹出层 body 的样式"
      },
      {
        "name": "footer",
        "type": "ReactNode",
        "required": false,
        "description": "底部内容"
      },
      {
        "name": "maskCloseAble",
        "type": "boolean | null",
        "required": false,
        "defaultValue": "true",
        "description": "点击遮罩层是否关闭对话框, 设置为 null 右上角关闭图标会保留"
      },
      {
        "name": "padding",
        "type": "string | number",
        "required": false,
        "description": "内容内边距"
      },
      {
        "name": "position",
        "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
        "required": false,
        "description": "弹出位置"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "弹出层的标题"
      },
      {
        "name": "visible",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "defaultValue": "500",
        "description": "弹出层宽度 （设置 position 后无效）"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": "对话框高度 （设置 position 后无效）"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1050",
        "description": "弹出层 z-index 值，注意：如果嵌套 Select 组件，并且 Select 组件含有 absolute 字段，需要修改 Select 的 z-index 的值"
      },
      {
        "name": "rootClassName",
        "type": "string",
        "required": false,
        "description": "弹出层的根元素类名, 为遮罩层的父元素"
      },
      {
        "name": "container",
        "type": "(() => HTMLElement | null) | HTMLElement | null",
        "required": false,
        "defaultValue": "document.body",
        "description": "渲染的目标节点"
      },
      {
        "name": "moveable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可移动"
      },
      {
        "name": "maskBackground",
        "type": "string",
        "required": false,
        "description": "遮罩背景色，设置后透明度将失效"
      },
      {
        "name": "onClose",
        "type": "(() => void)",
        "required": false,
        "description": "弹出层关闭回调"
      },
      {
        "name": "destroy",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "关闭时是否销毁元素"
      },
      {
        "name": "hideClose",
        "type": "boolean",
        "required": false,
        "description": "是否隐藏关闭按钮"
      },
      {
        "name": "type",
        "type": "\"success\" | \"info\" | \"warning\" | \"error\"",
        "required": false,
        "description": "弹出层 title 显示状态 icon，drawer模式下需配合title使用"
      },
      {
        "name": "zoom",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启 zoom 动画效果"
      },
      {
        "name": "esc",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否支持 esc 键关闭"
      },
      {
        "name": "events",
        "type": "object",
        "required": false,
        "defaultValue": "{}",
        "description": "外层元素所接受的事件列表，可用于在 createPortal 场景中阻止冒泡"
      },
      {
        "name": "resizable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可调整大小"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "弹出层内容"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的组件用法\n *    -- Modal 会在 document.body 中创建一个新的层显示弹出内容\n *    -- 关闭 Modal 时默认没有对组件进行销毁, 只是隐藏, 组件的状态会被保留。 如果不需要保留组件之前的状态, 可以设置 destroy 属性\n * en - Base\n *    -- The basic usage for component\n */\nimport React, { useState } from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const [content, setContent] = useState(1);\n  const [visible, setVisible] = useState(false);\n\n  const show = () => {\n    setVisible(true);\n  };\n\n  const handleOk = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked ok!');\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    setContent(content + 1);\n    console.log('clicked cancel');\n  };\n\n  return (\n    <div>\n      <Button onClick={show} mode='outline'>\n        click me\n      </Button>\n      <Modal\n        width={400}\n        visible={visible}\n        title='Modal Title'\n        onClose={handleCancel}\n        footer={[\n          <Button key='cancel' mode='outline' onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button key='ok' type='primary' onClick={handleOk}>\n            Ok\n          </Button>,\n        ]}\n      >\n        {`you are visited ${content}`}\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-type",
        "title": "cn - 类型",
        "code": "/**\n * cn - 类型\n *    -- Modal 内置了 4 个类型的样式：info（纯信息展示，不带有状态）、Success、Warn 和 Error，为了方便调用，设计为静态函数\n * en - Type\n *    -- Modal has 4 built in style\n */\nimport React from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const info = () => {\n    Modal.info({\n      title: 'This is a info message',\n      content: 'this is  some information that user must know',\n    });\n  };\n\n  const success = () => {\n    Modal.success({\n      title: 'This is a success message',\n      content: 'this is some information that user successful operation',\n    });\n  };\n\n  const warning = () => {\n    Modal.warn({\n      title: 'This is a warning message',\n      content: 'this is  some information that user must know',\n    });\n  };\n\n  const error = () => {\n    Modal.error({\n      title: 'This is a error message',\n      content: 'this is some information that user attended',\n    });\n  };\n\n  const show = () => {\n    Modal.show({\n      title: 'This is a message',\n      content: 'this is show information',\n    });\n  };\n\n  return (\n    <div style={{ display: 'flex', gap: '16px' }}>\n      <Button onClick={show} mode='outline'>\n        show\n      </Button>\n      <Button type='primary' onClick={info}>\n        info\n      </Button>\n      <Button type='danger' onClick={error}>\n        error\n      </Button>\n      <Button type='success' onClick={success}>\n        success\n      </Button>\n      <Button type='warning' onClick={warning}>\n        warning\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-confirm",
        "title": "cn - 确认框",
        "code": "/**\n * cn - 确认框\n *    -- 调用 confirm 函数可以快捷的显示确认框，便于用户操作；同时可以通过 text 配置 Modal 按钮文案，onOk 与 onClose 配置 Modal 确认和取消事件回调（当事件返回 Promise 时会等待 Promise resolve 后关闭 Modal）\n * en - Confirm\n *    -- The confirmation modal dialog\n */\nimport React from 'react';\nimport { Modal, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const confirm = () => {\n    Modal.confirm({\n      title: 'This is a confirm message',\n      content: 'this is some information that user confirm',\n      onOk: () =>\n        new Promise((resolve) => {\n          console.log('yes i know');\n          setTimeout(() => resolve(true), 2000);\n        }),\n      text: { ok: 'Yes', cancel: 'No' },\n    });\n  };\n\n  return (\n    <div>\n      <Button onClick={confirm} mode='outline'>\n        confirm\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-focus",
        "title": "cn - 默认聚焦按钮",
        "code": "/**\n * cn - 默认聚焦按钮\n *    -- 设置 autoFocusButton 可以在打开的时候默认聚焦到某个按钮, 再点击回车可以触发改按钮的点击事件, 方便用户进行键盘操作. 该属性仅在 Modal 的 methods 中生效\n * en - Default focus button\n *    -- Setting autoFocusButton can focus on a button by default when you open it, and then press Enter to trigger the click event of the button, which is convenient for the user to perform keyboard operation. This property only takes effect in Modal methods\n */\nimport React from 'react';\nimport { Modal, Button, Message } from 'shineout';\n\nconst App: React.FC = () => {\n  const confirm = (type: 'cancel' | 'ok') => {\n    Modal.confirm({\n      title: 'This is a confirm message',\n      content: `the ${type} button will be focus`,\n      text: {\n        ok: 'ok',\n        cancel: 'cancel',\n      },\n      onOk: () => {\n        Message.info('you chose the ok');\n      },\n      onCancel: () => {\n        Message.info('you chose the cancel');\n      },\n      autoFocusButton: type,\n    });\n  };\n\n  return (\n    <div>\n      <Button onClick={() => confirm('cancel')} mode='outline'>\n        cancel\n      </Button>\n      <Button onClick={() => confirm('ok')} mode='outline'>\n        ok\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "05-full",
        "title": "cn - 全屏",
        "code": "/**\n * cn - 全屏\n *    -- 使用 fullScreen 属性来使对话框全屏展示\n * en - Full Screen\n *    -- Use the fullScreen property to display the modal in full screen\n */\nimport React, { useState, useCallback } from 'react';\nimport {\n  Form,\n  Modal,\n  Button,\n  Input,\n  Upload,\n  Radio,\n  Checkbox,\n  DatePicker,\n  Textarea,\n} from 'shineout';\nconst Content = () => {\n  return (\n    <div>\n      <Form\n        defaultValue={{ name: 'zhangsan', email: 'zhangsan@qq.com', score: 3 }}\n        onSubmit={(v) => {\n          console.log('form submit', v);\n        }}\n        onChange={(v) => {\n          console.log('form change', v);\n        }}\n        onReset={() => {\n          console.log('form reset');\n        }}\n      >\n        <Form.Item label='Name'>\n          <Input name={'name'} placeholder='please input name' clearable />\n        </Form.Item>\n        <Form.Item label='Password'>\n          <Input name={'password'} placeholder='please input password' clearable />\n        </Form.Item>\n        <Form.Item label='Email'>\n          <Input name={'email'} clearable placeholder='please input email' />\n        </Form.Item>\n        <Form.Item label='Gendar'>\n          <Radio.Group name='gendar' data={['male', 'female']} keygen />\n        </Form.Item>\n        <Form.Item label='Course'>\n          <Checkbox.Group name='course' data={['chinese', 'maths', 'english', 'physics']} keygen />\n        </Form.Item>\n        <Form.Item label='Enrollment date'>\n          <DatePicker name='date' placeholder={'please select date'} clearable showSelNow />\n        </Form.Item>\n        <Form.Item label='upload avatar'>\n          <Upload.Image\n            action='/api/upload'\n            accept='image/*'\n            name='file'\n            htmlName='file'\n            recoverAble\n            leftHandler\n            removeConfirm='Are you sure to delete it ?'\n            limit={3}\n            onSuccess={(_res, filem, data) => {\n              return data;\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='Address'>\n          <Textarea name='address' />\n        </Form.Item>\n\n        <Form.Item label='' style={{ marginTop: 32, marginBottom: 0 }}>\n          <Form.Submit>Submit</Form.Submit>\n          <Form.Reset>Reset</Form.Reset>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  const cancel = useCallback(() => {\n    setVisible(false);\n  }, [visible]);\n\n  const footer = () => (\n    <Button type='primary' onClick={cancel}>\n      OK\n    </Button>\n  );\n\n  return (\n    <div>\n      <Modal title='Profile' fullScreen visible={visible} onClose={cancel} footer={footer()}>\n        <Content></Content>\n      </Modal>\n      <Button mode='outline' onClick={() => setVisible(true)}>\n        Full Screen\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 29,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Pagination": {
    "name": "Pagination",
    "description": "显示当前数据所在页面，具有上下翻页、定位页面以及呈现总页数的功能",
    "category": "navigation",
    "importPath": "import { Pagination } from 'shineout'",
    "props": [
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "align",
        "type": "\"left\" | \"center\" | \"right\"",
        "required": false,
        "defaultValue": "\\\"left\\\"",
        "description": "排布方式"
      },
      {
        "name": "pageSize",
        "type": "number",
        "required": false,
        "defaultValue": "10",
        "description": "每页数量"
      },
      {
        "name": "total",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "总条目数。如果 total 小于 0，隐藏分页"
      },
      {
        "name": "current",
        "type": "number",
        "required": false,
        "description": "当前页，如果传入值，组件为受控组件，必须通过 onChange 来处理回调"
      },
      {
        "name": "span",
        "type": "number",
        "required": false,
        "defaultValue": "5",
        "description": "分页器页码按钮数量"
      },
      {
        "name": "defaultCurrent",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "初始页码"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "禁用"
      },
      {
        "name": "layout",
        "type": "( | \"links\" | \"list\" | \"jumper\" | \"simple\" | ((props: PaginationProps) => ReactNode))[]",
        "required": false,
        "defaultValue": "[\\\"links\\\"]",
        "description": "子组件布局，可选值为:\\\"links\\\": 页码；\\\"simple\\\": 简约页码(和links不要同时使用)；\\\"list\\\": 每页数量选择。\\\"jumper\\\": 跳转页码；function({ current, total, pageSize }): 匿名函数，用来信息展示"
      },
      {
        "name": "mode",
        "type": "\"text\" | \"outline\"",
        "required": false,
        "defaultValue": "\\\"text\\\"",
        "description": "风格"
      },
      {
        "name": "onChange",
        "type": "((current: number, pageSize: number, sizeChange?: boolean ) => void)",
        "required": false,
        "description": "页码或每页显示数量改变时回调。current: 新的页码。pageSize: 每页数量"
      },
      {
        "name": "pageSizeList",
        "type": "number[]",
        "required": false,
        "defaultValue": "[10, 20, 30, 50, 100]",
        "description": "每页数量可选列表"
      },
      {
        "name": "text",
        "type": "{ prev?: string , next?: string , page?: string , jumper?: string }",
        "required": false,
        "description": "替换文案。prev: 上一页。next: 下一页。page: pageSizeList 文字。jumper: 跳转输入框文字, \\\"{input}\\\" 为输入框占位"
      },
      {
        "name": "simple",
        "type": "boolean",
        "required": false,
        "description": "是否使用简约模式"
      },
      {
        "name": "select",
        "type": "SelectProps",
        "required": false,
        "description": "分页器有关 Select 组件的配置，目前支持 absolute、position 和 zIndex，类型同 Select 组件",
        "version": "3.4.4"
      }
    ],
    "examples": [
      {
        "name": "001-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的使用\n * en - Base\n *    -- The basic usage\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  return <Pagination total={10000} defaultCurrent={1} span={3}></Pagination>;\n};\n",
        "language": "tsx"
      },
      {
        "name": "002-total",
        "title": "cn - 带总条数的",
        "code": "/**\n * cn - 带总条数的\n *    -- 通过自定义 layout 属性展示总条数\n * en - Total\n *    -- Show total by custom layout property\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  const total = 500;\n  const renderTotal = () => {\n    return `total ${total}`;\n  };\n  const layout = [renderTotal, 'links'] as any;\n  return <Pagination total={total} layout={layout} defaultCurrent={1} span={3}></Pagination>;\n};\n",
        "language": "tsx"
      },
      {
        "name": "003-jumper",
        "title": "cn - 跳转",
        "code": "/**\n * cn - 跳转\n *    -- 通过配置`layout`属性的`jumper`值展示跳转输入框，借助`text`属性自定义文案\n * en - Jumper\n *    -- Show jumper by setting `jumper` value of `layout` property\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  const total = 100;\n  const layout = ['links', 'jumper'];\n  const text = {\n    jumper: 'Go to {input} Page',\n  };\n  return (\n    <Pagination total={total} text={text} layout={layout} defaultCurrent={1} span={3}></Pagination>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "004-mode",
        "title": "cn - 样式",
        "code": "/**\n * cn - 样式\n *    -- 配置`mode`属性切换不同风格的分页器，有文字、线框两种样式\n * en - Mode\n *    -- Set `mode` property to change the style of pagination\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Pagination\n        style={{ marginBottom: 24 }}\n        total={100}\n        mode='text'\n        defaultCurrent={1}\n        span={3}\n      ></Pagination>\n      <Pagination total={100} mode='outline' defaultCurrent={1} span={3}></Pagination>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "005-size",
        "title": "cn - 尺寸",
        "code": "/**\n * cn - 尺寸\n *    -- 通过`size`属性设置分页器的尺寸\n * en - Size\n *    -- Set the size of pagination by `size` property\n */\nimport { Pagination } from 'shineout';\n\nexport default () => {\n  return (\n    <div>\n      <Pagination\n        size='small'\n        total={100}\n        defaultCurrent={1}\n        span={3}\n        style={{ marginBottom: 24 }}\n      ></Pagination>\n      <Pagination total={100} defaultCurrent={1} span={3} style={{ marginBottom: 24 }}></Pagination>\n      <Pagination size='large' total={100} defaultCurrent={1} span={3}></Pagination>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 17,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Popover": {
    "name": "Popover",
    "description": "通常用于鼠标悬浮即显的操作，以及一般性的二次确认对话框承载",
    "category": "other",
    "importPath": "import { Popover } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "position",
        "type": "| \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"left\" | \"right\" | \"top\" | \"bottom\" | \"auto\"",
        "required": false,
        "description": "弹出层位置。若不设置，则默认为 auto"
      },
      {
        "name": "priorityDirection",
        "type": "\"auto\" | \"vertical\" | \"horizontal\"",
        "required": false,
        "defaultValue": "\\\"vertical\\\"",
        "description": "弹出位置优先级, 默认为左右优先, 只在未设置 position 时生效"
      },
      {
        "name": "mouseEnterDelay",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "移入显示延迟(毫秒)"
      },
      {
        "name": "mouseLeaveDelay",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "移除隐藏延迟(毫秒)"
      },
      {
        "name": "trigger",
        "type": "\"click\" | \"hover\"",
        "required": false,
        "defaultValue": "\\\"hover\\\"",
        "description": "触发方式"
      },
      {
        "name": "destroy",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "关闭 Popover 后销毁内容 dom"
      },
      {
        "name": "visible",
        "type": "boolean",
        "required": false,
        "description": "是否可见(受控)"
      },
      {
        "name": "onVisibleChange",
        "type": "((open: boolean) => void)",
        "required": false,
        "description": "The event of visible change"
      },
      {
        "name": "onOpen",
        "type": "(() => void)",
        "required": false,
        "description": "Popover 弹出回调事件"
      },
      {
        "name": "onClose",
        "type": "(() => void)",
        "required": false,
        "description": "Popover 关闭时回调事件"
      },
      {
        "name": "children",
        "type": "ReactNode | ((close: () => void) => ReactNode)",
        "required": false,
        "defaultValue": "index",
        "description": "弹出显示内容，如果内容为函数，则参数是主动关闭操作"
      },
      {
        "name": "getPopupContainer",
        "type": "(() => HTMLElement | null)",
        "required": false,
        "description": "自定义 Popover 容器，覆盖默认渲染在 body 下的行为, () => DOMElement"
      },
      {
        "name": "useTextStyle",
        "type": "boolean",
        "required": false,
        "description": "使用内置文本样式"
      },
      {
        "name": "type",
        "type": "\"info\" | \"success\" | \"warning\" | \"danger\" | \"error\"",
        "required": false,
        "description": "Type of popover"
      },
      {
        "name": "border",
        "type": "string",
        "required": false,
        "description": "弹出层边框颜色（含箭头）"
      },
      {
        "name": "background",
        "type": "string",
        "required": false,
        "description": "弹出层背景色（含箭头）"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1060",
        "description": "Popover 层级"
      },
      {
        "name": "showArrow",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示箭头"
      },
      {
        "name": "defaultVisible",
        "type": "boolean",
        "required": false,
        "description": "默认是否显示"
      },
      {
        "name": "clickToCancelDelay",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "MouseEnterDelay 内点击元素后取消弹出"
      },
      {
        "name": "scrollDismiss",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "滚动来关闭气泡框，如果需要指定滚动元素，则通过函数返回"
      },
      {
        "name": "arrowClass",
        "type": "string",
        "required": false,
        "description": "箭头的 class 名称"
      },
      {
        "name": "offset",
        "type": "[number, number]",
        "required": false,
        "defaultValue": "[0,0]",
        "description": "弹出层宽度|高度的附加值，期望弹出层的宽度|高度增加或减少的值，可以是负数；举例：[4, 0] 表示宽度增加 4px，高度不变",
        "version": "3.6.0"
      },
      {
        "name": "popupGap",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "弹出层与触发元素的间距",
        "version": "3.6.0"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "是否禁用弹出",
        "version": "3.7.0"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基本的用法，支持鼠标悬浮即显提示文字\n * en - Basic\n *    -- Basic usage, support mouse hover to show prompt text\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nexport default () => {\n  return (\n    <Button mode='outline'>\n      Hover\n      <Popover>some Text</Popover>\n    </Button>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-position",
        "title": "cn - 弹出位置",
        "code": "/**\n * cn - 弹出位置\n *    -- 内置了十二个弹出的位置\n * en - Position\n *    -- Twelve pop-up positions are built in\n */\n\nimport React from 'react';\nimport { Button, Popover, TYPE } from 'shineout';\n\ntype PopoverProps = TYPE.Popover.Props;\ntype PopoverPosition = PopoverProps['position'];\n\nconst positions: Array<PopoverPosition[]> = [\n  [undefined, 'bottom-left', 'bottom', 'bottom-right', undefined],\n  ['right-top', undefined, undefined, undefined, 'left-top'],\n  ['right', undefined, undefined, undefined, 'left'],\n  ['right-bottom', undefined, undefined, undefined, 'left-bottom'],\n  [undefined, 'top-left', 'top', 'top-right', undefined],\n];\n\nconst style: React.CSSProperties = {\n  margin: 4,\n  width: 110,\n  display: 'inline-block',\n};\n\nconst App: React.FC = () => (\n  <div>\n    {positions.map((row, i) => (\n      <div key={i}>\n        {row.map((p, j) =>\n          p ? (\n            <Button key={j} mode={'outline'} style={style}>\n              <Popover trigger='hover' position={p} useTextStyle>\n                <div>i am popover content</div>\n                <div>{p}</div>\n              </Popover>\n              {p}\n            </Button>\n          ) : (\n            <div key={j} style={{ ...style, border: 0 }} />\n          ),\n        )}\n      </div>\n    ))}\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-click",
        "title": "cn - 点击触发",
        "code": "/**\n * cn - 点击触发\n *    -- 默认是移入组件触发，设置 trigger 为 'click'，可以改为点击触发\n * en - Trigger\n *    -- Set the trigger property to change the trigger event to 'click'\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst App: React.FC = () => (\n  <Button mode=\"outline\">\n    <Popover trigger='click'>hello shineout</Popover>\n    Click me\n  </Button>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-controll",
        "title": "cn - 受控模式",
        "code": "/**\n * cn - 受控模式\n *    -- 可以通过 visible 去控制\n * en -  control\n *    -- can be controlled by visible\n */\nimport React, { useState } from 'react';\nimport { Button, Popover, Switch } from 'shineout';\n\nconst App: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Switch value={visible} onChange={setVisible} />\n        <span style={{ marginInlineStart: 8, fontSize: 14 }}>\n          {!visible ? 'Turn on switch to display popover' : 'Turn off switch to hide popover'}{' '}\n        </span>\n      </div>\n      <Button mode=\"outline\">\n        <Popover\n          priorityDirection='horizontal'\n          visible={visible}\n          onVisibleChange={(v) => {\n            console.log('onVisibleChange', v);\n          }}\n        >\n          Some text1\n        </Popover>\n        Hover\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "05-delay",
        "title": "cn - 延迟",
        "code": "/**\n * cn - 延迟\n *    -- 可以设置展示延时和关闭延时\n * en - delay\n *    -- the hidden/show delay\n */\nimport React from 'react';\nimport { Button, Popover } from 'shineout';\n\nconst App: React.FC = () => (\n  <Button mode=\"outline\">\n    <Popover mouseEnterDelay={200} mouseLeaveDelay={1000}>\n      Some text\n    </Popover>\n    Hover\n  </Button>\n);\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 27,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Progress": {
    "name": "Progress",
    "description": "用户进行操作后，系统对该操作行为内容作出的反馈",
    "category": "feedback",
    "importPath": "import { Progress } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "最外层扩展样式"
      },
      {
        "name": "background",
        "type": "string",
        "required": false,
        "defaultValue": "\\\"#e9ecef\\\"",
        "description": "背景色"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "附加内容"
      },
      {
        "name": "color",
        "type": "string | { form?: string , to?: string }",
        "required": false,
        "defaultValue": "primary",
        "description": "前景色, 可以设置为对象变成渐变."
      },
      {
        "name": "shape",
        "type": "\"line\" | \"circle\" | \"line-pop\" | \"line-inner\"",
        "required": false,
        "defaultValue": "\\\"line\\\"",
        "description": "样式"
      },
      {
        "name": "size",
        "type": "number",
        "required": false,
        "defaultValue": "100",
        "description": "进度条大小，仅对 circle 有效"
      },
      {
        "name": "strokeWidth",
        "type": "number",
        "required": false,
        "defaultValue": "8",
        "description": "线框宽度"
      },
      {
        "name": "type",
        "type": "\"success\" | \"info\" | \"warning\" | \"danger\"",
        "required": false,
        "description": "内置配色"
      },
      {
        "name": "value",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "百分比值，0 <= value <= 100"
      },
      {
        "name": "strokeLinecap",
        "type": "\"butt\" | \"round\" | \"square\" | \"inherit\"",
        "required": false,
        "description": "进度条两端的描边形状"
      },
      {
        "name": "icon",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示图标"
      },
      {
        "name": "iconSize",
        "type": "number",
        "required": false,
        "description": "图标大小"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    --  最基本的用法\n * en - Basic\n *    --  Basic Usage\n */\nimport React from 'react';\nimport { Progress } from 'shineout';\n\nexport default () => {\n  return <Progress style={{ width: 400 }} value={75} />;\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-line-pop",
        "title": "cn - 弹出展示",
        "code": "/**\n * cn - 弹出展示\n *    --  设置 shape=\"line-pop\"，children 会通过弹出框展示\n * en - Basic\n *    --  set shape=\"line-pop\"，children will show in a popup\n */\n\nimport React, { useState } from 'react';\nimport { Progress, Button } from 'shineout';\n\nlet store = 0;\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState(0);\n\n  const handleClick = (num = store) => {\n    let v = num;\n    v += Math.random() * 12;\n    if (v >= 100) {\n      v = 100;\n      setValue(v);\n    } else {\n      store = v;\n      if (store > 100) {\n        setValue(100);\n        store = 0;\n      } else {\n        setValue(v);\n        setTimeout(handleClick, 320);\n      }\n    }\n  };\n\n  return (\n    <div style={{ width: 400 }}>\n      <Progress value={value} shape='line-pop'>{`${parseInt(value.toString(), 10)}%`}</Progress>\n\n      <Button mode=\"outline\" onClick={() => handleClick(0)} style={{ marginTop: 24 }}>Start</Button>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-type",
        "title": "cn - 进度条状态",
        "code": "/**\n * cn - 进度条状态\n *    -- 内置了四种样式，通过 type 来调用\n * en - Type\n *    -- There are 4 built-in style\n */\nimport React from 'react';\nimport { Progress } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ width: 400, display: 'flex', flexDirection: \"column\", gap: 24 }}>\n    <Progress value={100} type='success'>100%</Progress>\n    <Progress value={90} type='info'>90%</Progress>\n    <Progress value={80} type='warning'>80%</Progress>\n    <Progress value={70} type='danger'>70%</Progress>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-circle",
        "title": "cn - 环形进度条",
        "code": "/**\n * cn - 环形进度条\n *    -- 设置 shape 为 'circle' 展示环形进度条\n * en - Circle\n *    -- set shape to 'circle' to show circle progress\n */\nimport React from 'react';\nimport { Progress } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', gap: '32px' }}>\n    <Progress value={0} shape='circle' type='info' size={64} strokeWidth={4}>0%</Progress>\n    <Progress value={60} shape='circle' type='info' size={64} strokeWidth={4}>60%</Progress>\n    <Progress value={70} shape='circle' type='warning' size={64} strokeWidth={4} icon />\n    <Progress value={100} shape='circle' type='success' size={64} strokeWidth={4} icon />\n    <Progress value={90} shape='circle' type='danger' size={64} strokeWidth={4} icon />\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "05-line-inner",
        "title": "cn - 内嵌进度条",
        "code": "/**\n * cn - 内嵌进度条\n *    -- 设置 shape 为 'line-inner' 展示内嵌的进度条\n * en - Line inner\n *    -- set shape to 'line-inner' to show line inner progress\n */\nimport React from 'react';\nimport { Progress } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'column', gap: 24, width: 400 }}>\n    <Progress value={0} shape='line-inner' type='info'>\n      0%\n    </Progress>\n    <Progress value={5} shape='line-inner' type='info'>\n      5%\n    </Progress>\n    <Progress value={40} shape='line-inner' type='info'>\n      10%\n    </Progress>\n    <Progress value={50} shape='line-inner' type='warning'>\n      50%\n    </Progress>\n    <Progress value={100} shape='line-inner' type='success'>\n      100%\n    </Progress>\n    <Progress value={60} shape='line-inner' type='danger'>\n      60%\n    </Progress>\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 13,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Radio": {
    "name": "Radio",
    "description": "单选框代表从一组互斥的选项中仅选择一个选项",
    "category": "other",
    "importPath": "import { Radio } from 'shineout'",
    "props": [
      {
        "name": "onChange",
        "type": "((value: T) => void)",
        "required": false,
        "description": "改变选中状态时触发回调"
      },
      {
        "name": "checked",
        "type": "boolean | ((d: T) => boolean)",
        "required": false,
        "description": "checked 传入时为受控组件"
      },
      {
        "name": "onClick",
        "type": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void)",
        "required": false,
        "description": "勾选框点击回调"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "inputRef",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "获取input dom"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "内容"
      },
      {
        "name": "htmlValue",
        "type": "T",
        "required": false,
        "defaultValue": "true",
        "description": "选中后返回的值"
      }
    ],
    "examples": [
      {
        "name": "001-base-0",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 最基础的 Radio\n * en - Base\n *    -- Simple Radio\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState('');\n  return (\n    <Radio\n      checked={value === 'option'}\n      htmlValue={'option'}\n      onChange={(v) => {\n        setValue(v);\n      }}\n    >\n      Option\n    </Radio>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "001-base-1",
        "title": "cn - 状态",
        "code": "/**\n * cn - 状态\n *    -- checked 属性设置 Radio 选中状态； disabled 属性设置 Radio 禁用状态\n * en - Base\n *    -- checked property set the checked status of Radio; disabled property set the disabled status of Radio\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Radio checked={false}>OptionA</Radio>\n      <Radio checked={true}>OptionB</Radio>\n      <Radio checked={false} disabled>\n        OptionC\n      </Radio>\n      <Radio checked={true} disabled>\n        OptionD\n      </Radio>\n    </>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "001-size",
        "title": "cn - 尺寸",
        "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性可以控制 Radio 的大小\n * en - Size\n *    -- Set `size` property to change the size of Radio\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <Radio.Group keygen>\n      <Radio size={'small'} htmlValue={'a'}>\n        OptionA\n      </Radio>\n      <Radio htmlValue={'b'}>OptionB</Radio>\n      <Radio size={'large'} htmlValue={'c'}>\n        OptionC\n      </Radio>\n    </Radio.Group>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "002-group-0",
        "title": "cn - 单选框组",
        "code": "/**\n * cn - 单选框组\n *    -- Radio.Group 通过数据来生成一组单选框\n * en - Group\n *    -- Radio.Group generate a group of radios from an array\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    myRadioGroup: {\n      '& .soui-radio': {\n        marginBottom: 12\n      },\n    },\n  },\n  { name: 'example-radio-group-0' },\n);\n\n\ntype RadioGroupItem = string;\n\nconst data: RadioGroupItem[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return <Radio.Group keygen data={data} defaultValue='blue' renderItem={(d) => d} className={classes.myRadioGroup} />;\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "002-group-1",
        "title": "cn -",
        "code": "/**\n * cn -\n *    -- 将一组 Radio 放在 Radio.Group 中，以 React 组件方式调用\n * en -\n *    -- A series of radios group by Radio.Group\n */\nimport React from 'react';\nimport { Radio } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    myRadioGroup: {\n      '& .soui-radio': {\n        marginBottom: 12\n      },\n    },\n  },\n  { name: 'example-radio-group-1' },\n);\n\nconst data: string[] = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'];\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Radio.Group\n        keygen\n        defaultValue='yellow'\n        onChange={(...args) => {\n          console.log(args);\n        }}\n        className={classes.myRadioGroup}\n      >\n        {data.map((d) => (\n          <Radio key={d} htmlValue={d}>\n            {d}\n          </Radio>\n        ))}\n      </Radio.Group>\n    </>\n  )\n};\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 10,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Rate": {
    "name": "Rate",
    "description": "评分打星组件",
    "category": "other",
    "importPath": "import { Rate } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "allowHalf",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否允许半选"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否允许再次点击后清除"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否只读"
      },
      {
        "name": "max",
        "type": "number",
        "required": false,
        "defaultValue": "5",
        "description": "选项最大值，整数"
      },
      {
        "name": "repeat",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "为 true 时，显示的选项为当前分值对应选项的复制"
      },
      {
        "name": "size",
        "type": "string | number",
        "required": false,
        "defaultValue": "20",
        "description": "图标大小"
      },
      {
        "name": "text",
        "type": "ReactNode[]",
        "required": false,
        "description": "附加文字"
      },
      {
        "name": "value",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "选中的 key （受控)"
      },
      {
        "name": "defaultValue",
        "type": "number",
        "required": false,
        "description": "默认值  和 value 类型相同"
      },
      {
        "name": "onChange",
        "type": "((value?: number ) => void)",
        "required": false,
        "description": "值改变回调"
      },
      {
        "name": "background",
        "type": "ReactElement | string | Array<string | ReactElement>",
        "required": false,
        "description": "未选中元素背景"
      },
      {
        "name": "front",
        "type": "ReactElement | string | Array<string | ReactElement>",
        "required": false,
        "defaultValue": "background",
        "description": "选中元素背景"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- Rate 为一个函数，创建一个指定图标或文字的 Rate 组件，供多处复用\n * en - Base\n *    -- Rate is a function that creates a new custom Rate component that specifies an icon or text\n */\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => <StarRate />;\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-half",
        "title": "cn - 半选",
        "code": "/**\n * cn - 半选\n *    -- Rate 是否允许半选\n * en - Semi selection\n *    -- Rate whether to allow semi selection\n */\n\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => <StarRate allowHalf defaultValue={3.5} />;\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-size",
        "title": "cn - 大小",
        "code": "/**\n * cn - 大小\n *    -- 通过 size 属性可以设置大小\n * en - Size\n *    -- Set the size through the size property\n */\n\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst titleStyle = { marginBottom: 8, fontSize: 16, fontWeight: '500' };\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => (\n  <div>\n    <div style={titleStyle}>16px</div>\n    <StarRate size={16} style={{ marginBottom: 32 }} />\n    <div style={titleStyle}>24px</div>\n    <StarRate size={24} />\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-text",
        "title": "cn - 附加文字",
        "code": "/**\n * cn - 附加文字\n *    -- text 属性可以为每个选项附加文字\n * en - Text\n *    -- Set text property to append text to each item\n */\n\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => (\n  <StarRate allowHalf defaultValue={4} text={['poor', 'fair', 'good', 'very good', 'excellent']} />\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "05-disable",
        "title": "cn - 只读",
        "code": "/**\n * cn - 只读\n *    -- 设置 disabled 标示为只读，只读状态下，value可以传入小数\n * en - Disabled\n *    -- Set disabled to true make it be read-only. When disabled, value can be passed in decimals\n */\n\nimport React from 'react';\nimport { Rate } from 'shineout';\n\nconst star = (\n  <svg viewBox='0 0 24 24' fill='currentColor' xmlns='http://www.w3.org/2000/svg'>\n    <path d='M8.276 7.825L1.85649 8.7559L1.74278 8.77878C1.00761 8.96968 0.736859 9.90915 1.30093 10.4606L5.953 15.008L4.84231 21.3268L4.82911 21.4327C4.77288 22.2003 5.59415 22.7575 6.29763 22.3824L11.999 19.343L17.7023 22.3825L17.7988 22.4279C18.5105 22.7194 19.2948 22.1128 19.1578 21.3281L18.054 15.008L22.6997 10.46L22.7779 10.3745C23.2586 9.78723 22.9242 8.86973 22.1443 8.75601L15.758 7.825L12.895 2.05544C12.5264 1.31273 11.4661 1.31545 11.1013 2.06004L8.276 7.825Z' />\n  </svg>\n);\n\nconst StarRate = Rate(star, star);\n\nconst App: React.FC = () => <StarRate value={3.6} disabled />;\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 20,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Rule": {
    "name": "Rule",
    "description": "Shineout Form 内部定义了一套数据校验机制，在 Form 内的组件上通过 rules 属性进行配置",
    "category": "other",
    "importPath": "import { Rule } from 'shineout'",
    "props": [
      {
        "name": "message",
        "type": "string",
        "required": false,
        "description": "校验失败时显示的错误提示信息"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 必填校验",
        "code": "/**\n * cn - 必填校验\n *    -- 必填校验，验证字段是否已填写。支持三种使用方式：rule.required() 使用默认提示、rule.required('自定义提示') 传入自定义提示、对象形式 { required: true, message: '自定义提示' }\n * en - Required validation\n *    -- Required validation, verifies if the field is filled. Supports three usage methods: rule.required() with default message, rule.required('custom message') with custom message, object form { required: true, message: 'custom message' }\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required()]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input name='age' rules={[rule.required('age required')]} />\n      </Form.Item>\n      <Form.Item label='address' required>\n        <Input name='address' rules={[{ required: true, message: 'address required' }]} />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-min",
        "title": "cn - 最小值校验",
        "code": "/**\n * cn - 最小值校验\n *    -- 最小值校验，会根据字段值的数据类型自动判断：如果值是数字类型则验证数值大小，如果值是字符串类型则验证字符串长度，如果值是数组类型则验证数组长度。支持 rule.min(value) 和对象形式 { min: value, message: '自定义提示' }\n * en - Minimum value validation\n *    -- Minimum value validation, automatically determines based on field data type: validates numeric value for number type, string length for string type, array length for array type. Supports rule.min(value) and object form { min: value, message: 'custom message' }\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required(), rule.min(2)]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input.Number name='age' title='age' rules={[rule.required(), rule.min(18)]} />\n      </Form.Item>\n      <Form.Item label='address' required>\n        <Input.Number\n          name='address'\n          title='address'\n          rules={[rule.required(), { min: 3, message: 'address must be at least three characters' }]}\n        />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-max",
        "title": "cn - 最大值校验",
        "code": "/**\n * cn - 最大值校验\n *    -- 最大值校验，会根据字段值的数据类型自动判断：如果值是数字类型则验证数值大小，如果值是字符串类型则验证字符串长度，如果值是数组类型则验证数组长度。支持 rule.max(value) 和对象形式 { max: value, message: '自定义提示' }\n * en - Maximum value validation\n *    -- Maximum value validation, automatically determines based on field data type: validates numeric value for number type, string length for string type, array length for array type. Supports rule.max(value) and object form { max: value, message: 'custom message' }\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required(), rule.max(5)]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input.Number name='age' title='age' rules={[rule.required(), rule.max(100)]} />\n      </Form.Item>\n      <Form.Item label='address' required>\n        <Input.Number\n          name='address'\n          title='address'\n          rules={[rule.required(), { max: 3, message: 'address must be at least three characters' }]}\n        />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-range",
        "title": "cn - 范围校验",
        "code": "/**\n * cn - 范围校验\n *    -- 范围校验，同时设置最小值和最大值限制。会根据字段值的数据类型自动判断：如果值是数字类型则验证数值范围，如果值是字符串类型则验证字符串长度范围，如果值是数组类型则验证数组长度范围。使用 rule.range(min, max, message) 设置范围\n * en - Range validation\n *    -- Range validation, sets both minimum and maximum limits. Automatically determines based on field data type: validates numeric range for number type, string length range for string type, array length range for array type. Use rule.range(min, max, message) to set range\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='name' title='name' rules={[rule.required(), rule.range(1, 5)]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input.Number name='age' title='age' rules={[rule.required(), rule.range(18, 100)]} />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-type",
        "title": "cn - 内置类型校验",
        "code": "/**\n * cn - 内置类型校验\n *    -- 内置类型校验，支持 email（邮箱格式）、integer（整数）、number（数字，包含小数）、url（网址）、json（JSON 格式）、hex（十六进制颜色）、rgb（RGB 颜色）、ipv4（IPv4 地址）等类型。使用 rule.type(message) 进行校验\n * en - Built-in type validation\n *    -- Built-in type validation, supports email, integer, number (including decimal), url, json, hex (hexadecimal color), rgb (RGB color), ipv4 (IPv4 address) and other types. Use rule.type(message) for validation\n */\nimport React from 'react';\nimport { Form, Input, Rule } from 'shineout';\n\nconst rule = Rule();\nexport default () => {\n  return (\n    <Form style={{ maxWidth: 500 }}>\n      <Form.Item label='name' required>\n        <Input name='email' rules={[rule.required(), rule.email('email is invalid')]} />\n      </Form.Item>\n      <Form.Item label='age' required>\n        <Input name='age' rules={[rule.required(), rule.integer('Please enter a valid age')]} />\n      </Form.Item>\n      <Form.Item label='price' required>\n        <Input name='price' rules={[rule.required(), rule.number('Please enter a valid price')]} />\n      </Form.Item>\n      <Form.Item label='url' required>\n        <Input name='url' rules={[rule.required(), rule.url('The url is not valid')]} />\n      </Form.Item>\n      <Form.Item label=''>\n        <Form.Submit>Submit</Form.Submit>\n      </Form.Item>\n    </Form>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 1,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Select": {
    "name": "Select",
    "description": "用于收纳大量选项的信息录入类组件",
    "category": "other",
    "importPath": "import { Select } from 'shineout'",
    "props": [
      {
        "name": "filterSameChange",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "当两次选择的值相同时不触发 onChange"
      },
      {
        "name": "value",
        "type": "any",
        "required": false,
        "description": "选中的值。在表单中使用时，此属性由表单管理。注意：请勿使用 undefined 或 null 作为有效选项值，当 value 为 undefined/null 时组件将跳过处理",
        "when": "For controlled component usage; omit when used inside Form"
      },
      {
        "name": "data",
        "type": "DataItem[]",
        "required": false,
        "description": "下拉列表的选项数据数组",
        "when": "Use for flat list data structure"
      },
      {
        "name": "treeData",
        "type": "Object[]",
        "required": false,
        "description": "树形结构数据，包含嵌套的子节点。格式：[{children: [...]}]",
        "when": "Use for hierarchical/nested data structure instead of flat data"
      },
      {
        "name": "noCache",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "禁用值与数据项的缓存。默认情况下，Select 会缓存 value 对应的 data 项以优化性能。当 data 频繁变化时，建议设为 true 以确保组件始终使用最新数据",
        "when": "When data updates frequently or dynamically"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "非受控组件的初始值",
        "when": "需要设置初始选中值但不需要外部控制时使用"
      },
      {
        "name": "separator",
        "type": "string",
        "required": false,
        "description": "多选模式下，使用此分隔符将选中值连接成字符串",
        "when": "When backend expects comma-separated or other delimited string"
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启多选模式",
        "when": "需要选择多个选项时使用"
      },
      {
        "name": "childrenKey",
        "type": "ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "\\\"children\\\"",
        "description": "指定树形数据中子节点的属性名称",
        "when": "When using treeData with a different property name for children"
      },
      {
        "name": "disabled",
        "type": "boolean | ((data: DataItem) => boolean)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时禁用全部选项；为函数时根据返回值禁用特定选项",
        "when": "需要禁用整个选择器或根据条件禁用特定选项时使用"
      },
      {
        "name": "prediction",
        "type": "((value: Value extends (infer U)[] ? U : Value, Data: DataItem) => boolean)",
        "required": false,
        "defaultValue": "(val, d) => val===format(d)",
        "description": "自定义匹配函数，用于判断 value 是否与数据项匹配。解决 JavaScript 引用相等（===）的局限性，即内容相同但引用不同的对象会被判定为不相等的问题",
        "when": "当选中值为对象类型且数据源会重新生成（如从接口获取）时使用，避免因引用变化导致的匹配失败"
      },
      {
        "name": "format",
        "type": "((data: DataItem) => Value extends (infer U)[] ? U : Value) | ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "d => d",
        "description": "格式化数据项为选中值。字符串：提取对应属性（如 \\\"id\\\" 获取 d.id）。函数：从数据项返回自定义值",
        "when": "当数据项为对象但只需要其中某个属性作为值时使用"
      },
      {
        "name": "onChange",
        "type": "((value: Value, data?: DataItem , checked?: boolean ) => void)",
        "required": false,
        "description": "值变更回调。参数：value（选中值）、data（选中的数据项）、checked（选中状态）",
        "when": "需要响应选择变化时使用"
      },
      {
        "name": "groupBy",
        "type": "((item: DataItem, index?: number , data?: DataItem[] ) => string)",
        "required": false,
        "description": "通过返回分组名称对选项进行分组。参数：item（当前要分类的数据项）、index（数据项在数组中的索引位置）、data（完整的数据数组，提供上下文信息）",
        "when": "需要将选项按类别分组显示时使用，如按部门、类型或首字母等条件组织选项"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "innerTitle",
        "type": "ReactNode",
        "required": false,
        "description": "内嵌标题"
      },
      {
        "name": "absolute",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1000",
        "description": "选项列表 z-index 值, 需要配合 absolute"
      },
      {
        "name": "emptyText",
        "type": "ReactNode",
        "required": false,
        "description": "自定义空状态内容。与 renderOptionList 搭配使用时，将 emptyText 设置为 false 可禁用此功能，需要自定义空内容时可在 renderOptionList 中处理",
        "when": "When no options match the filter or data array is empty"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number) | true",
        "required": true,
        "defaultValue": "index",
        "description": "生成 key 的辅助方法, 为函数时，使用此函数返回值, 为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d) => d.id。默认值为数组索引。对于简单数组（字符串/数字），可以使用默认值。但对于对象数组，必须指定合适的 keygen 以避免错误。如果不指定 keygen，组件会将整个对象作为 key，当 renderItem 默认为 (d) => d 时，会导致将对象直接渲染到 DOM 中，引发 React 渲染错误。",
        "when": "Always required for object arrays; optional for primitive arrays"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "启用时显示清除图标，可一键清空所有选中值",
        "when": "When users need ability to quickly clear selection"
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": "未选择任何选项时显示的占位文本",
        "when": "To provide hint text when select is empty"
      },
      {
        "name": "loading",
        "type": "boolean | ReactNode",
        "required": false,
        "defaultValue": "false",
        "description": "加载状态指示器。为 true 时显示默认的 Spin 组件，也可传入自定义加载组件",
        "when": "When fetching data asynchronously or during search operations"
      },
      {
        "name": "header",
        "type": "ReactNode",
        "required": false,
        "description": "自定义下拉列表顶部内容",
        "when": "To display instructions, filters, or actions above options"
      },
      {
        "name": "footer",
        "type": "ReactNode",
        "required": false,
        "description": "自定义下拉列表底部内容",
        "when": "To display summary, actions, or load more button below options"
      },
      {
        "name": "renderOptionList",
        "type": "((list: ReactNode, info: { loading?: ReactNode; }) => ReactNode)",
        "required": false,
        "description": "自定义渲染整个下拉列表内容。第一个参数 `list` 包含预渲染的选项列表（包括虚拟滚动、多列布局等）。第二个参数 `info` 包含：`loading` - 当前加载状态，可为 boolean（true 时显示默认加载动画）或自定义 ReactNode。注意：与 emptyText 配合使用时，将 emptyText 设为 false 可完全控制空状态渲染",
        "when": "For complete control over dropdown content (e.g., custom wrapper, animations, additional UI elements around the option list)"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "控制是否显示选择框边框",
        "when": "Set to false for borderless design or custom styling"
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "仅显示底部边框，呈现下划线样式",
        "when": "For minimal UI design or form-like appearance"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "程序化控制下拉列表的显示/隐藏状态",
        "when": "For controlled dropdown state or custom trigger logic"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "选择框的宽度。可接受数字（像素）或带单位的字符串",
        "when": "To set fixed width instead of default auto-sizing"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": "下拉列表的最大高度。可接受数字（像素）或带单位的字符串",
        "when": "To limit dropdown height when many options exist"
      },
      {
        "name": "optionWidth",
        "type": "string | number",
        "required": false,
        "defaultValue": "100%",
        "description": "下拉列表的宽度。可接受数字（像素）或带单位的字符串",
        "when": "When dropdown needs different width than select input"
      },
      {
        "name": "itemsInView",
        "type": "number",
        "required": false,
        "defaultValue": "10",
        "description": "一次渲染的最大选项数。使用虚拟滚动优化大数据集性能。如需显示超过 10 个可见项，请调整此值",
        "when": "Increase when dropdown height shows more than 10 items"
      },
      {
        "name": "lineHeight",
        "type": "number | \"auto\"",
        "required": false,
        "defaultValue": "32",
        "description": "每个选项的高度。固定高度内容请设置数字；设为 \\\"auto\\\" 则根据内容自适应高度（大数据集时可能影响性能）",
        "when": "Set number for consistent height items; \\\"auto\\\" for variable content",
        "version": "3.4.0 added \\\"auto\\\" mode"
      },
      {
        "name": "position",
        "type": "\"auto\" | \"bottom-left\" | \"bottom-right\" | \"top-left\" | \"top-right\"",
        "required": false,
        "defaultValue": "auto",
        "description": "下拉列表弹出位置。\\\"auto\\\" 会根据可用空间自动调整",
        "when": "Override auto positioning for specific layout requirements"
      },
      {
        "name": "columns",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "选项显示的列数。大于 1 时启用多列布局模式",
        "when": "When many short options need better space utilization"
      },
      {
        "name": "columnsTitle",
        "type": "ReactNode",
        "required": false,
        "description": "多列多选模式下，列顶部显示的标题",
        "when": "Using multi-column layout with multiple selection"
      },
      {
        "name": "showArrow",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "显示下拉箭头图标（仅单选模式）",
        "when": "Set to false for cleaner appearance or custom icon"
      },
      {
        "name": "focusSelected",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "多选模式下启用过滤时，点击选项后是否选中过滤输入框中的文本",
        "when": "Set to false to preserve filter text after selection"
      },
      {
        "name": "trim",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "失去焦点时自动删除输入内容的首尾空白字符",
        "when": "For cleaner data when users may accidentally input spaces"
      },
      {
        "name": "columnWidth",
        "type": "number",
        "required": false,
        "defaultValue": "160",
        "description": "多列布局中每列的宽度（仅在 columns > 1 时生效）",
        "when": "Adjust based on option content length in multi-column mode"
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": "过滤输入框允许输入的最大字符数",
        "when": "To limit filter/create input length"
      },
      {
        "name": "autoAdapt",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "下拉列表宽度根据内容自动调整",
        "when": "When option content varies significantly in width"
      },
      {
        "name": "compressed",
        "type": "boolean | \"no-repeat\" | \"hide-popover\"",
        "required": false,
        "defaultValue": "false",
        "description": "压缩多选项显示。true: 根据容器宽度动态计算并显示 \\\"+N\\\"；\\\"no-repeat\\\": 与 true 相同但弹出框中不重复显示已选项；\\\"hide-popover\\\": 仅显示 \\\"+N\\\" 不显示弹出框",
        "when": "When multiple selections may exceed container width"
      },
      {
        "name": "compressedBound",
        "type": "number",
        "required": false,
        "description": "固定显示的标签数量，超出部分显示 \\\"+N\\\"。设置后将始终显示指定数量的标签，不再根据容器宽度动态计算。对于大数据集，推荐设置此属性以避免昂贵的 DOM 计算，提升性能",
        "when": "With compressed mode and many selections for better performance"
      },
      {
        "name": "compressedClassName",
        "type": "string",
        "required": false,
        "description": "压缩项弹出框的 CSS 类名",
        "when": "To style the compressed items popover"
      },
      {
        "name": "renderCompressed",
        "type": "((options: { data: DataItem[], onRemove: (item: DataItem) => void }) => ReactNode)",
        "required": false,
        "description": "自定义渲染压缩/折叠项的显示内容",
        "when": "To customize the \\\"+N\\\" display or compressed content",
        "version": "3.5.0"
      },
      {
        "name": "hideCreateOption",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "从下拉列表中隐藏创建选项。按回车键直接选中创建的值",
        "when": "With onCreate for cleaner UI when creating is primary action"
      },
      {
        "name": "filterSingleSelect",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "过滤结果仅剩一个选项时，失焦自动选中该选项（仅在启用过滤时有效）",
        "when": "For better UX when users expect single match to be selected"
      },
      {
        "name": "defaultExpanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "树形数据中默认展开的节点 key 值（非受控）",
        "when": "With treeData to show specific nodes expanded initially"
      },
      {
        "name": "defaultExpandAll",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "初始展开所有树节点（仅树形数据有效）",
        "when": "For small tree datasets where all nodes should be visible"
      },
      {
        "name": "expanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "树形数据中展开的节点 key 值（受控）",
        "when": "For controlled tree expansion state"
      },
      {
        "name": "showHitDescendants",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "过滤树形数据时，显示匹配项的所有子节点",
        "when": "To keep parent-child context visible during search"
      },
      {
        "name": "convertBr",
        "type": "string | ((text: string) => string)",
        "required": false,
        "defaultValue": "\\\" \\\"",
        "description": "粘贴文本时转换换行符。字符串用于替换换行；函数用于转换文本",
        "when": "When pasting multi-line content with onCreate"
      },
      {
        "name": "resultClassName",
        "type": "string | ((value: DataItem) => string)",
        "required": false,
        "description": "选中项显示容器的 CSS 类名。可为字符串或基于值返回类名的函数",
        "when": "To style selected items differently based on value"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((data: DataItem, index?: number ) => ReactNode)",
        "required": false,
        "defaultValue": "d => d",
        "description": "渲染下拉列表中的每个选项。字符串使用属性值；函数自定义显示",
        "when": "To display complex option content or specific property"
      },
      {
        "name": "renderResult",
        "type": "((data: DataItem, index?: number ) => ReactNode)",
        "required": false,
        "defaultValue": "renderItem",
        "description": "渲染选中项的显示内容。未指定时使用 renderItem",
        "when": "When selected display differs from dropdown display"
      },
      {
        "name": "renderUnmatched",
        "type": "((value: Value extends (infer U)[] ? U : Value) => ReactNode)",
        "required": false,
        "description": "自定义渲染数据中不存在的值",
        "when": "When value might not exist in current data (e.g., async loading)"
      },
      {
        "name": "onBlur",
        "type": "((e: any) => void)",
        "required": false,
        "description": "选择框失去焦点时触发",
        "when": "For form validation or saving draft selections"
      },
      {
        "name": "onFocus",
        "type": "((e: any) => void)",
        "required": false,
        "description": "选择框获得焦点时触发",
        "when": "To load data, show hints, or track analytics"
      },
      {
        "name": "onFilter",
        "type": "((text: string, from?: string ) => void | ((data: DataItem) => boolean) )",
        "required": false,
        "description": "启用过滤功能。返回函数用于前端过滤，返回 undefined 用于后端过滤",
        "when": "For searchable select or large datasets"
      },
      {
        "name": "onCreate",
        "type": "boolean | ((input: string | DataItem) => string | DataItem)",
        "required": false,
        "description": "从输入创建新选项。true 直接使用输入值；函数将输入转换为选项",
        "when": "For tags input or allowing custom values"
      },
      {
        "name": "onEnterExpand",
        "type": "((e: KeyboardEvent<HTMLDivElement>) => boolean)",
        "required": false,
        "description": "按回车键展开下拉框时调用。返回 false 阻止展开",
        "when": "To customize Enter key behavior"
      },
      {
        "name": "onCollapse",
        "type": "((collapse: boolean) => void)",
        "required": false,
        "description": "下拉框打开/关闭时触发。参数表示是否收起状态",
        "when": "To sync UI state or load data on open"
      },
      {
        "name": "onExpand",
        "type": "((value: (string | number)[]) => void)",
        "required": false,
        "description": "树节点展开/收起时触发。接收展开节点的 key 数组",
        "when": "For controlled tree expansion or tracking state"
      },
      {
        "name": "emptyAfterSelect",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "选中选项后清空过滤输入框",
        "when": "For better UX in searchable multi-select"
      },
      {
        "name": "filterDelay",
        "type": "number",
        "required": false,
        "defaultValue": "400",
        "description": "过滤输入的防抖延迟（毫秒）",
        "when": "Adjust for server-side filtering or performance"
      },
      {
        "name": "loader",
        "type": "((key: string | number, data: DataItem) => void)",
        "required": false,
        "description": "动态加载树节点子级。无 children 的节点展开时触发加载",
        "when": "For lazy-loading large tree structures"
      },
      {
        "name": "onAdvancedFilter",
        "type": "((text: string) => (data: DataItem) => boolean)",
        "required": false,
        "description": "高级过滤模式，允许在当前层级的过滤结果和原始数据间切换",
        "when": "For complex filtering scenarios with toggle capability"
      },
      {
        "name": "reFocus",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "启用过滤和创建功能时，选中选项后自动聚焦输入框",
        "when": "For continuous input in filter+create mode"
      },
      {
        "name": "adjust",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "下拉框被视口边缘遮挡时自动调整位置",
        "when": "Set to false for fixed positioning requirements"
      },
      {
        "name": "onLoadMore",
        "type": "(() => void | Promise<any>)",
        "required": false,
        "description": "滚动到下拉列表底部时触发，用于无限滚动加载",
        "when": "For pagination or lazy-loading large datasets",
        "version": "3.4.0"
      },
      {
        "name": "threshold",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "触发 onLoadMore 的滚动阈值（0-1）。1 表示列表底部",
        "when": "Set lower to preload before reaching bottom",
        "version": "3.4.0"
      },
      {
        "name": "trigger",
        "type": "\"click\" | \"hover\"",
        "required": false,
        "defaultValue": "\\\"click\\\"",
        "description": "打开下拉框的触发方式",
        "when": "Use \\\"hover\\\" for quick preview scenarios",
        "version": "3.4.0"
      },
      {
        "name": "highlight",
        "type": "boolean",
        "required": false,
        "description": "过滤时高亮匹配的文本",
        "when": "To visually indicate search matches",
        "version": "3.7.0"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "01-01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- Select 通过`data`属性设置数据源，通过`keygen`属性设置key生成器，通过`renderItem`属性设置渲染函数\n * en - Basic\n *    --\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select width={300} clearable data={data} keygen placeholder='Select Color' />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "01-02-multiple",
        "title": "cn - 多选",
        "code": "/**\n * cn - 多选\n *    -- 设置`multiple`属性允许开启多选功能\n * en - Multiple\n *    -- Set `multiple` to enable multiple selection\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const [value, setValue] = React.useState<string[]>();\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select\n        width={300}\n        multiple\n        data={data}\n        keygen\n        value={value}\n        onChange={(v) => setValue(v)}\n        placeholder='Select Color'\n        clearable\n      />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "01-03-01-compressed",
        "title": "cn - 合并选项",
        "code": "/**\n * cn - 合并选项\n *    -- 多选下设置`compressed`属性，结果不换行，超出折叠显示\n * en - Compressed\n *    -- Set `compressed` to prevent wrapping and will be displayed beyond the fold when multiple\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select\n        width={300}\n        defaultValue={data}\n        multiple\n        onChange={(v) => console.log(v)}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        compressed\n        clearable\n      />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "01-03-02-compressed",
        "title": "cn - 合并选项去重",
        "code": "/**\n * cn - 合并选项去重\n *    -- 当`compressed`属性值为 \"no-repeat\" 时，合并的选项中不会出现结果框中的重复内容\n * en - Compressed no-repeat\n *    -- When the value of the `compressed` property is 'no-repeat', the repeated content in the merged options will not appear in the result box\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select\n        width={300}\n        defaultValue={data}\n        multiple\n        onChange={(v) => console.log(v)}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        compressed='no-repeat'\n        clearable\n      />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "01-04-compressed",
        "title": "cn - 隐藏合并选项",
        "code": "/**\n * cn - 隐藏合并选项\n *    -- 使用 `compressed` 属性并设置值为 \"hide-popover\" 可以合并选中结果，仅展示合并后的选项数量，不再弹出层中展示合并的选项\n *    -- 建议数据量较大的情况下开启该功能，配合固定数值的 `compressedBound` 属性可降额外的低性能开销\n * en - Only merge options\n *    -- Set the `compressed` property to `hide-popover` to merge the selected results, only display the number of merged options, and no longer display the merged options in the pop-up layer\n *    -- It is recommended to enable this function when the data volume is large\n */\nimport React from 'react';\nimport { Select } from 'shineout';\n\nexport default () => {\n  const data = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet', 'pink'];\n  return (\n    <div>\n      <Select\n        width={300}\n        defaultValue={data}\n        multiple\n        onChange={(v) => console.log(v)}\n        data={data}\n        keygen\n        placeholder='Select Color'\n        compressed='hide-popover'\n        clearable\n      />\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 86,
      "requiredProps": 1,
      "propsWithWhen": 70
    }
  },
  "Skeleton": {
    "name": "Skeleton",
    "description": "在页面没有加载出真实内容时，给页面提供一个大致结构的占位图形组合",
    "category": "other",
    "importPath": "import { Skeleton } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "animation",
        "type": "boolean",
        "required": false,
        "description": "是否开启动画效果"
      },
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "description": "是否加载中，为true时，显示骨架屏"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "真实内容"
      },
      {
        "name": "text",
        "type": "boolean | SkeletonTextProps",
        "required": false,
        "description": "是否显示文本或段落"
      },
      {
        "name": "image",
        "type": "boolean | SkeletonImageProps",
        "required": false,
        "description": "是否显示图片"
      },
      {
        "name": "button",
        "type": "boolean | SkeletonButtonProps",
        "required": false,
        "description": "是否显示按钮"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n* cn - 基本用法\n*    -- 设置 `loading` 为true，开启加载状态\n* en - Basic\n*    -- Set `loading` to true to enable loading state\n */\nimport { Skeleton } from 'shineout';\n\nexport default () => {\n  return (\n    <Skeleton loading>\n      <div>\n        I am the content after loading. I am the content after loading. I am the content after loading.\n      </div>\n    </Skeleton>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-animation",
        "title": "cn - 动画",
        "code": "/**\n* cn - 动画\n*    -- 设置 `animation` 为true，开启动画效果\n* en - animation\n*    -- Set `animation` to true to enable animation\n */\nimport React from 'react';\nimport { Skeleton, Switch } from 'shineout';\n\nexport default () => {\n  const [animation, setAnimation] = React.useState(true);\n  return (\n    <>\n      <Switch value={animation} onChange={setAnimation} style={{ marginBottom: 24 }} />\n      <Skeleton loading animation={animation} text={{ rows: 5, width: '70%' }} image button={{ count: 2 }}>\n        <div>\n          I am the content after loading. I am the content after loading. I am the content after loading.\n        </div>\n      </Skeleton>\n    </>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-element",
        "title": "cn - 不同元素",
        "code": "/**\n* cn - 不同元素\n*    -- 配置不同的 `text`，`image` 和 `button` 属性来渲染不同的元素\n* en - Different elements\n*    -- Configure different `text`, `image` and `button` properties to render different elements\n */\nimport React from 'react';\nimport { Skeleton } from 'shineout';\n\nconst style = {\n  marginTop: 32,\n  marginBottom: 16,\n}\n\nexport default () => {\n  return (\n    <div>\n      <p style={{marginBottom: 16}}>文本</p>\n      <Skeleton loading text={{ rows: 1 }}>I am the content after loading. </Skeleton>\n\n      <p style={style}>段落</p>\n      <Skeleton loading text={{ rows: 3, width: '70%' }}>I am the content after loading. </Skeleton>\n\n      <p style={style}>头像</p>\n      <Skeleton loading text={false} image={{ size: 'large' }}>I am the content after loading. </Skeleton>\n\n      <p style={style}>图片</p>\n      <Skeleton loading text={false} image={{ shape: 'square', size: 'large' }}>I am the content after loading. </Skeleton>\n\n      <p style={style}>按钮</p>\n      <Skeleton loading text={false} button>I am the content after loading. </Skeleton>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-combination",
        "title": "cn - 组合用法",
        "code": "/**\n* cn - 组合用法\n*    -- 包含图片、文字、按钮、头像等多种元素组合在一起的占位效果\n* en - Combination usage\n*    -- A placeholder effect that combines multiple elements such as images, text, buttons, and avatars\n */\nimport React from 'react';\nimport { Skeleton } from 'shineout';\n\nconst style = {\n  marginTop: 32,\n  marginBottom: 16,\n}\n\nexport default () => {\n  return (\n    <div>\n      <p style={{marginBottom: 16}}>头像 + 文本</p>\n      <Skeleton loading text={{rows: 5, width: '70%'}} image={{size: 'large'}} style={{marginBottom: 32}}>I am the content after loading. </Skeleton>\n      <Skeleton loading text={{rows: 3, width: '70%'}} image={{size: 'large'}}>I am the content after loading. </Skeleton>\n\n      <p style={style}>图片 + 文本 + 按钮</p>\n      <Skeleton loading text={{rows: 5, width: '70%'}} image={{ shape: 'square', size: 'large' }} style={{marginBottom: 32}}>I am the content after loading. </Skeleton>\n      <Skeleton loading text={{rows: 5, width: '70%'}} image={{ shape: 'square', size: 'large' }} button={{count: 2}}>I am the content after loading. </Skeleton>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 8,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Slider": {
    "name": "Slider",
    "description": "滑动型输入器，帮助用户在连续或间断的区间内，通过滑动来选择一个数值或范围数值的控件",
    "category": "other",
    "importPath": "import { Slider } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "valueTipType",
        "type": "\"always\" | \"hover\"",
        "required": false,
        "defaultValue": "\\\"always\\\"",
        "description": "展示当前值的方式,默认为常驻展示"
      },
      {
        "name": "autoHide",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否自动隐藏当前值和刻度"
      },
      {
        "name": "formatScale",
        "type": "false | ((value: number, index?: number ) => string | number)",
        "required": false,
        "defaultValue": "v => v",
        "description": "格式化显示刻度，为 false 时，不显示刻度"
      },
      {
        "name": "formatValue",
        "type": "false | ((value: number) => string)",
        "required": false,
        "defaultValue": "v => v",
        "description": "格式化显示当前值，为 false 时，不显示当前值"
      },
      {
        "name": "height",
        "type": "number",
        "required": false,
        "defaultValue": "200",
        "description": "高度，仅在 vertical 为 true 情况下有效"
      },
      {
        "name": "onChange",
        "type": "((value: Value) => void)",
        "required": false,
        "description": "值改变时回调函数"
      },
      {
        "name": "scale",
        "type": "number[]",
        "required": false,
        "defaultValue": "[0, 100]",
        "description": "取值范围，长度 >= 2 的数组"
      },
      {
        "name": "step",
        "type": "number",
        "required": false,
        "defaultValue": "1",
        "description": "步长，必须大于等于0；为0时，只能选取 scale 指定的值"
      },
      {
        "name": "value",
        "type": "number | number[]",
        "required": false,
        "description": "当前值"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认值"
      },
      {
        "name": "vertical",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否垂直"
      },
      {
        "name": "range",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示双滑块"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用组件"
      },
      {
        "name": "onIncrease",
        "type": "(() => void)",
        "required": false,
        "description": "拖动超过最大值事件"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 最基本的用法\n * en - Base\n *    -- The basic usage\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => <Slider defaultValue={50} />;\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-range",
        "title": "cn - 范围选择",
        "code": "/**\n * cn - 范围选择\n *    -- 设置 range 属性显示为双滑块，输入(返回)值为长度为 2 的数组\n * en - Range\n *    -- Set the range property to display double sliders, and value is an array of length 2\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => <Slider range defaultValue={[25, 75]} />;\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-scale",
        "title": "cn - 区间",
        "code": "/**\n * cn - 区间\n *    -- 设置 scale 属性可以自定义区间\n * en - Scale\n *    -- Set the scale property to customize the interval\n */\nimport React from 'react';\nimport { Slider } from 'shineout';\n\nconst App: React.FC = () => <Slider scale={[0, 10, 100, 250, 500, 1000]} />;\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-01-input",
        "title": "cn - 带输入框",
        "code": "/**\n * cn - 带输入框\n *    -- 和数组输入框保持同步\n * en - Input\n *    -- change with number input\n */\nimport React, { useState } from 'react';\nimport { Slider, Input } from 'shineout';\n\nconst container: React.CSSProperties = {\n  display: 'flex',\n  alignItems: 'center',\n};\n\nconst slider: React.CSSProperties = {\n  flex: 1,\n  marginInlineEnd: 16,\n};\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<number | undefined>(50);\n\n  return (\n    <div style={container}>\n      <Slider value={value} onChange={(n) => setValue(n)} style={slider} />\n      <Input.Number\n        digits={0}\n        width={100}\n        max={100}\n        min={0}\n        value={value}\n        onChange={(n) => {\n          if (n === '') {\n            setValue(undefined);\n          } else {\n            setValue(Number(n || 0));\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "05-format",
        "title": "cn - 格式化",
        "code": "/**\n * cn - 格式化\n *    -- 通过 formatScale 属性自定义刻度显示信息\n *    -- 通过 formatValue 属性自定义值显示信息\n * en - Format\n *    -- Set the formatScale property to customize the display scale\n *    -- Set the formatValue property to customize the display value\n */\nimport React from 'react';\nimport { Slider, TYPE } from 'shineout';\n\ntype SliderProps = TYPE.Slider.Props<number[]>;\ntype SliderFormatValue = SliderProps['formatValue'];\n\nconst pad = (i: number) => (i < 10 ? `0${i}` : i);\n\nconst format: SliderFormatValue = (v: number) => {\n  const value = v + 540;\n  const hours = Math.floor(value / 60);\n  return `${pad(hours)}:${pad(value - hours * 60)}`;\n};\n\nconst App: React.FC = () => (\n  <Slider\n    range\n    formatScale={format}\n    formatValue={format}\n    defaultValue={[33, 216]}\n    scale={[0, 60, 120, 180, 240, 300, 360, 420, 480, 540]}\n  />\n);\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 22,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Spin": {
    "name": "Spin",
    "description": "用于页面和区块的加载中状态 至 页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑",
    "category": "other",
    "importPath": "import { Spin } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "tipClassName",
        "type": "string",
        "required": false,
        "description": "tip 文案上的 className"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "作为包裹元素使用"
      },
      {
        "name": "tip",
        "type": "ReactNode",
        "required": false,
        "description": "提示文案"
      },
      {
        "name": "size",
        "type": "string | number",
        "required": false,
        "defaultValue": "40",
        "description": "尺寸"
      },
      {
        "name": "name",
        "type": "| \"default\" | \"chasing-dots\" | \"cube-grid\" | \"double-bounce\" | \"fading-circle\" | \"four-dots\" | \"plane\" | \"pulse\" | \"ring\" | \"scale-circle\" | \"three-bounce\" | \"wave\" | \"chasing-ring\"",
        "required": false,
        "description": "类型"
      },
      {
        "name": "color",
        "type": "string",
        "required": false,
        "description": "颜色"
      },
      {
        "name": "mode",
        "type": "\"vertical\" | \"horizontal\"",
        "required": false,
        "defaultValue": "\\\"vertical\\\"",
        "description": "布局模式"
      },
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否为加载中"
      },
      {
        "name": "ignoreConfig",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "内部属性，是否忽略全局配置"
      }
    ],
    "examples": [
      {
        "name": "01-base-1",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基础 Spin 用法\n * en - Basic\n *    -- Basic Spin usage\n */\nimport React from 'react';\nimport { Spin } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 20 }}>\n      <Spin name=\"ring\" size={16} />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "01-base-2",
        "title": "cn -",
        "code": "/**\n * cn -\n *    -- 通过配置 `name` ，可以设置不同的动画效果, 通过配置 `size` 可以设置动画大小\n * en -\n *    -- Set different animation effects by configuring `name`, and set animation size by configuring `size`\n */\nimport React from 'react';\nimport { Spin } from 'shineout';\n\nexport default () => {\n  const names1 = [\n    // 'default',\n    'chasing-dots',\n    'cube-grid',\n    'double-bounce',\n    'fading-circle',\n    'four-dots',\n    'plane',\n  ];\n\n  const names2 = ['pulse', 'ring', 'scale-circle', 'three-bounce', 'wave', 'chasing-ring'];\n\n  const renderTip = (name: string) => {\n    return (\n      <span style={{ fontSize: 12, lineHeight: '20px', display: 'inline-block' }}>\n        {name}\n      </span>\n    );\n  };\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <div style={{ display: 'flex', flexWrap: 'nowrap', gap: 65, marginBottom: 32 }}>\n        {names1.map((name, index) => (\n          <div key={index} style={{ width: '16%' }}>\n            <Spin name={name as any} size={16} tip={renderTip(name)} />\n          </div>\n        ))}\n      </div>\n      <div style={{ display: 'flex', flexWrap: 'nowrap', gap: 65 }}>\n        {names2.map((name, index) => (\n          <div key={index} style={{ width: '16%' }}>\n            <Spin key={index} name={name as any} size={16} tip={renderTip(name)} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-mode",
        "title": "cn - 布局模式",
        "code": "/**\n * cn - 布局模式\n *    -- 在设置 `tip` 文案后，可以通过配置 `mode` 实现不同的布局模式：horizontal 水平布局、vertical 垂直布局\n * en - Basic\n *    -- After setting the `tip` text, you can use the `mode` property to set the layout mode: horizontal or vertical\n */\nimport React from 'react';\nimport { Spin } from 'shineout';\n\nexport default () => {\n  const renderTip = () => {\n    return <span style={{ fontSize: 12 }}>Loading...</span>;\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', gap: 24 }}>\n      <div style={{ width: 100 }}>\n        <Spin name='ring' size={16} mode='vertical' tip={renderTip()} />\n      </div>\n      <div style={{ width: 100 }}>\n        <Spin name='ring' size={16} mode='horizontal' tip={renderTip()} />\n      </div>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-wrapper",
        "title": "cn - 对容器使用",
        "code": "/**\n * cn - 对容器使用\n *    -- Spin 可以当作容器使用，只需将它包裹在外层即可\n * en - Wrapper\n *    -- Spin can be used as a container, just wrap it in the outer layer\n */\nimport React, { useEffect } from 'react';\nimport { Spin } from 'shineout';\n\nexport default () => {\n  const [loading, setLoading] = React.useState(false);\n  useEffect(() => {\n    setLoading(true);\n  }, []);\n  return (\n    <Spin\n      size={20}\n      tip={<span style={{ fontSize: 14 }}>loading...</span>}\n      name='ring'\n      mode='vertical'\n      loading={loading}\n    >\n      <div\n        style={{\n          width: '100%',\n          fontWeight: 300,\n          border: '1px solid #E8EBF0',\n          padding: 16,\n          boxSizing: 'border-box',\n        }}\n      >\n        <p\n          style={{\n            width: '20%',\n            height: 18,\n            background: '#E8EBF0',\n            borderRadius: 2,\n            marginBottom: 16,\n          }}\n        ></p>\n        <p\n          style={{\n            width: '100%',\n            height: 18,\n            borderRadius: 2,\n            background: '#E8EBF0',\n            marginBottom: 16,\n          }}\n        ></p>\n        <p style={{ width: '100%', height: 18, borderRadius: 2, background: '#E8EBF0' }}></p>\n      </div>\n    </Spin>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-tip",
        "title": "cn - 自定义文案",
        "code": "/**\n * cn - 自定义文案\n *    -- 通过配置 `tip` 属性来自定义文案\n * en - Tip\n *    -- Set the `tip` property to customize the text\n */\nimport React from 'react';\nimport { Spin } from 'shineout';\n\nexport default () => {\n  const renderTip = () => {\n    return <div style={{ fontSize: 14 }}>This may take a while...</div>;\n  };\n  return (\n    <div style={{ width: 200 }}>\n      <Spin name='ring' size={24} tip={renderTip()} />\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 11,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Steps": {
    "name": "Steps",
    "description": "提示用户进度以及当前的步骤，用于引导用户按照步骤完成任务的导航条",
    "category": "navigation",
    "importPath": "import { Steps } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": true,
        "description": "子元素"
      },
      {
        "name": "direction",
        "type": "\"horizontal\" | \"vertical\"",
        "required": false,
        "defaultValue": "\\\"horizontal\\\"",
        "description": "步骤条方向"
      },
      {
        "name": "type",
        "type": "\"default\" | \"dot\" | \"arrow\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "节点样式类型"
      },
      {
        "name": "labelPlacement",
        "type": "\"horizontal\" | \"vertical\"",
        "required": false,
        "defaultValue": "\\\"vertical\\\"",
        "description": "标签描述文字放置的位置"
      },
      {
        "name": "status",
        "type": "\"wait\" | \"process\" | \"finish\" | \"error\"",
        "required": false,
        "description": "当前步数节点状态"
      },
      {
        "name": "current",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "当前步数"
      },
      {
        "name": "renderIcon",
        "type": "((index: number, status?: \"wait\" | \"process\" | \"finish\" | \"error\" ) => ReactNode)",
        "required": false,
        "description": "自定义节点图标"
      },
      {
        "name": "onChange",
        "type": "((index: number) => void)",
        "required": false,
        "description": "步骤切换的回调,配置该属性可让步骤条可点击"
      },
      {
        "name": "disabled",
        "type": "boolean | ((index: number, id: any) => boolean)",
        "required": false,
        "description": "当前步骤节点是否被禁用，支持传入函数进行判断。优先级低于 Step 上的 disabled"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 步骤条基础用法\n * en - Basic\n *    -- Basic steps\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps current={1}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-size",
        "title": "cn - 尺寸",
        "code": "/**\n * cn - 尺寸\n *    -- 步骤条支持三种尺寸small、default、large\n * en - Size\n *    -- Steps support three sizes: small, default, large\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps size='small' current={1} style={{ marginBottom: 32 }}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n      <Steps current={1} style={{ marginBottom: 32 }}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n      <Steps size='large' current={1}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Processing' />\n        <Steps.Step title='Pending' />\n      </Steps>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-description",
        "title": "cn - 描述信息",
        "code": "/**\n * cn - 描述信息\n *    -- 通过配置`description`属性可以设置步骤条的描述信息\n * en - Description\n *    -- Set description by `description` property\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps current={1}>\n        <Steps.Step title='Succeeded' description='This is a description' />\n        <Steps.Step title='Processing' description='This is a description' />\n        <Steps.Step title='Pending' description='This is a description' />\n      </Steps>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-status",
        "title": "cn - 节点状态",
        "code": "/**\n * cn - 节点状态\n *    -- 通过指定`status`属性可以设置步骤条节点的状态\n *    -- 注意，step 的 status 优先级高于 steps 的 status\n * en - Status\n *    -- Set step status by `status` property\n *    -- Note that the status of the step has a higher priority than the status of the steps\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\n\nexport default () => {\n  return (\n    <div style={{ width: 500 }}>\n      <Steps current={1}>\n        <Steps.Step title='Succeeded' />\n        <Steps.Step title='Error' status='error' />\n        <Steps.Step title='Pending' />\n      </Steps>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "05-icon",
        "title": "cn - 自定义图标",
        "code": "/**\n * cn - 自定义图标\n *    -- 通过`renderIcon`属性可以自定义渲染步骤条节点的图标\n * en - Custom icon\n *    -- Set custom icon by `renderIcon` property\n */\nimport React from 'react';\nimport { Steps } from 'shineout';\nimport { successIcon, warningIcon, iconWait } from './static/icon';\n\nexport default () => {\n  const renderIcon = (index: number, status: any) => {\n    if (status === 'wait') {\n      return iconWait;\n    }\n    if (status === 'finish') {\n      return successIcon;\n    }\n    if (status === 'process') {\n      return warningIcon;\n    }\n    return index + 1;\n  };\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <Steps current={1} renderIcon={renderIcon}>\n        <Steps.Step title='Step1' />\n        <Steps.Step title='Step2' />\n        <Steps.Step title='Step3' />\n        <Steps.Step title='Step4' />\n      </Steps>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 12,
      "requiredProps": 1,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Sticky": {
    "name": "Sticky",
    "description": "Sticky 在屏幕滚动时，保持元素在屏幕可见区域",
    "category": "layout",
    "importPath": "import { Sticky } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "扩展样式。触发浮动后的默认 zIndex 为900，修改 style的 zIndex 来改变。"
      },
      {
        "name": "bottom",
        "type": "number",
        "required": false,
        "description": "距离底部多少偏移量触发"
      },
      {
        "name": "scrollContainer",
        "type": "string | HTMLElement | Element | null",
        "required": false,
        "description": "自定义附着的目标。可以传入 HTMLElement 或者 css selector，target 必须为 Sticky 组件的祖先节点"
      },
      {
        "name": "parent",
        "type": "HTMLElement | null",
        "required": false,
        "description": "sticky 父级元素, 当父元素离开视窗时，sticky 将失效"
      },
      {
        "name": "top",
        "type": "number",
        "required": false,
        "description": "距离顶部多少偏移量触发"
      },
      {
        "name": "css",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否采用 css 方式实现附着效果"
      },
      {
        "name": "onChange",
        "type": "((isSticky: boolean) => void)",
        "required": false,
        "description": "吸附效果时，触发该回调，当使用原生 sticky 时该方法无效"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 附着在顶部 20px\n * en - Basic\n *    -- Sticky 20px to top\n */\nimport React, { useRef } from 'react';\nimport { Alert, Sticky } from 'shineout';\n\nconst App: React.FC = () => {\n  const elRef = useRef(null);\n  return (\n    <div\n      ref={elRef}\n      style={{\n        height: 300,\n        backgroundColor: '#f4f5f8',\n        backgroundImage:\n          'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), ' +\n          'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff)',\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 10px 10px',\n      }}\n    >\n      <Sticky\n        top={200}\n        scrollContainer='#layout'\n        parent={elRef.current}\n        onChange={(isStikcy) => {\n          console.log('isStikcy: >>', isStikcy);\n        }}\n      >\n        <Alert>Sticky 200px to top</Alert>\n      </Sticky>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-element",
        "title": "cn - 容器内固定",
        "code": "/**\n * cn - 容器内固定\n *    -- 附着在元素内\n * en - Element\n *    -- Sticky to element\n */\nimport React, { useRef } from 'react';\nimport { Alert, Sticky } from 'shineout';\n\nconst App: React.FC = () => {\n  const Element = useRef(null);\n\n  return (\n    <div style={{ position: 'relative', zIndex: 0 }}>\n      <div id='sticky_element' ref={Element} style={{ height: 400, overflow: 'auto' }}>\n        <div\n          style={{\n            height: 1600,\n            backgroundColor: '#f4f5f8',\n            backgroundImage:\n              'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), ' +\n              'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff)',\n            backgroundSize: '20px 20px',\n            backgroundPosition: '0 0, 10px 10px',\n          }}\n        >\n          <div style={{ height: 600 }}></div>\n          <Sticky top={0} bottom={0} scrollContainer='#sticky_element'>\n            <Alert style={{ marginBottom: 0 }} type='info'>\n              Sticky to element\n            </Alert>\n          </Sticky>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-bottom",
        "title": "cn - 底部固定",
        "code": "/**\n * cn - 底部固定\n *    -- 附着在底部\n * en - Bottom\n *    -- Sticky to bottom\n */\nimport React, { useRef } from 'react';\nimport { Alert, Sticky } from 'shineout';\n\nconst App: React.FC = () => {\n  const elRef = useRef<HTMLDivElement | null>(null);\n  return (\n    <div\n      ref={elRef}\n      style={{\n        backgroundColor: '#f4f5f8',\n        backgroundImage:\n          'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), ' +\n          'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff)',\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 10px 10px',\n      }}\n    >\n      <div style={{ height: 300 }}></div>\n      <Sticky bottom={0} scrollContainer='#layout' parent={elRef.current}>\n        <Alert style={{ marginBottom: 0 }}>Sticky at bottom.</Alert>\n      </Sticky>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "t-01-fixed",
        "title": "cn - fixed",
        "code": "/**\n * cn - fixed\n *    -- 不传 scrollContainer 时，使用 fixe 定位\n * en - fixed\n *    -- When scrollContainer is not passed, use fixed positioning\n */\nimport React, { useRef, useState } from 'react';\nimport { Alert, Sticky, Button } from 'shineout';\n\nconst App: React.FC = () => {\n  const elRef = useRef<HTMLDivElement | null>(null);\n  const [left, setLeft] = useState(0);\n  return (\n    <div>\n      <Button onClick={() => setLeft(left + 10)}>Move Right</Button>\n      <div\n        ref={elRef}\n        style={{\n          backgroundColor: '#f4f5f8',\n          backgroundImage:\n            'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), ' +\n            'linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff)',\n          backgroundSize: '20px 20px',\n          backgroundPosition: '0 0, 10px 10px',\n        }}\n      >\n        <div style={{ height: 300 }}></div>\n        <Sticky bottom={0}>\n          <Alert style={{ marginBottom: 0, marginLeft: left }}>Sticky at bottom.</Alert>\n        </Sticky>\n        <div style={{ height: 300 }}></div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 9,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Switch": {
    "name": "Switch",
    "description": "用于两个互斥选项，用来打开或关闭选项的选择控件",
    "category": "other",
    "importPath": "import { Switch } from 'shineout'",
    "props": [
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": "当前选中状态，checked 传入时为受控组件"
      },
      {
        "name": "onChange",
        "type": "((value: boolean) => void)",
        "required": false,
        "description": "改变回调,Checked 表示选中状态"
      },
      {
        "name": "onClick",
        "type": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void)",
        "required": false,
        "description": "勾选框点击回调"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "inputRef",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "获取input dom"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "content",
        "type": "[ReactNode, ReactNode]",
        "required": false,
        "description": "选中和未选中时的内容"
      },
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "加载中"
      },
      {
        "name": "value",
        "type": "boolean",
        "required": false,
        "description": "Checked 未设置的情况下， checked = value"
      },
      {
        "name": "defaultValue",
        "type": "boolean",
        "required": false,
        "description": "默认值 和 value 类型相同"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "01-basic",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 最基础的用法\n * en - Base\n *    -- The basic usage\n */\nimport React from 'react';\nimport { Switch } from 'shineout';\n\nconst App: React.FC = () => {\n  return <Switch />;\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-status",
        "title": "cn - 禁用状态",
        "code": "/**\n * cn - 禁用状态\n *    -- 设置 `disabled` 属性, 可以设置禁用状态\n * en - Disabled\n *    -- Set disabled property to disable the Switch\n */\nimport React from 'react';\nimport { Switch } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'row', gap: 24 }}>\n      <Switch value={true} disabled />\n      <Switch value={false} disabled />\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-size",
        "title": "cn - 尺寸",
        "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性可以调整组件尺寸\n * en - Base\n *    -- Set the size property to adjust the size of the component\n */\nimport React from 'react';\nimport { Switch } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'row', gap: 24, alignItems: 'center' }}>\n      <Switch size={'small'} />\n      <Switch />\n      <Switch size={'large'} />\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "04-loading",
        "title": "cn - 加载中",
        "code": "/**\n * cn - 加载中\n *    -- 设置 `loading` 属性可以让 Switch 处于加载状态\n * en - Base\n *    -- Set `loading` property to make Switch loading\n */\nimport React from 'react';\nimport { Switch } from 'shineout';\n\nconst App: React.FC = () => {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'row', gap: 24, alignItems: 'center' }}>\n      <Switch loading value />\n      <Switch loading />\n    </div>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "05-text",
        "title": "cn - 自定义文案",
        "code": "/**\n * cn - 自定义文案\n *    -- 自定义开关打开（关闭）时需要显示的文字和图标\n * en - Custom content\n *    -- Customize the text and icon to display when the switch is on (off)\n */\nimport React from 'react';\nimport { Switch } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', flexDirection: 'row', gap: 24, alignItems: 'center' }}>\n    <Switch size='small' defaultValue content={['ON', 'OFF']} />\n    <Switch defaultValue content={['ON', 'OFF']} />\n    <Switch size='large' defaultValue content={['ON', 'OFF']} />\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 18,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Table": {
    "name": "Table",
    "description": "展示行列数据，用于数据收集展示、分析整理、操作处理",
    "category": "other",
    "importPath": "import { Table } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "onCellClick",
        "type": "((data: DataItem, info: { rowIndex: number; columnIndex: number; columnKey: string | number; }) => void)",
        "required": false,
        "description": "单元格点击事件的回调函数。参数：data（行数据），info.rowIndex（行索引），info.columnIndex（列索引），info.columnKey（列的唯一标识）"
      },
      {
        "name": "scrollLeft",
        "type": "number",
        "required": false,
        "description": "横向滚动位置（仅在虚拟滚动模式下生效）"
      },
      {
        "name": "rowHeight",
        "type": "number",
        "required": false,
        "defaultValue": "40",
        "description": "单行的预估高度。用于虚拟滚动的计算和滚动条显示"
      },
      {
        "name": "hover",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否启用行的鼠标悬浮高亮效果"
      },
      {
        "name": "empty",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "getLocale(\\\"Data not found\\\")",
        "description": "表格无数据时显示的内容"
      },
      {
        "name": "cellSelectable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否启用 Ctrl/Cmd + 点击来选中单元格"
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": "表格高度（与 style.height 作用相同）"
      },
      {
        "name": "onScroll",
        "type": "((x: number, y: number, left: number, top: number) => void)",
        "required": false,
        "description": "滚动事件回调函数。参数：x（横向滚动比例 0-1），y（纵向滚动比例 0-1），left（横向滚动像素值），top（纵向滚动像素值）"
      },
      {
        "name": "pagination",
        "type": "PaginationProps",
        "required": false,
        "description": "分页配置项。详见 [Pagination](/components/Pagination) 组件文档"
      },
      {
        "name": "loading",
        "type": "ReactNode",
        "required": false,
        "defaultValue": "false",
        "description": "加载状态。为 true 时显示默认的 [Spin](/components/Spin) 组件，也可传入自定义的加载组件"
      },
      {
        "name": "virtual",
        "type": "boolean | \"lazy\"",
        "required": false,
        "description": "启用虚拟滚动。设置为 \\\"lazy\\\" 可在滚动时避免重新渲染，提升性能"
      },
      {
        "name": "rowsInView",
        "type": "number",
        "required": false,
        "defaultValue": "20",
        "description": "单次渲染的最大行数。使用懒加载优化大数据量性能。若表格超过 20 行，可调整此值。设为 0 渲染全部数据"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "表格尺寸大小"
      },
      {
        "name": "radio",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "启用单选模式（只能选中一行）"
      },
      {
        "name": "verticalAlign",
        "type": "\"top\" | \"middle\"",
        "required": false,
        "defaultValue": "\\\"top\\\"",
        "description": "单元格内容的垂直对齐方式"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "原生 tr/td 元素（仅应用样式，不提供功能）"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "表格总宽度。默认为容器宽度，不能小于各列宽度之和"
      },
      {
        "name": "columns",
        "type": "CommonColumn[]",
        "required": false,
        "defaultValue": "[]",
        "description": "列配置数组。详见 Table columns 配置"
      },
      {
        "name": "disabled",
        "type": "boolean | ((d: DataItem) => boolean)",
        "required": false,
        "description": "禁用行选择。为 true 时禁用所有行。为函数时：参数 d 为行数据，返回 true 禁用该行"
      },
      {
        "name": "treeEmptyExpand",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "树形表格中，即使节点没有子数据也显示展开按钮"
      },
      {
        "name": "rowClickAttr",
        "type": "string | boolean | string[]",
        "required": false,
        "defaultValue": "[\\\"*\\\"]",
        "description": "指定哪些元素可以触发行点击。\\\"*\\\" 表示任何元素都可触发，也可指定特定的属性名"
      },
      {
        "name": "onRowClick",
        "type": "((rowData: DataItem, index: number, fireAttr?: string | boolean ) => void)",
        "required": false,
        "description": "行点击事件回调。参数：rowData（当前行数据），index（行索引），fireAttr（触发点击的元素属性）"
      },
      {
        "name": "striped",
        "type": "boolean",
        "required": false,
        "description": "启用交替行颜色（斑马纹效果）"
      },
      {
        "name": "rowClassName",
        "type": "(rowData: DataItem, index: number) => string | undefined",
        "required": false,
        "description": "为每一行设置自定义 CSS 类名。参数：rowData（行数据），index（行索引）。返回类名字符串"
      },
      {
        "name": "rowEvents",
        "type": "object",
        "required": false,
        "description": "表格行 (tr) 元素的事件处理器集合"
      },
      {
        "name": "data",
        "type": "object[]",
        "required": false,
        "description": "表格数据数组"
      },
      {
        "name": "showSelectAll",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否在表头显示全选复选框"
      },
      {
        "name": "bordered",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "显示表格边框"
      },
      {
        "name": "treeCheckAll",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "全选时是否包含所有子孙节点（树形模式）"
      },
      {
        "name": "renderSorter",
        "type": "((params: { status?: \"asc\" | \"desc\" | null , triggerAsc: () => void, triggerDesc: () => void }) => ReactNode)",
        "required": false,
        "description": "自定义渲染排序图标的函数。参数：status 当前排序状态（\\\"asc\\\"|\\\"desc\\\"|null），triggerAsc 触发升序排序，triggerDesc 触发降序排序"
      },
      {
        "name": "hideHeader",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "隐藏表格头部"
      },
      {
        "name": "summary",
        "type": "({ render: () => ReactNode, colSpan?: number , rowSpan?: number })[] | ({ render: () => ReactNode, colSpan?: number , rowSpan?: number })[][]",
        "required": false,
        "description": "表格底部，用于显示汇总行"
      },
      {
        "name": "sticky",
        "type": "boolean | { top?: number ; css?: boolean ; target?: Element | null ; }",
        "required": false,
        "description": "固定表头。为 true 时固定在顶部（偏移量为 0）。也可传入对象配置 top 偏移量和 CSS 模式等选项"
      },
      {
        "name": "showTopScrollbar",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "在表格顶部显示横向滚动条",
        "version": "3.4.0"
      },
      {
        "name": "showBottomScrollbar",
        "type": "boolean | BottomScrollbarOption",
        "required": false,
        "defaultValue": "false",
        "description": "在表格底部显示固定的横向滚动条。可传入布尔值或包含 bottom 偏移量和 zIndex 的对象",
        "version": "3.7.0"
      },
      {
        "name": "tableRef",
        "type": "((table: TableRef) => void)",
        "required": false,
        "description": "获取表格实例引用。提供方法：scrollToIndex 滚动到指定行，getRenderIndexByData 获取数据的渲染索引，scrollColumnIntoView 滚动到指定列，scrollColumnByLeft 按像素横向滚动，sortByColumn 程序化排序。请谨慎使用，仅在虚拟模式下支持"
      },
      {
        "name": "onRowSelect",
        "type": "((rows: Value) => void)",
        "required": false,
        "description": "行选择回调函数。参数 rows 包含选中的数据。如需数据格式化，请配合使用 format 和 prediction"
      },
      {
        "name": "defaultTreeExpandKeys",
        "type": "(string | number)[]",
        "required": false,
        "description": "默认展开行(非受控)"
      },
      {
        "name": "onTreeExpand",
        "type": "((openKeys: (string | number)[], data: Item, expand: boolean, index: number) => void)",
        "required": false,
        "description": "当设置 treeExpandKeys 后，展开行时会触发该回调，keys 为展开的行"
      },
      {
        "name": "treeExpandKeys",
        "type": "(string | number)[]",
        "required": false,
        "description": "树形数据展开行，受控"
      },
      {
        "name": "treeExpandIcon",
        "type": "((data: Item, index: number, isExpanded: boolean) => ReactNode)",
        "required": false,
        "description": "树形数据展开图标，函数返回 null 时隐藏展开图标",
        "version": "3.5.0"
      },
      {
        "name": "expandIcon",
        "type": "((data: Item, index: number, isExpanded: boolean, expandInstance: ReactNode, clickEvent?: (() => void) ) => ReactNode)",
        "required": false,
        "description": "自定义渲染可展开行的图标内容，其中 data 为当前行的数据，index 为数据下标，isExpanded 为当前行的展开状态，expandInstance 为原始展开行图标实例，clickEvent 为展开事件。展开事件 clickEvent 仅在列类型为 `expand` 时返回",
        "version": "3.5.4"
      },
      {
        "name": "loader",
        "type": "((data: Item, index: number) => Promise<void>)",
        "required": false,
        "description": "树形数据加载函数",
        "version": "3.5.0"
      },
      {
        "name": "sorter",
        "type": "((sortName: string, sorter: \"asc\" | \"desc\", sortedList: ({ order: \"asc\" | \"desc\", manual: boolean, key: string | number, weight?: number })[]) => void | ((a: Item, b: Item) => number) )",
        "required": false,
        "defaultValue": "alphaSort(Column.sorter, sorter)",
        "description": "表格统一排序函数，参数分别为 Column.sorter 和 排序方式;\\n支持多列排序，sorter传入对象{ rule: string | function, weight: number }, rule为排序规则，为字符串时参考单列排序的用法, weight 为权重，指明排序的优先级。\\n多列排序时，sortedList 返回所有参与排序的字段信息"
      },
      {
        "name": "onSortCancel",
        "type": "((preType: \"asc\" | \"desc\", key: string | number, orders: ({ order: \"asc\" | \"desc\", weight?: number , key: string | number, manual: boolean })[], sorter: string) => void)",
        "required": false,
        "description": "排序取消事件回调。当点击已排序的列取消排序时触发。参数：preType（之前的排序方向），key（列的唯一标识），orders（当前所有排序项信息），sorter（列的排序器名称）"
      },
      {
        "name": "sortDirections",
        "type": "(\"asc\" | \"desc\")[]",
        "required": false,
        "defaultValue": "[\\\"asc\\\", \\\"desc\\\"]",
        "description": "排序方向",
        "version": "3.5.0"
      },
      {
        "name": "columnResizable",
        "type": "boolean",
        "required": false,
        "description": "设置 columnResizable 为 true，使所有列可伸缩"
      },
      {
        "name": "onColumnResize",
        "type": "(columns: TableColumn[]) => void",
        "required": false,
        "description": "列宽伸缩后的回调"
      },
      {
        "name": "dataChangeResize",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "数据发生变化后是否重新计算列宽"
      },
      {
        "name": "expandKeys",
        "type": "(string | number)[]",
        "required": false,
        "description": "展开行受控"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number)",
        "required": true,
        "description": "生成每一项key的辅助方法\\n为函数时，使用此函数返回值\\n为string时，使用这个string对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
      },
      {
        "name": "value",
        "type": "any",
        "required": false,
        "description": "当前选中的数据值，数据格式与 onRowSelect 回调返回的格式保持一致"
      },
      {
        "name": "format",
        "type": "ObjectKey<DataItem> | ((data: DataItem) => Value extends (infer U)[] ? U : Value)",
        "required": false,
        "defaultValue": "d => d",
        "description": "格式化选中值。字符串时：作为属性名提取值（如 \\\"id\\\" 提取 d.id）。函数时：参数为行数据，返回格式化后的值"
      },
      {
        "name": "prediction",
        "type": "((value: Value extends (infer U)[] ? U : Value, data: DataItem) => boolean)",
        "required": false,
        "defaultValue": "(val, d) => val===format(d)",
        "description": "自定义值匹配函数。参数：value（选中值），data（行数据）。返回 true 表示匹配。用于默认比较失效时（如对象引用不同）"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基础的表格用法。推荐 columns 写为常量，以提升性能\n * en - Base\n *    -- Basic table usage\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={data} />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "01-empty",
        "title": "cn - 空状态",
        "code": "/**\n * cn - 空状态\n *    -- 表格空状态\n * en - Empty\n *    -- Table empty state\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={[]} />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-border",
        "title": "cn - 边框和底纹",
        "code": "/**\n * cn - 边框和底纹\n *    -- 通过 striped 显示交错底纹；通过 bordered 显示边框\n * en - Style\n *    -- Set striped to add zebra-striping; Set bordered to add borders\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nexport default () => {\n  return (\n    <div>\n      <Table keygen='id' columns={columns} data={data} bordered striped />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-size",
        "title": "cn - 尺寸类型",
        "code": "/**\n * cn - 尺寸类型\n *    -- 设置 size 为 small 显示紧凑表格，large 为显示松散表格\n * en - Size\n *    -- Set size to small to display compact table, large to display loose table\n */\nimport React from 'react';\nimport { Radio, Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\n\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst columns: TableColumnItem[] = [\n  { title: 'Name', render: (d) => `${d.firstName} ${d.lastName}` },\n  { title: 'Country', render: 'country' },\n  { title: 'Position', render: 'position' },\n  { title: 'Office', render: 'office' },\n];\n\nconst sizeList = ['small', 'default', 'large'];\nexport default () => {\n  const [size, setSize] = React.useState<'small' | 'large' | 'default'>('default');\n  return (\n    <div>\n      <Radio.Group\n        keygen\n        data={sizeList}\n        value={size}\n        onChange={setSize}\n        style={{ marginBottom: 24 }}\n      />\n      <Table keygen='id' size={size} columns={columns} data={data} />\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-group",
        "title": "cn - 表头分组",
        "code": "/**\n * cn - 表头分组\n *    -- Table 会自动合并相邻相同 group 的表头\n * en - Column group\n *    -- Table automatically merges headers with adjacent and identical groups\n */\nimport React from 'react';\nimport { Table, TYPE } from 'shineout';\n\ninterface TableRowData {\n  id: number;\n  time: string;\n  start: string;\n  height: number;\n  salary: number;\n  office: string;\n  country: string;\n  office5: string;\n  position: string;\n  lastName: string;\n  firstName: string;\n}\ntype TableColumnItem = TYPE.Table.ColumnItem<TableRowData>;\n\nconst data: TableRowData[] = [\n  {\n    id: 1,\n    firstName: 'Ephraim',\n    lastName: 'Wisozk',\n    position: 'Marketing Designer',\n    start: '2012-01-29',\n    time: '01:42',\n    salary: 115777,\n    country: 'Reunion',\n    office: 'Miami',\n    office5: 'Istanbul',\n    height: 113.74,\n  },\n  {\n    id: 2,\n    firstName: 'Osvaldo',\n    lastName: 'Beer',\n    position: 'Financial Controller',\n    start: '2007-09-04',\n    time: '03:26',\n    salary: 396093,\n    country: 'Syrian Arab Republic',\n    office: 'San Paulo',\n    office5: 'Shenzhen',\n    height: 82.13,\n  },\n  {\n    id: 3,\n    firstName: 'Dylan',\n    lastName: 'Ratke',\n    position: 'Development Lead',\n    start: '2009-10-16',\n    time: '01:45',\n    salary: 236064,\n    country: 'Peru',\n    office: 'Boston',\n    office5: 'Delhi',\n    height: 179.53,\n  },\n  {\n    id: 4,\n    firstName: 'Shaniya',\n    lastName: 'Jacobs',\n    position: 'Developer',\n    start: '2014-06-30',\n    time: '02:17',\n    salary: 338985,\n    country: 'Peru',\n    office: 'Chengdu',\n    office5: 'Dallas-Fort Worth',\n    height: 190.11,\n  },\n];\n\nconst name = (\n  <span style={{ background: '#E8EBF0', display: 'block', lineHeight: '40px', color: '#141737' }}>\n    Name\n  </span>\n);\n\nconst other = <span>Other</span>;\n\nconst columns: TableColumnItem[] = [\n  { title: 'First Name', render: 'firstName', group: [name, 'True Name'] },\n  { title: 'Last Name', render: 'lastName', group: [name, 'True Name'] },\n  { title: 'Nick Name', render: () => 'nickname', group: name },\n  { title: 'Country', render: 'country' },\n  { title: 'Office', render: 'office', group: other },\n  { title: 'Position', render: 'position', group: other, groupProps: { style: { background: '#EEF2FE' }, className: 'my-custom-header' } },\n];\n\nconst App: React.FC = () => <Table bordered keygen='id' columns={columns} data={data} />;\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 56,
      "requiredProps": 1,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Tabs": {
    "name": "Tabs",
    "description": "用来分隔内容上有关联但属于不同类别的数据集合，具有全局导航的作用",
    "category": "other",
    "importPath": "import { Tabs } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "lazy",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启懒加载"
      },
      {
        "name": "shape",
        "type": "\"button\" | \"line\" | \"bordered\" | \"card\" | \"dash\" | \"fill\"",
        "required": false,
        "defaultValue": "\\\"card\\\"",
        "description": "Shape 不为空时，activeBackground 等颜色参数将会无效，当shape为bordered时，指向card"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "子元素,必须为 Panel 元素"
      },
      {
        "name": "extra",
        "type": "ReactNode",
        "required": false,
        "description": "额外内容"
      },
      {
        "name": "splitColor",
        "type": "string",
        "required": false,
        "description": "分割线颜色,替代原有border属性"
      },
      {
        "name": "hideSplit",
        "type": "boolean",
        "required": false,
        "description": "是否隐藏分割线"
      },
      {
        "name": "collapsible",
        "type": "boolean",
        "required": false,
        "description": "是否可折叠"
      },
      {
        "name": "defaultCollapsed",
        "type": "boolean",
        "required": false,
        "description": "默认折叠状态,当 collapsible 设置为 true 时生效"
      },
      {
        "name": "autoFill",
        "type": "boolean",
        "required": false,
        "description": "自动填充内容区域,当position为left-top, right-top且shape为非button和fill时默认开启，其他情况需手动控制"
      },
      {
        "name": "switchToTop",
        "type": "boolean",
        "required": false,
        "description": "切换 tab 将自动滚动到 Tabs"
      },
      {
        "name": "sticky",
        "type": "number | boolean | StickyProps",
        "required": false,
        "description": "开启头部附着"
      },
      {
        "name": "position",
        "type": "| \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\"",
        "required": false,
        "description": "选项卡位置"
      },
      {
        "name": "activeBackground",
        "type": "string",
        "required": false,
        "description": "选中标签背景色"
      },
      {
        "name": "inactiveBackground",
        "type": "string",
        "required": false,
        "description": "未选中标签背景色"
      },
      {
        "name": "tabBarStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "tab bar 的样式对象"
      },
      {
        "name": "onChange",
        "type": "((key: string | number) => void)",
        "required": false,
        "description": "标签选中时触发回调事件"
      },
      {
        "name": "color",
        "type": "string",
        "required": false,
        "description": "标签页文字颜色，仅当 shape 为 \\\"card\\\" 时生效"
      },
      {
        "name": "allowNonPanel",
        "type": "boolean",
        "required": false,
        "description": "允许非Tabs.Panel的子元素",
        "version": "3.5.3"
      },
      {
        "name": "renderTabsHeader",
        "type": "((header: ReactNode, props: Omit<TabsProps, \"renderTabsHeader\">) => ReactNode)",
        "required": false,
        "description": "自定义渲染 header 内容",
        "version": "3.7.0"
      },
      {
        "name": "active",
        "type": "string | number",
        "required": false,
        "description": "当前选中标签页（受控）"
      },
      {
        "name": "defaultActive",
        "type": "string | number",
        "required": false,
        "defaultValue": "0",
        "description": "默认选中标签页（非受控）"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 选项卡的基本用法\n * en - Basic\n *    -- Basic usage of Tabs\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape='line' defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-01-line-shape",
        "title": "cn - 不同样式",
        "code": "/**\n * cn - 不同样式\n *    -- 选项卡有五种样式，可通过 `shape` 属性设置，card 卡片，line 线条，button 按钮, fill 填充, dash 短线\n *    -- 设置 `shape = \"line\"` 标签页显示为线条\n * en - Shape\n *    -- There are three shapes for tabs, you can set the `shape` property to change it\n *    -- Set `shape = \"line\"` to show tabs as line\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs: any[] = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape={'line'} defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-02-button-shape",
        "title": "cn - ",
        "code": "/**\n * cn - \n *    -- 设置 `shape = \"button\"` 标签页显示为按钮\n * en - \n *    -- Set `shape = \"button\"` to show tabs as buttons\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs: any[] = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape={'button'} defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-03-card-shape",
        "title": "cn - ",
        "code": "/**\n * cn - \n *    -- 设置 `shape = \"card\"` 标签页显示为卡片式\n * en - \n *    -- Set `shape = \"card\"` to show tabs as card\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs: any[] = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape={'card'} defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-04-fill-shape",
        "title": "cn - ",
        "code": "/**\n * cn - \n *    -- 设置 `shape = \"fill\"` 标签页显示为填充\n * en - \n *    -- Set `shape = \"fill\"` to show tabs as fill\n */\nimport { Tabs } from 'shineout';\n\nexport default () => {\n  const tabs: any[] = [];\n  for (let i = 0; i < 3; i++) {\n    tabs.push({ title: `Tab ${i + 1}`, content: `Content of Tab ${i + 1}` });\n  }\n\n  return (\n    <div style={{ height: 100 }}>\n      <Tabs shape={'fill'} defaultActive={0}>\n        {tabs.map((tab, index) => {\n          return (\n            <Tabs.Panel key={index} tab={tab.title}>\n              <div style={{ padding: 16, height: '100%', fontSize: 14 }}>{tab.content}</div>\n            </Tabs.Panel>\n          );\n        })}\n      </Tabs>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 23,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Tag": {
    "name": "Tag",
    "description": "标签是一种灵活、常用的分类方式，对关键词进行标记、分类或选择",
    "category": "other",
    "importPath": "import { Tag } from 'shineout'",
    "props": [
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "mode",
        "type": "\"bright\" | \"outline\" | \"fill\" | \"brightOutline\"",
        "required": false,
        "defaultValue": "\\\"bright\\\"",
        "description": "标签样式"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "color",
        "type": "| \"default\" | \"info\" | \"success\" | \"warning\" | \"danger\" | \"brown\" | \"purple\" | \"cyan\" | \"magenta\" | \"indigo\" | \"tangerine\" | \"lemon\" | \"neon\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "标签颜色,代替原有type属性，支持更多色系"
      },
      {
        "name": "shape",
        "type": "\"rounded\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "标签形状"
      },
      {
        "name": "backgroundColor",
        "type": "string",
        "required": false,
        "description": "背景色,可以自行的设置标签的背景色"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "内容，文字或react组件"
      },
      {
        "name": "onCompleted",
        "type": "((value: string) => void)",
        "required": false,
        "description": "Tag 编辑完成时触发该事件（children 必须为 string）"
      },
      {
        "name": "onClick",
        "type": "((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "点击 tag 事件"
      },
      {
        "name": "onClose",
        "type": "boolean | ((e: MouseEvent<HTMLDivElement, MouseEvent>) => void | Promise<any>)",
        "required": false,
        "description": "当 onClose 为空时，不显示关闭。如果需要关闭又不需要处理回调，设置为 true 即可"
      },
      {
        "name": "onKeyUp",
        "type": "((e: KeyboardEvent<HTMLInputElement>) => void)",
        "required": false,
        "description": "可编辑输入框 keyUp 事件"
      },
      {
        "name": "onEnterPress",
        "type": "((value: string, e: KeyboardEvent<HTMLInputElement>) => void)",
        "required": false,
        "description": "可编辑输入框回车事件"
      }
    ],
    "examples": [
      {
        "name": "s-001-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 标签常用的 5 种基本功能，默认、信息、危险、警告、成功\n *    -- 注意，`type` 属性将弃用，请使用 `color` 属性\n * en - Base\n *    -- The five basic functions of the tag, default, info, danger, warning, success\n *   -- Note that the `type` property will be deprecated, please use the `color` property\n */\n\nimport { Tag } from 'shineout';\nexport default () => {\n  const TagColor = ['default', 'info', 'danger', 'warning', 'success'];\n\n  const capitalizeFirstLetter = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n  return (\n    <div>\n      {TagColor.map((item, index) => (\n        <Tag key={index} color={item as any}>\n          {capitalizeFirstLetter(item)}\n        </Tag>\n      ))}\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-002-size",
        "title": "cn - 标签尺寸",
        "code": "/**\n * cn - 标签尺寸\n *    -- 标签尺寸分为 小、中、大 3 种\n * en - Size\n *    -- The size of the tag is divided into small, default and large\n */\n\nimport { Tag } from 'shineout';\nexport default () => {\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Tag size='small'>Small</Tag>\n        <Tag>Default</Tag>\n        <Tag size='large'>Large</Tag>\n      </div>\n      <div>\n        <Tag size='small' onClose>\n          Small\n        </Tag>\n        <Tag onClose>Default</Tag>\n        <Tag size='large' onClose>\n          Large\n        </Tag>\n      </div>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-003-mode",
        "title": "cn - 标签样式",
        "code": "/**\n * cn - 标签样式\n *    -- 标签样式分为 亮色、填充、线框、亮色线框 4 种\n * en - Mode\n *    -- The mode of the tag is divided into bright, fill, outline, brightOutline line 4 kinds\n */\n\nimport { Tag } from 'shineout';\nexport default () => {\n  const TagColor = ['default', 'info', 'danger', 'warning', 'success'];\n  const TagMode = ['bright', 'fill', 'outline', 'brightOutline'];\n\n  const capitalizeFirstLetter = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  return (\n    <div>\n      {TagMode.map((mode, midx) => {\n        return (\n          <div key={midx} style={{ marginBottom: midx === TagMode.length - 1 ? 0 : 24 }}>\n            {TagColor.map((color, cidx) => (\n              <Tag mode={mode as any} key={cidx} color={color as any}>\n                {capitalizeFirstLetter(color)}\n              </Tag>\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-004-color",
        "title": "cn - 多色标签",
        "code": "/**\n * cn - 多色标签\n *    -- 除常用 5 种常用的基本功能色外，组件还提供了其他色系的标签\n *    -- 注意，`type` 属性将弃用，`color` 属性同样支持 type 同属性值的样式\n * en - Color\n *    -- In addition to the five basic functions of the commonly used tag, the component also provides tags of other colors\n *    -- Note that the `type` property will be deprecated, and the `color` property also supports the style of the same property value as type\n */\n\nimport { TYPE, Tag } from 'shineout';\n\ntype TagColorType = Exclude<TYPE.Tag.Props['color'], undefined>\ntype TagModeType = Exclude<TYPE.Tag.Props['mode'], undefined>\n\nexport default () => {\n  const TagColor: TagColorType[] = ['tangerine', 'magenta', 'purple', 'indigo', 'cyan', 'neon', 'lemon', 'brown'];\n  const TagMode: TagModeType[] = ['bright', 'fill', 'outline', 'brightOutline'];\n\n  const capitalizeFirstLetter = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  return (\n    <div>\n      {TagMode.map((mode, midx) => {\n        return (\n          <div key={midx} style={{ marginBottom: 24 }}>\n            {TagColor.map((color, cidx) => (\n              <Tag mode={mode} key={cidx} color={color}>\n                {capitalizeFirstLetter(color)}\n              </Tag>\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "s-005-dynamic",
        "title": "cn - 可删除和添加标签",
        "code": "/**\n * cn - 可删除和添加标签\n *    -- 通过数组生成tags，动态增改\n * en - Delete and add tags\n *    -- Generate tags through arrays, dynamically increase and change\n */\n\nimport { useState } from 'react';\nimport { Tag } from 'shineout';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyle = createUseStyles(\n  {\n    addTag: {\n      '&:hover': {\n        borderColor: 'var(--soui-tag-info-outline-border-color,var(--soui-brand-6,#197AFA))',\n        color: 'var(--soui-tag-info-outline-font-color,var(--soui-brand-6,#197AFA))',\n      },\n    },\n  },\n  { name: 'custom-tag' },\n);\n\nconst plusIcon = <svg viewBox=\"0 0 24 24\" width=\"12px\" height=\"12px\" fill=\"currentColor\" style={{display: 'block'}}>\n  <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M11.8185 2.09595C12.3708 2.09595 12.8185 2.54366 12.8185 3.09595V10.8181H20.9041C21.4564 10.8181 21.9041 11.2658 21.9041 11.8181C21.9041 12.3704 21.4564 12.8181 20.9041 12.8181H12.8185V20.904C12.8185 21.4563 12.3708 21.904 11.8185 21.904C11.2662 21.904 10.8185 21.4563 10.8185 20.904V12.8181H3.10059C2.5483 12.8181 2.10059 12.3704 2.10059 11.8181C2.10059 11.2658 2.5483 10.8181 3.10059 10.8181H10.8185V3.09595C10.8185 2.54366 11.2662 2.09595 11.8185 2.09595Z\"></path>\n</svg>\n\nexport default () => {\n  const [tags, setTags] = useState(['Tag 1', 'Tag 2', 'Tag 3']);\n  const [inputVisible, setInputVisible] = useState(false);\n\n  const classes = useStyle();\n\n  const remove = (removedTag: string) => {\n    const t = tags.filter((tag: string) => tag !== removedTag);\n    setTags(t);\n  };\n\n  const showInput = () => {\n    setInputVisible(true);\n  };\n\n  const handleInputBlur = (value: string) => {\n    let newTags = tags;\n    if (value && tags.indexOf(value) === -1) {\n      newTags = [...tags, value];\n    }\n    setTags(newTags);\n    setInputVisible(false);\n  };\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 24 }}>\n        {tags.map((a) => (\n          <Tag key={a} disabled={a === 'Tag 3' ? true : false} onClose={() => remove(a)}>\n            {a}\n          </Tag>\n        ))}\n\n        {inputVisible ? (\n          <Tag.Input style={{ marginLeft: 8 }} onBlur={handleInputBlur} size='small' />\n        ) : (\n          <Tag\n            style={{ cursor: 'pointer', borderStyle: 'dashed' }}\n            onClick={showInput}\n            mode='outline'\n            className={classes.addTag}\n          >\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <div style={{ marginInlineEnd: 4 }}>{plusIcon}</div>\n              <div>Add Tag</div>\n            </div>\n          </Tag>\n        )}\n      </div>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [
      "Input"
    ],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 14,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {
      "Input": {
        "props": [
          {
            "name": "style",
            "type": "CSSProperties",
            "required": false,
            "description": "自定义样式"
          },
          {
            "name": "className",
            "type": "string",
            "required": false,
            "description": "自定义类名"
          },
          {
            "name": "size",
            "type": "\"small\" | \"large\" | \"default\"",
            "required": false,
            "defaultValue": "\\\"default\\\"",
            "description": "不同尺寸"
          },
          {
            "name": "onKeyUp",
            "type": "((e: KeyboardEvent<HTMLInputElement>) => void)",
            "required": false,
            "description": "KeyUp 事件回调"
          },
          {
            "name": "onEnterPress",
            "type": "((value: string, e: KeyboardEvent<HTMLInputElement>) => void)",
            "required": false,
            "description": "EnterPress 事件回调"
          },
          {
            "name": "onFocus",
            "type": "((e: FocusEvent<HTMLInputElement, Element>) => void)",
            "required": false,
            "description": "Focus 事件回调"
          },
          {
            "name": "onBlur",
            "type": "((value: string, e: FocusEvent<HTMLInputElement, Element>) => void)",
            "required": false,
            "description": "Blur 事件回调"
          },
          {
            "name": "onChange",
            "type": "((value?: string ) => void)",
            "required": false,
            "description": "Value 改变回调"
          },
          {
            "name": "value",
            "type": "string",
            "required": false,
            "description": "受控"
          }
        ]
      }
    }
  },
  "Textarea": {
    "name": "Textarea",
    "description": "用户可以在文本框内输入或编辑文字",
    "category": "other",
    "importPath": "import { Textarea } from 'shineout'",
    "props": [
      {
        "name": "value",
        "type": "string",
        "required": false,
        "description": "defaultValue 和 value 可以同时设置，defaultValue 会被value覆盖"
      },
      {
        "name": "onChange",
        "type": "((value: string) => void)",
        "required": false,
        "description": "值改变回调函数"
      },
      {
        "name": "defaultValue",
        "type": "string",
        "required": false,
        "description": "默认值  和 value 类型相同"
      },
      {
        "name": "autosize",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "高度是否随内容自动变化"
      },
      {
        "name": "onBlur",
        "type": "FocusEventHandler<HTMLTextAreaElement>",
        "required": false,
        "description": "失去焦点后的回调"
      },
      {
        "name": "onFocus",
        "type": "FocusEventHandler<HTMLTextAreaElement>",
        "required": false,
        "description": "focus 事件回调函数"
      },
      {
        "name": "onClick",
        "type": "MouseEventHandler<Element>",
        "required": false,
        "description": "click 事件回调函数"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "textareaRef",
        "type": "Ref<HTMLTextAreaElement>",
        "required": false,
        "description": "获取textarea dom"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "onStatusChange",
        "type": "((status: { focused?: boolean ; }) => void)",
        "required": false,
        "description": ""
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否只展示下边框"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示边框"
      },
      {
        "name": "resize",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可以伸缩高度"
      },
      {
        "name": "onEnterPress",
        "type": "((value: string, e: KeyboardEvent<Element>) => void)",
        "required": false,
        "description": "回车键的回调函数"
      },
      {
        "name": "limit",
        "type": "number | ((text?: string ) => ReactNode)",
        "required": false,
        "description": "最大字符数",
        "version": "3.6.0"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可以清空值",
        "version": "3.6.0"
      },
      {
        "name": "info",
        "type": "number | ((value: string) => ReactNode | Error) | { content: number | ((value: string) => ReactNode | Error), position?: \"bottom-left\" | \"bottom-right\" }",
        "required": false,
        "description": "提示信息",
        "version": "3.4.0 支持 TextareaInfoOption 配置更多内容"
      },
      {
        "name": "maxHeight",
        "type": "string | number",
        "required": false,
        "description": "输入框的最大高度, 超过之后会出现滚动条"
      },
      {
        "name": "trim",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Trim 为 true 时，失去焦点时会自动删除空白字符"
      },
      {
        "name": "renderFooter",
        "type": "((value?: string ) => ReactNode)",
        "required": false,
        "description": "渲染 textarea footer"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "输入框宽度"
      },
      {
        "name": "delay",
        "type": "number",
        "required": false,
        "description": "用户输入触发 onChange 和校验间隔时间，单位 毫秒"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "01-01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    --基础用法\n * en - Base\n *    --Basic usage of `Textarea`\n */\nimport { Textarea } from 'shineout';\n\nexport default () => {\n  return <Textarea autoFocus placeholder='input something' />;\n};\n",
        "language": "tsx"
      },
      {
        "name": "01-02-resize",
        "title": "cn - 拖动高度",
        "code": "/**\n * cn - 拖动高度\n *    -- 设置 `resize` 属性可以拖动改变高度\n * en - resize\n *    -- Set the `resize` property to change the height by dragging\n */\nimport { Textarea } from 'shineout';\n\nexport default () => {\n  return <Textarea placeholder='input something' resize />;\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-size",
        "title": "cn - 尺寸",
        "code": "/**\n * cn - 尺寸\n *    -- 提供了三种尺寸 `small | default | large`\n * en - Size\n *    -- There are three sizes: small, default, and large\n */\nimport React from 'react';\nimport { Textarea } from 'shineout';\n\nconst style: React.CSSProperties = { width: 120, marginInlineEnd: 24 };\n\nconst App: React.FC = () => (\n  <div>\n    <Textarea size='small' rows={3} style={style} placeholder='small size' />\n    <Textarea style={style} rows={3} placeholder='default size' />\n    <Textarea size='large' rows={3} style={style} placeholder='large size' />\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "03-autosize",
        "title": "cn - 自适应高度",
        "code": "/**\n * cn - 自适应高度\n *    -- `autosize` 为 true 时， rows 为最小高度，如果要设置最大高度，使用 `maxHeight` 即可\n * en - Adaptive height\n *    -- `autosize` 为 true 时， rows 为最小高度，如果要设置最大高度，使用 `maxHeight` 即可\n */\nimport { Textarea } from 'shineout';\n\nexport default () => {\n  return (\n    <Textarea\n      autosize\n      rows={2}\n      placeholder='Please enter content, the height can be automatically adjusted'\n      maxHeight={150}\n      resize\n    />\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-info",
        "title": "cn - 提示信息",
        "code": "/**\n * cn - 提示信息\n *    -- 设置 `info` 为数字, 设定最大长度，用户 focus 时会显示用户已输入文字长度。\n *    -- 如果超出长度， 则会报错，不会隐藏。\n * en - Info\n *    -- Set info to number, set the maximum length, and the user's focus shows the length of text that the user has entered\n *    -- If the length is exceeded, the error is reported. It is not hidden\n *\n */\nimport React from 'react';\nimport { Textarea } from 'shineout';\n\nconst App: React.FC = () => <Textarea rows={4} trim placeholder='input something' info={10} />;\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 32,
      "requiredProps": 0,
      "propsWithWhen": 0
    }
  },
  "Tooltip": {
    "name": "Tooltip",
    "description": "鼠标悬停、聚焦或点击在某个组件时，弹出的文字提示。主要用来显示文字提示，如果需要显示更多内容，请使 Popover",
    "category": "other",
    "importPath": "import { Tooltip } from 'shineout'",
    "props": [
      {
        "name": "trigger",
        "type": "\"hover\" | \"click\" | \"focus\"",
        "required": false,
        "defaultValue": "\\\"hover\\\"",
        "description": "弹出方式"
      },
      {
        "name": "position",
        "type": "| \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"left\" | \"right\" | \"top\" | \"bottom\" | \"auto\"",
        "required": false,
        "defaultValue": "\\\"auto\\\"",
        "description": "弹出层位置"
      },
      {
        "name": "priorityDirection",
        "type": "\"auto\" | \"vertical\" | \"horizontal\"",
        "required": false,
        "defaultValue": "\\\"vertical\\\"",
        "description": "弹出位置优先级, 默认为上下优先, 只在未设置 position 时生效"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "mouseEnterDelay",
        "type": "number",
        "required": false,
        "defaultValue": "0",
        "description": "弹出延迟，默认为 0 不延迟，单位为毫秒。"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": true,
        "description": "子元素只能为一个 ReactElement"
      },
      {
        "name": "animation",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "弹出是否使用动画"
      },
      {
        "name": "disabledChild",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "使被禁用的元素正常显示提示"
      },
      {
        "name": "tip",
        "type": "ReactNode",
        "required": true,
        "description": "弹出文字"
      },
      {
        "name": "type",
        "type": "\"default\" | \"light\" | \"primary\" | \"success\" | \"warning\" | \"danger\"",
        "required": false,
        "defaultValue": "default",
        "description": "样式"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1051",
        "description": "tooltip 层级"
      },
      {
        "name": "persistent",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "鼠标悬停提示信息内容时，是否保持显示",
        "version": "3.5.3"
      },
      {
        "name": "showArrow",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示箭头",
        "version": "3.6.0"
      }
    ],
    "examples": [
      {
        "name": "example-01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- children 只能为一个 ReactElement 并且不可以使用 Fragment\n *    -- 内置了四个弹出方向\n * en - Base\n *    -- children can only be a ReactElement and cannot be a Fragment\n *    -- There are four pop-up directions built in\n */\nimport React from 'react';\nimport { Tooltip, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <Tooltip tip='hello world' trigger='hover'>\n      <Button type='primary'>hover me</Button>\n    </Tooltip>\n  </div>\n);\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "example-02-position",
        "title": "cn - 弹出位置",
        "code": "/**\n * cn - 弹出位置\n *    -- 内置了十二个弹出的位置\n * en - Position\n *    -- Twelve pop-up positions are built in\n *\n */\n\nimport React from 'react';\nimport { Button, Tooltip, TYPE } from 'shineout';\n\ntype PopoverProps = TYPE.Popover.Props;\ntype PopoverPosition = PopoverProps['position'];\n\nconst positions: Array<PopoverPosition[]> = [\n  [undefined, 'bottom-left', 'bottom', 'bottom-right', undefined],\n  ['right-top', undefined, undefined, undefined, 'left-top'],\n  ['right', undefined, undefined, undefined, 'left'],\n  ['right-bottom', undefined, undefined, undefined, 'left-bottom'],\n  [undefined, 'top-left', 'top', 'top-right', undefined],\n];\n\nconst style: React.CSSProperties = {\n  margin: 4,\n  width: 110,\n  display: 'inline-block',\n};\n\nconst App: React.FC = () => (\n  <div>\n    {positions.map((row, i) => (\n      <div key={i}>\n        {row.map((p, j) =>\n          p ? (\n            <Tooltip\n              key={j}\n              position={p}\n              tip={\n                <div>\n                  <div>i am popover content</div>\n                  <div>{p}</div>\n                </div>\n              }\n            >\n              <Button key={j} mode={'outline'} style={style}>\n                {p}\n              </Button>\n            </Tooltip>\n          ) : (\n            <div key={j} style={{ ...style, border: 0 }} />\n          ),\n        )}\n      </div>\n    ))}\n  </div>\n);\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "example-03-01-click",
        "title": "cn - 点击触发",
        "code": "/**\n * cn - 点击触发\n *    -- 默认触发事件为 hover，如果需要点击触发，可以设置 `trigger` 为 'click'\n * en - Click\n *    -- Set the trigger property to change the `trigger` event to 'click'\n */\nimport React from 'react';\nimport { Tooltip, Button } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <Tooltip tip='Some text.' trigger='click'>\n      <Button type='primary'>click me</Button>\n    </Tooltip>\n  </div>\n);\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "example-03-02-focus",
        "title": "cn - 聚焦触发",
        "code": "/**\n * cn - 聚焦触发\n *    -- 需要聚焦触发，可以设置 `trigger` 为 'focus', children 需要是一个可以聚焦的元素\n * en - Focus\n *    -- Set the trigger property to change the `trigger` event to 'focus'\n * \n */\nimport React from 'react';\nimport { Tooltip, Input } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <Tooltip tip='Some text.' trigger='focus'>\n      <Input style={{ width: 300 }} />\n    </Tooltip>\n  </div>\n);\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "example-04-disabled-inner",
        "title": "cn - 禁用元素",
        "code": "/**\n * cn - 禁用元素\n *    -- 设置 disabledChild 来使内部禁用的元素正常工作\n * en - Disabled\n *    -- Set disabledChild make disabled child work\n */\nimport React from 'react';\nimport { Button, Tooltip } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <Tooltip tip='Some text.' disabledChild>\n      <Button disabled>Disabled</Button>\n    </Tooltip>\n  </div>\n);\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 14,
      "requiredProps": 2,
      "propsWithWhen": 0
    }
  },
  "Transfer": {
    "name": "Transfer",
    "description": "在两栏中移动元素，完成选择行为，左栏是“源”，右边是“目标”",
    "category": "other",
    "importPath": "import { Transfer } from 'shineout'",
    "props": [
      {
        "name": "value",
        "type": "Value",
        "required": false,
        "description": "显示在右侧框数据的值集合"
      },
      {
        "name": "data",
        "type": "DataItem[]",
        "required": true,
        "defaultValue": "index",
        "description": "数据源"
      },
      {
        "name": "selectedKeys",
        "type": "(string | number)[]",
        "required": false,
        "description": "被勾选的列表, 勾选的值均使用的是 keygen 的结果"
      },
      {
        "name": "defaultSelectedKeys",
        "type": "(string | number)[]",
        "required": false,
        "description": "默认被勾选的列表"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认值  和 value 类型相同"
      },
      {
        "name": "format",
        "type": "((data: DataItem) => Value[number]) | ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "d => d",
        "description": "格式化 value, 默认值，返回原始数据。 为 string 时，会作为 key 从原始数据中获取值，相当于 (d) => d[format]; 为函数时，以函数返回结果作为 value"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number) | true",
        "required": false,
        "defaultValue": "index",
        "description": "生成每一项key的辅助方法 为 true 时，以数据项本身作为key，相当于 (d => d) 为函数时，使用此函数返回值 为string时，使用这个string对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
      },
      {
        "name": "simple",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启简单模式"
      },
      {
        "name": "disabled",
        "type": "boolean | ((data: DataItem) => boolean)",
        "required": false,
        "description": "如果 disabled 为 true，禁用全部选项，如果 disabled 为函数，根据函数反回结果禁用选项"
      },
      {
        "name": "prediction",
        "type": "((value: Value[number], Data: DataItem) => boolean)",
        "required": false,
        "description": "默认使用 format 函数执行的结果来比较是否匹配，在某些情况下（例如返回原始数据的对象，更新数据时，生成了一个值相同，非同一个对象的选项），需要借助 prediction 函数来判断是否匹配"
      },
      {
        "name": "onChange",
        "type": "((value: Value, currentData: DataItem | DataItem[], isTarget: boolean) => void)",
        "required": false,
        "description": "改变回调,参数为当前选中值"
      },
      {
        "name": "onFilter",
        "type": "((text: string, data: DataItem, isSource: boolean) => boolean)",
        "required": false,
        "description": "筛选函数, 参数为: 输入文本, 数据, 是否为左侧数据"
      },
      {
        "name": "onSearch",
        "type": "((text: string, isSource: boolean) => void)",
        "required": false,
        "description": "输入框值变化的回调, 参数为: 输入文本, 是否为左侧数据"
      },
      {
        "name": "onSelectChange",
        "type": "((sourceKeys: (string | number)[], targetKeys?: (string | number)[] ) => void) | ((selectKeys: (string | number)[]) => void)",
        "required": false,
        "description": "勾选触发的方法"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "listHeight",
        "type": "number",
        "required": false,
        "defaultValue": "186",
        "description": "列表高度"
      },
      {
        "name": "lineHeight",
        "type": "number",
        "required": false,
        "defaultValue": "34",
        "description": "列表行高"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((data: DataItem) => ReactNode)",
        "required": false,
        "defaultValue": "d => d",
        "description": "为 string 时，返回 d[string] 为 function 时，返回函数结果"
      },
      {
        "name": "itemClass",
        "type": "string",
        "required": false,
        "description": "选项 className"
      },
      {
        "name": "empty",
        "type": "ReactNode",
        "required": false,
        "description": "无内容的展示"
      },
      {
        "name": "rowsInView",
        "type": "number",
        "required": false,
        "defaultValue": "20",
        "description": "一次加载的数据条数"
      },
      {
        "name": "listClassName",
        "type": "string",
        "required": false,
        "description": "列表扩展的 class"
      },
      {
        "name": "listStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "列表扩展的样式"
      },
      {
        "name": "titles",
        "type": "[ReactNode, ReactNode]",
        "required": false,
        "description": "两侧的标题, 顺序是从左到右"
      },
      {
        "name": "footers",
        "type": "[ReactNode, ReactNode]",
        "required": false,
        "description": "底部元素, 顺序是从左到右"
      },
      {
        "name": "operations",
        "type": "[ReactNode, ReactNode]",
        "required": false,
        "description": "操作元素, 顺序是从上到下"
      },
      {
        "name": "operationIcon",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示操作按钮的图标"
      },
      {
        "name": "loading",
        "type": "boolean | [boolean, boolean]",
        "required": false,
        "description": "加载中, 如果需要两侧加载中状态不一致, 需要传入数组"
      },
      {
        "name": "searchPlaceholder",
        "type": "string | [string, string]",
        "required": false,
        "description": "搜索框占位"
      },
      {
        "name": "renderFilter",
        "type": "((filterProps: FilterProps) => ReactNode)",
        "required": false,
        "description": "自定义过滤器渲染"
      },
      {
        "name": "children",
        "type": "((props: { onSelected: ((string | number)[]) => void; direction: \"left\" | \"right\"; selectedKeys: (string | number)[]; value: Value; filterText: string; }) => ReactNode)",
        "required": false,
        "description": "自定义渲染内容"
      },
      {
        "name": "equalPanelWidth",
        "type": "boolean",
        "required": false,
        "description": "面板均等分配容器宽度"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基础 Transfer 使用\n * en - Base\n *    -- Base Transfer\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return (\n    <div style={{ width: 600 }}>\n      <Transfer data={data} keygen='id' listHeight={232} renderItem='name'></Transfer>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-size",
        "title": "cn - 尺寸",
        "code": "/**\n * cn - 尺寸\n *    -- 内置三种尺寸，small、default、large\n * en - Size\n *    -- There are three built-in sizes, small, default, and large\n */\nimport { useState } from 'react';\nimport { Transfer, Radio } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\nconst radios = ['small', 'default', 'large'];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const [radio, setRadio] = useState<'small' | 'default' | 'large'>('default');\n\n  return (\n    <div>\n      <Radio.Group\n        style={{ marginBottom: 24 }}\n        keygen\n        value={radio}\n        onChange={setRadio}\n        data={radios}\n      ></Radio.Group>\n      <Transfer data={data} size={radio} keygen='id' listHeight={232} renderItem='name'></Transfer>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-simple",
        "title": "cn - 简单模式",
        "code": "/**\n * cn - 简单模式\n *    -- 通过开启 `simple` 属性，可以使用简单模式\n *    -- 简单模式下`selectedKeys`和`onSelectChange`不生效\n * en - Simple\n *    -- By turning on the `simple` property, you can use the simple mode. In simple mode, `selectKeys` and `onSelectChange` are not valid\n *    -- In simple mode, `selectKeys` and `onSelectChange` are not valid\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  return (\n    <Transfer\n      simple\n      data={data}\n      defaultValue={['id-7', 'id-8', 'id-9']}\n      keygen='id'\n      format='id'\n      listHeight={232}\n      renderItem='name'\n    ></Transfer>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-filter",
        "title": "cn - 筛选",
        "code": "/**\n * cn - 筛选\n *    -- 通过`onFilter`属性设置自定义筛选方法\n * en - Filter\n *    -- Set custom filter method through the `onFilter` property\n */\nimport { Transfer } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const handleFilter = (text: string, item: { id: string; name: string }) => {\n    return item.name.indexOf(text) > -1;\n  };\n  return (\n    <Transfer\n      data={data}\n      keygen='id'\n      listHeight={188}\n      renderItem='name'\n      searchPlaceholder='Input search text'\n      onFilter={handleFilter}\n    ></Transfer>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "05-custom-filter",
        "title": "cn - 自定义渲染筛选",
        "code": "/**\n * cn - 自定义渲染筛选\n *    -- 通过`renderFilter`获取过滤参数实现自定义渲染过滤区域\n * en - Custom render filter\n *    -- Use `renderFilter` to get the filter parameters to achieve custom rendering of the filter area\n */\nimport { Transfer, Input, TYPE } from 'shineout';\n\nconst data: { id: string; name: string }[] = [];\n\ntype FilterProps = TYPE.Transfer.TransferFilterProps;\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    id: `id-${i}`,\n    name: `name-${i + 1}`,\n  });\n}\n\nexport default () => {\n  const handleFilter = (text: string, item: { id: string; name: string }) => {\n    return item.name.indexOf(text) > -1;\n  };\n\n  const renderFilter = (filterProps: FilterProps) => {\n    return (\n      <div style={{ display: 'flex', padding: '8px 12px 4px 12px' }}>\n        <Input\n          placeholder='Custom filter'\n          onChange={filterProps.onFilter as (text?: string) => void}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <Transfer\n      data={data}\n      keygen='id'\n      listHeight={188}\n      renderItem='name'\n      searchPlaceholder='Input search text'\n      onFilter={handleFilter}\n      renderFilter={renderFilter}\n    ></Transfer>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 40,
      "requiredProps": 1,
      "propsWithWhen": 0
    }
  },
  "Tree": {
    "name": "Tree",
    "description": "用于承载有父子关系的结构化内容，提供内容层级的展示",
    "category": "other",
    "importPath": "import { Tree } from 'shineout'",
    "props": [
      {
        "name": "tiledData",
        "type": "DataItem[]",
        "required": false,
        "description": ""
      },
      {
        "name": "active",
        "type": "string | number",
        "required": false,
        "description": "激活节点的key"
      },
      {
        "name": "value",
        "type": "Value",
        "required": false,
        "description": "选中的 key （受控）"
      },
      {
        "name": "defaultValue",
        "type": "(string | number)[]",
        "required": false,
        "description": "默认选中的 key （非受控）"
      },
      {
        "name": "data",
        "type": "DataItem[]",
        "required": true,
        "description": "数据，子节点为 children，如果 children 值为 null 或 长度为 0 时，视为叶子节点"
      },
      {
        "name": "expanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "展开的节点 key(受控)"
      },
      {
        "name": "defaultExpanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "默认展开的节点 key（非受控）"
      },
      {
        "name": "defaultExpandAll",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "默认展开所有节点"
      },
      {
        "name": "disabled",
        "type": "boolean | ((item: DataItem) => boolean) | { disabled: (data: DataItem) => boolean, isRealtime: boolean }",
        "required": false,
        "defaultValue": "false",
        "description": "显示选择框时有效，为 true 时，所有节点禁用选择，为函数时，根据函数返回结果确定是否禁用"
      },
      {
        "name": "keygen",
        "type": "| ObjectKey<DataItem> | ((data: DataItem, index: string) => string | number)",
        "required": true,
        "defaultValue": "index",
        "description": "生成 key 的辅助方法, 为函数时，使用此函数返回值, 为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d) => d.id"
      },
      {
        "name": "childrenKey",
        "type": "ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "\\\"children\\\"",
        "description": "指定子数据的属性名"
      },
      {
        "name": "mode",
        "type": "0 | 1 | 2 | 3 | 4",
        "required": false,
        "defaultValue": "1",
        "description": "选中值模式，未设置值为单选 0: 只返回完全选中的节点，包含父节点 1: 返回全部选中的节点和半选中的父节点 2: 只返回选中的子节点 3: 如果父节点选中，只返回父节点 4: 所选即所得"
      },
      {
        "name": "dataUpdate",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否监听 data 变化更新数据"
      },
      {
        "name": "unmatch",
        "type": "boolean",
        "required": false,
        "description": "是否开启不匹配模式"
      },
      {
        "name": "onExpand",
        "type": "((value: (string | number)[]) => void)",
        "required": false,
        "description": "节点展开回调，参数为当前展开节点 key 数组"
      },
      {
        "name": "virtual",
        "type": "boolean",
        "required": false,
        "description": "虚拟列表",
        "version": "3.6.0"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "line",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否显示连接线"
      },
      {
        "name": "iconClass",
        "type": "string",
        "required": false,
        "description": "展开/收起按钮的类名"
      },
      {
        "name": "nodeClass",
        "type": "string | ((data: DataItem) => string)",
        "required": false,
        "description": "节点的class，如果是函数，参数为该节点数据"
      },
      {
        "name": "contentClass",
        "type": "string | ((data: DataItem) => string)",
        "required": false,
        "description": "内容样式"
      },
      {
        "name": "leafClass",
        "type": "string | ((data: DataItem) => string)",
        "required": false,
        "description": "叶子节点的 class, 函数的参数为该条叶子节点数据"
      },
      {
        "name": "leafIcon",
        "type": "boolean | ((d: T) => ReactNode) | ReactNode",
        "required": false,
        "description": "开启叶子节点前的图标，或者自定义函数渲染",
        "version": "3.7.0"
      },
      {
        "name": "expandIcons",
        "type": "(ReactNode | ((d: DataItem) => ReactNode))[]",
        "required": false,
        "description": "自定义展开/收起按钮"
      },
      {
        "name": "childrenClass",
        "type": "string | ((data: DataItem) => string)",
        "required": false,
        "description": "子节点 class, 函数的参数为该条叶子节点数据"
      },
      {
        "name": "onDrop",
        "type": "((data: DataItem[], key: string | number, targetKey: string | number, position: number) => void)",
        "required": false,
        "description": "设置 onDrop 属性时，为可拖动状态"
      },
      {
        "name": "setActive",
        "type": "((key: string | number , data?: DataItem ) => void)",
        "required": false,
        "description": "设置激活节点的key",
        "version": "3.4.0"
      },
      {
        "name": "doubleClickExpand",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "双击是否展开节点"
      },
      {
        "name": "parentClickExpand",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "点击父节点展开"
      },
      {
        "name": "actionOnClick",
        "type": "ActionOnClick | ActionOnClick[]",
        "required": false,
        "description": "点击节点展开是的操作: \\\"expand\\\" 展开节点，\\\"check\\\" 选中复选框",
        "version": "3.6.0"
      },
      {
        "name": "dragImageSelector",
        "type": "string | ((data?: DataItem ) => string)",
        "required": false,
        "description": "定义拖拽图片的选择器"
      },
      {
        "name": "renderItem",
        "type": "| ((item: DataItem, expanded: boolean, active: boolean, id: string | number) => ReactNode) | ObjectKey<DataItem>",
        "required": true,
        "defaultValue": "index",
        "description": "为 string 时，返回 d[string]。 为 function 时，返回函数结果"
      },
      {
        "name": "onChange",
        "type": "((value: Value, id: string | number) => void)",
        "required": false,
        "description": "设置 onChange 属性时，显示 选择框。参数为当前选中值，和 mode 属性相关"
      },
      {
        "name": "dragImageStyle",
        "type": "CSSProperties",
        "required": false,
        "description": "拖拽图片的原生 style 样式"
      },
      {
        "name": "dragSibling",
        "type": "boolean",
        "required": false,
        "description": "是否只能平级拖拽"
      },
      {
        "name": "dragHoverExpand",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "拖拽时自动展开含有子节点的节点"
      },
      {
        "name": "inlineNode",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "节点是否内联"
      },
      {
        "name": "highlight",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "点击节点高亮"
      },
      {
        "name": "loader",
        "type": "((key: string | number, data: DataItem) => void)",
        "required": false,
        "description": "设置 loader 属性后，未定义 children 的节点视为动态加载节点，点击展开触发 loader事件，children 为 null 或者长度为 0 视为叶子节点"
      },
      {
        "name": "onClick",
        "type": "((data: DataItem, id: string | number, path?: { children: (string | number)[], path: (string | number)[], isDisabled: boolean, indexPath: number[], index: number } ) => void)",
        "required": false,
        "description": "节点点击事件"
      },
      {
        "name": "onDragStart",
        "type": "((e: DragEvent<Element>, data: DataItem) => void)",
        "required": false,
        "description": "拖拽开始事件"
      },
      {
        "name": "onDragEnd",
        "type": "((e: DragEvent<Element>, data: DataItem) => void)",
        "required": false,
        "description": "拖拽结束事件"
      },
      {
        "name": "onDragOver",
        "type": "((e: DragEvent<Element>, data: DataItem) => void)",
        "required": false,
        "description": "拖拽经过事件"
      },
      {
        "name": "onDragLeave",
        "type": "((e: DragEvent<Element>, data: DataItem) => void)",
        "required": false,
        "description": "拖拽离开事件"
      },
      {
        "name": "lineHeight",
        "type": "number",
        "required": false,
        "description": "列表项高度"
      },
      {
        "name": "height",
        "type": "number",
        "required": false,
        "description": "列表高度，仅开启virtual时生效",
        "version": "3.6.0"
      },
      {
        "name": "rowsInView",
        "type": "number",
        "required": false,
        "defaultValue": "20",
        "description": "同时展示的列表项数量",
        "version": "3.6.0"
      },
      {
        "name": "rootStyle",
        "type": "CSSProperties",
        "required": false,
        "description": ""
      },
      {
        "name": "ignoreSetFlat",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "size",
        "type": "\"small\" | \"default\" | \"large\"",
        "required": false,
        "defaultValue": "default",
        "description": "组件尺寸",
        "version": "3.7.0"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基础 Tree 组件用法，当配置 `children` 字段时，允许展开和收起节点\n * en - Base\n *    -- Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes\n */\n\nimport { Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n            },\n            {\n              id: '0-0-1',\n              children: [\n                {\n                  id: '0-0-1-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: '1',\n      children: [\n        {\n          id: '1-0',\n          children: [\n            {\n              id: '1-0-0',\n            },\n            {\n              id: '1-0-1',\n              children: [\n                {\n                  id: '1-0-1-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '1-1',\n          children: [\n            {\n              id: '1-1-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return `node ${node.id}`;\n  };\n\n  return (\n    <div>\n      <Tree data={data} keygen='id' renderItem={renderItem}></Tree>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-line",
        "title": "cn - 无连接线",
        "code": "/**\n * cn - 无连接线\n *    -- 设置 `line` 为 false，不显示连接线\n * en - line\n *    -- Set `line` to false to hide the connection line\n */\n\nimport { Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data: DataItem[] = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n              children: [\n                {\n                  id: '0-0-0-0',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const renderItem: TreeProps['renderItem'] = (node: any) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  return (\n    <div>\n      <Tree\n        defaultExpanded={['0', '0-0']}\n        line={false}\n        data={data}\n        keygen='id'\n        renderItem={renderItem}\n      ></Tree>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-01-expand",
        "title": "cn - 控制展开",
        "code": "/**\n * cn - 控制展开\n *    -- 基础 Tree 组件用法，当配置 `children` 字段时，允许展开和收起节点\n * en - expand\n *    -- Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes\n *\n */\nimport { useState } from 'react';\nimport { Tree, Button, TYPE } from 'shineout';\nimport { createNestedArray, getIds } from './utils';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = createNestedArray([2, 2, 2]);\n\nexport default () => {\n  const [expanded, setExpanded] = useState<TreeProps['expanded']>([]);\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  const handleExpandAll = () => {\n    setExpanded(getIds(data));\n  };\n\n  const handleCloseAll = () => {\n    setExpanded([]);\n  };\n\n  const handleExpand: TreeProps['onExpand'] = (ids) => {\n    setExpanded([...ids]);\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Button size='small' mode='outline' type='secondary' onClick={handleExpandAll}>\n          Expand all\n        </Button>\n        <Button size='small' mode='outline' type='secondary' onClick={handleCloseAll}>\n          Collapse all\n        </Button>\n      </div>\n      <Tree\n        line={false}\n        data={data}\n        expanded={expanded}\n        onExpand={handleExpand}\n        keygen='id'\n        renderItem={renderItem}\n      ></Tree>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "04-02-expandall",
        "title": "cn - 默认展开全部",
        "code": "/**\n * cn - 默认展开全部\n *    -- 设置 `defaultExpandAll` 属性，可以默认展开所有节点\n * en - Default Expand all\n *    -- Set the `defaultExpandAll` property to expand all nodes by default\n *\n */\nimport { Tree, TYPE } from 'shineout';\nimport { createNestedArray } from './utils';\n\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nconst data: DataItem[] = createNestedArray([2, 2, 2]);\nexport default () => {\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  return (\n    <div>\n      <Tree defaultExpandAll line={false} data={data} keygen='id' renderItem={renderItem}></Tree>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "05-disabled",
        "title": "cn - 禁用状态",
        "code": "/**\n * cn - 禁用状态\n *    -- 基础 Tree 组件用法，当配置 `children` 字段时，允许展开和收起节点\n * en - disabled\n *    -- Basic usage of Tree component. When the `children` field is configured, it allows expanding and collapsing nodes\n */\n\nimport { useState } from 'react';\nimport { Tree, TYPE } from 'shineout';\ntype TreeProps = TYPE.Tree.Props<DataItem, string[]>;\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\nexport default () => {\n  const data: DataItem[] = [\n    {\n      id: '0',\n      children: [\n        {\n          id: '0-0',\n          children: [\n            {\n              id: '0-0-0',\n            },\n          ],\n        },\n        {\n          id: '0-1',\n          children: [\n            {\n              id: '0-1-0',\n            },\n          ],\n        },\n        {\n          id: '0-2',\n          children: [\n            {\n              id: '0-2-0',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [value, setValue] = useState<TreeProps['value']>([]);\n\n  const renderItem: TreeProps['renderItem'] = (node) => {\n    return <span style={{ display: 'inline-block' }}>{`node ${node.id}`}</span>;\n  };\n\n  const isDisabled: TreeProps['disabled'] = (node) => {\n    return node.id === '0-0';\n  };\n\n  const handleChange: TreeProps['onChange'] = (keys) => {\n    setValue(keys);\n  };\n\n  return (\n    <div>\n      <Tree\n        line={false}\n        value={value}\n        data={data}\n        keygen='id'\n        mode={0}\n        defaultExpanded={['0']}\n        onChange={handleChange}\n        disabled={isDisabled}\n        renderItem={renderItem}\n      ></Tree>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 51,
      "requiredProps": 3,
      "propsWithWhen": 0
    }
  },
  "TreeSelect": {
    "name": "TreeSelect",
    "description": "用清晰的层级结构来展示层级信息，便于用户根据数据之间的关系来逐级找到相应的节点及数据",
    "category": "other",
    "importPath": "import { TreeSelect } from 'shineout'",
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"default\"",
        "required": false,
        "defaultValue": "\\\"default\\\"",
        "description": "不同尺寸"
      },
      {
        "name": "status",
        "type": "\"error\"",
        "required": false,
        "description": "组件状态"
      },
      {
        "name": "innerTitle",
        "type": "ReactNode",
        "required": false,
        "description": "内嵌标题"
      },
      {
        "name": "filterSameChange",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "当两次选择的值相同时不触发 onChange"
      },
      {
        "name": "absolute",
        "type": "boolean | (() => HTMLElement | null)",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，选项弹出层在 DOM 中独立 render; 为函数时，返回值作为弹出层容器"
      },
      {
        "name": "zIndex",
        "type": "number",
        "required": false,
        "defaultValue": "1000",
        "description": "选项列表 z-index 值, 需要配合 absolute"
      },
      {
        "name": "actionOnClick",
        "type": "ActionOnClick | ActionOnClick[]",
        "required": false,
        "description": "点击节点展开是的操作: \\\"expand\\\" 展开节点，\\\"check\\\" 选中复选框",
        "version": "3.6.0"
      },
      {
        "name": "value",
        "type": "Value",
        "required": false,
        "description": "选中的 key （受控），多选时必须为array。注意，请勿将 undefined 和 null 作为有意义的选项值，当 value 类型为 undefined 和 null 时，组件将不处理数据和渲染"
      },
      {
        "name": "defaultValue",
        "type": "Value",
        "required": false,
        "description": "默认值  和 value 类型相同"
      },
      {
        "name": "data",
        "type": "DataItem[]",
        "required": false,
        "defaultValue": "[]",
        "description": "数据源"
      },
      {
        "name": "expanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "展开的节点 key(受控)"
      },
      {
        "name": "defaultExpanded",
        "type": "(string | number)[]",
        "required": false,
        "description": "默认展开的节点 key（非受控）"
      },
      {
        "name": "defaultExpandAll",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "默认展开全部子节点, 仅树形数据下有效"
      },
      {
        "name": "disabled",
        "type": "boolean | ((item: DataItem) => boolean) | { disabled: (data: DataItem) => boolean, isRealtime: boolean }",
        "required": false,
        "defaultValue": "false",
        "description": "为 true 时，所有节点禁用选择，为函数时，根据函数返回结果确定是否禁用"
      },
      {
        "name": "keygen",
        "type": "ObjectKey<DataItem> | ((data: DataItem, parentKey: string | number) => string | number)",
        "required": true,
        "description": "生成 key 的辅助方法, 为函数时，使用此函数返回值, 为 string 时，使用这个 string 对应的数据值。如 \\\"id\\\"，相当于 (d) => d.id"
      },
      {
        "name": "childrenKey",
        "type": "ObjectKey<DataItem>",
        "required": false,
        "defaultValue": "\\\"children\\\"",
        "description": "指定子数据的属性名"
      },
      {
        "name": "mode",
        "type": "0 | 1 | 2 | 3 | 4",
        "required": false,
        "defaultValue": "1",
        "description": "选中值模式，未设置值为单选 0: 只返回完全选中的节点，包含父节点 1: 返回全部选中的节点和半选中的父节点 2: 只返回选中的子节点 3: 如果父节点选中，只返回父节点 4: 所选即所得"
      },
      {
        "name": "unmatch",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示data中不存在的值"
      },
      {
        "name": "onExpand",
        "type": "((value: (string | number)[]) => void)",
        "required": false,
        "description": "节点展开回调，参数为当前展开节点 key 数组"
      },
      {
        "name": "virtual",
        "type": "boolean",
        "required": false,
        "description": "虚拟列表"
      },
      {
        "name": "noCache",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启数据缓存，如果数据存在动态更新的情况建议开启"
      },
      {
        "name": "emptyText",
        "type": "string",
        "required": false,
        "description": "自定义 empty 文案"
      },
      {
        "name": "loading",
        "type": "boolean | ReactNode",
        "required": false,
        "defaultValue": "false",
        "description": "数据加载中，为true时会展示一个默认的 [Spin](/components/Spin) 组件，可以传入一个自定义的Spin代替"
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": "value 为空时的占位符"
      },
      {
        "name": "compressedBound",
        "type": "number",
        "required": false,
        "description": "开启多选后，指定允许展示标签数量，超过后将折叠"
      },
      {
        "name": "compressedClassName",
        "type": "string",
        "required": false,
        "description": "多选合并展示弹出框的类名"
      },
      {
        "name": "clearable",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可清除值"
      },
      {
        "name": "renderUnmatched",
        "type": "((data: Value extends (infer U)[] ? U : Value) => ReactNode)",
        "required": false,
        "description": "渲染未匹配值的方式"
      },
      {
        "name": "getComponentRef",
        "type": "((ref: ComponentRef<DataItem, Value>) => void) | { current?: ComponentRef<DataItem, Value> ; }",
        "required": false,
        "description": "获取组件的一些方法 目前只支持 getDataByValues"
      },
      {
        "name": "onFilter",
        "type": "((text: string, from?: string ) => void | ((data: DataItem) => boolean) )",
        "required": false,
        "description": "onFilter 不为空时，可以输入过滤数据。 onFilter 如果返回一个函数，使用这个函数做前端过滤。 如果不返回，可以自行做后端过滤"
      },
      {
        "name": "empty",
        "type": "ReactNode",
        "required": false,
        "description": "无数据时的占位内容"
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否是多选"
      },
      {
        "name": "onBlur",
        "type": "((e?: any) => void)",
        "required": false,
        "description": "blur 事件回调函数"
      },
      {
        "name": "onFocus",
        "type": "((e?: any) => void)",
        "required": false,
        "description": "focus 事件回调函数"
      },
      {
        "name": "renderResult",
        "type": "((data: DataItem) => ReactNode)",
        "required": false,
        "defaultValue": "renderItem",
        "description": "选中后在结果中显示的内容，默认和 renderItem 相同"
      },
      {
        "name": "height",
        "type": "number",
        "required": false,
        "defaultValue": "300",
        "description": "列表高度"
      },
      {
        "name": "onCollapse",
        "type": "((collapse: boolean) => void)",
        "required": false,
        "description": "下拉列表展开/收起回调"
      },
      {
        "name": "showHitDescendants",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "筛选后是否展示命中节点的后代节点"
      },
      {
        "name": "position",
        "type": "\"auto\" | \"bottom-left\" | \"top-left\"",
        "required": false,
        "description": "弹出位置"
      },
      {
        "name": "onEnterExpand",
        "type": "((e: KeyboardEvent<HTMLDivElement>) => boolean)",
        "required": false,
        "description": "回车触发下拉框展开的时候调用"
      },
      {
        "name": "onChange",
        "type": "((value: Value, selected?: DataItem | { IS_NOT_MATCHED_VALUE: boolean, value: any } , path?: (string | number)[] ) => void)",
        "required": false,
        "description": "参数 为 当前选中值"
      },
      {
        "name": "onChangeAddition",
        "type": "((params: { current?: DataItem | UnMatchedData | (DataItem | UnMatchedData)[] ; checked?: 0 | 1 | 2 ; data?: DataItem | UnMatchedData | (DataItem | UnMatchedData)[] | null ; }) => void)",
        "required": false,
        "description": "onChange 额外参数 (current 为点击的节点的数据， data 为当前选中的数据， checked 为多选状态下是选中还是取消)"
      },
      {
        "name": "compressed",
        "type": "boolean | \"no-repeat\" | \"hide-popover\"",
        "required": false,
        "defaultValue": "false",
        "description": "将选中值合并，只在多选模式下有效；为 \\\"no-repeat\\\" 时弹出框中不重复展示值"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "控制浮层显隐"
      },
      {
        "name": "line",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否显示连接线"
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "输入框宽度"
      },
      {
        "name": "underline",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否只展示下边框"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否展示边框"
      },
      {
        "name": "showArrow",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示箭头"
      },
      {
        "name": "focusSelected",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "onFilter 在多选情况下点击选项后是否选中过滤文本"
      },
      {
        "name": "resultClassName",
        "type": "string | ((value: DataItem) => string)",
        "required": false,
        "description": "选中结果内容容器的className"
      },
      {
        "name": "loader",
        "type": "((key: string | number, data: DataItem) => void)",
        "required": false,
        "description": "设置 loader 属性后，未定义 children 的节点视为动态加载节点，点击展开触发 loader事件，children 为 null 或者长度为 0 视为叶子节点"
      },
      {
        "name": "parentClickExpand",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "点击父节点展开"
      },
      {
        "name": "trim",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "trim 为 true 时，失去焦点时会自动删除空白字符"
      },
      {
        "name": "renderItem",
        "type": "ObjectKey<DataItem> | ((data: DataItem, expanded: boolean, active: boolean, id: string | number) => ReactNode)",
        "required": true,
        "defaultValue": "index",
        "description": "为 string 时，返回 d[string]。 为 function 时，返回函数结果"
      },
      {
        "name": "onAdvancedFilter",
        "type": "((text: string) => (data: DataItem) => boolean)",
        "required": false,
        "description": "高级筛选模式，可针对当前层级在筛选结果和原始数据间切换"
      },
      {
        "name": "adjust",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否开启自动调整面板位置功能。当面板被窗口遮挡时，自动调整位置"
      },
      {
        "name": "filterDelay",
        "type": "number",
        "required": false,
        "defaultValue": "400",
        "description": "毫秒。用户输入触发 fitler 事件的延时"
      },
      {
        "name": "reFocus",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "存在 onFilter 和 onCreate，选中 Option，自动 focus Input"
      },
      {
        "name": "contentClass",
        "type": "string | ((data: DataItem) => string)",
        "required": false,
        "description": "内容样式"
      },
      {
        "name": "renderCompressed",
        "type": "((options: { data: DataItem[], onRemove: (item: DataItem) => void }) => ReactNode)",
        "required": false,
        "description": "自定义渲染折叠内容，其中 data 为选中的数据，onRemove 为删除事件",
        "version": "3.7.0"
      },
      {
        "name": "highlight",
        "type": "boolean",
        "required": false,
        "description": "开启搜索关键字高亮功能",
        "version": "3.7.0"
      },
      {
        "name": "popover",
        "type": "PopoverProps[\"position\"]",
        "required": false,
        "description": "校验信息弹出位置"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "校验或者tip弹框接受的属性"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "01-base",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基础的 TreeSelect 用法\n *    -- 默认`childrenKey`属性值为 'children'\n *    -- 单选模式下 TreeSelect 遵循`mode`属性规则，详见mode属性说明\n * en - Basic\n *    -- Basic usage of TreeSelect\n *    -- The default value of the `childrenKey` property is 'children'\n *    -- In single selection `mode`, TreeSelect follows the mode attribute rules, see the mode attribute description for details\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string[]>;\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>([]);\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        width={300}\n        value={value}\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "02-multiple",
        "title": "cn - 多选",
        "code": "/**\n * cn - 多选\n *    -- 开启`multiple`属性后，可以选择多个节点\n *    -- 注意，开启多选模式后，最终数据结果遵循`mode`属性规则，详见mode属性说明\n * en - Multiple\n *    -- Set `multiple` to true, you can select multiple nodes\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string[]>;\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>([]);\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        multiple\n        width={300}\n        value={value}\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-01-01-compressed",
        "title": "cn - 合并选项",
        "code": "/**\n * cn - 合并选项\n *    -- 使用`compressed`属性可以合并选中结果\n * en - Compressed\n *    -- Set `compressed` to true, you can merge the selected results\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string[]>;\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>([\"1-1-1\",\"1-1-2\",\"1-1\",\"1-2\",\"1\",\"2-1\",\"2-2\",\"2\",\"3-1\",\"3\"]);\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        multiple\n        width={300}\n        value={value}\n        compressed\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-01-02-compressed",
        "title": "cn - 合并选项去重",
        "code": "/**\n * cn - 合并选项去重\n *    -- 当`compressed`属性值为 \"no-repeat\" 时，合并的选项中不会出现结果框中的重复内容\n * en - Compressed no-repeat\n *    -- When the value of the `compressed` property is 'no-repeat', the repeated content in the merged options will not appear in the result box\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\n\ninterface DataItem {\n  id: string;\n  title: string;\n  children?: DataItem[];\n}\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string[]>;\n\nconst data: DataItem[] = [\n  {\n    id: '1',\n    title: '1',\n    children: [\n      {\n        id: '1-1',\n        title: '1-1',\n        children: [\n          { id: '1-1-1', title: '1-1-1' },\n          { id: '1-1-2', title: '1-1-2' },\n        ],\n      },\n      { id: '1-2', title: '1-2' },\n    ],\n  },\n  {\n    id: '2',\n    title: '2',\n    children: [\n      { id: '2-1', title: '2-1' },\n      { id: '2-2', title: '2-2' },\n    ],\n  },\n  { id: '3', title: '3', children: [{ id: '3-1', title: '3-1' }] },\n];\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>([\n    '1-1-1',\n    '1-1-2',\n    '1-1',\n    '1-2',\n    '1',\n    '2-1',\n    '2-2',\n    '2',\n    '3-1',\n    '3',\n  ]);\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        multiple\n        width={300}\n        value={value}\n        compressed='no-repeat'\n        onChange={handleChange}\n        clearable\n        keygen='id'\n        renderItem={(node) => `node ${node.title}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n",
        "language": "tsx"
      },
      {
        "name": "03-02-compressed",
        "title": "cn - 隐藏合并选项",
        "code": "/**\n * cn - 隐藏合并选项\n *    -- 使用 `compressed` 属性并设置值为 \"hide-popover\" 可以合并选中结果，仅展示合并后的选项数量，不再弹出层中展示合并的选项\n *    -- 建议数据量较大的情况下开启该功能，配合固定数值的 `compressedBound` 属性可降额外的低性能开销\n * en - Only merge options\n *    -- Set the `compressed` property to `hide-popover` to merge the selected results, only display the number of merged options, and no longer display the merged options in the pop-up layer\n *    -- It is recommended to enable this function when the data volume is large\n */\nimport React, { useState } from 'react';\nimport { TreeSelect, TYPE } from 'shineout';\nimport { createNestedArray } from '../../tree/__example__/utils';\n\ninterface DataItem {\n  id: string;\n  children?: DataItem[];\n}\n\ntype TreeSelectProps = TYPE.TreeSelect.Props<DataItem, string[]>;\n\nconst data: DataItem[] = createNestedArray([10, 10, 10]);\n\nexport default () => {\n  const [value, setValue] = useState<TreeSelectProps['value']>([\n    '0-0-0',\n    '0-0-1',\n    '0-0-2',\n    '0-0-3',\n    '0-0-4',\n    '0-0-5',\n    '0-0-6',\n    '0-0-7',\n    '0-0-8',\n    '0-0-9',\n    '0-0',\n    '0',\n    '2-0-0',\n    '2-0-1',\n    '2-0-2',\n    '2-0-3',\n    '2-0-4',\n    '2-0-5',\n    '2-0-6',\n    '2-0-7',\n    '2-0-8',\n    '2-0-9',\n    '2-0',\n    '2',\n    '4-0-0',\n    '4-0-1',\n    '4-0-2',\n    '4-0-3',\n    '4-0-4',\n    '4-0-5',\n    '4-0-6',\n    '4-0-7',\n    '4-0-8',\n    '4-0-9',\n    '4-0',\n    '4-1-0',\n    '4-1-1',\n    '4-1-2',\n    '4-1-3',\n    '4-1-4',\n    '4-1-5',\n    '4-1-6',\n    '4-1-7',\n    '4-1-8',\n    '4-1-9',\n    '4-1',\n    '4-3-0',\n    '4-3-1',\n    '4-3-2',\n    '4-3-3',\n    '4-3-4',\n    '4-3-5',\n    '4-3-6',\n    '4-3-7',\n    '4-3-8',\n    '4-3-9',\n    '4-3',\n    '4-5-0',\n    '4-5-1',\n    '4-5-2',\n    '4-5-3',\n    '4-5-4',\n    '4-5-5',\n    '4-5-6',\n    '4-5-7',\n    '4-5-8',\n    '4-5-9',\n    '4-5',\n    '4',\n  ]);\n\n  const handleChange: TreeSelectProps['onChange'] = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <div>\n      <TreeSelect\n        multiple\n        clearable\n        width={300}\n        value={value}\n        compressed='hide-popover'\n        compressedBound={2}\n        onChange={handleChange}\n        keygen='id'\n        renderItem={(node) => `node ${node.id}`}\n        data={data}\n        placeholder='Please select content'\n      ></TreeSelect>\n    </div>\n  );\n};\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 72,
      "requiredProps": 2,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  },
  "Upload": {
    "name": "Upload",
    "description": "用户可传输文件或提交相应的内容 (本页中的示例服务端限制为 10 KB，大于此限制的文件会上传失败)",
    "category": "other",
    "importPath": "import { Upload } from 'shineout'",
    "props": [
      {
        "name": "onChange",
        "type": "((value: T[]) => void)",
        "required": false,
        "description": "值改变回调(上传成功，删除)。values: 数组, 其每个值是 onSuccess 的返回值"
      },
      {
        "name": "value",
        "type": "any[]",
        "required": false,
        "description": "defaultValue 和 value 可以同时设置，defaultValue 会被value覆盖 在 Form 中，value会被表单接管，value 无效"
      },
      {
        "name": "accept",
        "type": "string",
        "required": false,
        "description": "上传文件类型, 和标准一致, 详见[accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)"
      },
      {
        "name": "action",
        "type": "string | ((file: File) => string)",
        "required": false,
        "description": "上传地址"
      },
      {
        "name": "beforeUpload",
        "type": "((file: File) => Promise<any>)",
        "required": false,
        "description": "上传前的回调"
      },
      {
        "name": "validatorHandle",
        "type": "boolean | ((error: any, file: File) => boolean)",
        "required": false,
        "defaultValue": "true",
        "description": "是否处理校验失败的情况, 如果提供一个函数, 则以函数的返回值判断是否处理此 error"
      },
      {
        "name": "headers",
        "type": "object",
        "required": false,
        "description": "请求头部信息"
      },
      {
        "name": "htmlName",
        "type": "string",
        "required": false,
        "description": "服务端接收的 filename，不填使用 name"
      },
      {
        "name": "limit",
        "type": "number",
        "required": false,
        "defaultValue": "100",
        "description": "最大上传文件数"
      },
      {
        "name": "responseType",
        "type": "XMLHttpRequestResponseType",
        "required": false,
        "description": "设置 xhr.responseType"
      },
      {
        "name": "request",
        "type": "(options: UploadOptions) => Xhr | void",
        "required": false,
        "description": "自定义上传方法。 options: 上传的配置"
      },
      {
        "name": "params",
        "type": "object",
        "required": false,
        "description": "上传参数"
      },
      {
        "name": "withCredentials",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否携带 cookie"
      },
      {
        "name": "onStart",
        "type": "((file: File) => void)",
        "required": false,
        "description": "开始上传的回调函数"
      },
      {
        "name": "onProgress",
        "type": "false | ((fileInfo: FileRecord) => any)",
        "required": false,
        "description": "上传中进度"
      },
      {
        "name": "onSuccess",
        "type": "((res: any, file: File, data?: any, xhr?: XhrResult ) => ValueItem | Error)",
        "required": false,
        "description": "上传成功事件\\nres: 上传接口返回结果\\nfile: 选择的文件\\ndata: 请求的数据\\nxhr: 返回的 response"
      },
      {
        "name": "onHttpError",
        "type": "((xhr: XhrResult, file: File) => string )",
        "required": false,
        "description": "上传出错事件(props 中为 onHttpError)"
      },
      {
        "name": "filesFilter",
        "type": "((fileList: File[]) => File[])",
        "required": false,
        "description": "文件选中后的筛选，用户可自定义最终需要上传的文件列表。需返回一个新的文件列表"
      },
      {
        "name": "validator",
        "type": "Validator",
        "required": false,
        "description": "上传前文件校验，详见下方 Validator"
      },
      {
        "name": "forceAccept",
        "type": "string",
        "required": false,
        "description": "在使用时关闭了 accept 提供的文件类型过滤后，强制对文件类型进行校验（值同accept)"
      },
      {
        "name": "onErrorRemove",
        "type": "((xhr: XhrResult, file: File, fileInfo?: any) => void)",
        "required": false,
        "description": "上传失败图片删除之后的回调"
      },
      {
        "name": "beforeCancel",
        "type": "((file: FileRecord) => void)",
        "required": false,
        "description": "取消文件上传前的回调"
      },
      {
        "name": "recoverAble",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否可以恢复已删除的value"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否禁用"
      },
      {
        "name": "beforeRemove",
        "type": "((value: ValueItem) => Promise<any>)",
        "required": false,
        "description": "删除前的确认，返回一个Promise用于最终确定是否删除"
      },
      {
        "name": "ignorePreview",
        "type": "boolean",
        "required": false,
        "description": "是否忽略上传图片预览"
      },
      {
        "name": "functionalOnChange",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "设置为true后，组件的onChange参数会返回函数，即回调函数方式的setState",
        "version": "3.6.5"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "自定义类名"
      },
      {
        "name": "style",
        "type": "CSSProperties",
        "required": false,
        "description": "自定义样式"
      },
      {
        "name": "showUploadList",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "是否展示上传列表"
      },
      {
        "name": "drop",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否开启拖拽上传文件"
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "文件多选"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "上传占位内容"
      },
      {
        "name": "webkitdirectory",
        "type": "string | boolean",
        "required": false,
        "description": "同原生 input 标签的 webkitdirectory 属性"
      },
      {
        "name": "defaultValue",
        "type": "T[]",
        "required": false,
        "description": "默认值"
      },
      {
        "name": "renderResult",
        "type": "((data: any) => ReactNode)",
        "required": false,
        "defaultValue": "a => a",
        "description": "结果展示"
      },
      {
        "name": "canDelete",
        "type": "boolean | ((item: T, index: number) => boolean)",
        "required": false,
        "defaultValue": "true",
        "description": "文件是否可以删除"
      },
      {
        "name": "customResult",
        "type": "((options: { value: any; files: any; onValueRemove: (index: number) => void; onFileRemove: (id: string) => void; filesInstances: ReactNode; valueInstances: ReactNode; recoverValue: any; onValueRecover: (index: number) => void; handler: ReactNode; }) => ReactNode)",
        "required": false,
        "description": "自定义Result 组件"
      },
      {
        "name": "forceAcceptErrorMsg",
        "type": "string",
        "required": false,
        "description": "forceAccept 类型校验失败后自定义错误提示"
      },
      {
        "name": "removeConfirm",
        "type": "string | PopoverConfirmProps",
        "required": false,
        "description": "是否在删除文件和图片前弹出确认"
      },
      {
        "name": "listType",
        "type": "\"text\" | \"image\"",
        "required": false,
        "defaultValue": "\\\"text\\\"",
        "description": "展示类型"
      },
      {
        "name": "hideHandler",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "是否隐藏图片上传触发器。注意，开启该属性后不会影响 customResult 中的 handler 返回，只会隐藏默认的触发器",
        "version": "3.6.0"
      },
      {
        "name": "beforeDrop",
        "type": "((e: DragEvent<Element>) => Promise<FileList>)",
        "required": false,
        "description": "拖拽释放前的回调。允许用户自行处理拖拽事件以及读取文件列表，要求返回值必须为 Promise<FileList> 类型",
        "version": "3.7.0"
      },
      {
        "name": "leftHandler",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "添加图片视图是否在左侧展示"
      },
      {
        "name": "imageStyle",
        "type": "CSSProperties",
        "required": false,
        "defaultValue": "{width: 80, height: 80}",
        "description": "图片选择框的样式"
      },
      {
        "name": "renderContent",
        "type": "((res: any, item: T, index: number, values: T[]) => ReactNode)",
        "required": false,
        "description": "自定义渲染上传的图片"
      },
      {
        "name": "onPreview",
        "type": "((url: string, value: T, index: number, values: T[], fun: { preview: () => void; }) => void)",
        "required": false,
        "description": "自定义预览图片操作，默认为画廊展示"
      },
      {
        "name": "name",
        "type": "Name",
        "required": false,
        "description": "Form 内存取数据的 key"
      },
      {
        "name": "beforeChange",
        "type": "((value: T) => void | T )",
        "required": false,
        "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
      },
      {
        "name": "reserveAble",
        "type": "boolean",
        "required": false,
        "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
      },
      {
        "name": "rules",
        "type": "RuleItem[]",
        "required": false,
        "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
      },
      {
        "name": "onError",
        "type": "((error?: Error ) => void)",
        "required": false,
        "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
      },
      {
        "name": "bind",
        "type": "string[]",
        "required": false,
        "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
      }
    ],
    "examples": [
      {
        "name": "01-base-0",
        "title": "cn - 基本用法",
        "code": "/**\n * cn - 基本用法\n *    -- 基础的文件上传, onSuccess 的返回值会作为 value 传给 onChange\n * en - Base\n *    -- Basic usage for uploading file, the onSuccess's returns will be the onChange params\n\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\n\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<string[]>([]);\n\n  return (\n    <Upload\n      action='//jsonplaceholder.typicode.com/posts'\n      accept='image/*'\n      value={value}\n      htmlName='file'\n      onSuccess={(_res, file) => file.name}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  );\n};\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "01-base-1-image",
        "title": "cn - 上传图片",
        "code": "/**\n * cn - 上传图片\n *    -- 使用 Upload.Image 处理带预览的图片上\n * en - Upload Image\n *    -- Basic usage for uploading file, the onSuccess's returns will be the onChange params\n\n */\nimport React from 'react';\nimport { Upload } from 'shineout';\nimport { mockRquest } from './request';\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<string[]>([]);\n\n  return (\n    <Upload.Image\n      request={mockRquest({\n        uploadTime: 5000,\n        success: true,\n      })}\n      accept='image/*'\n      value={value}\n      htmlName='file'\n      recoverAble\n      leftHandler\n      removeConfirm='Are you sure to delete it ?'\n      limit={3}\n      onSuccess={(_res, filem, data) => {\n        return data;\n      }}\n      onChange={(v) => {\n        setValue(v);\n      }}\n    />\n  );\n};\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "01-base-2-button",
        "title": "cn - 按钮上传",
        "code": "/**\n * cn - 按钮上传\n *    -- 使用 Upload.Button 展示单个文件的上传进度\n * en - Button\n *    -- Use Upload.Button to show the upload progress of individual files\n */\nimport React from 'react';\nimport { Upload } from 'shineout';\nimport { mockRquest } from './request';\n\nconst App: React.FC = () => {\n\n  return (\n  <Upload.Button\n    type={'primary'}\n    request={mockRquest({\n      uploadTime: 5000,\n      success: true\n    })}\n    name='file'\n    onSuccess={(_res, file) => file.name}\n    loading='Uploading...'\n    placeholder='Click to upload'\n  />\n)\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-result-a",
        "title": "cn - 自定义结果",
        "code": "/**\n * cn - 自定义结果\n *    -- 默认展示的结果和 value 里面所存储的值是一样的, 如果有需求需要, 可以用 renderResult 自行处理\n * en - Custom result\n *    -- The result of the default display is the same as the value stored in the value. If there is a need, you can use the renderResult to handle it yourself\n\n */\nimport React from 'react';\nimport { Button, Upload } from 'shineout';\nimport { UploadIcon } from './static/icon';\nimport { mockRquest } from './request';\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<{ name: string }[]>([]);\n\n  return (\n    <Upload\n      request={mockRquest({\n        uploadTime: 5000,\n        // 随机成功或失败\n        success: Math.random() > 0.5,\n      })}\n      accept='image/*'\n      value={value}\n      htmlName='file'\n      renderResult={(f) => f.name}\n      onSuccess={(_res, file) => ({\n        name: file.name,\n      })}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      limit={3}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      },
      {
        "name": "02-result-b",
        "title": "cn -",
        "code": "/**\n * cn -\n *    -- 设置 `customResult` 属性可以自定义上传结果展示\n * en -\n *    -- Set the `customResult` property to customize the upload result display\n\n */\nimport React from 'react';\nimport { Button, Upload, Link, icons } from 'shineout';\nimport { UploadIcon, FilePdfIcon, FielWordIcon, FileIcon, ImageIcon } from './static/icon';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles(\n  {\n    item: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: '4px 8px',\n      gap: 4,\n      marginTop: 2,\n      '&:hover': {\n        borderRadius: 2,\n        backgroundColor: 'var(---Neutral-fill-2-, #F4F5F8)',\n      },\n    },\n    btn: {\n      marginLeft: 'auto',\n    }\n  },\n  { name: 'upload-custom' },\n);\n\n\ninterface FileItem {\n  name: string;\n}\nconst df = [\n  {\n    name: '文件名称.doc',\n  },\n  {\n    name: '文件名称.pdf',\n  },\n  {\n    name: '文件名称.txt',\n  },\n  {\n    name: '文件名称.png',\n  },\n  {\n    name: '文件名称.gif',\n  },\n];\n\n// 根据文件名获取文件图标\nconst renderFileIcon = (name: string) => {\n  const ext = name.split('.').pop();\n  if (ext === 'pdf') {\n    return <FilePdfIcon fontSize={14} />;\n  }\n  if (ext === 'doc') {\n    return <FielWordIcon fontSize={14} />;\n  }\n  if(ext === 'png' || ext === 'gif') {\n    return <ImageIcon fontSize={14} />\n  }\n  return <FileIcon fontSize={14} />;\n}\n\ninterface CustomResultProps {\n  value: FileItem[];\n  files: any;\n  onValueRemove: (index: number) => void;\n  onFileRemove: (id: string) => void;\n  recoverValue: any;\n  onValueRecover: (index: number) => void;\n}\n\nconst App: React.FC = () => {\n  const [value, setValue] = React.useState<FileItem[]>(df);\n\n  const classnames = useStyles();\n\n  const customResult = (options: CustomResultProps) => {\n    const { value, onValueRemove } = options;\n    return value.map((item, index) => {\n\n      return <div key={item.name} className={classnames.item} style={index === 0 ? { marginTop: 12 } : {}}>\n        {renderFileIcon(item.name)}\n        {item.name}\n        <Link type=\"secondary\" onClick={() => onValueRemove(index)} style={{width: 14, height: 14}} className={classnames.btn}>\n          {icons.Delete}\n        </Link>\n      </div>\n    }) as any;\n  }\n  return (\n    <Upload\n      accept='*'\n      value={value}\n      htmlName='file'\n      customResult={customResult}\n      onSuccess={(_res, file) => ({\n        name: file.name,\n      })}\n      onChange={(v) => {\n        setValue(v);\n      }}\n      style={{ width: 400 }}\n    >\n      <Button mode={'outline'}>\n        <UploadIcon style={{ marginInlineEnd: 4 }} />\n        Upload file\n      </Button>\n    </Upload>\n  );\n};\n\nexport default App;\n",
        "language": "tsx"
      }
    ],
    "subComponents": [],
    "version": "3.7.7",
    "apiSummary": {
      "totalProps": 53,
      "requiredProps": 0,
      "propsWithWhen": 0
    },
    "subComponentApis": {}
  }
}