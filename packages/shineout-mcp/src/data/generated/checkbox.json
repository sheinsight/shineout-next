{
  "name": "Checkbox",
  "description": "在一组数据中，用户可通过复选框选择一个或多个数据",
  "category": "other",
  "importPath": "import { Checkbox } from 'shineout'",
  "props": [
    {
      "name": "onChange",
      "type": "((value: T , checked: boolean, raw: T) => void)",
      "required": false,
      "description": "值改变回调函数"
    },
    {
      "name": "checked",
      "type": "boolean | \"indeterminate\" | ((d: T) => boolean | \"indeterminate\")",
      "required": false,
      "description": "checked 传入时为受控组件"
    },
    {
      "name": "defaultChecked",
      "type": "boolean | \"indeterminate\"",
      "required": false,
      "description": "默认选中状态"
    },
    {
      "name": "onClick",
      "type": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void)",
      "required": false,
      "description": "勾选框点击回调"
    },
    {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否禁用"
    },
    {
      "name": "inputRef",
      "type": "Ref<HTMLInputElement>",
      "required": false,
      "description": "获取input dom"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\" | \"default\"",
      "required": false,
      "defaultValue": "\\\"default\\\"",
      "description": "不同尺寸"
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "内容"
    },
    {
      "name": "htmlValue",
      "type": "any",
      "required": false,
      "defaultValue": "true",
      "description": "选中后返回的值"
    },
    {
      "name": "onRawChange",
      "type": "((value: T , checked: boolean, raw: T) => void)",
      "required": false,
      "description": "值改变回调函数"
    },
    {
      "name": "value",
      "type": "any",
      "required": false,
      "description": "如果 checked 未设置，checked 状态为 value === htmlValue"
    },
    {
      "name": "defaultValue",
      "type": "Value",
      "required": false,
      "description": "默认值和 value 类型相同"
    },
    {
      "name": "name",
      "type": "Name",
      "required": false,
      "description": "Form 内存取数据的 key"
    },
    {
      "name": "beforeChange",
      "type": "((value: T) => void | T )",
      "required": false,
      "description": "值改变前的回调，当返回值不为空时将作为组件的新值"
    },
    {
      "name": "reserveAble",
      "type": "boolean",
      "required": false,
      "description": "控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景"
    },
    {
      "name": "rules",
      "type": "RuleItem[]",
      "required": false,
      "description": "用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)"
    },
    {
      "name": "onError",
      "type": "((error?: Error ) => void)",
      "required": false,
      "description": "校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用"
    },
    {
      "name": "bind",
      "type": "string[]",
      "required": false,
      "description": "当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景"
    }
  ],
  "examples": [
    {
      "name": "001-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- 基本的 Checkbox\n * en - Base\n *    -- Basic Checkbox\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => <Checkbox>Checkbox</Checkbox>;\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "001-size",
      "title": "cn - 尺寸",
      "code": "/**\n * cn - 尺寸\n *    -- 设置 `size` 属性改变组件的尺寸大小, 内置三种尺寸：small、default、large\n * en - Base\n *    -- Set the size property to change the size of the component. There are three built-in sizes: small, default, and large\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <div style={{ display: 'flex', alignItems: 'center' }}>\n    <Checkbox size={'small'}>Checkbox</Checkbox>\n    <Checkbox>Checkbox</Checkbox>\n    <Checkbox size={'large'}>Checkbox</Checkbox>\n  </div>\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "002-checked-1",
      "title": "cn - 状态",
      "code": "/**\n * cn - 状态\n *    -- checked 有三个值，选中(true)、未选中(false)、半选中('indeterminate')，checked 设置时为受控组件（此示例没有处理 onChange 事件）\n * en - Checked\n *    -- The checked has three values: true(checked), false(not checked), 'indeterminate'(half-checked)\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <div>\n    <div style={{ marginBottom: 12, lineHeight: 0 }}>\n      <Checkbox checked={false}>not checked</Checkbox>\n      <Checkbox checked>checked</Checkbox>\n      <Checkbox checked='indeterminate'>indeterminate</Checkbox>\n    </div>\n\n    <div style={{ lineHeight: 0 }}>\n      <Checkbox checked={false} disabled>\n        not checked\n      </Checkbox>\n      <Checkbox checked disabled>\n        checked\n      </Checkbox>\n      <Checkbox checked='indeterminate' disabled>\n        indeterminate\n      </Checkbox>\n    </div>\n  </div>\n);\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "002-checked-2",
      "title": "cn - 全选/半选",
      "code": "/**\n * cn - 全选/半选\n *    -- 通过设置 checked = 'indeterminate' 属性，可以实现半选效果\n * en - Check all\n *    -- Set checked = 'indeterminate' to achieve half-check effect\n */\nimport React, { useState } from 'react';\nimport { Checkbox } from 'shineout';\n\nconst data = ['Option1', 'Option2', 'Option3'];\nconst getChecked = (value: string[], num: number) => {\n  if (value.length === num) return true;\n  if (value.length === 0) return false;\n  return 'indeterminate';\n};\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<string[]>([]);\n  return (\n    <div>\n      <Checkbox\n        checked={getChecked(value, data.length)}\n        onChange={(v) => {\n          if (v) {\n            setValue(data);\n          } else {\n            setValue([]);\n          }\n        }}\n      >\n        {getChecked(value, data.length) === true ? 'UnCheckAll' : 'CheckAll'}\n      </Checkbox>\n      <Checkbox.Group\n        style={{ marginTop: 12 }}\n        data={data}\n        keygen\n        value={value}\n        onChange={setValue}\n      />\n    </div>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "003-value",
      "title": "cn - 选中值",
      "code": "/**\n * cn - 选中值\n *    -- 未设置htmlValue的状态下，checkbox选中时返回true，如果设置 htmlValue，返回 htmlValue。未选中状态都是返回 undefined\n * en - Value\n *    -- When the htmlValue is set, the checkbox return the htmlValue (checked) and undefined (not checked)\n *    -- When the htmlValue is not set, the checkbox selected return true (checked) and undefined (not checked)\n */\nimport React from 'react';\nimport { Checkbox } from 'shineout';\n\nconst App: React.FC = () => (\n  <Checkbox htmlValue='ok' onChange={console.log}>\n    {'value is \"ok\"'}\n  </Checkbox>\n);\n\nexport default App;\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 20,
    "requiredProps": 0,
    "propsWithWhen": 0
  },
  "subComponentApis": {}
}