{
  "name": "Menu",
  "description": "用于承载网站的架构，并提供跳转的菜单列表",
  "category": "navigation",
  "importPath": "import { Menu } from 'shineout'",
  "props": [
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "自定义类名"
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "自定义样式"
    },
    {
      "name": "mode",
      "type": "\"inline\" | \"vertical\" | \"horizontal\" | \"vertical-auto\"",
      "required": false,
      "defaultValue": "\\\"inline\\\"",
      "description": "菜单样式"
    },
    {
      "name": "data",
      "type": "object[]",
      "required": false,
      "defaultValue": "[]",
      "description": "需要渲染成菜单的数据"
    },
    {
      "name": "theme",
      "type": "\"dark\" | \"light\"",
      "required": false,
      "description": "主题"
    },
    {
      "name": "height",
      "type": "string | number",
      "required": false,
      "description": "菜单高度"
    },
    {
      "name": "openKeys",
      "type": "(string | number)[]",
      "required": false,
      "defaultValue": "[]",
      "description": "展开的菜单(受控)"
    },
    {
      "name": "caretColor",
      "type": "string",
      "required": false,
      "description": "三角展开符颜色"
    },
    {
      "name": "frontCaret",
      "type": "boolean",
      "required": false,
      "description": "前置实心三角展开符"
    },
    {
      "name": "inlineIndent",
      "type": "number",
      "required": false,
      "defaultValue": "24",
      "description": "每一层缩进宽度"
    },
    {
      "name": "looseChildren",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "如果 children 有设置则菜单项可展开"
    },
    {
      "name": "keygen",
      "type": "| ObjectKey<DataItem> | ((data: DataItem, index?: number) => string | number) | true",
      "required": true,
      "defaultValue": "true",
      "description": "生成每一项key的辅助方法。为 true 时，以数据项本身作为key，相当于 (d => d)。为函数时，使用此函数返回值。为string时，使用这个string对应的数据值。如 \\\"id\\\"，相当于 (d => d.id)"
    },
    {
      "name": "defaultOpenKeys",
      "type": "(string | number)[]",
      "required": false,
      "defaultValue": "[]",
      "description": "初始展开的菜单;如果需要设置此值,则需要设置keygen,此值为一个包含key的数组"
    },
    {
      "name": "parentSelectable",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "父级菜单是否可选中"
    },
    {
      "name": "onClick",
      "type": "((data: DataItem) => void)",
      "required": false,
      "description": "子菜单点击事件,参数为当条数据"
    },
    {
      "name": "active",
      "type": "((data: DataItem) => boolean)",
      "required": false,
      "description": "验证是否激活,参数为对应的数据对象,返回true则代表该菜单激活"
    },
    {
      "name": "disabled",
      "type": "((data: DataItem) => boolean)",
      "required": false,
      "defaultValue": "d => d.disabled",
      "description": "是否禁用选项"
    },
    {
      "name": "frontCaretType",
      "type": "\"hollow\" | \"solid\"",
      "required": false,
      "defaultValue": "\\\"solid\\\"",
      "description": "前置三角展开符类型"
    },
    {
      "name": "onOpenChange",
      "type": "((keys: Key[]) => void)",
      "required": false,
      "description": "菜单展开/收起回调"
    },
    {
      "name": "linkKey",
      "type": "((d: DataItem) => string) | ObjectKey<DataItem>",
      "required": false,
      "description": "需要注入子菜单的链接键值"
    },
    {
      "name": "renderItem",
      "type": "ObjectKey<DataItem> | ((data: DataItem, index: number) => ReactNode)",
      "required": false,
      "defaultValue": "\\\"title\\\"",
      "description": "元素渲染方式,如果为字符串,则会以对应的值作为显示内容;如果为函数,则以函数返回的结果作为显示内容,函数参数为对应的数据对象"
    },
    {
      "name": "renderIcon",
      "type": "((data: DataItem) => ReactNode)",
      "required": false,
      "description": "渲染Icon"
    },
    {
      "name": "collapse",
      "type": "boolean",
      "required": false,
      "defaultValue": "false",
      "description": "是否折叠"
    },
    {
      "name": "header",
      "type": "ReactNode",
      "required": false,
      "description": "头部内容， 仅在 mode为 \\\"inline\\\" 时生效"
    }
  ],
  "examples": [
    {
      "name": "01-base",
      "title": "cn - 基本用法",
      "code": "/**\n * cn - 基本用法\n *    -- Menu 通过数据来生成菜单项\n * en - Base\n *    -- Menu generates menu items through data\n */\n\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n  {\n    id: '11',\n    title: 'This is a very very very very long menu title',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState('1');\n\n  const handleClick = (d: MenuItem) => setActive(d.id);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkActive: MenuActive = (d: MenuItem) => active === d.id;\n\n  return (\n    <div>\n      <Menu\n        keygen='id'\n        data={data}\n        inlineIndent={14}\n        active={checkActive}\n        onClick={handleClick}\n        style={{ width: 256, border: '1px solid #e8ebf0' }}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "02-01-link",
      "title": "cn - 链接",
      "code": "/**\n * cn - 链接\n *    --  可以通过设置 linkKey 来渲染出对应的链接\n * en - link\n *    -- Can render the corresponding link by setting linkKey\n */\nimport React from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  link: string;\n  title: string;\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Google',\n    link: 'https://www.google.com',\n  },\n  {\n    id: '2',\n    title: 'Strackoverflow',\n    link: 'https://stackoverflow.com/',\n  },\n  {\n    id: '3',\n    title: 'Github',\n    link: 'https://github.com/',\n  },\n];\n\nconst App: React.FC = () => {\n  const renderItem: MenuRenderItem = (d: MenuItem) => <a href={d.link} target=\"_blank\" rel=\"noreferrer\">{d.title}</a>;\n\n  return (\n    <Menu\n      keygen='id'\n      linkKey='link'\n      data={data}\n      renderItem={renderItem}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      inlineIndent={14}\n    />\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "03-click",
      "title": "cn - 父菜单可选中",
      "code": "/**\n * cn - 父菜单可选中\n *    -- 设置 parentSelectable 使父级菜单支持单独选中 <br /> 此时父级菜单左侧区域用于选中，偏右侧区域用于展开和收起子菜单\n * en - Parent Selectable\n *    -- Setting the parentSelectable property can make the parent menu trigger the onClick of the Menu after clicking\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Parent 1',\n    children: [\n      {\n        id: '2',\n        title: 'Option 2',\n      },\n      {\n        id: '3',\n        title: 'Option 3',\n      },\n    ],\n  },\n  {\n    id: '4',\n    title: 'Parent 4',\n    children: [\n      {\n        id: '5',\n        title: 'Option 5',\n      },\n      {\n        id: '6',\n        title: 'Option 6',\n      },\n    ],\n  },\n  {\n    id: '7',\n    title: 'Option 7',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState('1');\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkActive: MenuActive = (d: MenuItem) => active === d.id;\n\n  const handleClick = (d: MenuItem) => {\n    setActive(d.id);\n  };\n\n  return (\n    <Menu\n      keygen='id'\n      inlineIndent={14}\n      data={data}\n      parentSelectable\n      active={checkActive}\n      onClick={handleClick}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      renderItem={renderItem}\n    />\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "04-front",
      "title": "cn - 前置展开符",
      "code": "/**\n * cn - 前置展开符\n *    -- 使用 frontCaret 来前置展开符\n *    -- 使用 frontCaretType 来设置展开图标类型\n * en - put the expander in front\n *    -- use frontCaret to put the expander in front\n *    -- Use frontCaretType to set the Icon type\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState('1');\n\n  const handleClick = (d: MenuItem) => setActive(d.id);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkActive: MenuActive = (d: MenuItem) => active === d.id;\n\n  return (\n    <div style={{ display: 'flex', gap: 24 }}>\n      <Menu\n        keygen='id'\n        frontCaret\n        frontCaretType='solid'\n        data={data}\n        inlineIndent={14}\n        active={checkActive}\n        onClick={handleClick}\n        style={{ width: 256, border: '1px solid #e8ebf0' }}\n        renderItem={renderItem}\n      />\n      <Menu\n        keygen='id'\n        frontCaret\n        frontCaretType='hollow'\n        data={data}\n        inlineIndent={14}\n        active={checkActive}\n        onClick={handleClick}\n        style={{ width: 256, border: '1px solid #e8ebf0' }}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    },
    {
      "name": "05-disabled",
      "title": "cn - 禁用菜单",
      "code": "/**\n * cn - 禁用菜单\n *    -- 通过 disabled 属性可以禁用选项\n * en - Disabled\n *    --Disable the option by the disabled property\n */\nimport React, { useState } from 'react';\nimport { Menu, TYPE } from 'shineout';\n\ninterface MenuItem {\n  id: string;\n  title: string;\n  disabled?: boolean;\n  children?: MenuItem[];\n}\ntype MenuProps = TYPE.Menu.Props<MenuItem, string>;\ntype MenuActive = MenuProps['active'];\ntype MenuOnClick = MenuProps['onClick'];\ntype MenuDisabled = MenuProps['disabled'];\ntype MenuRenderItem = MenuProps['renderItem'];\n\nconst data: MenuItem[] = [\n  {\n    id: '1',\n    title: 'Navigation One',\n  },\n  {\n    id: '3',\n    title: 'Navigation Two',\n    children: [\n      {\n        id: '4',\n        title: 'Option 1',\n        disabled: true,\n      },\n      {\n        id: '5',\n        title: 'Option 2',\n      },\n    ],\n  },\n  {\n    id: '6',\n    title: 'Navigation Three',\n    children: [\n      {\n        id: '7',\n        title: 'Option 3',\n      },\n      {\n        id: '8',\n        title: 'Option 4',\n        children: [\n          {\n            id: '9',\n            title: 'Option 1',\n          },\n          {\n            id: '10',\n            title: 'Option 2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Navigation Four',\n    disabled: true,\n  },\n];\n\nconst App: React.FC = () => {\n  const [active, setActive] = useState(['1']);\n\n  const renderItem: MenuRenderItem = (d: MenuItem) => d.title;\n\n  const checkDisabled: MenuDisabled = (d: MenuItem) => !!d.disabled;\n\n  const handleClick: MenuOnClick = (d: MenuItem) => setActive([d.id]);\n\n  const checkActive: MenuActive = (d: MenuItem) => active.includes(d.id);\n\n  return (\n    <Menu\n      data={data}\n      keygen='id'\n      mode='inline'\n      inlineIndent={14}\n      active={checkActive}\n      onClick={handleClick}\n      style={{ width: 256, border: '1px solid #e8ebf0' }}\n      renderItem={renderItem}\n      disabled={checkDisabled}\n    />\n  );\n};\n\nexport default App;\n",
      "language": "tsx"
    }
  ],
  "subComponents": [],
  "version": "3.7.7",
  "apiSummary": {
    "totalProps": 24,
    "requiredProps": 1,
    "propsWithWhen": 0
  }
}