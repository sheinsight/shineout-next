{
  "componentName": "Form",
  "version": "1.0.0",
  "lastUpdated": "2025-01-21",
  "bestPractices": {
    "recommended": [
      {
        "title": "使用 formRef 操作表单",
        "description": "通过 formRef 获取表单实例，使用其提供的方法来操作表单数据和状态",
        "code": "const formRef = useRef<TYPE.Form.Ref<FormData>>();\n\n<Form formRef={formRef}>\n  <Form.Item label=\"Name\">\n    <Input name=\"name\" />\n  </Form.Item>\n</Form>\n\n// 获取表单值\nconst values = formRef.current?.getValue();\n\n// 设置表单值\nformRef.current?.set({ name: 'John' });\n\n// 校验表单\nformRef.current?.validate()\n  .then(values => console.log('Valid:', values))\n  .catch(errors => console.log('Invalid:', errors));\n\n// 提交表单\nformRef.current?.submit();\n\n// 重置表单\nformRef.current?.reset();"
      },
      {
        "title": "使用 name 属性自动收集数据",
        "description": "Form.Item 内的表单控件通过 name 属性自动双向绑定，无需手动管理状态",
        "code": "<Form onSubmit={(data) => console.log(data)}>\n  <Form.Item label=\"Email\">\n    <Input name=\"email\" />\n  </Form.Item>\n  <Form.Item label=\"Password\">\n    <Input.Password name=\"password\" />\n  </Form.Item>\n  <Form.Submit>提交</Form.Submit>\n</Form>"
      },
      {
        "title": "使用 rules 进行表单验证",
        "description": "在表单控件上使用 rules 属性进行字段级验证",
        "code": "import { Rule } from 'shineout';\n\nconst rules = Rule();\n\n<Form.Item label=\"Email\" required>\n  <Input \n    name=\"email\" \n    rules={[\n      rules.required('邮箱不能为空'),\n      rules.email('邮箱格式不正确')\n    ]} \n  />\n</Form.Item>"
      },
      {
        "title": "使用 Form.FieldSet 处理嵌套数据",
        "description": "使用 FieldSet 组件处理对象或数组类型的嵌套数据结构",
        "code": "<Form.FieldSet name=\"account\">\n  <Form.Item label=\"Name\">\n    <Form.FieldSet name=\"name\">\n      <Input.Group>\n        <Input name=\"firstName\" placeholder=\"First Name\" />\n        <Input name=\"lastName\" placeholder=\"Last Name\" />\n      </Input.Group>\n    </Form.FieldSet>\n  </Form.Item>\n  <Form.Item label=\"Age\">\n    <Input name=\"age\" type=\"number\" />\n  </Form.Item>\n</Form.FieldSet>\n\n// 生成的数据结构：\n// { account: { name: { firstName: '...', lastName: '...' }, age: ... } }"
      },
      {
        "title": "使用 Form.Flow 实现表单联动",
        "description": "使用 Flow 组件监听字段变化并执行副作用，实现表单联动",
        "code": "<Form>\n  <Form.Item label=\"Show Age\">\n    <Checkbox name=\"showAge\">显示年龄字段</Checkbox>\n  </Form.Item>\n  \n  <Form.Flow names={['showAge']}>\n    {(datum) =>\n      datum?.get('showAge') && (\n        <Form.Item label=\"Age\" required>\n          <Input name=\"age\" type=\"number\" />\n        </Form.Item>\n      )\n    }\n  </Form.Flow>\n</Form>"
      },
      {
        "title": "使用 Form.Submit 和 Form.Reset",
        "description": "使用内置的提交和重置按钮组件，支持回车键提交",
        "code": "<Form onSubmit={(data) => console.log(data)}>\n  {/* 表单字段 */}\n  <Form.Item label=\"\">\n    <Form.Submit>提交</Form.Submit>\n    <Form.Reset>重置</Form.Reset>\n  </Form.Item>\n</Form>\n\n// Form.Submit: htmlType='submit'，支持回车键提交\n// Form.Button: htmlType='button'，需要点击才能提交"
      },
      {
        "title": "处理数组字段",
        "description": "使用 FieldSet 和数组索引处理动态表单列表",
        "code": "const [items, setItems] = useState([{ id: 1 }, { id: 2 }]);\n\n<Form>\n  <Form.FieldSet name=\"items\">\n    {items.map((item, index) => (\n      <Form.Item key={item.id} label={`Item ${index + 1}`}>\n        <Input name={`[${index}].value`} />\n      </Form.Item>\n    ))}\n  </Form.FieldSet>\n</Form>"
      }
    ],
    "notRecommended": [
      {
        "title": "避免为每个字段创建 state",
        "description": "不要为每个表单字段创建单独的 state，使用 Form 的内置数据管理",
        "code": "// ❌ 不推荐\nconst [name, setName] = useState('');\nconst [email, setEmail] = useState('');\n\n<Input value={name} onChange={e => setName(e.target.value)} />\n<Input value={email} onChange={e => setEmail(e.target.value)} />\n\n// ✅ 推荐\n<Form>\n  <Input name=\"name\" />\n  <Input name=\"email\" />\n</Form>"
      },
      {
        "title": "避免使用其他组件库的 API 模式",
        "description": "不要使用类似 Ant Design 的 form.setFieldsValue 等方法",
        "code": "// ❌ 不推荐（Ant Design 模式）\nform.setFieldsValue({ name: 'John' });\nform.getFieldValue('name');\nform.resetFields();\n\n// ✅ 推荐（Shineout 模式）\nformRef.current?.set({ name: 'John' });\nformRef.current?.getValue('name');\nformRef.current?.reset();"
      },
      {
        "title": "避免直接操作 DOM",
        "description": "不要通过 DOM API 获取或设置表单值",
        "code": "// ❌ 不推荐\ndocument.getElementById('name').value = 'John';\nconst value = document.querySelector('input[name=email]').value;\n\n// ✅ 推荐\nformRef.current?.set({ name: 'John' });\nconst value = formRef.current?.getValue('email');"
      },
      {
        "title": "避免在 Form 中同时使用 name 和 value/onChange",
        "description": "在 Form 中使用 name 属性时，不要同时使用 value 和 onChange",
        "code": "// ❌ 不推荐\n<Form>\n  <Input name=\"email\" value={email} onChange={setEmail} />\n</Form>\n\n// ✅ 推荐 - 非受控模式（推荐）\n<Form>\n  <Input name=\"email\" />\n</Form>\n\n// ✅ 推荐 - 受控模式（特殊场景）\n<Form value={formData} onChange={setFormData}>\n  <Input name=\"email\" />\n</Form>"
      }
    ]
  },
  "apiHighlights": {
    "formRefMethods": [
      {
        "name": "getValue",
        "signature": "(name?: string) => any | FormValue",
        "description": "获取表单数据，不传参数返回整个表单数据，传入字段路径返回指定字段值"
      },
      {
        "name": "set",
        "signature": "(value: object, options?: {validate?: boolean, forceUpdate?: boolean}) => void",
        "description": "批量设置表单字段值，支持嵌套对象和数组"
      },
      {
        "name": "validate",
        "signature": "() => Promise<FormValue>",
        "description": "校验整个表单，返回 Promise"
      },
      {
        "name": "validateFields",
        "signature": "(fields: string | string[]) => Promise<any>",
        "description": "校验指定字段"
      },
      {
        "name": "clearValidate",
        "signature": "(names?: string[]) => void",
        "description": "清除指定字段的校验错误"
      },
      {
        "name": "reset",
        "signature": "() => void",
        "description": "重置表单到初始状态"
      },
      {
        "name": "submit",
        "signature": "(withValidate?: boolean) => void",
        "description": "手动触发表单提交"
      },
      {
        "name": "scrollToField",
        "signature": "(name: string, options?: ScrollIntoViewOptions) => void",
        "description": "滚动到指定字段位置"
      }
    ],
    "importantProps": [
      "formRef - 获取表单实例引用",
      "value/onChange - 受控模式",
      "defaultValue - 非受控模式初始值",
      "onSubmit - 表单提交回调",
      "onReset - 表单重置回调",
      "labelWidth - 统一设置标签宽度",
      "labelAlign - 标签对齐方式（left/right/top）",
      "labelVerticalAlign - 标签垂直对齐（top/middle/bottom）",
      "inline - 水平布局",
      "keepErrorHeight - 保持错误提示高度，防止页面抖动",
      "scrollToError - 校验失败时滚动到错误位置",
      "colon - 标签后是否显示冒号"
    ]
  },
  "commonScenarios": [
    {
      "scenario": "表单提交前校验",
      "solution": "使用 formRef.validate() 或 Form.Submit 按钮",
      "code": "// 方法一：使用 formRef\nconst handleSubmit = async () => {\n  try {\n    const values = await formRef.current?.validate();\n    await api.submit(values);\n    Message.success('提交成功');\n  } catch (errors) {\n    console.log('校验失败', errors);\n  }\n};\n\n// 方法二：使用 onSubmit（自动校验）\n<Form onSubmit={async (data) => {\n  await api.submit(data);\n  Message.success('提交成功');\n}}>\n  <Form.Submit>提交</Form.Submit>\n</Form>"
    },
    {
      "scenario": "动态表单项",
      "solution": "使用数组和 FieldSet 管理动态列表",
      "code": "const [users, setUsers] = useState([{ id: 1 }]);\n\nconst addUser = () => {\n  setUsers([...users, { id: Date.now() }]);\n};\n\n<Form>\n  <Form.FieldSet name=\"users\">\n    {users.map((user, index) => (\n      <Form.Item key={user.id} label={`User ${index + 1}`}>\n        <Input.Group>\n          <Input name={`[${index}].name`} placeholder=\"Name\" />\n          <Input name={`[${index}].email`} placeholder=\"Email\" />\n          <Button onClick={() => removeUser(index)}>删除</Button>\n        </Input.Group>\n      </Form.Item>\n    ))}\n  </Form.FieldSet>\n  <Button onClick={addUser}>添加用户</Button>\n</Form>"
    },
    {
      "scenario": "表单联动（城市选择）",
      "solution": "使用 Form.Flow 监听国家变化，动态更新城市列表",
      "code": "const getCities = (country) => {\n  const cityMap = {\n    'China': ['Beijing', 'Shanghai', 'Shenzhen'],\n    'USA': ['New York', 'Los Angeles', 'Chicago']\n  };\n  return cityMap[country] || [];\n};\n\n<Form>\n  <Form.Item label=\"Country\">\n    <Select name=\"country\" data={['China', 'USA']} keygen />\n  </Form.Item>\n  \n  <Form.Flow names={['country']}>\n    {(datum) => {\n      const country = datum?.get('country');\n      return country ? (\n        <Form.Item label=\"City\">\n          <Select \n            name=\"city\" \n            data={getCities(country)} \n            keygen \n          />\n        </Form.Item>\n      ) : null;\n    }}\n  </Form.Flow>\n</Form>"
    },
    {
      "scenario": "分步表单",
      "solution": "使用 validateFields 进行分步校验",
      "code": "const [step, setStep] = useState(1);\n\nconst nextStep = async () => {\n  try {\n    if (step === 1) {\n      await formRef.current?.validateFields(['name', 'email']);\n    } else if (step === 2) {\n      await formRef.current?.validateFields(['address', 'phone']);\n    }\n    setStep(step + 1);\n  } catch (error) {\n    Message.error('请完善当前步骤的信息');\n  }\n};\n\n<Form formRef={formRef}>\n  {step === 1 && (\n    <>\n      <Form.Item label=\"Name\" required>\n        <Input name=\"name\" rules={[rules.required()]} />\n      </Form.Item>\n      <Form.Item label=\"Email\" required>\n        <Input name=\"email\" rules={[rules.email()]} />\n      </Form.Item>\n    </>\n  )}\n  {step === 2 && (\n    <>\n      <Form.Item label=\"Address\" required>\n        <Input name=\"address\" rules={[rules.required()]} />\n      </Form.Item>\n      <Form.Item label=\"Phone\" required>\n        <Input name=\"phone\" rules={[rules.required()]} />\n      </Form.Item>\n    </>\n  )}\n  <Button onClick={nextStep}>下一步</Button>\n</Form>"
    }
  ],
  "tips": [
    "Form 组件内置了完善的数据管理机制，大多数情况下不需要手动管理状态",
    "使用 formRef 可以在任何地方操作表单，包括获取值、设置值、验证等",
    "Form.Item 的 label 支持对象格式：{ content: 'Label', tooltip: 'Help text' }",
    "使用 keepErrorHeight 可以防止错误信息导致的页面抖动",
    "Form 支持嵌套使用，子 Form 可以独立管理自己的数据",
    "Form.Flow 的 names 参数为空数组时，会监听所有字段变化",
    "使用 delay 属性可以延迟 Input 的 onChange 触发，提高性能",
    "Form.Submit 支持回车键提交，Form.Button 需要点击才能提交"
  ],
  "references": [
    "https://shineout.cn/components/form",
    "/root/shineout-next/packages/shineout/src/form/__doc__/guide.cn.md",
    "/root/shineout-next/packages/shineout/src/form/__example__"
  ]
}