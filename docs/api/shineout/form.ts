const api = JSON.parse('[{"title":"Form","properties":[{"name":"value","tag":{"cn":"设置后表单变为受控组件，需要配合 onChange 使用。适用于需要外部管理表单状态的场景，如跨组件共享表单数据、实时同步表单数据到状态管理器等","en":"When set, the form becomes a controlled component and needs to be used with onChange. Suitable for scenarios where external management of form state is required, such as sharing form data across components, real-time synchronization of form data to state managers, etc.","default":"","version":"","when":"","whenEn":""},"required":false,"type":"object"},{"name":"onChange","tag":{"cn":"在受控模式下必须设置此函数来更新外部状态。每当表单内任意字段值改变时都会触发，参数为整个表单的最新数据","en":"Must be set in controlled mode to update external state. Triggered whenever any field value in the form changes, with the parameter being the latest data of the entire form","default":"","version":"","when":"","whenEn":""},"required":false,"type":"((value: T) => void) "},{"name":"className","tag":{"cn":"自定义类名","en":"Custom class name","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string "},{"name":"style","tag":{"cn":"自定义样式","en":"Custom style","default":"","version":"","when":"","whenEn":""},"required":false,"type":"CSSProperties "},{"name":"children","tag":{"cn":"Form 内容","en":"Form Content","default":"","version":"","when":"","whenEn":""},"required":false,"type":"ReactNode"},{"name":"labelWidth","tag":{"cn":"标签宽度，labelAlign 为 \\\"top\\\" 时无效。统一设置表单项标签的宽度。可以是具体像素值（如 \\\"140px\\\"）或百分比（如 \\\"30%\\\"）。当标签顶部对齐时此配置无效。用于保持表单整齐的视觉效果，确保所有表单项的输入区域左对齐","en":"The width of label. It is invalid when labelAlign is \\\"top\\\". Uniformly sets the width of form item labels. Can be a specific pixel value (such as \\\"140px\\\") or percentage (such as \\\"30%\\\"). This configuration is invalid when labels are top-aligned. Used to maintain aligned visual effects of forms, ensuring all form item input areas are left-aligned","default":"140px","version":"","when":"","whenEn":""},"required":false,"type":"string | number "},{"name":"labelAlign","tag":{"cn":"默认为空，跟随主题样式。标签的对齐方式。\\\"left\\\" 左对齐，\\\"right\\\" 右对齐，\\\"top\\\" 顶部对齐。不同的对齐方式适用于不同的表单布局需求：\\\"right\\\" 适合传统表单布局，\\\"top\\\" 适合移动端或紧凑布局，\\\"left\\\" 适合特殊设计需求","en":"The default is empty, follow the theme style. Label alignment. \\\"left\\\" for left alignment, \\\"right\\\" for right alignment, \\\"top\\\" for top alignment. Different alignment methods are suitable for different form layout needs: \\\"right\\\" is suitable for traditional form layouts, \\\"top\\\" is suitable for mobile or compact layouts, \\\"left\\\" is suitable for special design requirements","default":"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"left\\\" | \\\"right\\\" | \\\"top\\\" "},{"name":"labelVerticalAlign","tag":{"cn":"默认顶部对齐。标签的垂直对齐方式。当标签和输入框在同一行时（labelAlign 为 \\\"left\\\" 或 \\\"right\\\"），控制标签相对于输入框的垂直位置。\\\"top\\\" 与输入框顶部对齐，\\\"middle\\\" 居中对齐，\\\"bottom\\\" 与输入框底部对齐","en":"The default value is top. Vertical alignment of labels. When labels and input boxes are on the same line (labelAlign is \\\"left\\\" or \\\"right\\\"), controls the vertical position of labels relative to input boxes. \\\"top\\\" aligns with the top of the input box, \\\"middle\\\" aligns center, \\\"bottom\\\" aligns with the bottom of the input box","default":"\\\"top\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"top\\\" | \\\"bottom\\\" | \\\"middle\\\" "},{"name":"keepErrorHeight","tag":{"cn":"单行错误提示不撑开页面高度。保持错误提示高度固定，避免错误信息出现/消失时页面抖动。开启后会预留错误信息的显示空间，确保表单高度稳定。适用于对布局稳定性要求较高的场景，如表单项较多的长表单。注意：当 keepErrorBelow 为 true 时，此配置会失效","en":"Single-line error prompt will not stretch the page height. Keeps error prompt height fixed to avoid page jittering when error messages appear/disappear. When enabled, it reserves display space for error messages to ensure stable form height. Suitable for scenarios with high requirements for layout stability, such as long forms with many form items. Note: This configuration is invalid when keepErrorBelow is true","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"keepErrorBelow","tag":{"cn":"是否保持错误信息在提示信息下方。控制错误信息的显示位置。开启后错误信息始终显示在表单项的 tip 属性下方，保持布局的一致性。关闭时错误信息可能会覆盖 tip 信息。适用于同时需要显示提示信息和错误信息的场景。注意：开启后会使 keepErrorHeight 失效","en":"Whether to keep the error message below the form item, the default is false. Controls the display position of error messages. When enabled, error messages are always displayed below the tip property of the form item, maintaining layout consistency. When disabled, error messages may override tip information. Suitable for scenarios where both tip and error messages need to be displayed. Note: When enabled, keepErrorHeight becomes invalid","default":"false","version":"3.7.0","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"inline","tag":{"cn":"是否水平布局。将表单项横向排列，适用于简单的单行表单或筛选表单。开启后表单项会在同一行显示，自动换行。通常用于搜索条件、筛选器等需要节省垂直空间的场景","en":"When inline is true, the form is horizontal layout. Arranges form items horizontally, suitable for simple single-line forms or filter forms. When enabled, form items will be displayed on the same line with automatic line wrapping. Usually used for search conditions, filters and other scenarios that need to save vertical space","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"colon","tag":{"cn":"统一控制所有表单项标签后是否显示冒号。可以是布尔值（true 显示默认冒号 \\\":\\\"）或自定义的 ReactNode（如 \\\"：\\\"、\\\"->\\\"等）。Form.Item 上的 colon 属性优先级更高，可以覆盖此全局设置","en":"Uniformly controls whether to display a colon after all form item labels. Can be a boolean value (true displays default colon \\\":\\\") or custom ReactNode (such as \\\"：\\\", \\\"->\\\", etc.). The colon property on Form.Item has higher priority and can override this global setting","default":"false","version":"3.6.0","when":"","whenEn":""},"required":false,"type":"ReactNode"},{"name":"name","tag":{"cn":"表单的唯一标识名称。设置后会作为所有表单字段 id 的前缀，确保多个表单共存时 id 不冲突。同时启用 formRef.scrollToField 方法，可以通过字段名称快速定位到指定字段","en":"Unique identifier name of the form. After setting, it will be used as the prefix for all form field ids to ensure that ids do not conflict when multiple forms coexist. Also enables the formRef.scrollToField method to quickly locate specified fields by field name","default":"","version":"3.5.3","when":"","whenEn":""},"required":false,"type":"string "},{"name":"defaultValue","tag":{"cn":"非受控模式下的表单初始值。仅在组件首次渲染时生效，后续修改不会影响表单内部数据。适用于表单数据由组件内部管理的场景，如新建表单、独立表单等","en":"Initial value of the form in uncontrolled mode. Only effective when the component is first rendered, subsequent modifications will not affect the internal data of the form. Suitable for scenarios where form data is managed internally by the component, such as creating new forms, standalone forms, etc.","default":"","version":"","when":"","whenEn":""},"required":false,"type":"T "},{"name":"reserveAble","tag":{"cn":"设置为 true 时，表单内所有组件的 reserveAble 都为 true : 卸载后不自动删除数据。控制表单项卸载时是否保留数据。适用于标签页切换、条件渲染等场景，避免用户填写的数据丢失。开启后即使表单项被隐藏或卸载，其数据仍会保留在表单中。可在 Form.Field 组件或支持的表单组件（如 Input、Select、DatePicker 等）上单独设置覆盖此全局配置","en":"When set to true, the form items in Form will not automatically delete data after unmounting. Controls whether to retain data when form items are unmounted. Suitable for scenarios such as tab switching and conditional rendering to avoid losing user-filled data. When enabled, even if form items are hidden or unmounted, their data will still be retained in the form. Can be overridden individually on Form.Field components or supported form components (such as Input, Select, DatePicker, etc.)","default":"false","version":"3.5.0","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"rules","tag":{"cn":"表单级别的校验规则配置。支持嵌套对象的规则定义，可以为表单的任意字段设置校验规则。规则对象的 key 对应表单字段路径（如 \\\"name\\\"、\\\"user.email\\\"、\\\"list[0].id\\\"），value 为该字段的校验规则数组（FormItemRule）。这些规则会与 Form.Field 组件上设置的 rules 属性合并，Form 级别的规则会先执行。规则类型请参考 Rule 组件文档","en":"Form-level validation rule configuration. Supports nested object rule definitions, and can set validation rules for any field in the form. The key of the rule object corresponds to the form field path (such as \\\"name\\\", \\\"user.email\\\", \\\"list[0].id\\\"), and the value is the validation rule array (FormItemRule) for that field. These rules will be merged with the rules property set on the Form.Field component, with Form-level rules executing first. For rule types, please refer to the Rule component documentation","default":"","version":"","when":"","whenEn":""},"required":false,"type":"RuleItem[]"},{"name":"onError","tag":{"cn":"校验规则触发时的错误回调函数。当任意字段校验失败时调用，参数为错误对象。可用于统一处理校验错误，如记录日志、显示全局通知、上报错误等","en":"Error callback function when validation rules are triggered. Called when any field validation fails, with the parameter being the error object. Can be used to uniformly handle validation errors, such as logging, displaying global notifications, reporting errors, etc.","default":"","version":"","when":"","whenEn":""},"required":false,"type":"((error: Error) => void) "},{"name":"disabled","tag":{"cn":"是否禁用，为 true 时，表单内所有元素 disabled 都为 true。全局控制表单的禁用状态。适用于查看详情、提交中等需要临时禁用整个表单的场景。表单内所有受控组件（如 Input、Select、DatePicker 等）都会继承此属性","en":"When disabled is true, all the elements in the form are disabled. Global control of form disabled state. Suitable for scenarios where the entire form needs to be temporarily disabled, such as viewing details or during submission. All controlled components in the form (such as Input, Select, DatePicker, etc.) will inherit this property","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"onReset","tag":{"cn":"表单重置时的回调函数。在表单被重置为初始值（defaultValue 或空值）后触发。可用于执行额外的重置逻辑，如清除关联状态、重置相关组件等。配合 Form.Reset 按钮或 formRef.reset() 方法使用","en":"Callback function when the form is reset. Triggered after the form is reset to initial value (defaultValue or empty value). Can be used to execute additional reset logic, such as clearing related states, resetting related components, etc. Used with Form.Reset button or formRef.reset() method","default":"","version":"","when":"","whenEn":""},"required":false,"type":"(() => void) "},{"name":"onSubmit","tag":{"cn":"表单提交时的回调函数。只有当所有字段校验通过后才会调用，参数为完整的表单数据。通常用于处理表单数据的提交逻辑，如发送请求到服务器。可配合 Form.Submit 按钮或 formRef.submit() 方法触发","en":"Callback function when the form is submitted. Only called when all fields pass validation, with the parameter being the complete form data. Usually used to handle form data submission logic, such as sending requests to the server. Can be triggered with Form.Submit button or formRef.submit() method","default":"","version":"","when":"","whenEn":""},"required":false,"type":"((value: T) => void) "},{"name":"size","tag":{"cn":"表单元素的尺寸。统一设置表单内所有组件的尺寸。支持 \\\"small\\\"、\\\"default\\\"、\\\"large\\\" 三种规格，影响输入框高度、字体大小等。表单内的受控组件会继承此属性，也可以在具体组件上单独覆盖","en":"Form element size. Uniformly sets the size of all components in the form. Supports three specifications: \\\"small\\\", \\\"default\\\", \\\"large\\\", affecting input box height, font size, etc. Controlled components in the form will inherit this property, but can also be overridden individually on specific components","default":"\\\"default\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"default\\\" | \\\"small\\\" | \\\"large\\\" "},{"name":"initValidate","tag":{"cn":"当表单 value 发生变化时，是否自动触发校验。开启后可以在数据变化时实时显示校验结果，适用于需要即时反馈的场景。注意：仅在受控模式下有效","en":"When the form value changes, whether to automatically trigger validation. When enabled, validation results can be displayed in real time when data changes, suitable for scenarios that require immediate feedback. Note: Only effective in controlled mode","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"scrollToError","tag":{"cn":"校验失败时是否滚动到第一个校验失败组件，该值为数字时，表示相对于顶部的偏移量","en":"When the verification fails, whether to scroll to the first verification failure component, when the value is a number, it means the offset relative to the top","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"number | boolean "},{"name":"removeUndefined","tag":{"cn":"提交表单时是否自动移除值为 undefined 的字段。开启后可以避免提交无意义的空值，保持数据整洁。特别适用于与后端 API 对接时，避免传递不必要的 undefined 值","en":"Whether to automatically remove fields with undefined values when submitting the form. When enabled, it can avoid submitting meaningless empty values and keep data clean. Especially suitable for interfacing with backend APIs to avoid passing unnecessary undefined values","default":"true","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"throttle","tag":{"cn":"防止用户频繁点击提交按钮的节流时间。在此时间内重复点击提交将被忽略，有效避免重复提交问题。适用于网络请求较慢或处理时间较长的场景","en":"Throttle time to prevent users from clicking the submit button frequently. Repeated clicks on submit within this time will be ignored, effectively avoiding duplicate submission issues. Suitable for scenarios with slow network requests or long processing times","default":"1000","version":"","when":"","whenEn":""},"required":false,"type":"number "},{"name":"scrollParent","tag":{"cn":"指定滚动容器元素。当表单不在 document.body 直接滚动时（如在弹窗、抽屉中），需要指定实际的滚动容器以确保正确滚动到错误位置。返回 null 时使用默认滚动行为","en":"Specify the scroll container element. When the form is not scrolling directly on document.body (such as in a modal or drawer), you need to specify the actual scroll container to ensure correct scrolling to the error position. Returns null to use default scrolling behavior","default":"","version":"","when":"","whenEn":""},"required":false,"type":"(() => HTMLElement | null) "},{"name":"formRef","tag":{"cn":"获取表单实例的引用。支持函数回调和 ref 对象两种方式。通过 formRef 可以调用表单的各种方法，如手动触发校验（validate、validateFields）、提交（submit）、重置（reset）、获取/设置值（getValue、set）等。FormRef<V> 中的泛型 V 表示表单数据的类型","en":"Get a reference to the form instance. Supports both function callback and ref object methods. Through formRef, you can call various form methods, such as manually triggering validation (validate, validateFields), submission (submit), reset (reset), getting/setting values (getValue, set), etc. The generic V in FormRef<V> represents the type of form data","default":"","version":"","when":"","whenEn":""},"required":false,"type":"((form: FormRef<V>) => void) | { current?: FormRef<V> ; } "},{"name":"setForm","tag":{"cn":"在使用 Form.useForm() hooks 时，用于设置表单引用的回调函数。通常不需要手动设置，Form 组件会自动处理。但在某些特殊场景（如跨组件通信）可能需要使用","en":"Callback function for setting form reference when using Form.useForm() hooks. Usually doesn\\\"t need to be set manually, the Form component will handle it automatically. But may be needed in some special scenarios (such as cross-component communication)","default":"","version":"","when":"","whenEn":""},"required":false,"type":"((form: FormRef<V>) => void) "}],"cn":"","en":"","sort":"1","tag":{"when":"","whenEn":""}},{"title":"Form.Item","properties":[{"name":"className","tag":{"cn":"自定义类名","en":"Custom class name","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string "},{"name":"style","tag":{"cn":"自定义样式","en":"Custom style","default":"","version":"","when":"","whenEn":""},"required":false,"type":"CSSProperties "},{"name":"label","tag":{"cn":"未定义时，标签不会 render，也不会占位。如果无内容需要占位，使用空字符串 \\\"\\\"。","en":"When it is undefined, the tag does not be rendered or occupy space. If there is no content, but it needs to be occupied, you can use an empty string \\\"\\\".","default":"","version":"","when":"","whenEn":""},"required":false,"type":"ReactNode | LabelConfig"},{"name":"tip","tag":{"cn":"提示文案","en":"Prompting information","default":"","version":"","when":"","whenEn":""},"required":false,"type":"ReactNode"},{"name":"required","tag":{"cn":"必填标记，纯展示用，不会触发校验","en":"Required tags for pure display. Do not trigger validation","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"children","tag":{"cn":"表单元素","en":"form element","default":"","version":"","when":"","whenEn":""},"required":false,"type":"ReactNode"},{"name":"labelWidth","tag":{"cn":"标签宽度，labelAlign 为 \\\"top\\\" 时无效。统一设置表单项标签的宽度。可以是具体像素值（如 \\\"140px\\\"）或百分比（如 \\\"30%\\\"）。当标签顶部对齐时此配置无效。用于保持表单整齐的视觉效果，确保所有表单项的输入区域左对齐","en":"The width of label. It is invalid when labelAlign is \\\"top\\\". Uniformly sets the width of form item labels. Can be a specific pixel value (such as \\\"140px\\\") or percentage (such as \\\"30%\\\"). This configuration is invalid when labels are top-aligned. Used to maintain aligned visual effects of forms, ensuring all form item input areas are left-aligned","default":"140px","version":"","when":"","whenEn":""},"required":false,"type":"string | number "},{"name":"labelAlign","tag":{"cn":"默认为空，跟随主题样式。标签的对齐方式。\\\"left\\\" 左对齐，\\\"right\\\" 右对齐，\\\"top\\\" 顶部对齐。不同的对齐方式适用于不同的表单布局需求：\\\"right\\\" 适合传统表单布局，\\\"top\\\" 适合移动端或紧凑布局，\\\"left\\\" 适合特殊设计需求","en":"The default is empty, follow the theme style. Label alignment. \\\"left\\\" for left alignment, \\\"right\\\" for right alignment, \\\"top\\\" for top alignment. Different alignment methods are suitable for different form layout needs: \\\"right\\\" is suitable for traditional form layouts, \\\"top\\\" is suitable for mobile or compact layouts, \\\"left\\\" is suitable for special design requirements","default":"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"left\\\" | \\\"right\\\" | \\\"top\\\" "},{"name":"labelVerticalAlign","tag":{"cn":"默认顶部对齐。标签的垂直对齐方式。当标签和输入框在同一行时（labelAlign 为 \\\"left\\\" 或 \\\"right\\\"），控制标签相对于输入框的垂直位置。\\\"top\\\" 与输入框顶部对齐，\\\"middle\\\" 居中对齐，\\\"bottom\\\" 与输入框底部对齐","en":"The default value is top. Vertical alignment of labels. When labels and input boxes are on the same line (labelAlign is \\\"left\\\" or \\\"right\\\"), controls the vertical position of labels relative to input boxes. \\\"top\\\" aligns with the top of the input box, \\\"middle\\\" aligns center, \\\"bottom\\\" aligns with the bottom of the input box","default":"\\\"top\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"top\\\" | \\\"bottom\\\" | \\\"middle\\\" "},{"name":"keepErrorHeight","tag":{"cn":"单行错误提示不撑开页面高度。保持错误提示高度固定，避免错误信息出现/消失时页面抖动。开启后会预留错误信息的显示空间，确保表单高度稳定。适用于对布局稳定性要求较高的场景，如表单项较多的长表单。注意：当 keepErrorBelow 为 true 时，此配置会失效","en":"Single-line error prompt will not stretch the page height. Keeps error prompt height fixed to avoid page jittering when error messages appear/disappear. When enabled, it reserves display space for error messages to ensure stable form height. Suitable for scenarios with high requirements for layout stability, such as long forms with many form items. Note: This configuration is invalid when keepErrorBelow is true","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"keepErrorBelow","tag":{"cn":"是否保持错误信息在提示信息下方。控制错误信息的显示位置。开启后错误信息始终显示在表单项的 tip 属性下方，保持布局的一致性。关闭时错误信息可能会覆盖 tip 信息。适用于同时需要显示提示信息和错误信息的场景。注意：开启后会使 keepErrorHeight 失效","en":"Whether to keep the error message below the form item, the default is false. Controls the display position of error messages. When enabled, error messages are always displayed below the tip property of the form item, maintaining layout consistency. When disabled, error messages may override tip information. Suitable for scenarios where both tip and error messages need to be displayed. Note: When enabled, keepErrorHeight becomes invalid","default":"false","version":"3.7.0","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"inline","tag":{"cn":"是否水平布局。将表单项横向排列，适用于简单的单行表单或筛选表单。开启后表单项会在同一行显示，自动换行。通常用于搜索条件、筛选器等需要节省垂直空间的场景","en":"When inline is true, the form is horizontal layout. Arranges form items horizontally, suitable for simple single-line forms or filter forms. When enabled, form items will be displayed on the same line with automatic line wrapping. Usually used for search conditions, filters and other scenarios that need to save vertical space","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"colon","tag":{"cn":"统一控制所有表单项标签后是否显示冒号。可以是布尔值（true 显示默认冒号 \\\":\\\"）或自定义的 ReactNode（如 \\\"：\\\"、\\\"->\\\"等）。Form.Item 上的 colon 属性优先级更高，可以覆盖此全局设置","en":"Uniformly controls whether to display a colon after all form item labels. Can be a boolean value (true displays default colon \\\":\\\") or custom ReactNode (such as \\\"：\\\", \\\"->\\\", etc.). The colon property on Form.Item has higher priority and can override this global setting","default":"false","version":"3.6.0","when":"","whenEn":""},"required":false,"type":"ReactNode"}],"cn":"表单项组件，用于包装表单控件并提供标签、错误提示等功能。每个表单控件都应该被 Form.Item 包裹，以便正确显示标签和校验信息","en":"Form item component, used to wrap form controls and provide label, error tips and other functions. Each form control should be wrapped with Form.Item to properly display labels and validation information","sort":"2","tag":{"when":"需要为表单控件添加标签、错误提示、必填标记等界面元素时使用。这是最常用的表单布局组件，适合包装 Input、Select、DatePicker 等表单控件","whenEn":"Use when you need to add UI elements like labels, error messages, and required marks to form controls. This is the most commonly used form layout component, suitable for wrapping Input, Select, DatePicker and other form controls"}},{"title":"Form.Field","properties":[{"name":"name","tag":{"cn":"绑定到表单数据的字段名称。支持点表示法访问嵌套对象（如 \\\"user.name\\\"）或数组语法（如 [\\\"user\\\", \\\"name\\\"]）。用于标识和管理特定的表单字段数据","en":"The field name that binds to form data. Supports nested object access with dot notation (e.g., \\\"user.name\\\") or array syntax (e.g. [\\\"user\\\", \\\"name\\\"]). Used to identify and manage specific form field data","default":"","version":"","when":"","whenEn":""},"required":true,"type":"string | string[]"},{"name":"reserveAble","tag":{"cn":"控制组件卸载时是否保留字段数据。设置为 true 时，组件移除后在表单状态中保留数据。适用于动态表单、条件字段，或需要临时隐藏/显示字段但保留其值的场景","en":"Controls whether to preserve field data when component unmounts. Set to true to keep data in form state after component removal. Useful for dynamic forms, conditional fields, or when temporarily hiding/showing fields while preserving their values","default":"","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"defaultValue","tag":{"cn":"表单首次渲染时字段的初始值。仅在组件初始化时生效，后续更改不会更新。常用于为新记录设置初始状态或提供默认值","en":"The initial value for the field when form first renders. Only takes effect during component initialization and won\\\"t update if changed later. Commonly used to set initial state for new records or provide fallback values","default":"","version":"","when":"","whenEn":""},"required":false,"type":"T "},{"name":"rules","tag":{"cn":"用于校验字段值的规则数组。每个规则可以是函数、正则表达式或规则对象。支持内置规则（必填、邮箱等）和自定义校验逻辑。详细配置参见 [Rule](/components/rule)","en":"Array of validation rules to validate field value. Each rule can be a function, regular expression, or rule object. Supports built-in rules (required, email, etc.) and custom validation logic. See [Rule](/components/rule) for detailed configuration","default":"","version":"","when":"","whenEn":""},"required":false,"type":"RuleItem[]"},{"name":"children","tag":{"cn":"要渲染的表单控件。可以是具有 value/onChange 属性的 React 元素，或渲染函数。使用渲染函数时，会接收包含以下属性的对象：value（当前字段值）、onChange（值变更处理器）、error（校验错误）、disabled（继承自表单）、status（字段状态）。适用于自定义组件、第三方控件或复杂输入场景","en":"The form control to render. Can be either a React element with value/onChange props or a render function. When using render function, it receives an object with: value (current field value), onChange (value change handler), error (validation error), disabled (inherited from form), status (field status). Perfect for custom components, third-party controls, or complex input scenarios","default":"","version":"","when":"","whenEn":""},"required":true,"type":"((opts: object) => ReactNode) | ReactNode"},{"name":"onError","tag":{"cn":"校验完成时触发的回调函数。接收校验错误（如果有）作为参数。适用于自定义错误处理、记录校验结果，或根据校验状态触发副作用","en":"Callback function triggered when validation completes. Receives validation error (if any) as parameter. Useful for custom error handling, logging validation results, or triggering side effects based on validation state","default":"","version":"","when":"","whenEn":""},"required":false,"type":"((error?: Error ) => void) "},{"name":"bind","tag":{"cn":"当前字段值改变时需要重新校验的字段名称数组。启用字段间的联动校验功能。常用于密码确认、关联下拉选择或相互依赖的表单计算等场景","en":"Array of field names that should be re-validated when current field\\\"s value changes. Enables field linkage validation for dependent fields. Commonly used in scenarios like password confirmation, related dropdown selections, or interdependent form calculations","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string[] "}],"cn":"表单字段组件，用于创建自定义的表单控件。提供了表单数据绑定、校验等功能，适用于封装复杂的自定义表单组件","en":"Form field component for creating custom form controls. Provides form data binding, validation and other functions, suitable for encapsulating complex custom form components","sort":"3","tag":{"when":"需要创建自定义表单控件或封装复杂的表单逻辑时使用。适合将非标准表单组件（如自定义的颜色选择器、代码编辑器等）接入表单系统","whenEn":"Use when you need to create custom form controls or encapsulate complex form logic. Suitable for integrating non-standard form components (like custom color pickers, code editors, etc.) into the form system"}},{"title":"Form.FieldSet","properties":[{"name":"name","tag":{"cn":"绑定到表单数据的字段集名称。用于标识和管理一组相关的表单字段或数组数据。支持点表示法访问嵌套对象（如 \\\"users\\\"、\\\"company.employees\\\"）","en":"The field name that binds to form data for the fieldset. Used to identify and manage a group of related form fields or array data. Supports nested object access with dot notation (e.g., \\\"users\\\", \\\"company.employees\\\")","default":"","version":"","when":"","whenEn":""},"required":true,"type":"string"},{"name":"children","tag":{"cn":"在字段集内渲染的内容。支持两种模式：\\n\\n**对象模式**（React 元素）：用于管理嵌套对象字段。子字段名称会自动加上字段集名称前缀。适用于分组相关表单字段，如地址、联系信息或用户资料等部分。\\n\\n**数组模式**（渲染函数）：用于管理动态数组数据。函数接收包含以下属性的对象：\\n- `list`：该字段集的完整数组数据\\n- `value`：当前索引位置的数据项\\n- `index`：当前数据项在数组中的索引\\n- `error`：当前数据项的校验错误\\n- `onChange`：更新当前数据项\\n- `onInsert`：在当前位置之前插入新数据项\\n- `onAppend`：在当前位置之后插入新数据项\\n- `onRemove`：从数组中移除当前数据项\\n\\n适用于动态列表、可重复表单部分或可编辑表格。","en":"Content to render within the fieldset. Supports two modes:\\n\\n**Object Mode** (React element): For managing nested object fields. Child field names are automatically prefixed with fieldset name. Perfect for grouping related form fields like address, contact info, or user profile sections.\\n\\n**Array Mode** (render function): For managing dynamic array data. The function receives an object with:\\n- `list`: Complete array data for this fieldset\\n- `value`: Current item data at this index  \\n- `index`: Current item index in the array\\n- `error`: Validation errors for current item\\n- `onChange`: Update current item data\\n- `onInsert`: Insert new item before current position\\n- `onAppend`: Insert new item after current position\\n- `onRemove`: Remove current item from array\\n\\nIdeal for dynamic lists, repeatable form sections, or editable tables.","default":"","version":"","when":"","whenEn":""},"required":true,"type":"((opts: object) => ReactNode) |ReactNode"},{"name":"empty","tag":{"cn":"数组为空时显示的内容。仅在数组模式下（children 为函数时）有效。渲染函数接收 `insert` 回调来添加第一个数据项。适用于显示“添加第一个项目”按钮、空状态提示或动态列表的引导信息","en":"Content to display when the array is empty. Only effective in array mode (when children is a function). The render function receives an `insert` callback to add the first item. Perfect for showing \\\"Add first item\\\" buttons, empty state messages, or onboarding guidance for dynamic lists","default":"","version":"","when":"","whenEn":""},"required":false,"type":"((insert: (val: any) => void) => ReactNode) "},{"name":"defaultValue","tag":{"cn":"默认值","en":"default Value","default":"","version":"","when":"","whenEn":""},"required":false,"type":"T "},{"name":"reserveAble","tag":{"cn":"设置为 true 组件卸载后表单不自动删除数据","en":"If set to true, the form will not automatically delete the data after the component is uninstalled","default":"","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"rules","tag":{"cn":"校验规则 详见 Rule","en":"Validation rules, see [Rule]","default":"","version":"","when":"","whenEn":""},"required":false,"type":"RuleItem[]"}],"cn":"表单字段集组件，用于管理一组相关的表单字段。适用于处理对象或数组类型的表单数据，如动态表单列表、嵌套对象等复杂场景","en":"Form field set component for managing a group of related form fields. Suitable for handling object or array type form data, such as dynamic form lists, nested objects and other complex scenarios","sort":"4","tag":{"when":"需要处理动态表单列表、嵌套对象或数组数据时使用。典型场景包括：动态添加/删除表单项、编辑用户列表、管理多个地址信息等","whenEn":"Use when you need to handle dynamic form lists, nested objects or array data. Typical scenarios include: dynamically adding/removing form items, editing user lists, managing multiple address information, etc."}},{"title":"Form.Flow","properties":[{"name":"children","tag":{"cn":"渲染函数，接收表单数据管理器（datum）并返回 React 节点。datum 对象提供了动态获取/设置表单值的方法。适用于创建表单字段依赖关系、基于表单状态的条件渲染，或执行需要访问多个表单值的操作","en":"Render function that receives the form data manager (datum) and returns React nodes. The datum object provides methods to get/set form values dynamically. Perfect for creating form field dependencies, conditional rendering based on form state, or performing actions that need access to multiple form values","default":"","version":"","when":"","whenEn":""},"required":true,"type":"(datum: FormDatum) => ReactNode"},{"name":"names","tag":{"cn":"要监听变化的字段名称数组。为空或未定义时，表单内任意值变化都会触发重新渲染。指定后，仅这些字段的变化会触发更新。支持嵌套路径如 \\\"user.name\\\" 或 \\\"items[0].price\\\"。通过限制不必要的重新渲染来优化性能","en":"Array of field names to watch for changes. When empty or undefined, any form value change triggers re-render. When specified, only changes to these fields trigger updates. Supports nested paths like \\\"user.name\\\" or \\\"items[0].price\\\". Use this to optimize performance by limiting unnecessary re-renders","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string[] "},{"name":"strict","tag":{"cn":"设为 true 时，使用缓存机制防止重新渲染，除非监听的字段值真正发生变化。在严格模式下，只有指定的 names 字段值（而非仅引用）改变时才重新渲染子组件。适用于包含昂贵渲染操作的复杂表单的性能优化","en":"When true, uses memoization to prevent re-renders unless watched field values actually change. In strict mode, children only re-render when the specified names fields change their values (not just references). Useful for performance optimization in complex forms with expensive render operations","default":"false","version":"3.6.0","when":"","whenEn":""},"required":false,"type":"boolean "}],"cn":"表单流程组件，用于监听表单数据变化并执行相应的副作用。适用于实现表单联动、条件渲染等场景","en":"Form flow component for listening to form data changes and executing corresponding side effects. Suitable for implementing form linkage, conditional rendering and other scenarios","sort":"5","tag":{"when":"需要实现表单联动、条件渲染或监听表单数据变化时使用。例如：根据选择的国家显示不同的省份列表、根据用户类型显示不同的表单字段等","whenEn":"Use when you need to implement form linkage, conditional rendering or listen to form data changes. For example: showing different province lists based on selected country, displaying different form fields based on user type, etc."}},{"title":"FormRef","properties":[{"name":"getValue","tag":{"cn":"获取表单数据。不传参数时返回整个表单的数据对象（FormValue 类型），传入字段路径时返回指定字段的值。字段路径支持点表示法和数组索引，如 \\\"user.name\\\"（获取嵌套对象）、\\\"list[0].id\\\"（获取数组元素）。常用于获取表单数据进行其他操作","en":"Get form data. Returns the entire form data object (FormValue type) when no parameter is passed, returns the value of the specified field when a field path is passed. Field paths support dot notation and array indexes, such as \\\"user.name\\\" (get nested object), \\\"list[0].id\\\" (get array element). Commonly used to get form data for other operations","default":"","version":"","when":"","whenEn":""},"required":true,"type":"(name?: string ) => any"},{"name":"validate","tag":{"cn":"校验整个表单的所有字段。返回一个 Promise，校验成功时 resolve 整个表单的数据对象（FormValue 类型），失败时 reject 错误信息。通常在提交表单前调用以确保所有数据的有效性","en":"Validate all fields in the entire form. Returns a Promise that resolves with the entire form data object (FormValue type) on successful validation, and rejects with error information on failure. Usually called before form submission to ensure all data validity","default":"","version":"","when":"","whenEn":""},"required":true,"type":"() => Promise<any>"},{"name":"validateFields","tag":{"cn":"校验指定的表单字段。fields 参数为字段路径，可以是单个路径字符串或路径数组。字段路径支持：\\\"name\\\"（顶层字段）、\\\"user.email\\\"（嵌套对象）、\\\"list[0].name\\\"（数组元素）。返回 Promise，成功时 resolve 指定字段的数据，失败时 reject 第一个遇到的错误。适用于分步表单或部分校验场景","en":"Validate specified form fields. The fields parameter is a field path, which can be a single path string or an array of paths. Field paths support: \\\"name\\\" (top-level field), \\\"user.email\\\" (nested object), \\\"list[0].name\\\" (array element). Returns a Promise that resolves with the specified field data on success, and rejects with the first error encountered on failure. Suitable for step-by-step forms or partial validation scenarios","default":"","version":"","when":"","whenEn":""},"required":true,"type":"(fields: string | string[]) => Promise<any>"},{"name":"validateFieldsWithValue","tag":{"cn":"校验指定字段并始终返回表单数据。fields 参数为字段路径，不传时校验所有字段。成功时 resolve 指定字段的数据，失败时 reject 一个 ValidationError 对象，包含：values（表单数据）和 errorFields（数组，包含每个错误字段的 name 和 errors 信息）。适用于需要同时获取表单数据和详细错误信息的场景","en":"Validate specified fields and always return form data. The fields parameter is a field path, validates all fields when not passed. Resolves with specified field data on success, rejects with a ValidationError object on failure, containing: values (form data) and errorFields (array containing name and errors information for each error field). Suitable for scenarios that need to get both form data and detailed error information","default":"","version":"","when":"","whenEn":""},"required":true,"type":"(fields?: string | keyof FormValue | (string | keyof FormValue)[] ) => Promise<any>"},{"name":"validateFieldsWithError","tag":{"cn":"校验指定字段并返回第一个遇到的错误。fields 参数为字段路径。与 validateFields 功能相同，但名称更明确地表示会返回错误信息。失败时 reject 一个 FormError 对象（仅包含第一个错误）。适用于只关心第一个错误的场景","en":"Validate specified fields and return the first error encountered. The fields parameter is a field path. Same functionality as validateFields, but the name more clearly indicates that it will return error information. Rejects with a FormError object (containing only the first error) on failure. Suitable for scenarios that only care about the first error","default":"","version":"","when":"","whenEn":""},"required":true,"type":"(fields: string | string[]) => Promise<any>"},{"name":"clearValidate","tag":{"cn":"清除指定字段的校验错误信息。names 参数为字段路径数组，不传时清除所有字段的错误。字段路径支持 \\\"name\\\"、\\\"user.email\\\"、\\\"list[0].id\\\" 等格式。常用于重置表单状态、清除特定字段错误等场景","en":"Clear validation error information for specified fields. The names parameter is an array of field paths, clears errors for all fields when not passed. Field paths support formats like \\\"name\\\", \\\"user.email\\\", \\\"list[0].id\\\". Commonly used for resetting form state, clearing specific field errors, etc.","default":"","version":"","when":"","whenEn":""},"required":true,"type":"(names?: string[] ) => void"},{"name":"submit","tag":{"cn":"手动触发表单提交。withValidate 参数控制是否在提交前进行校验，默认为 true。校验通过后会调用 Form 的 onSubmit 回调，传入整个表单的数据对象（FormValue 类型）。通常用于自定义提交按钮或程序化提交","en":"Manually trigger form submission. The withValidate parameter controls whether to validate before submission, default is true. After validation passes, it will call the Form\\\"s onSubmit callback with the entire form data object (FormValue type). Usually used for custom submit buttons or programmatic submission","default":"","version":"","when":"","whenEn":""},"required":true,"type":"(withValidate?: boolean ) => void"},{"name":"reset","tag":{"cn":"重置表单到初始状态。将表单数据恢复为 defaultValue（非受控）或空对象（受控），并清除所有校验错误。会触发 Form 的 onReset 回调","en":"Reset the form to its initial state. Restores form data to defaultValue (uncontrolled) or empty object (controlled), and clears all validation errors. Will trigger the Form\\\"s onReset callback","default":"","version":"","when":"","whenEn":""},"required":true,"type":"() => void"},{"name":"set","tag":{"cn":"批量设置表单字段值。传入一个对象，key 为字段路径，value 为要设置的值。字段路径支持：点表示法（\\\"user.name\\\"）访问嵌套对象，数组索引（\\\"list[0].id\\\"）访问数组元素。options 参数：validate 控制是否触发校验（默认 false），forceUpdate 控制是否强制更新（默认 false）。适用于动态设置表单值、联动更新等场景","en":"Batch set form field values. Pass in an object where key is the field path and value is the value to set. Field paths support: dot notation (\\\"user.name\\\") to access nested objects, array indexes (\\\"list[0].id\\\") to access array elements. Options parameters: validate controls whether to trigger validation (default false), forceUpdate controls whether to force update (default false). Suitable for dynamically setting form values, linked updates, etc.","default":"","version":"","when":"","whenEn":""},"required":true,"type":"(value: { [key: string]: any; }, options?: { validate?: boolean ; forceUpdate?: boolean ; } ) => void"},{"name":"scrollToField","tag":{"cn":"滚动页面到指定表单字段的位置。name 参数为字段路径，支持 \\\"name\\\"、\\\"user.email\\\"、\\\"list[0].id\\\" 等格式。需要 Form 设置 name 属性才能正常工作。scrollIntoViewOptions 参数符合标准 ScrollIntoViewOptions 接口，可以控制滚动行为、位置等。常用于错误定位、分步表单导航等","en":"Scroll the page to the position of the specified form field. The name parameter is a field path, supporting formats like \\\"name\\\", \\\"user.email\\\", \\\"list[0].id\\\". Requires the Form to set the name property to work properly. The scrollIntoViewOptions parameter conforms to the standard ScrollIntoViewOptions interface, which can control scrolling behavior, position, etc. Commonly used for error positioning, step-by-step form navigation, etc.","default":"","version":"","when":"","whenEn":""},"required":true,"type":"(name: string, scrollIntoViewOptions?: ScrollIntoViewOptions ) => void"}],"cn":"表单引用对象，提供了一系列操作表单的方法。通过 ref 或 useForm 获取实例后，可以主动控制表单的校验、提交、重置等行为","en":"Form reference object that provides a series of methods to operate the form. After obtaining the instance through ref or useForm, you can actively control the form\\\"s validation, submission, reset and other behaviors","sort":"6","tag":{"when":"","whenEn":""}},{"title":"FormDatum","properties":[{"name":"set","tag":{"cn":"设置表单字段值。可以接收对象以批量设置多个字段，或接收字段名和值以设置单个字段。字段名支持嵌套路径如 \\\"user.name\\\" 或 \\\"items[0].price\\\"。更改会触发表单校验和相关 Flow 组件的重新渲染","en":"Set form field values. Accepts either an object to set multiple fields at once, or a field name with value to set a single field. Field names support nested paths like \\\"user.name\\\" or \\\"items[0].price\\\". Changes trigger form validation and re-render of affected Flow components","default":"","version":"","when":"","whenEn":""},"required":true,"type":"(vals: string | { [name: string]: any; }, value?: any) => void"},{"name":"get","tag":{"cn":"根据名称获取表单字段值。未提供名称时返回整个表单数据对象。支持嵌套路径如 \\\"user.name\\\" 或 \\\"items[0].price\\\" 来访问深层嵌套的值","en":"Get form field value by name. When no name is provided, returns the entire form data object. Supports nested paths like \\\"user.name\\\" or \\\"items[0].price\\\" to access deeply nested values","default":"","version":"","when":"","whenEn":""},"required":true,"type":"(name?: string ) => any"}],"cn":"表单数据管理对象，用于管理表单内部的数据状态和校验逻辑","en":"Form data management object, used to manage the internal data state and validation logic of the form","sort":"7","tag":{"when":"","whenEn":""}},{"title":"Form.Button","properties":[{"name":"className","tag":{"cn":"自定义类名","en":"Custom class name","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string "},{"name":"style","tag":{"cn":"自定义样式","en":"Custom style","default":"","version":"","when":"","whenEn":""},"required":false,"type":"CSSProperties "},{"name":"children","tag":{"cn":"按钮里面的内容, 可以是文字图标等","en":"The content inside the button, can be a text icon, etc","default":"","version":"","when":"","whenEn":""},"required":false,"type":"ReactNode"},{"name":"onClick","tag":{"cn":"按钮点击回调","en":"Button click callback","default":"","version":"","when":"","whenEn":""},"required":false,"type":"MouseEventHandler<Element> "},{"name":"disabled","tag":{"cn":"禁用","en":"Specifies the button should be disabled","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"renderLoading","tag":{"cn":"自定义loading","en":"Customize loading","default":"","version":"","when":"","whenEn":""},"required":false,"type":"((buttonEl: ReactNode) => ReactElement) "},{"name":"loading","tag":{"cn":"loading 状态","en":"Loading","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"mode","tag":{"cn":"按钮风格","en":"The mode of the button","default":"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"text\\\" | \\\"outline\\\" | \\\"dashed\\\" "},{"name":"type","tag":{"cn":"按钮类型","en":"The type of the button","default":"\\\"default\\\"","version":"","when":"","whenEn":""},"required":false,"type":"| \\\"default\\\"  | \\\"primary\\\"  | \\\"secondary\\\"  | \\\"danger\\\"  | \\\"warning\\\"  | \\\"success\\\"  | \\\"link\\\" "},{"name":"size","tag":{"cn":"按钮尺寸","en":"The size of the button","default":"\\\"default\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"default\\\" | \\\"small\\\" | \\\"large\\\" "},{"name":"space","tag":{"cn":"仅有2个汉字的按钮，是否在2个汉字中间插入空格","en":"For Button with only 2 Chinese characters, whether to insert a space between the two Chinese characters","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"href","tag":{"cn":"如果设置了 href 属性，将会用 <a> 代替 <button>","en":"If the href attribute is set, <a> will be used instead of <button>","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string "},{"name":"target","tag":{"cn":"当设置了 href 属性时，target 会被设置到 <a> 元素上","en":"If present, target will be set onto <a> element.(Effective only when href is been set)","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string "},{"name":"shape","tag":{"cn":"设置按钮形状","en":"Can be set button shape","default":"\\\"default\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"circle\\\" | \\\"round\\\" | \\\"square\\\" "},{"name":"htmlType","tag":{"cn":"按钮原生type属性","en":"Type of button original","default":"\\\"button\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"button\\\" | \\\"submit\\\" | \\\"reset\\\" "}],"cn":"表单按钮组件，htmlType=\\\"button\\\"。防止用户在表单输入框中按回车键时意外提交表单。用户必须显式点击按钮才能提交表单。内部调用 formFunc.submit() 以更好地控制提交逻辑","en":"Form button component with htmlType=\\\"button\\\". Prevents accidental form submission when users press Enter in form inputs. Users must explicitly click the button to submit the form. Internally calls formFunc.submit() for better control over submission logic","sort":"8","tag":{"when":"需要防止回车键意外提交表单，或需要在提交前执行自定义逻辑（如确认对话框）时使用。适合复杂表单或需要额外验证步骤的场景","whenEn":"Use when you need to prevent accidental form submission via Enter key, or need to execute custom logic before submission (like confirmation dialogs). Suitable for complex forms or scenarios requiring additional validation steps"}},{"title":"Form.Submit","properties":[{"name":"className","tag":{"cn":"自定义类名","en":"Custom class name","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string "},{"name":"style","tag":{"cn":"自定义样式","en":"Custom style","default":"","version":"","when":"","whenEn":""},"required":false,"type":"CSSProperties "},{"name":"children","tag":{"cn":"按钮里面的内容, 可以是文字图标等","en":"The content inside the button, can be a text icon, etc","default":"","version":"","when":"","whenEn":""},"required":false,"type":"ReactNode"},{"name":"onClick","tag":{"cn":"按钮点击回调","en":"Button click callback","default":"","version":"","when":"","whenEn":""},"required":false,"type":"MouseEventHandler<Element> "},{"name":"disabled","tag":{"cn":"禁用","en":"Specifies the button should be disabled","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"renderLoading","tag":{"cn":"自定义loading","en":"Customize loading","default":"","version":"","when":"","whenEn":""},"required":false,"type":"((buttonEl: ReactNode) => ReactElement) "},{"name":"loading","tag":{"cn":"loading 状态","en":"Loading","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"mode","tag":{"cn":"按钮风格","en":"The mode of the button","default":"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"text\\\" | \\\"outline\\\" | \\\"dashed\\\" "},{"name":"type","tag":{"cn":"按钮类型","en":"The type of the button","default":"\\\"default\\\"","version":"","when":"","whenEn":""},"required":false,"type":"| \\\"default\\\"  | \\\"primary\\\"  | \\\"secondary\\\"  | \\\"danger\\\"  | \\\"warning\\\"  | \\\"success\\\"  | \\\"link\\\" "},{"name":"size","tag":{"cn":"按钮尺寸","en":"The size of the button","default":"\\\"default\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"default\\\" | \\\"small\\\" | \\\"large\\\" "},{"name":"space","tag":{"cn":"仅有2个汉字的按钮，是否在2个汉字中间插入空格","en":"For Button with only 2 Chinese characters, whether to insert a space between the two Chinese characters","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"href","tag":{"cn":"如果设置了 href 属性，将会用 <a> 代替 <button>","en":"If the href attribute is set, <a> will be used instead of <button>","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string "},{"name":"target","tag":{"cn":"当设置了 href 属性时，target 会被设置到 <a> 元素上","en":"If present, target will be set onto <a> element.(Effective only when href is been set)","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string "},{"name":"shape","tag":{"cn":"设置按钮形状","en":"Can be set button shape","default":"\\\"default\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"circle\\\" | \\\"round\\\" | \\\"square\\\" "},{"name":"htmlType","tag":{"cn":"按钮原生type属性","en":"Type of button original","default":"\\\"button\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"button\\\" | \\\"submit\\\" | \\\"reset\\\" "}],"cn":"表单提交按钮组件，htmlType=\\\"submit\\\"。使用浏览器原生提交行为。当用户在任何表单输入框中按回车键时，会自动触发此按钮。适用于希望支持回车提交的简单表单","en":"Form submit button component with htmlType=\\\"submit\\\". Uses native browser submit behavior. When users press Enter in any form input, it will trigger this button automatically. Suitable for simple forms where Enter-to-submit behavior is desired","sort":"9","tag":{"when":"需要支持回车键快速提交表单时使用。适合登录表单、搜索表单等简单场景，用户体验更流畅","whenEn":"Use when you need to support quick form submission via Enter key. Suitable for login forms, search forms and other simple scenarios for smoother user experience"}},{"title":"Form.Reset","properties":[{"name":"className","tag":{"cn":"自定义类名","en":"Custom class name","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string "},{"name":"style","tag":{"cn":"自定义样式","en":"Custom style","default":"","version":"","when":"","whenEn":""},"required":false,"type":"CSSProperties "},{"name":"children","tag":{"cn":"按钮里面的内容, 可以是文字图标等","en":"The content inside the button, can be a text icon, etc","default":"","version":"","when":"","whenEn":""},"required":false,"type":"ReactNode"},{"name":"onClick","tag":{"cn":"按钮点击回调","en":"Button click callback","default":"","version":"","when":"","whenEn":""},"required":false,"type":"MouseEventHandler<Element> "},{"name":"disabled","tag":{"cn":"禁用","en":"Specifies the button should be disabled","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"renderLoading","tag":{"cn":"自定义loading","en":"Customize loading","default":"","version":"","when":"","whenEn":""},"required":false,"type":"((buttonEl: ReactNode) => ReactElement) "},{"name":"loading","tag":{"cn":"loading 状态","en":"Loading","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"mode","tag":{"cn":"按钮风格","en":"The mode of the button","default":"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"text\\\" | \\\"outline\\\" | \\\"dashed\\\" "},{"name":"type","tag":{"cn":"按钮类型","en":"The type of the button","default":"\\\"default\\\"","version":"","when":"","whenEn":""},"required":false,"type":"| \\\"default\\\"  | \\\"primary\\\"  | \\\"secondary\\\"  | \\\"danger\\\"  | \\\"warning\\\"  | \\\"success\\\"  | \\\"link\\\" "},{"name":"size","tag":{"cn":"按钮尺寸","en":"The size of the button","default":"\\\"default\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"default\\\" | \\\"small\\\" | \\\"large\\\" "},{"name":"space","tag":{"cn":"仅有2个汉字的按钮，是否在2个汉字中间插入空格","en":"For Button with only 2 Chinese characters, whether to insert a space between the two Chinese characters","default":"false","version":"","when":"","whenEn":""},"required":false,"type":"boolean "},{"name":"href","tag":{"cn":"如果设置了 href 属性，将会用 <a> 代替 <button>","en":"If the href attribute is set, <a> will be used instead of <button>","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string "},{"name":"target","tag":{"cn":"当设置了 href 属性时，target 会被设置到 <a> 元素上","en":"If present, target will be set onto <a> element.(Effective only when href is been set)","default":"","version":"","when":"","whenEn":""},"required":false,"type":"string "},{"name":"shape","tag":{"cn":"设置按钮形状","en":"Can be set button shape","default":"\\\"default\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"circle\\\" | \\\"round\\\" | \\\"square\\\" "},{"name":"htmlType","tag":{"cn":"按钮原生type属性","en":"Type of button original","default":"\\\"button\\\"","version":"","when":"","whenEn":""},"required":false,"type":"\\\"button\\\" | \\\"submit\\\" | \\\"reset\\\" "}],"cn":"表单重置按钮组件，htmlType=\\\"reset\\\"。点击时将所有表单字段重置为初始值。适用于需要让用户快速恢复初始状态的复杂表单","en":"Form reset button component with htmlType=\\\"reset\\\". Resets all form fields to their initial values when clicked. Useful for complex forms where users may want to start over","sort":"10","tag":{"when":"需要提供重置表单功能时使用。适合复杂表单或编辑表单，让用户可以快速恢复到初始状态或默认值","whenEn":"Use when you need to provide form reset functionality. Suitable for complex forms or edit forms, allowing users to quickly restore to initial state or default values"}}]');
export default api;
